package essn.server.common.servercommon {
	import common.productcategories.*;
	import common.coremodel.*;
	import essn.server.proliantservers.common.proliantproductoption.*;
	import essn.common.feservices.*;
	import essn.rack.tenk_g2_series_rack.BottomUpRackReference;
	import essn.rack.rackonsite.*;
	import essn.common.software.*;

	import essn.storage.common.storagecommon.FibreChannelCable;
	import essn.storage.common.storagecommon.RackConversionAndMountingKit;
	import essn.server.proliantservers.xlserver.g10.bluedatasw.UniversalBD;
	import common.localizations.SystemLocalizationClass;
	import common.globalsupport.*;
	//import common.agentutility.*;
	import common.agentutility.ConfigAgentTrigger;
	import common.agentutility.triggerInternalDefaults;
	import common.agentutility.triggerInternalDefaultsOca;
	import common.agentutility.postRestore;
	import common.agentutility.finishUpdate;
	import common.agentutility.finishInstall;
	import common.agentutility.ConflictResolver;

	//		import essn.common.software.*;
	import essn.standalonelicense.NCSLicense;
	import common.accessories.*;
	import common.softwarecategories.*;
	import essn.server.newgenproliant.newgendlservers.newgendl100.dl110g10plus.DL110G10Plus;
	import essn.server.proliantservers.slserver.edgelineseries.edgeline1020.Edgeline1020;
	import essn.server.proliantservers.slserver.edgelineseries.edgeline1000chassis.Edgeline1000Chassis;
	import essn.server.proliantservers.slserver.edgelineseries.edgeline4000chassis.Edgeline4000Chassis;
	import essn.server.proliantservers.mlserver.g10.microserverg10.MicroServerG10;
	import essn.server.proliantservers.blades.g10.bl460cg10.BL460CG10;
	import essn.server.proliantservers.blades.g10.bl460cg10oem.BL460CG10OEM;
	import essn.server.proliantservers.dlserver.g10.dl360g10oem.DL360Gen10OEM;
	import essn.server.proliantservers.dlserver.g10.dl380g10oem.DL380Gen10OEM;
	import essn.server.proliantservers.mlserver.g10.ml110g10.ML110G10;
	import essn.server.proliantservers.mlserver.g10.ml350g10.ML350G10;
	import essn.server.proliantservers.slserver.m510cartridge.M510Cartridge;
	import essn.server.proliantservers.slserver.m710cartridge.M710xCartridge;
	import essn.server.proliantservers.slserver.m700pcartridge.M700pCartridge;
	import essn.server.synergy.gen10.synergyservers.synergy480gen10.Synergy480Gen10;
	import essn.server.synergy.gen10.synergyservers.synergy480gen10oem.Synergy480Gen10OEM;
	import essn.networking.switches.bsnseries.bsnbigcloudfabric.BSNBigCloudFabric;
	import essn.networking.switches.bsnseries.bsnbigmonitoringfabric.BSNBigMonitoringFabric;

	class ProductModelISS extends ServerModel { //int osCount: 1;
		string sProcessorSubType: "";
		string localizationType: "BDDE";
		int iNumRedHatHPC: 100;
		int securityHwQty: 999;
		string[] sProducts: "535528-B21, TC203A, TC209A, TC210A, TC213AAE, TC214A, C6N36ABE, C6N28ABE";
		string[] sOneviewProducts: "E5Y34A, E5Y35A, E5Y35AAE, E5Y36A, E5Y41A, E5Y41AAE, E5Y42A, E5Y43A, E5Y43AAE, E5Y44A";
		string[] sThirtyDay: "G6E84AAE", "J2K39AAE", "J2K40AAE", "J2K41AAE", "J2K42AAE", "J2K43AAE", "J2K44AAE";
		string[] sThirtyDayVCloud: "BD806AAE", "BD807AAE", "BD808AAE", "BD809AAE", "BD810AAE", "BD811AAE", "BD812AAE", "BD813AAE", "BD814AAE", "F0P36AAE", "F0P39AAE";
		string[] squickSRM: "BD534A", "BD534AAE", "BD535A", "BD535AAE", "BD536AAE", "BD748A", "BD748AAE", "BD749A", "BD749AAE", "BD750A", "BD750AAE", "BD751A", "BD751AAE", "BD762AAE", "BD763AAE";
		string[] squickvSphereEdt: "E8H71AAE", "E8H72AAE", "E8H73AAE", "E8H74AAE", "E8H75AAE", "E8H76AAE", "E8H77AAE", "E8H78AAE", "E8H79AAE", "G6E81AAE", "G6E82AAE";
		string[] squickvSphereKits: "D9Y44A", "D9Y44AAE", "D9Y45A", "D9Y45AAE", "D9Y46A", "D9Y46AAE", "D9Y47A", "D9Y47AAE", "D9Y48A", "D9Y48AAE", "D9Y49A", "D9Y49AAE", "D9Y50A", "D9Y50AAE", "D9Y51A", "D9Y51AAE", "D9Y52A", "D9Y52AAE", "F6M48A",
		"Q8U43AAE", "Q8U44AAE", "Q8U45AAE", "F6M48AAE", "F6M49A", "F6M49AAE", "F6M50A", "F6M50AAE"; //MWT 10/7/2014
		string[] squickVmSanKits: "G4Y17AAE", "G4Y18AAE", "G4Y19AAE", "P9H44AAE", "P9H45AAE", "P9H46AAE", "P9U52BAE", "P9U53BAE", "P9U54BAE", "Q0E37BAE", "Q0E38BAE", "Q0E39BAE"; //RV 23-Nov-2017 SMR Crisspink	
		//SE FOR PERT 12198 - Adding Software supportability for vmwarelicense 15-10-2018
		string[] vmwarelicense: "BC396A", "BC396AAE", "BC397A", "BC397AAE", "BC398A", "BC398AAE", "BC444A", "BC444AAE", "BC445A", "BC445AAE", "BC446A", "BC446AAE", "BC447A", "BC447AAE", "BC448A", "BC448AAE", "BC449A", "BC449AAE", "BC450A",
		"BC450AAE", "BC451A", "BC451AAE", "BC452A", "BC452AAE", "BC453A", "BC453AAE", "BC454A", "BC454AAE", "BC455A", "BC455AAE", "BC456A", "BC456AAE", "BC457A", "BC457AAE", "BD511A", "BD511AAE", "BD515A", "BD515AAE", "BD516A", "BD516AAE",
		"BD517A", "BD517AAE", "BD708A", "BD708AAE", "BD709A", "BD709AAE", "BD716A", "BD716AAE", "BD717A", "BD717AAE", "BD718A", "BD718AAE", "BD719A", "BD719AAE", "BD720A", "BD720AAE", "BD721A", "BD721AAE", "D9Y44A", "D9Y44AAE", "D9Y45A",
		"D9Y45AAE", "D9Y46A", "D9Y46AAE", "D9Y47A", "D9Y47AAE", "D9Y47B", "D9Y47BAE", "D9Y48A", "D9Y48AAE", "D9Y48B", "D9Y48BAE", "D9Y49A", "D9Y49AAE", "D9Y49B", "D9Y49BAE", "D9Y50A", "D9Y50AAE", "D9Y50B", "D9Y50BAE", "D9Y51A", "D9Y51AAE",
		"D9Y51B", "D9Y51BAE", "D9Y52A", "D9Y52AAE", "D9Y52B", "D9Y52BAE", "Q0K30AAE", "Q8U43AAE", "Q8U44AAE", "Q8U45AAE", "TD412A", "TD414A", "TD414AAE", "TD415A", "TD415B", "TD415BAE", "TD420A", "TD422B", "TD422BAE", "TD426A", "TD429A",
		"TD431A", "TD449A", "TD449AAE", "TD450B", "TD450BAE", "TD452A", "TD455A", "TD455AAE", "TD455B", "TD455BAE", "TD458A", "TD458AAE";
		string[] squickvSphereKits1: "F6M48A", "F6M48AAE", "F6M49A", "F6M49AAE", "F6M50A", "F6M50AAE";
		def isCS700 (): boolean = callout("IsSolution", "CS700", thisInst);
		def isCS750 (): boolean = callout("IsSolution", "CS750", thisInst);
		def isCS7xx (): boolean = isCS700 () || isCS750 ();

		//CRH AML 104374
		//Rule 22 Software Menu Red Hat Enterprise Virtualization
		string sSkusRHEV: "J1U48A J1U48AAE J1U49A J1U49AAE J1U50A J1U50AAE J1U51A J1U51AAE";
		string sSkusRHEVELVcd: "J1U52A J1U52AAE J1U53A J1U53AAE J1U54A J1U54AAE J1U55A J1U55AAE";
		string[] squickvSphereEdt1: "BD512A", "BD512AAE", "BD514A", "BD514AAE", "BD527A", "BD527AAE", "BD532AAE", "BD710A", "BD710AAE", "BD711A", "BD711AAE", "BD714A", "BD714AAE", "BD715A", "BD715AAE", "BD738A", "BD738AAE", "BD739A",
		"BD739AAE", "BD740A", "BD740AAE", "BD741A", "BD741AAE", "BD744AAE", "BD745A", "BD745AAE", "D9Y64AAE", "D9Y65AAE", "D9Y66AAE", "D9Y70AAE", "D9Y71AAE", "D9Y73AAE", "D9Y74AAE", "D9Y75AAE", "E8H71AAE", "E8H72AAE", "E8H73AAE", "E8H77AAE",
		"E8H78AAE", "E8H79AAE", "G2D06AAE", "G2D07AAE", "P9A81AAE", "P9A82AAE", "P9A83AAE", "P9A84AAE", "P9A85AAE", "P9A86AAE", "P9U07AAE", "P9U08AAE", "P9U09AAE", "P9U10AAE", "P9U11AAE", "P9U12AAE", "P9U13AAE", "P9U14AAE", "P9U15AAE",
		"P9U16AAE", "P9U17AAE", "P9U18AAE", "P9U81AAE", "P9U82AAE", "P9U83AAE", "Q8U57AAE", "Q8U58AAE", "Q8U59AAE", "R0G41AAE", "R0G42AAE", "R0G43AAE", "R0G44AAE", "R0G45AAE", "R0G46AAE", "R0S95A", "R0S95AAE", "R0S96A", "R0S96AAE", "R0S97A",
		"R0S97AAE";
		string[] vcenterproducts: "BD518A", "BD518AAE", "BD520A", "BD520AAE", "BD722A", "BD722AAE", "BD723A", "BD723AAE", "BD726A", "BD726AAE", "BD727A", "BD727AAE", "K8X46A", "K8X46AAE", "K8X47A", "K8X47AAE", "K8X48A", "K8X48AAE", "K8X49A",
		"K8X49AAE", "K8X50A", "K8X50AAE", "K8X51A", "K8X51AAE", "K8X52A", "K8X52AAE", "K8X53A", "K8X53AAE", "K8X54A", "K8X54AAE", "L8M86B", "L8M86BAE", "L8M87B", "L8M87BAE", "L8M88B", "L8M88BAE", "P9U28B", "P9U28BAE", "P9U29B", "P9U29BAE",
		"P9U30B", "P9U30BAE", "P9U31B", "P9U31BAE", "P9U32B", "P9U32BAE", "P9U33B", "P9U33BAE", "P9U34A", "P9U34AAE", "P9U35A", "P9U35AAE", "P9U36A", "P9U36AAE", "P9U37A", "P9U37AAE", "P9U38A", "P9U38AAE", "P9U39A", "P9U39AAE", "P9U40AAE",
		"P9U41AAE", "P9U42AAE", "Q2W04BAE", "Q2W05BAE", "Q2W06BAE", "Q2W07B", "Q2W07BAE", "Q2W08B", "Q2W08BAE", "Q2W09B", "Q2W09BAE";
		def max_mezzanineCardsBandingFunction: int = 2;
		def max_processorSlotsBandingFunction: int = 2;
		def max_processorprimaryBandingFunction: int = 1;
		def software3poFunc_16 (): string[] = {
		//			if count(thisConfig.getInstancesOfModel("ML110Gen9")) > 0 or count(thisConfig.getInstancesOfModel("DL20G9")) > 0 or 
		//			count(thisConfig.getInstancesOfModel("ML30Gen9")) > 0 then
		//			if thisInst.selected(ProliantHardDrive).filter(x => x.tDriveSSD >= "nonSSD").count > 0 then "874549-B21" else "";
			if thisInst.selected(ProliantHardDrive).count > 0 then "874549-B21" else "";
		}
		def softwareILO (): string[] = {
			if thisInst.selected(ProliantServers).filter(x => x.id >= "CTO").count > 0 then expanderString ("P8B31A", 1);
		}
		def ThreePOSoftwareDefault (): string[] = {
			if ! thisConfig.getInstancesOfModel("Leap2Cartridge").isEmpty || ! thisConfig.getInstancesOfModel("M510Cartridge").isEmpty || ! thisConfig.getInstancesOfModel("M710xCartridge").isEmpty || !
			thisConfig.getInstancesOfModel("M700pCartridge").isEmpty then "Q0J87AAE" else "";
		}
		subsystem alaCarteFESubsystem { //LAW 11/19/14 - CR#165525 - FE Warning for custom placement
			constraint checkFEforCustomServer {
				message: "For Custom Component  Placement, you must order Factory Express service HA838A1, ZU706A or package 3, 4 or 5";
				body: thisConfig.getProperty("targetEnvironment") != "oca" or thisInst.hasCustomPlacement (thisInst,
				"processorSubsystem.processorSlots,memorySubsystem.memorySlots,deviceSubsystem.hardDriveBays,deviceSubsystem.driveCageSlots,pciSubsystem.pciSlots,pciSubsystem.riserSlots") = false or (selected("HA838A1").count +
				selected("ZU706A").count) > 0; //  + selected("HA453A1").count + selected("HA454A1").count + selected("HA455A1").count) > 0; 

			}
		}
		subsystem CloudSubsystem {
			constraint noFlexSWforEZCCloud {
				message: "Cloud System Enterprise and Cloud System Foundation are not supported for EZC.";
				body: dependency (targetEnv ("ezc", "ipcs"), CloudSystemEnterprise = 0 && CloudSystemFoundation = 0);
			}

			//PM - Adding Information for the Cloud System 05/05/2015
			constraint navigateInformation {
				message: "Please verify compatibility by referencing The CloudSystem Installation & Configuration guide, supported servers section located at www.hp.com/go/cloudsystem/docs."; //AB 06-08-2015 for PPM ID:66093 				
				body:
				if((thisInst.selected(CloudSystemEnterprise).count > 0) || (thisInst.selected(CloudSystemFoundation).count > 0)) then false else true;
			}
		}
		subsystem softwareBlockSubsystem {
			constraint noFlexSWforEZCBlock {
				message: "Flex Software options are not supported for EZC.";
				body: dependency (targetEnv ("ezc", "ipcs"), casSoftware [ BD476A || BD476AAE || D9Y33A || D9Y34A || G2E81A || QL803B || QL803BAE ] = 0);
			}
		}
		subsystem systemLocalizationSubsystem {
			choice systemLocalizationChoice {
				choiceType: single_select;
				optional: true;
				targetClass: SystemLocalizationClass;
			}
			ifEffective KES_VAL {
				constraint ezcipcsRequireSysLoc {
					message: "ACE requires System Localization";
					body: dependency (targetEnv ("ezc", "ipcs") && ! Edgeline1020 && ! BLSeries && ! BLG10Common && ! CclassBladeEnclosure && ! ML110G10 && ! BSNBigMonitoringFabric && ! BSNBigCloudFabric && ! SynergyServerCommon && !
					SN3000B, SystemLocalizationClass);
				}
			}
			otherwise {
			//jwl 130402 ACE requires System Localization
			//dh 140205 !BLSeries and !CclassBladeEnclosure don't require system localization
				constraint ezcipcsRequireSysLoc {
					message: "ACE requires System Localization";
					//body: dependency (targetEnv ("ezc", "ipcs") && ! BLSeries && ! CclassBladeEnclosure, SystemLocalizationClass && !Apollo4200Gen9); //JC removed && !Apollo4200Gen9 to fix ALM//Disabled localization for Apollo4200G9 ELI_PPM_72824
					//GSB 01/07/2017 Adding the BLG10 servers
					//body: dependency (targetEnv ("ezc", "ipcs") && ! BLSeries && ! BLG10Common && ! XL250aG9 && ! XL230aG9 && ! CclassBladeEnclosure, SystemLocalizationClass && !Apollo4200Gen9); //JC removed && !Apollo4200Gen9 to fix ALM//Disabled localization for Apollo4200G9 ELI_PPM_72824
					body: dependency (targetEnv ("ezc", "ipcs") && ! Edgeline1020 && ! BLSeries && ! BLG10Common && ! XL250aG9 && ! XL230aG9 && ! Apollo4200Gen9 && ! CclassBladeEnclosure && ! ML110G10 && ! BSNBigMonitoringFabric && ! BSNBigCloudFabric &&
					! D2500SB && ! SynergyServerCommon && ! SN3000B, SystemLocalizationClass); //JC removed && !Apollo4200Gen9 to fix ALM//Disabled localization for Apollo4200G9 ELI_PPM_72824 //VM added SN3000B to resolve the localization issue as per the Erik email 07-Feb-2018

				}
			}
			//TOMS will police this for us.  There is the odd req. of sometimes offering B19 in AP
			//			constraint systemLocRegionMustMatchConfigRegionForNullCountry {
			//				message: "System Localization region must match configuration region.";
			//				body:
			//					restriction(SystemLocalizationClass.region = region);   
			//			}		
			constraint systemLocRestrictsBaseProdLoc {
				message: "Model Localization must match System Localization.";
				body: restriction (ProductModelISS.loc = SystemLocalizationClass.loc);
			}
		}
		string[] castToList;
		boolean addDefaultSysLoc: false;
		def defaultSystemLocFunction (): string[] = {
			val locProduct: string = if(addDefaultSysLoc) then getDefaultLocalization (thisInst, "systemLocalizationSubsystem.systemLocalizationChoice") else "";
			castToList + locProduct;
		}
		def defaultLocalizationsFunction (): string[] = {
			val sysLoc: string[] = defaultSystemLocFunction ();
			sysLoc;
		}
		def getDefaultLocalization (instance: RootProductClass, choiceId: string): string = callout("GetDefaultLocalization", instance, choiceId);
		string countryUsedForLocDefaults: "";
		subsystem modelLocDefaults {
			part triggerLocalizationRestoreDefaults ConfigAgentTrigger {
				string agentClass: "InternalLocOverrideDefaultsAgent";
				part[] agentTiming: postRestore;
				string modelDefaultsFunc: "defaultLocalizationsFunction";
			}
			part triggerLocalizationUpdateDefaults ConfigAgentTrigger {
				string agentClass: "InternalLocOverrideDefaultsAgent";
				part[] agentTiming: finishUpdate;
				string modelDefaultsFunc: "defaultLocalizationsFunction";
				int priority: 10;
			}
		}
		subsystem conflictResolution {
			part conflictRes_Localization ConflictResolver {
				string[] targetConflictingClasses: "LocalizationClass", "ProductModelISS";
				string agentName: "com.hp.ngc.plugins.agents.update.delegate.LocalizedChoiceAgent";
			}
			part conflictRes_LocalizationMonitor ConflictResolver {
				string[] targetConflictingClasses: "LocalizationClass", "DisplayPrimarySecondaryLCD";
				string agentName: "com.hp.ngc.plugins.agents.update.delegate.LocalizedChoiceAgent";
			}
			part conflictRes_LocalizationMonitorAcc ConflictResolver {
				string[] targetConflictingClasses: "LocalizationClass", "DisplayAIOAndMonitorArms";
				string agentName: "com.hp.ngc.plugins.agents.update.delegate.LocalizedChoiceAgent";
			}
		}
		subsystem OperatingSystemSubsystem {
			choice SuseContainersChoice {
				optional: true;
				targetClass: SuseContainers;
				choiceType: multi_select;
				title: "SUSE containers";
			}
			choice NovellSUSELinuxEnterpriseServerChoice {
				optional: true;
				targetClass: NovellSUSELinuxEnterpriseServer;
				choiceType: multi_select;
				title: "Novell SUSE Linux Enterprise Server";
			}
			choice UbuntuLinuxServerChoice {
				optional: true;
				targetClass: UbuntuLinuxServer;
				choiceType: single_select;
				title: "Canonical Ubuntu Server";
			}

			// Moved os License packs from their own subsystem per QC 70609 APM 7/24/13
			locationArray MSWindowsServer2011LicenseChoice {
				fillerClasses: MSWindowsServer2011License;
				rows: 20;
			}
			locationArray MSWindowsServer2008LicenseChoice {
				fillerClasses: MSWindowsServer2008License;
				rows: 20;
			}
			locationArray MSWindowsServer2008SingleLicenseChoice {
				fillerClasses: MSWindowsServer2008SingleLicense;
				rows: 20;
			}
			locationArray MSWindowsServer2012LicenseChoice {
				fillerClasses: MSWindowsServer2012License; //CPT Add missing class for Additional MSWindows2012
				rows: 99; //SUG_ALM_117817

			}
			locationArray MSWindowsServer2008_TSLicenseChoice {
				fillerClasses: MSWindowsServer2008_TSLicense;
				rows: 20;
			}
			constraint noMixWindows2008TSLicense {
				message: "Cannot mix MS Windows Server 2008 TS License.";
				body: dependency (targetEnv ("ezc", "ipcs"), MSWindowsServer2008_TSLicense.noMix);
			}

			//AB 23-Nov-2020 for ALM ID:138690
			constraint noFIOinBTOModels {
				message: "FIO products are not allowed in BTO Base Model.";
				body: dependency (DLG10Common [ BTO ], HPCSLES [ R1Z69A ] = 0); //AB 19-Nov-2020 for ALM ID:138690
				dependency (DLG10Common [ BTO ], HPCSGI [ Q8K21A ] = 0); //AB 19-Nov-2020 for ALM ID:138690

			}
			//ANV_ALM
			constraint MSWindowsServerRule1Info {
				message: "Software Image is not Factory Installed";
				body: if thisInst.selected(MSWindows2012R2Server).filter(p => p.id >= "755997-201" or p.id >= "755997-291" or p.id >= "755997-371" or p.id >= "755997-A41" or p.id >= "755997-B21" or p.id >= "755998-201" or p.id >= "755998-291" or p.id
				>= "755998-371" or p.id >= "755998-B21").count > 0 then false;
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "854551-041" or p.id >= "854551-051" or p.id >= "854551-061" or p.id >= "854551-B21" or p.id >= "854551-291" or p.id >= "854551-071" or p.id >= "871147-041" or p.id >=
				"871147-051" or p.id >= "871147-061" or p.id >= "871147-B21" or p.id >= "871147-071" or p.id >= "871147-291" or p.id >= "815868-B21" or p.id >= "871150-041" or p.id >= "871150-051" or p.id >= "871150-061" or p.id >= "871150-B21" or
				p.id >= "871150-071" or p.id >= "871150-291" or p.id >= "P45916-291" or p.id >= "P45916-B21" or p.id >= "P46005-291" or p.id >= "P46005-B21" //SE - Added NPI for PERT 24669		14-Sep-2021
				//MS for PERT: 14472
				or p.id >= "P11060-041" or p.id >= "P11060-051" or p.id >= "P11060-061" or p.id >= "P11060-071" or p.id >= "P11060-291" or p.id >= "P11060-B21" or p.id >= "P11063-041" or p.id >= "P11063-051" or p.id >= "P11063-061" or p.id >=
				"P11063-071" or p.id >= "P11063-291" or p.id >= "P11063-B21" or p.id >= "P11059-061" or p.id >= "P11059-071" or p.id >= "P11059-291" or p.id >= "P11059-B21" or p.id >= "P11060-041" or p.id >= "P11060-051" or p.id >= "P11060-061" or
				p.id >= "P11060-071" or p.id >= "P11060-291" or p.id >= "P11060-B21" or p.id >= "P11063-041" or p.id >= "P11063-051" or p.id >= "P11063-061" or p.id >= "P11063-071" or p.id >= "P11063-291" or p.id >= "P11063-B21").count > 0 then
				false;
				//MS for PERT: 14472
				if thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "P11072-041" or p.id >= "P11072-051" or p.id >= "P11072-061" or p.id >= "P11072-071" or p.id >= "P11072-291" or p.id >= "P11072-AD1" or p.id >= "P11072-B21").count > 0
				then false;
			}
			//SE - For PERT 24669		15-Sep-2021
			constraint MSWindowsServerRule24Info {
				message: "Only compatible with 1-CPU HW";
				body: if thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "P46173-291" or p.id >= "P46174-371" or p.id >= "P46174-B21").count > 0 then false;
			}
			constraint MSWindowsServerRule25Info {
				message: "Must cover 10 cores on every HW.  The number of Physical Cores must not exceed 10 cores";
				body: if thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "P46173-291" or p.id >= "P46174-371" or p.id >= "P46174-B21").count > 0 then false;
			}
			constraint noMixWindows2008SingleLicense {
				message: "Cannot mix MS Windows Server 2008 Single License.";
				body: dependency (targetEnv ("ezc", "ipcs"), MSWindowsServer2008SingleLicense.noMix);
			}
			constraint noMixWindows2008License {
				message: "Cannot mix MS Windows Server 2008 License.";
				body: dependency (targetEnv ("ezc", "ipcs"), MSWindowsServer2008License.noMix);
			}
			constraint noMixWindows2011License {
				message: "Cannot mix MS Windows Server 2011 License.";
				body: dependency (targetEnv ("ezc", "ipcs"), MSWindowsServer2011License.noMix);
			}
			constraint canonicalUbuntuInfoMsg {
				message: "Canonical Ubuntu is supported on specific servers, to learn more visit www.hp.com/go/ubuntucert";
				body: selected(UbuntuLinuxServer).count = 0;
			}
			constraint canonicalUbuntuwarningMsg {
				message: "Canonical Ubuntu is only for 2 socket servers";
				body: selected(UbuntuLinuxServer).count = 0;
			}
			constraint hardDriveRequiredMicrosoftPreInstall {
				message: "Hard Drive is required when ordering Microsoft Windows Server PreInstalled";
				body: dependency (OperatingSystem [ bIsFactoryInstalledMicrosoft = true ], HardDrive > 0);
			}
			constraint clientAccessLic {
				message: "Client Access Licenses(CALs) must match the language of selected Base OS.";
				body:
				if(thisInst.selected(MSWindowsServer2012License).filter(x => x.id >= "759561-B21" || x.id >= "759562-B21" || x.id >= "759563-B21" || x.id >= "759564-B21") + thisInst.selected(MSWindowsServer2011License) +
				thisInst.selected(MSWindowsServer2008License) + thisInst.selected(MSWindowsServer2008_TSLicense)).count > 0 then (thisInst.selected(OperatingSystem).count - (thisInst.selected(MSWindowsServer2012License).count +
				thisInst.selected(MSWindowsServer2011License).count + thisInst.selected(MSWindowsServer2008License).count + thisInst.selected(MSWindowsServer2008_TSLicense).count)) > 0;
			}
			
			constraint susecontainers_r1 {  //Info
				message: "This SKU to be selected for EDGE Environment";
				body: if thisInst.selected(SuseContainers).filter(y => y.id >= "S0E93AAE" || y.id >= "S0E94AAE" || y.id >= "S0E95AAE" || y.id >= "S0E96AAE" || y.id >= "S0E97AAE" || y.id >= "S0E98AAE").count > 0 then false else true;
			}
			constraint susecontainers_r2 {  //Info
				message: "For customers using x86-64, Arm 64bit, and IBM Z & LinuxONE architectures";
				body: if thisInst.selected(SuseContainers).filter(y => y.id >= "S0E93AAE" || y.id >= "S0E94AAE" || y.id >= "S0E95AAE").count > 0 then false else true;
			}
			constraint susecontainers_r3 {  //Info
				message: "SUSE doesn't provide ARM processor on Moonshot platform support at this time";
				body: if thisInst.selected(SuseContainers).filter(y => y.id >= "S0E93AAE" || y.id >= "S0E94AAE" || y.id >= "S0E95AAE" || y.id >= "S0E99AAE" || y.id >= "S0F00AAE" || 
					  y.id >= "S0F01AAE" || y.id >= "S0F02AAE" || y.id >= "S0F03AAE" || y.id >= "S0F04AAE" || y.id >= "S0F05AAE" || y.id >= "S0F06AAE" || y.id >= "S0F07AAE" || 
					  y.id >= "S0F08AAE" || y.id >= "S0F09AAE" || y.id >= "S0F10AAE" || y.id >= "S0F11AAE" || y.id >= "S0F12AAE" || y.id >= "S0F13AAE" || y.id >= "S0F14AAE" || 
					  y.id >= "S0F15AAE" || y.id >= "S0F16AAE" || y.id >= "S0F17AAE" || y.id >= "S0F18AAE" || y.id >= "S0F19AAE" || y.id >= "S0F20AAE").count > 0 then false else true;
			}
			constraint susecontainers_r4 {  //Info
				message: "Software not factory installed";
				body: if thisInst.selected(SuseContainers).filter(y => y.id >= "S0E93AAE" || y.id >= "S0E94AAE" || y.id >= "S0E95AAE" || y.id >= "S0E96AAE" || y.id >= "S0E97AAE" || 
					  y.id >= "S0E98AAE" || y.id >= "S0E99AAE" || y.id >= "S0F00AAE" || y.id >= "S0F01AAE" || y.id >= "S0F02AAE" || y.id >= "S0F03AAE" || y.id >= "S0F04AAE" || 
					  y.id >= "S0F05AAE" || y.id >= "S0F06AAE" || y.id >= "S0F07AAE" || y.id >= "S0F08AAE" || y.id >= "S0F09AAE" || y.id >= "S0F10AAE" || y.id >= "S0F11AAE" || 
					  y.id >= "S0F12AAE" || y.id >= "S0F13AAE" || y.id >= "S0F14AAE" || y.id >= "S0F15AAE" || y.id >= "S0F16AAE" || y.id >= "S0F17AAE" || y.id >= "S0F18AAE" || 
					  y.id >= "S0F19AAE" || y.id >= "S0F20AAE").count > 0 then false else true;
			}
			constraint susecontainers_r5 {  //Info
				message: "Must have SUSE Rancher server";
				body: if thisInst.selected(SuseContainers).filter(y => y.id >= "S0E99AAE" || y.id >= "S0F00AAE" || y.id >= "S0F01AAE" || y.id >= "S0F08AAE" || y.id >= "S0F09AAE" || y.id >= "S0F10AAE").count > 0 then false else true;
			}
			constraint susecontainers_r6 {  //Info
				message: "Supports any CNCF-certified Kubernetes distribution";
				body: if thisInst.selected(SuseContainers).filter(y => y.id >= "S0F02AAE" || y.id >= "S0F03AAE" || y.id >= "S0F04AAE" || y.id >= "S0F11AAE" || y.id >= "S0F12AAE" || y.id >= "S0F13AAE").count > 0 then false else true;
			}
			
			
			constraint suse_rule4 {
				message: "SUSE doesn't provide ARM processor on Moonshot platform support at this time";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "P9P55AAE" || x.id >= "P9P92AAE" || x.id >= "P9P93AAE" || x.id >= "P9P95AAE" || x.id >= "P9P54AAE" || x.id >= "P9P94AAE").count > 0 or
				thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q8T79AAE" || y.id >= "Q8T80AAE").count > 0 then false else true;
			}
			//PRS Removed the rule for PERT-20267 15-Nov-2020
			//			constraint suse_rule5 {
			//				message: "Software not factory installed.";
			//				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "P9P48AAE" || x.id >= "P9P55AAE" || x.id >= "P9P92AAE" || x.id >= "P9P93AAE" || x.id >= "P9P95AAE" || x.id >= "P9P54AAE" || x.id >= "P9P94AAE").count > 0
			//				then false else true;
			//			}
			constraint suse_rule6 {
				message: "Base nodes are required";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "P9P47AAE" || x.id >= "P9P48AAE" || x.id >= "P9P49AAE" || x.id >= "P9P50AAE").count > 0 then false else true;
			}
			constraint suse_rule9 {
				message: "Expansion node SKUs sit on top of or add to base node SKUs.";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "P9P48AAE" || x.id >= "P9P50AAE").count > 0 then false else true;
			}
			constraint suse_rule16 {
				message: "2 socket pair can be stackable.";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "P9P55AAE" || x.id >= "P9P92AAE" || x.id >= "P9P93AAE" || x.id >= "P9P95AAE").count > 0 then false else true;
			}
			constraint suse_rule25 {
				message: "subscriptions are stackable to necessary number of sockets.";
				body: if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q8T79AAE" || y.id >= "Q8T80AAE").count > 0 then false else true;
			}
			constraint partner_rule1 {
				message: "The Unit of Measure for a SUSE Linux Enterprise Server for (High Performance Computing) Subscription Offering is per 1-2 Sockets per Physical Server used as part of a HPC System.";
				body: if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q9S73AAE" || y.id >= "Q9S74AAE" || y.id >= "Q9S75AAE" || y.id >= "Q9S76AAE" || y.id >= "Q9S77AAE" || y.id >= "Q9S78AAE" || y.id >= "Q9S80AAE" || y.id
				>= "Q9S81AAE" || y.id >= "Q9S82AAE" || y.id >= "Q9S83AAE" || y.id >= "Q9S84AAE" || y.id >= "Q9S79AAE" || y.id >= "R8R77A").count > 0 then false else true;
			}
			constraint partner_rule2 {
				message: "One Subscription Offering is required for a 1-2 Socket Physical Server.";
				body: if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q9S73AAE" || y.id >= "Q9S74AAE" || y.id >= "Q9S75AAE" || y.id >= "Q9S76AAE" || y.id >= "Q9S77AAE" || y.id >= "Q9S78AAE" || y.id >= "Q9S80AAE" || y.id
				>= "Q9S81AAE" || y.id >= "Q9S82AAE" || y.id >= "Q9S83AAE" || y.id >= "Q9S84AAE" || y.id >= "Q9S79AAE" || y.id >= "R8R77A").count > 0 then false else true;
			}
			constraint partner_rule3 {
				message: "For Physical Servers with more than 2 Sockets, the number of Subscription Offerings must match or exceed the total number of pairs of Sockets of the Physical Server.";
				body: if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q9S73AAE" || y.id >= "Q9S74AAE" || y.id >= "Q9S75AAE" || y.id >= "Q9S76AAE" || y.id >= "Q9S77AAE" || y.id >= "Q9S78AAE" || y.id >= "Q9S80AAE" || y.id
				>= "Q9S81AAE" || y.id >= "Q9S82AAE" || y.id >= "Q9S83AAE" || y.id >= "Q9S84AAE" || y.id >= "Q9S79AAE" || y.id >= "R8R77A").count > 0 then false else true;
			}
			constraint partner_rule4 {
				message: "With regards to the HPC System the number of required Subscription Offerings must match or exceed the sum of Subscription Offerings of all Physical Servers used in the HPC System.";
				body: if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q9S73AAE" || y.id >= "Q9S74AAE" || y.id >= "Q9S75AAE" || y.id >= "Q9S76AAE" || y.id >= "Q9S77AAE" || y.id >= "Q9S78AAE" || y.id >= "Q9S80AAE" || y.id
				>= "Q9S81AAE" || y.id >= "Q9S82AAE" || y.id >= "Q9S83AAE" || y.id >= "Q9S84AAE" || y.id >= "Q9S79AAE" || y.id >= "R8R77A").count > 0 then false else true;
			}
			constraint partner_rule5 {
				message: "The SLES HPC Subscription Offering applies to HPC Systems for which:
					 </br>(1) the number all Sockets of HPC Head Nodes in a HPC System must not exceed 25% of the total number of Sockets in the HPC System.
					 </br>(2) external network communication to and from the HPC System must only happen via the Head Nodes. With the exception of 
					 </br>(i) communication for purely administrative purposes which in no way interferes with the computation task distributed to any HPC Compute Node and 
					 </br>(ii) data transfer directly related to computation of a particular computation task between any HPC Compute Node and a storage system; no direct or indirect communication between HPC Compute Nodes and any other external systems is allowed.";
				body: if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q9S73AAE" || y.id >= "Q9S74AAE" || y.id >= "Q9S75AAE" || y.id >= "Q9S76AAE" || y.id >= "Q9S77AAE" || y.id >= "Q9S78AAE" || y.id >= "Q9S80AAE" || y.id
				>= "Q9S81AAE" || y.id >= "Q9S82AAE" || y.id >= "Q9S83AAE" || y.id >= "Q9S84AAE" || y.id >= "Q9S79AAE" || y.id >= "R8R77A").count > 0 then false else true;
			}
			constraint partner_rule6 {
				message: "subscriptions are stackable to necessary number of sockets.";
				body: if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q9S73AAE" || y.id >= "Q9S74AAE" || y.id >= "Q9S75AAE" || y.id >= "Q9S76AAE" || y.id >= "Q9S77AAE" || y.id >= "Q9S78AAE" || y.id >= "Q9S80AAE" || y.id
				>= "Q9S81AAE" || y.id >= "Q9S82AAE" || y.id >= "Q9S83AAE" || y.id >= "Q9S84AAE" || y.id >= "Q9S79AAE" || y.id >= "R8R77A").count > 0 then false else true;
			}
			constraint suseosVirtualGuestInformation {
				message: "May be stacked either as 2 socket pair or 2 virtual guests";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "N7F54AAE" || x.id >= "N7F55A" || x.id >= "N7F55AAE" || x.id >= "P9P43AAE" || x.id >= "P9P45AAE" || x.id >= "P9P94AAE" || x.id >= "P9P54AAE").count > 0
				then false else true;
			}
			constraint suseosKVMInformation {
				message: "KVM and Xen hypervisor are not included";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "N7F54A" || x.id >= "N7F54AAE" || x.id >= "N7F55A" || x.id >= "N7F55AAE" || x.id >= "P9P54EEA" || x.id >= "P9P94AAE" || x.id >= "P9P54AAE").count > 0 then
				false else true;
			}
			constraint suseVirtualGuestInformation {
				message: "May be stacked either as 2 socket pair or 2 virtual guests";
				body: if thisInst.selected(VMwareVSAN).filter(x => x.id >= "M6K28A" || x.id >= "M6K28AAE" || x.id >= "M6K30A" || x.id >= "M6K30AAE" || x.id >= "M6K32A" || x.id >= "M6K32AAE").count > 0 then false else true;
			}
			constraint KVMInformation {
				message: "KVM and Xen hypervisor are not included";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "M6K28A" || x.id >= "M6K28AAE" || x.id >= "M6K30A" || x.id >= "M6K30AAE" || x.id >= "M6K32A" || x.id >= "M6K32AAE").count > 0 then false else true;
			}
			constraint suseArmRule4 {
				message: "SUSE doesn't provide ARM processor on Moonshot platform support at this time";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "M6K28A" || x.id >= "M6K28AAE" || x.id >= "M6K29A" || x.id >= "M6K29AAE" || x.id >= "M6K30A" || x.id >= "M6K30AAE" || x.id >= "M6K31A" || x.id >=
				"M6K31AAE" || x.id >= "M6K32A" || x.id >= "M6K32AAE" || x.id >= "M6K33A" || x.id >= "M6K33AAE" || x.id = "N7F54A" || x.id = "N7F54AAE" || x.id = "N7F55A" || x.id = "N7F55AAE").count > 0 then false else true;
			}
			constraint suseSoftwareRule5 {
				message: "Software not factory installed.";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "M6K28A" || x.id >= "M6K28AAE" || x.id >= "M6K29A" || x.id >= "M6K29AAE" || x.id >= "M6K30A" || x.id >= "M6K30AAE" || x.id >= "M6K31A" || x.id >=
				"M6K31AAE" || x.id >= "M6K32A" || x.id >= "M6K32AAE" || x.id >= "M6K33A" || x.id >= "M6K33AAE" || x.id = "N7F54A" || x.id = "N7F54AAE" || x.id = "N7F55A" || x.id = "N7F55AAE").count > 0 or
				thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(p => p.id >= "P9P41AAE" or p.id >= "P9P42AAE" or p.id >= "P9P43AAE" or p.id >= "P9P44AAE" or p.id >= "P9P45AAE" or p.id >= "P9P46AAE" or p.id >= "P9P47AAE" or p.id >=
				"P9P48AAE" or p.id >= "P9P49AAE" or p.id >= "P9P50AAE" or p.id >= "P9P54AAE" or p.id >= "P9P55AAE" or p.id >= "P9P92AAE" or p.id >= "P9P93AAE" or p.id >= "P9P94AAE" or p.id >= "P9P95AAE").count > 0 then false else true;
			}
			constraint SUSElinuxEntRule23_info {
				message: "Quantity is calculated as 1 license per 2 socket Server";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(p => p.id = "N7F54A" or p.id = "N7F55A").count > 0 then false;
			}
			constraint SUSElinuxEntRule24_Blue {
				message: "Consult with Solution Architect  if unsure which OS selection to make. </br>
							  Select 1 SKU per server based on the function of the server. IE: Commercial Standard vs Commerical Priority.";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(p => p.id = "N7F54A" or p.id = "N7F55A").count > 0 then false;
			}
			constraint MSWindowsServerRule28 {
				message: "Appropriate Windows Server FIO base license SKU must be present when ordering Additional license (Add Lic) as factory integrated with server.<br>
					Standard Add Lic requires Standard FIO base License<br>
					Datacenter Add Lic requires Datacenter FIO base License";
				body: if thisInst.selected(MSWindows2012Server).filter(x => split(x.id, "#").get(0) <= "P46195-B21 P46196-B21 P46199-AA1 P46199-AB1 P46199-B21").count > 0 then thisInst.selected(MSWindows2012Server).filter(x => split(x.id, "#").get(0)
				<= "P46005-291 P46005-B21 P46155-291 P46155-B21 P11059-041 P11059-291 P11059-B21 P11060-041 P11060-051 P11060-061 P11060-071 P11060-291 P11060-B21").count > 0;
				if thisInst.selected(MSWindows2012Server).filter(x => split(x.id, "#").get(0) <= "P46212-B21 P46213-B21 P46214-B21").count > 0 then thisInst.selected(MSWindows2012Server).filter(x => split(x.id, "#").get(0) <=
				"P45916-291 P45916-B21 P11063-041 P11063-051 P11063-061 P11063-071 P11063-291 P11063-B21").count > 0;
			}
			constraint MSWindowsServerRule22Info {
				message:
				"To license a physical server with Windows Server, all physical cores must be licensed in the server.A minimum of 8 core licenses is required for each physical processor in the server and a minimum of 16 cores is required per server. Additional Licenses for 2, 4 and 16 cores are available to license additional cores.";
				body: if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "871147-041" or p.id >= "871143-041" or p.id >= "871143-051" or p.id >= "871143-061" or p.id >= "871143-071" or p.id >= "871143-291" or p.id >= "871143-B21" or p.id
				>= "871147-051" or p.id >= "871147-061" or p.id >= "871147-B21" or p.id >= "871147-071" or p.id >= "871147-291" or p.id >= "871150-041" or p.id >= "871150-051" or p.id >= "871150-061" or p.id >= "871150-B21" or p.id >= "871150-071" or
				p.id >= "871150-291" or p.id >= "P45916-291" or p.id >= "P45916-B21" or p.id >= "P46005-291" or p.id >= "P46005-B21" or p.id >= "P46155-291" or p.id >= "P46155-B21	" //SE - For PERT 24669		14-Sep-20
				//MS for PERT: 14472
				or p.id >= "P11059-041" or p.id >= "P11059-051" or p.id >= "P11059-041" or p.id >= "P11059-051" or p.id >= "P11059-061" or p.id >= "P11059-071" or p.id >= "P11059-291" or p.id >= "P11059-B21" or p.id >= "P11060-041" or p.id >=
				"P11060-051" or p.id >= "P11060-061" or p.id >= "P11060-071" or p.id >= "P11060-291" or p.id >= "P11060-B21" or p.id >= "P11063-041" or p.id >= "P11063-051" or p.id >= "P11063-061" or p.id >= "P11063-071" or p.id >= "P11063-291" or
				p.id >= "P11063-B21" or p.id >= "P11059-061" or p.id >= "P11059-071" or p.id >= "P11059-291" or p.id >= "P11059-B21" or p.id >= "P11060-041" or p.id >= "P11060-051" or p.id >= "P11060-061" or p.id >= "P11060-071" or p.id >=
				"P11060-291" or p.id >= "P11060-B21" or p.id >= "P11063-041" or p.id >= "P11063-051" or p.id >= "P11063-061" or p.id >= "P11063-071" or p.id >= "P11063-291" or p.id >= "P11063-B21").count > 0 then false;
			}
			constraint MSWindowsServerRule281 {
				message:
				"Appropriate Windows Server FIO base license SKU must be present when ordering Additional license (Add Lic) as factory integrated with server. \n • Standard Add Lic requires Standard FIO base License \n• Datacenter Add Lic requires Datacenter FIO base License";
				body: if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P11064-371" or p.id >= "P11064-A21" or p.id >= "P11064-DN1" or p.id >= "P11065-371" or p.id >= "P11065-A21" or p.id >= "P11065-DN1" or p.id >= "P11066-371" or p.id
				>= "P11066-A21" or p.id >= "P11066-AA1" or p.id >= "P11066-AB1" or p.id >= "P11066-DN1").count > 0 and thisInst.selected(MSWindowsServer2012ROK).count = 0 then thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P11059-041" or
				p.id >= "P11059-051" or p.id >= "P11059-061" or p.id >= "P11059-071" or p.id >= "P11059-291" or p.id >= "P11059-B21" or p.id >= "P11060-041" or p.id >= "P11060-051" or p.id >= "P11060-061" or p.id >= "P11060-071" or p.id >=
				"P11060-291" or p.id >= "P11060-B21").count > 0;
			}
			constraint MSWindowsServerRule2812 {
				message:
				"Appropriate Windows Server FIO base license SKU must be present when ordering Additional license (Add Lic) as factory integrated with server. \n • Standard Add Lic requires Standard FIO base License \n• Datacenter Add Lic requires Datacenter FIO base License";
				body: if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P11067-371" or p.id >= "P11067-A21" or p.id >= "P11067-DN1" or p.id >= "P11068-371" or p.id >= "P11068-A21" or p.id >= "P11068-DN1" or p.id >= "P11069-371" or p.id
				>= "P11069-A21" or p.id >= "P11069-DN1").count > 0 and thisInst.selected(MSWindowsServer2012ROK).count = 0 then thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P11063-041" or p.id >= "P11063-051" or p.id >= "P11063-061" or
				p.id >= "P11063-071" or p.id >= "P11063-291" or p.id >= "P11063-B21").count > 0;
			}
			constraint MSWindowsServerRuleoldstd {
				message:
				"Appropriate Windows Server FIO base license SKU must be present when ordering Additional license (Add Lic) as factory integrated with server. \n • Standard Add Lic requires Standard FIO base License \n• Datacenter Add Lic requires Datacenter FIO base License";
				body: if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "871157-371" or p.id >= "871157-A21" or p.id >= "871157-DN1" or p.id >= "871158-371" or p.id >= "871158-A21" or p.id >= "871158-DN1" or p.id >= "871159-371" or p.id
				>= "871159-A21" or p.id >= "871159-AA1" or p.id >= "871159-AB1" or p.id >= "871159-DN1").count > 0 and thisInst.selected(MSWindowsServer2012ROK).count = 0 then thisInst.selected(MSWindows2012Server).filter(p => p.id >= "871143-041" or
				p.id >= "871143-051" or p.id >= "871143-061" or p.id >= "871143-071" or p.id >= "871143-291" or p.id >= "871143-B21" or p.id >= "871147-041" or p.id >= "871147-051" or p.id >= "871147-061" or p.id >= "871147-071" or p.id >=
				"871147-291" or p.id >= "871147-B21").count > 0;
			}
			constraint MSWindowsServerRuleolddc {
				message:
				"Appropriate Windows Server FIO base license SKU must be present when ordering Additional license (Add Lic) as factory integrated with server. \n • Standard Add Lic requires Standard FIO base License \n• Datacenter Add Lic requires Datacenter FIO base License";
				body: if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "871166-371" or p.id >= "871166-A21" or p.id >= "871166-DN1" or p.id >= "871167-371" or p.id >= "871167-A21" or p.id >= "871167-DN1" or p.id >= "871168-371" or p.id
				>= "871168-A21" or p.id >= "871168-DN1").count > 0 and thisInst.selected(MSWindowsServer2012ROK).count = 0 then thisInst.selected(MSWindows2012Server).filter(p => p.id >= "871150-041" or p.id >= "871150-051" or p.id >= "871150-061" or
				p.id >= "871150-071" or p.id >= "871150-291" or p.id >= "871150-B21").count > 0;
			}
			constraint suseSocketPairInformation {
				message: "2 socket pair can be stackable";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "M6K29A" || x.id >= "M6K29AAE" || x.id >= "M6K31A" || x.id >= "M6K31AAE" || x.id >= "M6K33A" || x.id >= "M6K33AAE").count > 0 then false else true;
			}
			constraint SUSElinuxEntRule2W {
				message: "May be stacked as 2 socket pair";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(p => p.id >= "P9P44AAE" or p.id >= "P9P46AAE" or p.id >= "P9P47AAE" or p.id >= "P9P48AAE" or p.id >= "P9P49AAE" or p.id >= "P9P50AAE").count > 0 then false;
			}
			constraint MSWindowsServerRule12Info {
				message: " Windows Server Additional Licenses (Add Lic) may be selected in any of the following scenarios:</br> 
                                        Additional license for Windows Server 2016 Standard - Each HPE OEM Base license for Windows Server 2016 Standard provides rights for up to 16 cores and two virtual OSEs or Hyper-V containers when all physical cores on a server are licensed (minimum of 8 cores per proccessor and 16 cores per server).</br>
                                        Additional licenses may be added to a server to support more cores and/or more concurrent Virtual Machines (VMs). For every two additional VMs, all the cores in the server have to be licensed again.</br>
                                        Additional license for Windows Server 2016 Datacenter - Each HPE OEM Base license for Windows Server 2016 Datacenter supports 16 cores and permits unlimited OSEs and Hyper-V containers when all physical cores on a server are licensed (minimum of 8 cores per proc and 16 cores per server). </br> 
                                        Additional licenses may be added to a server to support additional cores. They are available in packs of 2, 4 and 16 Cores. 
									    Additional Licenses you select must be the same Windows Server version as your OS base license. ";
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "871147-041" or p.id >= "871143-041" or p.id >= "871143-051" or p.id >= "871143-061" or p.id >= "871143-071" or p.id >= "871143-291" or p.id >= "871143-B21" or p.id >=
				"871147-051" or p.id >= "871147-061" or p.id >= "871147-B21" or p.id >= "871147-071" or p.id >= "871147-291" or p.id >= "871150-041" or p.id >= "871150-051" or p.id >= "871150-061" or p.id >= "871150-B21" or p.id >= "871150-071" or
				p.id >= "871150-291" or p.id >= "871157-371" or p.id >= "871157-A21" or p.id >= "871157-DN1" or p.id >= "871158-371" or p.id >= "871158-A21" or p.id >= "871158-DN1" or p.id >= "871159-371" or p.id >= "871159-A21" or p.id >=
				"871159-AA1" or p.id >= "871159-AB1" or p.id >= "871159-DN1" or p.id >= "871166-371" or p.id >= "871166-A21" or p.id >= "871166-DN1" or p.id >= "871167-371" or p.id >= "871167-A21" or p.id >= "871167-DN1" or p.id >= "871168-371" or
				p.id >= "871168-A21" or p.id >= "871168-DN1").count > 0 then false;
			}
			constraint MSWindowsServerRule12Info1 {
				message: " Windows Server Additional Licenses (Add Lic) may be selected in any of the following scenarios:</br> 
                                        Additional license for Windows Server 2019 Standard - Each HPE OEM Base license for Windows Server 2019 Standard provides rights for up to 16 cores and two virtual OSEs or Hyper-V containers when all physical cores on a server are licensed (minimum of 8 cores per proccessor and 16 cores per server).</br>
                                        Additional licenses may be added to a server to support more cores and/or more concurrent Virtual Machines (VMs). For every two additional VMs, all the cores in the server have to be licensed again.</br>
                                        Additional license for Windows Server 2019 Datacenter - Each HPE OEM Base license for Windows Server 2019 Datacenter supports 16 cores and permits unlimited OSEs and Hyper-V containers when all physical cores on a server are licensed (minimum of 8 cores per proc and 16 cores per server). </br> 
                                        Additional licenses may be added to a server to support additional cores. They are available in packs of 2, 4 and 16 Cores. 
									    Additional Licenses you select must be the same Windows Server version as your OS base license.	";
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P11059-041" or p.id >= "P11059-051" or p.id >= "P11059-061" or p.id >= "P11059-071" or p.id >= "P11059-291" or p.id >= "P11059-B21" or p.id >= "P11060-041" or p.id >=
				"P11060-051" or p.id >= "P11060-061" or p.id >= "P11060-071" or p.id >= "P11060-291" or p.id >= "P11060-B21" or p.id >= "P11063-041" or p.id >= "P11063-051" or p.id >= "P11063-061" or p.id >= "P11063-071" or p.id >= "P11063-291" or
				p.id >= "P11063-B21" or p.id >= "P11064-371" or p.id >= "P11064-A21" or p.id >= "P11064-DN1" or p.id >= "P11065-371" or p.id >= "P11065-A21" or p.id >= "P11065-DN1" or p.id >= "P11066-371" or p.id >= "P11066-A21" or p.id >=
				"P11066-AA1" or p.id >= "P11066-AB1" or p.id >= "P11066-DN1" or p.id >= "P11067-371" or p.id >= "P11067-A21" or p.id >= "P11067-DN1" or p.id >= "P11068-371" or p.id >= "P11068-A21" or p.id >= "P11068-DN1" or p.id >= "P11069-371" or
				p.id >= "P11069-A21" or p.id >= "P11069-DN1" or p.id >= "P46155-291" or p.id >= "P46155-B21").count > 0 then false; //SE - For PERT 24669		14-Sep-2021

			}
			//SE - For PERT 24669		14-Sep-2021
			constraint MSWindowsServerRule12Info1_2022 {
				message: " Windows Server Additional Licenses (Add Lic) may be selected in any of the following scenarios:</br> 
                                        Additional license for Windows Server 2022 Standard - Each HPE OEM Base license for Windows Server 2022 Standard provides rights for up to 16 cores and two virtual OSEs or Hyper-V containers when all physical cores on a server are licensed (minimum of 8 cores per proccessor and 16 cores per server).</br>
                                        Additional licenses may be added to a server to support more cores and/or more concurrent Virtual Machines (VMs). For every two additional VMs, all the cores in the server have to be licensed again.</br>
                                        Additional license for Windows Server 2022 Datacenter - Each HPE OEM Base license for Windows Server 2022 Datacenter supports 16 cores and permits unlimited OSEs and Hyper-V containers when all physical cores on a server are licensed (minimum of 8 cores per proc and 16 cores per server). </br> 
                                        Additional licenses may be added to a server to support additional cores. They are available in packs of 2, 4 and 16 Cores. 
									    Additional Licenses you select must be the same Windows Server version as your OS base license.	";
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P45916-291" or p.id >= "P45916-B21" or p.id >= "P46005-291" or p.id >= "P46005-B21" or p.id >= "P46195-B21" or p.id >= "P46196-B21" or p.id >= "P46199-AA1" or p.id >=
				"P46199-AB1" or p.id >= "P46199-B21" or p.id >= "P46212-B21" or p.id >= "P46213-B21" or p.id >= "P46214-B21").count > 0 then false;
			}

			//RV 30-Jun-2020 PERT 19084 SMR Quartz launch
			constraint MSWindowsServerRule30Info {
			//RV 22-Sep-2020 PERT 20204
				message: "If One Windows Server 2019 Standard or Windows Server 2019 Datacenter 16 core Npi or FIO SKU is added to one of the compatible servers, then server models optioned with either of the following AMD EPYC Rome CPU(s) with >32 cores,<br>
						 processor SKUs: P16637-L21 (64 cores), P16636-L21 (64 cores), P16636-B21 (64 cores), P19622-L21 (64 cores), P17546-B21 (64 c.), P17546-L21 (64c.), P21630-L21 (64c.), P21630-B21 (64 c.), P22034-L21 (64 c.), P16659-B21 (64 c.), <br>
						 P16636-B21#0D1 (64 c.), P17546-B21#0D1 (64 c.), P21630-B21#0D1 (64 c.), P21862-L21 (48 cores), P21862-B21 (48 c.), P21721-L21 (48 c.), P21721-B21 (48 c.), P21721-B21#0D1 (48 c.), P21862-B21#0D1 (48 c.), P25590-B21#0D1(64C), <br>
						 P25590-L21(64C), P21663-B21#0D1(48C), P21663-L21(48C), P19621-L21(64C), P25850-L21(64C), P19623-L21(48C), P19624-L21(48C), P21864-L21(48C)";
/*message: " If One Windows Server 2019 Standard or Windows Server 2019 Datacenter 16 core Npi or FIO SKU is added to one of the compatible servers,  then server models optioned with either of the following AMD EPYC Rome CPU(s) with >32 cores, <br>
							processor SKUs: P16637-L21 (64 cores), P16636-L21 (64 cores), P16636-B21 (64 cores), P19622-L21 (64 cores), P17546-B21 (64 c.), P17546-L21 (64c.), P21630-L21 (64c.), P21630-B21 (64 c.), P22034-L21 (64 c.), P16659-B21 (64 c.), <br>
							P16636-B21#0D1 (64 c.), P17546-B21#0D1 (64 c.), P21630-B21#0D1 (64 c.), P21862-L21 (48 cores), P21862-B21 (48 c.), P21721-L21 (48 c.), P21721-B21 (48 c.), P21721-B21#0D1 (48 c.), P21862-B21#0D1 (48 c.)	";*/
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P35476-371" or p.id >= "P35476-371#0D1" or p.id >= "P35476-A21" or p.id >= "P35476-A21#0D1" or p.id >= "P35476-DN1" or p.id >= "P35476-DN1#0D1" or p.id >= "P35479-371" or
				p.id >= "P35479-371#0D1" or p.id >= "P35479-A21" or p.id >= "P35479-A21#0D1" or p.id >= "P35479-DN1" or p.id >= "P35479-DN1#0D1").count > 0 then false;
			}
			//RV 30-Jun-2020 PERT 19084 SMR Quartz launch
			constraint MSWindowsServerRule31Info {
				message: "AMD server and CPU eligible under MSFT AMD Pilot program, core licensing required only for a maximum of 32 cores per processor for Windows Server 2019 Standard or Datacenter	";
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P35476-371" or p.id >= "P35476-371#0D1" or p.id >= "P35476-A21" or p.id >= "P35476-A21#0D1" or p.id >= "P35476-DN1" or p.id >= "P35476-DN1#0D1" or p.id >= "P35479-371" or
				p.id >= "P35479-371#0D1" or p.id >= "P35479-A21" or p.id >= "P35479-A21#0D1" or p.id >= "P35479-DN1" or p.id >= "P35479-DN1#0D1").count > 0 then false;
			}
			constraint SUSElinuxEntRule3W {
				message: "One SUSE Mgr LCM SKU is required for every server managed by SUSE Manager";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(p => p.id >= "P9P41AAE" or p.id >= "P9P42AAE" or p.id >= "P9P43AAE" or p.id >= "P9P44AAE" or p.id >= "P9P45AAE" or p.id >= "P9P46AAE").count > 0 then false;
			}
			ifEffective	SE_PERT_25043{		//SE - Updated rule as per PERT 25043
			constraint MSWindowsServerRule33 {
				message: " Whenver this OS SKU is selected with below listed NICs/VROC SKUs, the combination will not work as the drivers are NOT available for this combination until March 2022<br>

						P41611-B21 Intel E810-2CQDA2 Ethernet 100Gb 2-port QSFP28 Adapter for HPE   <br>                                       
						P21112-B21 Intel E810-CQDA2 Ethernet 100Gb 2-port QSFP28 Adapter for HPE      <br>      
						P22767-B21 Intel E810-CQDA2 Ethernet 100Gb 2-port QSFP28 OCP3 Adapter for HPE   <br>  
						P08443-B21 Intel E810-XXVDA2 Ethernet 10/25Gb 2-port SFP28 Adapter for HPE     <br>       
						P10106-B21 Intel E810-XXVDA2 Ethernet 10/25Gb 2-port SFP28 OCP3 Adapter for HPE  <br>   
						P08458-B21 Intel E810-XXVDA4 Ethernet 10/25Gb 4-port SFP28 Adapter for HPE     <br>       
						P41614-B21 Intel E810-XXVDA4 Ethernet 10/25Gb 4-port SFP28 OCP3 Adapter for HPE  <br>              
						R7J57A INT VROC Prem FIO SW for HPE <br>
						R7J58A INT VROC FIO SW for HPE <br>
						R7J59AAE INT VROC Prem E-RTU for HPE  <br>
						R7J60AAE INT VROC E-RTU for HPE";
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P11059-041" or p.id >= "P11059-291" or p.id >= "P11059-B21").count > 0 then false;
			}	
			}otherwise{
			constraint MSWindowsServerRule26_warning {
				message: " Whenver this OS SKU is selected with below listed NICs/VROC SKUs, the combination will not work as the drivers are NOT available for this combination until March 2022<br>

					P41611-B21 Intel E810-2CQDA2 Ethernet 100Gb 2-port QSFP28 Adapter for HPE<br>                                          
					P21112-B21 Intel E810-CQDA2 Ethernet 100Gb 2-port QSFP28 Adapter for HPE <br>           
					P22767-B21 Intel E810-CQDA2 Ethernet 100Gb 2-port QSFP28 OCP3 Adapter for HPE  <br>   
					P08443-B21 Intel E810-XXVDA2 Ethernet 10/25Gb 2-port SFP28 Adapter for HPE <br>           
					P10106-B21 Intel E810-XXVDA2 Ethernet 10/25Gb 2-port SFP28 OCP3 Adapter for HPE  <br>   
					P08458-B21 Intel E810-XXVDA4 Ethernet 10/25Gb 4-port SFP28 Adapter for HPE <br>           
					P41614-B21 Intel E810-XXVDA4 Ethernet 10/25Gb 4-port SFP28 OCP3 Adapter for HPE <br>               
					R7J57A INT VROC Prem FIO SW for HPE<br>
					R7J58A INT VROC FIO SW for HPE<br>
					R7J59AAE INT VROC Prem E-RTU for HPE <br>
					R7J60AAE INT VROC E-RTU for HPE";
				body:
				if thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "P46173-291").count > 0 then false;
			}
			constraint MSWindowsServerRule33 {
				message: " Whenver this OS SKU is selected with below listed NICs/VROC SKUs, the combination will not work as the drivers are NOT available for this combination until March 2022<br>

						P41611-B21 Intel E810-2CQDA2 Ethernet 100Gb 2-port QSFP28 Adapter for HPE   <br>                                       
						P21112-B21 Intel E810-CQDA2 Ethernet 100Gb 2-port QSFP28 Adapter for HPE      <br>      
						P22767-B21 Intel E810-CQDA2 Ethernet 100Gb 2-port QSFP28 OCP3 Adapter for HPE   <br>  
						P08443-B21 Intel E810-XXVDA2 Ethernet 10/25Gb 2-port SFP28 Adapter for HPE     <br>       
						P10106-B21 Intel E810-XXVDA2 Ethernet 10/25Gb 2-port SFP28 OCP3 Adapter for HPE  <br>   
						P08458-B21 Intel E810-XXVDA4 Ethernet 10/25Gb 4-port SFP28 Adapter for HPE     <br>       
						P41614-B21 Intel E810-XXVDA4 Ethernet 10/25Gb 4-port SFP28 OCP3 Adapter for HPE  <br>              
						R7J57A INT VROC Prem FIO SW for HPE <br>
						R7J58A INT VROC FIO SW for HPE <br>
						R7J59AAE INT VROC Prem E-RTU for HPE  <br>
						R7J60AAE INT VROC E-RTU for HPE";
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P46155-291" or p.id >= "P46155-B21" or p.id >= "P11059-041" or p.id >= "P11059-291" or p.id >= "P11059-B21").count > 0 then false;
			}}
		    ifEffective MFG_PERT_25108{//MSWindows2012Server 
//		    	constraint MSWindowsServerRule35_warning {
//		    		message: "This MS WS22 UEFI SW SKU is NOT to be selected when customer selects AMD EPYC XXX2 processors	<br>  
//                              ONLY with below listed 4 platforms.  It is compatible with all other AMD processors. <br> 
//                              • HPE ProLiant DL325 Gen10 Plus v2 server	<br>  
//                              • HPE ProLiant DL345 Gen10 Plus server <br>  
//                              • HPE ProLiant DL365 Gen10 Plus server <br>  
//                              • HPE ProLiant DL385 Gen10 Plus v2 server ";
//		    		//(procGen = "2nd") This function selects all "xxx2" 2nd generation families of processors - MFG Thu, June 16 2022
//		    		body: if thisInst.selected(ProliantProcessor).filter(x => split(x.id, "#").get(0) <= "P39369-B21 P39370-B21 P39371-B21 P39372-B21 P39373-B21 P39734-B21 P39735-B21 P39736-B21 P39737-B21 P39738-B21").count > 0 and 		    		
//		    	    (thisInst.id ="P38471-B21#GTA" || thisInst.id ="P38471-B21" || thisInst.id ="P38474-B21#GTA" || thisInst.id ="P38474-B21" || thisInst.id ="P43248-B21" || thisInst.id ="P43249-B21" || thisInst.id ="P38664-B21" || 
//		    		 thisInst.id ="P38664-B21#GTA" || thisInst.id ="P38665-B21" || thisInst.id ="P38665-B21#GTA" || thisInst.id ="P38666-B21" || thisInst.id ="P38666-B21#GTA" || thisInst.id ="P43245-B21" || thisInst.id ="P43246-B21" || 
//		    		 thisInst.id ="P43247-B21" || thisInst.id ="P38578-B21" || thisInst.id ="P38578-B21#GTA" || thisInst.id ="P43251-B21" || thisInst.id ="P38409-B21#GTA" || thisInst.id ="P38409-B21" || thisInst.id ="P38410-B21#GTA" || 
//		    		 thisInst.id ="P38410-B21" || thisInst.id ="P38411-B21#GTA" || thisInst.id ="P38411-B21" || thisInst.id ="P38412-B21#GTA" || thisInst.id ="P38412-B21" || thisInst.id ="P43209-B21" || thisInst.id ="P43210-B21" || 
//		    		 thisInst.id ="P43211-B21" || thisInst.id ="P43212-B21")
//		    		 then thisInst.selected(MSWindows2012Server).filter(x => split(x.id, "#").get(0) <= "P46155-291 P46155-B21").count > 0 ;
//		    	    
//		    	}
		        //July 12 2022
		        //As per BU request:
		        //Warning message shows up across all platforms - Whenever P46155-291, P46155-B21 (MS WS22 UEFI SW SKU) is selected.
		        constraint MSWindowsServerRule35_warning {
		    		message: "This MS WS22 UEFI SW SKU is NOT to be selected when customer selects AMD EPYC XXX2 processors	<br>  
                              ONLY with below listed 4 platforms.  It is compatible with all other AMD processors. <br> 
                              • HPE ProLiant DL325 Gen10 Plus v2 server	<br>  
                              • HPE ProLiant DL345 Gen10 Plus server <br>  
                              • HPE ProLiant DL365 Gen10 Plus server <br>  
                              • HPE ProLiant DL385 Gen10 Plus v2 server ";		    		
		    		body: if thisInst.selected(MSWindows2012Server).filter(x => split(x.id, "#").get(0) <= "P46155-291 P46155-B21").count > 0 
		    		
		    		
		    	    then false;
		    	    
		    	}
		    }//25108  		    
		}//End subsystem OperatingSystemSubsystem definition
		subsystem HPHelionSubsystem {
			locationArray OpenStackLocationArray {
				fillerClasses: HPHelionOpenStack;
				rows: 999;
			}
			locationArray DevelopmentPlatformCommunityLocationArray {
				fillerClasses: HPHelionDevelopmentPlatformCommunity;
				rows: 999;
			}
			locationArray OpenStackCommunityLocationArray {
				fillerClasses: HPHelionOpenStackCommunity;
				rows: 999;
			}
			locationArray OpenStackDeveloperPlatformLocationArray {
				fillerClasses: HPHelionOpenStackDeveloperPlatform;
				rows: 999;
			}
			locationArray PlatformLocationArray {
				fillerClasses: HPHelionPlatform;
				rows: 999;
			}
			locationArray Three-YearLocationArray {
				fillerClasses: HPHelionThree-Year;
				rows: 999;
			}
			locationArray CarrierGradeLocationArray {
				fillerClasses: HPHelionCarrierGrade;
				rows: 999;
			}

			//JHA 2016-03-08 : PPM 68899
			locationArray HpCloudFoundryLocationArray {
				fillerClasses: HPHelionCloudFoundry;
				rows: 999;
			}
			constraint Hosrule1warning {
				message: " The use of HOS ( Helion OpenStack ) SKU in a quote or order requires special approval - 
						   Please contact CloudSupport@hpe.com to gain permission to override this error "; // removed the incorrect character as per menu and changed as Tool supports , NL modified on 20-May-2019 for ALM 130123 
				body:
				if thisInst.selected(HPHelionOpenStack).filter(y => y.id >= "K1S92BAE" or y.id >= "K1S94BAE" or y.id >= "P9A14BAE").count > 0 then false else true;
			}
		}
		subsystem MatrixOEOONBurstingSubsystem {
			locationArray MatrixOEOONBurstingLocationArray {
				fillerClasses: MatrixOEOONBursting;
				rows: 999;
			}
		}
		subsystem ConvergedInfrastructureManagementSoftwareSubsystem {
			locationArray OneViewManagementSoftwareLocationArray {
				fillerClasses: OneViewManagementSoftware; //rows:1;
				rows: 999; //changed to 999 due to Rule 13

			}
			ifEffective KES_VAL {
			}
			otherwise {
				constraint FIOskunotavailBTOmodeloneview { //FIO not avaialble for BTO base model
					message: "One view managment FIO sku cannot be selected for BTO model";
					body:
					//dependency(DL20G9_4SFF[823556-291||823556-AA1||823556-B21||823559-291||823559-AA1||823559-B21||823562-291||823562-AA1||823562-B21||829889-291||829889-B21||871428-291||871428-AA1||829889-B21||871428-B21||871429-291||871429-AA1||871429-B21||871430-AA1||871430-B21||871431-B21],OneViewManagementSoftware[E5Y43A||P8B31A]=0);//ANV_ALM_115737
					dependency (DL20G9_4SFF [ 871431-B21 || 823562-291 ], OneViewManagementSoftware [ E5Y43A || P8B31A ] = 0); //ANV_ALM_115737
					dependency (DL20G9_4SFF [ 871430-AA1 || 871430-B21 || 823559-291 ], OneViewManagementSoftware [ E5Y43A || P8B31A ] = 0);
					dependency (DL20G9_NHP_2LFF [ 829889-291 || 871428-291 || 871428-AA1 || 871428-B21 || 829889-B21 ], OneViewManagementSoftware [ E5Y43A || P8B31A ] = 0);
					dependency (DL20G9_2LFF [ 871429-291 || 871429-AA1 || 871429-B21 || 823556-291 ], OneViewManagementSoftware [ E5Y43A || P8B31A ] = 0);
				}
			}
			ifEffective	SE_PERT_25043{}otherwise{		//SE - Removed as per PERT 25043
			constraint noFlexSWforEZCOneView {
				message: "Flex Software options are not supported for EZC.";
				body:
				//SE - Corrected below constraint as per PERT 24738		17-Nov-2021
				dependency (targetEnv ("ezc", "ipcs"), OneViewManagementSoftware [ E5Y35AAE || E5Y45AAE || K6F98AAE] = 0);     ///P8B26AAE removed for ALM: 144721 based on KA confirmation. NL modified on 30-Mar-2022
				//dependency (targetEnv ("ezc", "ipcs"), OneViewManagementSoftware [ E5Y35A /*|| E5Y35AAE */ || E5Y39A || E5Y39AAE || E5Y45A /*|| E5Y45AAE || K6F98AAE || P8B26AAE */ ] = 0); //AB added P8B26AAE //AB 02-Jun-16 for ALM ID:98951removed || K8G29A || K8G29AAE

			}}
			constraint requiresInsightControl {
				message: "Must already have Insight Control, Virtual Connect Enterprise Manager or Integrated Lights Out to purchase these upgrades.";
				body: dependency (! InsightControl && ! IntegratedLightsOut && ! VirtualConnectEnterpriseManager, ! OneViewManagementSoftware [ E5Y45A || F6Q91A ]); //APM 11/12/14 ALM 172108 ||E5Y45AAE

			}
			constraint purchaseOneViewAdvLicWarning {
				message: "The customer needs to purchase an HP OneView Server Advanced License in the same order as or have purchased one prior to the purchase of this sku.";
				body: if(thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "K8G29A" || x.id >= "K8G29AAE" || x.id >= "M5R19A" || x.id >= "M5R19AAE").count > 0) && (thisInst.selected(OneViewManagementSoftware).filter(x => x.id >=
				"E5Y34A" || x.id >= "E5Y35A" || x.id >= "E5Y36A" || x.id >= "E5Y35AAE" || x.id >= "E5Y37A" || x.id >= "E5Y38A" || x.id >= "E5Y39A" || x.id >= "E5Y39AAE" || x.id >= "E5Y40A" || x.id >= "E5Y41A" || x.id >= "E5Y41AAE" || x.id >= "E5Y42A"
				|| x.id >= "E5Y43A" || x.id >= "E5Y43AAE" || x.id >= "E5Y44A" || x.id >= "E5Y45A" || x.id >= "E5Y45AAE" || x.id >= "F6Q89A" || x.id >= "F6Q89AAE" || x.id >= "F6Q90A" || x.id >= "F6Q91A" || x.id >= "K6F98AAE").count = 0) then false
				else true;
			}
			constraint selectMin4 {
				message: "Customer must select minimum 4 of K8G29A or K8G29AAE when no other HP OneView Server Advanced licenses are a part of the same order. ";
				body:
				if(thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "E5Y34A" || x.id >= "E5Y35A" || x.id >= "E5Y36A" || x.id >= "E5Y35AAE" || x.id >= "E5Y37A" || x.id >= "E5Y38A" || x.id >= "E5Y39A" || x.id >= "E5Y39AAE" || x.id >=
				"E5Y40A" || x.id >= "E5Y41A" || x.id >= "E5Y41AAE" || x.id >= "E5Y42A" || x.id >= "E5Y43A" || x.id >= "E5Y43AAE" || x.id >= "E5Y44A" || x.id >= "E5Y45A" || x.id >= "E5Y45AAE" || x.id >= "F6Q89A" || x.id >= "F6Q89AAE" || x.id >=
				"F6Q90A" || x.id >= "F6Q91A" || x.id >= "K6F98AAE").count = 0) && ((thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "K8G29A" || x.id >= "K8G29AAE").count > 0) && (thisInst.selected(OneViewManagementSoftware).filter(x
				=> x.id >= "K8G29A" || x.id >= "K8G29AAE").count < 4)) then thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "K8G29A" || x.id >= "K8G29AAE").count >= 4;
			}
			constraint maxForCertainSku {
			//message: "Max for K8G29A and K8G29AAE is 999 for rest its 1"; HPD ALM_109408 9/13/2017
				message: "Max for P8B24A,P8B25A,P8B31A and P8B26AAE is 999 for rest its 1";
				body:
				//AB 29-Sep-15 for PPM ID:67053restriction(OneViewManagementSoftware[~(K8G29A || K8G29AAE)] <=1);
				restriction (OneViewManagementSoftware [ ~ (K8G29A || K8G29AAE || M5R19A || M5R19AAE || P8B24A || P8B25A || P8B26AAE || P8B31A || R1S75AAE || R1S76AAE || E5Y41A) ] <= 1); //PRS Added E5Y41A to change max qty for PERT-14555 01-Mar-2019             //RS ALM:125185 26Oct2018 adding P8B31A to change the max value.  ////NL added for Pert 14484 , 21-Dec-2018
				//AB 29-Sep-15 for PPM ID:67053

			}
			constraint OneViewManagementRule4info {
				message: "It is recommended to select electronic or flex license types when requiring 5 or more licenses</br>. 
			  					For more info see: </br>
			  					http://bizsupport1.austin.hp.com/bc/docs/support/SupportManual/c02478425/c02478425.pdf";
				body: if thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "E5Y34A" || x.id >= "P8B24A").count >= 5 then false;
			}
			constraint OneViewManagementRule19info {
				message: "When ordering SKU P8B24A, you will receive a separate license entitlement (that you will need to redeem for a license key) for each SKU ordered </br> 
			  				 (e.g., quantity 10 generates 10 separate license keys).  When ordering more than 10 quantities, consider ordering the equivalent SKU P826AAE that will trigger only one license entitlement and can be redeemed for one license key  </br>
							 (e.g., quantity 10 generates 1 license key that can be applied to 10 servers) </br>
			  					For more info see: http://bizsupport1.austin.hp.com/bc/docs/support/SupportManual/c02478425/c02478425.pdf";
				body: if thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "P8B24A").count >= 10 then false;
			}
			constraint OneViewManagementRule20war {
				message: "When ordering SKU E5Y34A, you will receive a separate license entitlement (that you will need to redeem for a license key) for each SKU ordered </br> 
			  				 (e.g., quantity 10 generates 10 separate license keys).  When ordering more than 10 quantities, consider ordering the equivalent SKU E5Y35AAE that will trigger only one license entitlement and can be redeemed for one license key  </br>
							 (e.g., quantity 10 generates 1 license key that can be applied to 10 servers) </br>
			  					For more info see: http://bizsupport1.austin.hp.com/bc/docs/support/SupportManual/c02478425/c02478425.pdf ";
				body: if thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "E5Y34A").count >= 10 then false;
			}
			//SE - For ALM 142792		15-Sep-2021
			//			constraint hideOCCProducts {
			//				message: "";
			//				body: dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || Apollo4200Gen9 || xl450gen9 || XL230aG9 || XL230KG10 || XL250aG9 || XL260AGen9 || XL270dG9 || XL730fG9Server || XL750fG9 || BL460CG10 || BL460CG10OEM || BL460CG9 ||
			//				BL460CGEN9OEM || BL660CGen9 || DL120G9 || DL160G9 || DL180G9 || DL20G9 || DL20G9OEM || DL360Gen10 || DL360Gen10OEM || DL360G9 || DL360G9OEM || DL380Gen10 || DL380Gen10OEM ||
			//				/* SE - For ALM 128646 -As per the current menu the below mentioned software products are available for DL380 Gen9 server 22-Mar-2019    DL380G9 ||*/
			//				DL380G9OEM || DL385pGen8 || DL560Gen10 || DL560G9 || DL580G9 || DL60G9 || DL80G9 || ECML110G9 || MicroServerG10 || MicroServerGen8 || ML10Gen9 || ML110Gen9 || ML150Gen9 || ML30Gen9 || ML350Gen9 || M510Cartridge || M710xCartridge ||
			//				Synergy480Gen10 || Synergy480Gen10OEM || Synergy480Gen9 || Synergy620Gen9 || Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM
			//				|| Synergy480Gen9 || Synergy620Gen9 || Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9),
			//				//	dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || Apollo4200Gen9 || xl450gen9 || XL230aG9 || XL230KG10 || XL250aG9 || XL260AGen9 || XL270dG9 || XL730fG9Server || XL750fG9 || BL460CG10 || BL460CG10OEM || BL460CG9 || BL460CGEN9OEM || BL660CGen9 || DL120G9 || DL160G9 || DL180G9 || DL20G9 || DL20G9OEM || DL360Gen10 || DL360Gen10OEM || DL360G9 || DL360G9OEM || DL380Gen10 || DL380Gen10OEM || DL380G9OEM || DL385pGen8 || DL560Gen10 || DL560G9 || DL580G9 || DL60G9 || DL80G9 || ECML110G9 || MicroServerG10 || MicroServerGen8 || ML10Gen9 || ML110Gen9 || ML150Gen9 || ML30Gen9 || ML350Gen9 || M510Cartridge || M710xCartridge || Synergy480Gen10 || Synergy480Gen10OEM || Synergy480Gen9 || Synergy620Gen9 || Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM || Synergy480Gen9 || Synergy620Gen9 || Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9 ),   			//JEB ALM #114227 20/12/2017 
			//				OneViewManagementSoftware [ E5Y35AAE || E5Y45AAE || P8B26AAE ] = 0);
			//			}
			constraint Lustrerule1W {
				message: "If this option is selected, RHEL or CentOS SKU should be in the order.";
				body: if thisInst.selected(IntelProClass).filter(p => p.id >= "P9L65AAE" or p.id >= "P9L67AAE" or p.id >= "P9L68AAE" or p.id >= "P9L69AAE" or p.id >= "P9L70AAE").count > 0 then false;
			}
			constraint Lustrerule2W {
			/*RV 29-Sep-2020 PERT 20204 message: "Please contact the following internal email addresses listed below for help with reviewing the configuration and providing the FAN Override approval: <br>
						  Hou FAN Override <br>
						  HPE_IEEL_Mailbox <br> ";*/
				message: "This product is not available for new Lustre deployments. It can only be used for renewal of existing support customers <br>
						   Please contact the following internal email addresses listed below for help with reviewing the configuration and providing the FAN Override approval:<br>
							Hou FAN Override<br>
							HPE_IEEL_Mailbox<br>";
				body: if thisInst.selected(IntelProClass).filter(p => p.id >= "P9L65AAE" or p.id >= "P9L67AAE" or p.id >= "P9L68AAE" or p.id >= "P9L69AAE" or p.id >= "P9L70AAE").count > 0 then false;
			}
			constraint contractRequiredOneViewWarning {
				message: "End customer must have a signed Activation Key Agreement contract with HPE prior to purchasing the tracking license product. If there is not a signed contract, please reach to Volume Licensing Team: aka.request@hpe.com.";
				body: thisInst.ConvergedInfrastructureManagementSoftwareSubsystem.selected(OneViewManagementSoftware).filter(bPriorContract = true).count = 0;
			}
			constraint oneViewManagement_rule21 {
				message: "SKUs E5Y41A and P8B31A cannot be selected together in a single order.";
				body: dependency (OneViewManagementSoftware [ E5Y41A ] > 0, OneViewManagementSoftware [ P8B31A ] = 0);
			}
			constraint ovcomprule {
				message: "Must be ordered when R1N57A on same order";
				body:
				if thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "R1S75AAE" or x.id >= "R1S76AAE").count > 0 then thisInst.selected(CompableCloudTracking).filter(x => x.id >= "R1N57A").count > 0;
			}
			constraint oneviewManagementruleno2 {
				message: "Software products with E-LTU will require that an end-user e-mail address is collected for the order so that the products can be delivered to the customer in an e-mail URL.</br>
							- Customers should be made aware that their e-Delivery products will be delivered to them via e-email.</br>
							- When e-Delivery items are ordered by themselves, they will ship same day (within hours in a few regions).    If e-Delivery items are ordered with other physical hardware/software, then the e-Delivery items will ship after the first physical items ships (ship complete or not).</br>
							- If the customer wants to have the software e-delivery products ASAP while also ordering hardware/physical products, then e-Delivery products should be isolated in their own order-section</br>
							- Tax Paragraph will add the folloing message to the quote:
								USA only = Some Software which is delivered on physical media or resides within computer hardware can be enabled electronically.  Such enablement provides the appropriate password, keys or access code (Keys) as applicable.</br>
							Electronic delivery of these Keys and Software restore CDs do not qualify for state tax exemption in those states that would exempt electronically downloaded software products.";
				body: if thisInst.selected(OneViewManagementSoftware).filter(y => y.id >= "E5Y35AAE" or y.id >= "E5Y45AAE" or y.id >= "P8B26AAE" or y.id >= "K6F98AAE").count > 0 then false;
			}
			constraint oneViewManagementWarning {
				message: "HPE OneView includes the following components:</br>
				     		  Integrated Lights Out Advanced </br>
				     		  If OneView has been selected as a factory integrated option, then none of these individual components should be orderable as factory integrated option.";
				body: if thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "E5Y34A" or x.id >= "E5Y35AAE" or x.id >= "E5Y36A" or x.id >= "E5Y41A" or x.id >= "E5Y42A" or x.id >= "E5Y43A" or x.id >= "E5Y44A" or x.id >= "F6Q89A" or x.id
				>= "F6Q90A" or x.id >= "K6F98AAE").count > 0 then false;
			}
			constraint oneViewManagement_rl22_Warning {
				message: "You have selected an AKA Tracking license.   This is a special license and requires that you already have an AKA contract signed with HPE.<br>  
				
				An AKA contract is a 1, 2, or 3 years contract where customer commits to purchase a minimum of 100 licenses during the duration of contract .<br>
				 Upon execution of this contract  HPE delivers to customer the Activation Key(s) ( AKA key(s)) that will be used to activate the BD507A licenses.<br>
				The Activation Key(s) are intended for future purchases of license activations.  If you have already an active AKA contract please proceed with this. <br> 
				Please note that you will not receive any license entitlement to activate as you need to use the AKA key that you have received upon signing the agreement with HPE. <br>
				If you don’t have an AKA contract in place already please select a different SKU. <br> 
				If you are interested to discuss an AKA further  contract please contact aka.request@hpe.com";
				body: if thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "E5Y36A" or x.id >= "E5Y42A" or x.id >= "E5Y44A" or x.id >= "F6Q90A" or x.id >= "P8B25A").count > 0 then false;
			}
		}
		subsystem SolutionsSoftwareSubsystem {
			choice IssSolutionsSoftwareChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: IssSolutionsSoftware;
			}
			constraint bd824arequiresbd822a {
				message: "BD824A cannot be ordered without BD822A, and number of BD824A cannot exceed BD822A.";
				body:
				{
					val bd822a = thisInst.selected(IssSolutionsSoftware).filter(x => x.id >= "BD822A");
					val bd824a = thisInst.selected(IssSolutionsSoftware).filter(x => x.id >= "BD824A");
					bd824a.count = 0 or (bd822a.count > 0 and bd822a.count >= bd824a.count);
				}
			}
			constraint CloudEra24X7Licrule {
				message: "Cloudera does not support mixed licenses in the same cluster. Both 8x5 supported SKUs & 24x7 supported SKUs cannot be selected together.";
				body:
				{
					selected(IssSolutionsSoftware).noMix(sLic);
				}
			}
			constraint ScalityWarningRule22 {
				message: " If P8Y89AAE/P8Y90AAE selected then P8Z01AAE must be selected and the quantity of P8Z01AAE must be the same or larger than If P8Y89AAE/P8Y90AAE. Selection of P8Z01AAE will be required a FAN OVERRIDE and P8Z01AAE cannot be selected with P8&91AAE/P8Y92AAE.<br>
			   If P8Y91AAE/P8Y92AAE selected then P8Z03AAE must be selected and the quantity of P8Z03AAE must be the same or larger than If P8Y91AAE/P8Y92AAE. Selection of P8Z03AAE will be required a FAN OVERRIDE and P8Z03AAE cannot be selected with P8Y89AAE/P8Y90AAE.";
				body:
				{
					val scalitytotal = thisInst.selected(IssSolutionsSoftware).filter(y => y.id >= "P8Y89AAE" || y.id >= "P8Y90AAE" || y.id >= "P8Y91AAE" || y.id >= "P8Y92AAE" || y.id >= "P8Z01AAE" || y.id >= "P8Z03AAE").count;
					if scalitytotal > 0 then false else true;
				}
			}
			//RV 07-Nov-2019 PERT 17839
			constraint ScalityZenkoWarningRule26 {
				message: "If R4A82AAE/R4A83AAE or R4A86AAE/R4A87AAE are selected then R4A85AAE must be selected.";
				body:
				if thisInst.selected(IssSolutionsSoftware).filter(y => y.id >= "R4A82AAE" || y.id >= "R4A83AAE" || y.id >= "R4A86AAE" || y.id >= "R4A87AAE").count > 0 then thisInst.selected(IssSolutionsSoftware).filter(y => y.id >= "R4A85AAE").count
				> 0;
			}
			constraint CloudErarule5 {
				message: "Cloudera does not support mixed licenses in the same cluster. Both 8x5 supported SKUs & 24x7 supported SKUs cannot be selected together.";
				body: if thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P9V12AAE" or p.id >= "P9V14AAE" or p.id >= "P9V16AAE").count > 0 and thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P9V13AAE" or p.id >= "P9V15AAE" or
				p.id >= "P9V17AAE" or p.id >= "P9V18AAE" or p.id >= "P9V19AAE" or p.id >= "P9V20AAE").count > 0 then false;
			}
			constraint CloudErarule26info {
				message: "For up to 16 cores, 128 GB (16 CCU) and 48 TB storage per Node.  Add variable adder per CCU and TB if applicable.";
				body:
				if thisInst.selected(IssSolutionsSoftware).filter(y => y.id >= "G7M29AAE" || y.id >= "G7M30AAE" || y.id >= "JP408AAE" || y.id >= "P9A43AAE" || y.id >= "P9A44AAE").count > 0 then false;
			}
		}
		subsystem InsightSoftwareSubsystem {
		//insight software
		// vp 20141022 Add Tracking License choice to determine whether Tracking License options should be available or not 
			choice TrackingLicenseChoice {
				optional: true;
				targetClass: TrackingLicenseMethod;
				choiceType: single_select;
			}
			choice BladeManagementSoftwareChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: BladeManagementSoftware;
			}
			choice InsightFoundationChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: InsightFoundation;
			}
			choice InsightOrchestrationChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: InsightOrchestration;
			}
			choice BladeSystemMatrixSoftwareChoice { //make location array with no upper bound
				optional: true;
				targetClass: BladeSystemMatrixSoftware;
				choiceType: single_select;
				title: "Blade System Matrix Software";
			}
			choice InsightControlChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: InsightControl;
			}
			choice InsightControlLinuxArray {
				optional: true;
				choiceType: multi_select;
				targetClass: InsightControlLinux;
			}
			choice InsightDynamicsChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: InsightDynamics;
			}
			choice InsightControlLinuxUpgradeArray {
				optional: true;
				choiceType: multi_select;
				targetClass: InsightControlLinuxUpgrades;
			}
			choice VirtualConnectEnterpriseManagerChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: VirtualConnectEnterpriseManager;
			}
			choice ProliantEssentialFoundationPackChoice {
				optional: true;
				targetClass: ProliantEssentialFoundationPack;
				choiceType: single_select;
				title: "Proliant Essential Foundation Pack";
			}
			ifEffective KES_VAL {
			}
			otherwise {
				constraint FIOskunotavailBTOmodeloneview { //FIO not avaialble for BTO base model
					message: "InsightSW FIO sku cannot be selected for BTO model";
					body:
					//dependency(DL20G9_4SFF[823556-291||823556-AA1||823556-B21||823559-291||823559-AA1||823559-B21||823562-291||823562-AA1||823562-B21||829889-291||829889-B21||871428-291||829889-B21||871428-AA1||871428-B21||871429-291||871429-AA1||871429-B21||871430-AA1||871430-B21||871431-B21],cs300software[C6N36A]=0);//ANV_ALM_115737
					dependency (DL20G9_4SFF [ 871431-B21 || 823562-291 ], cs300software [ C6N36A ] = 0); //ANV_ALM_115737
					dependency (DL20G9_4SFF [ 871430-AA1 || 871430-B21 || 823559-291 ], cs300software [ C6N36A ] = 0);
					dependency (DL20G9_NHP_2LFF [ 829889-291 || 871428-291 || 871428-AA1 || 871428-B21 || 829889-B21 ], cs300software [ C6N36A ] = 0);
					dependency (DL20G9_2LFF [ 871429-291 || 871429-AA1 || 871429-B21 || 823556-291 ], cs300software [ C6N36A ] = 0);
				}
			}
			// vp 20141023 Flex SW options are not supported for EZC.
			constraint noFlexSWforEZCInsight {
				message: "Flex Software options are not supported for EZC.";
				body: dependency (targetEnv ("ezc", "ipcs"), InsightControl [ /*C6N28A ||*/ G2E82A ] = 0 && InsightControlUpgrade [ 464063-B21 || C6N38A ] = 0 && IntegratedLightsOut [ /*512486-B21 ||*/ 512490-B21 || BD503A /*|| BD506A  */ || BD776A
				|| BD776AAE || BD778A || BD778AAE ] = 0 && MatrixOperatingEnvironment [ TC223B || TC235B ] = 0 && MatrixOperatingEnvironmentUpgrades [ TC229B ] = 0 && VirtualConnectEnterpriseManager [ 459865-B21 || 459868-B21 ] = 0);
			}
			constraint bladeMngmentSoftwareCTO {
				message: "CTO models have a maximum selection of 2 for Blade Management Software.";
				body: dependency (! ProliantServers [ BTO ], BladeManagementSoftware <= 2);
			}
			constraint insightControlMax1CTO {
				message: "CTO models have a maximum selection of 1 Insight Control";
				body: dependency (! ProliantServers [ BTO ], InsightControl < 2);
			}
			constraint insightControlLinuxCTO {
				message: "CTO models have a maximum selection of 1 Insight Control for Linux software.";
				body: dependency (! ProliantServers [ BTO ], InsightControlLinux < 2);
			}
			constraint insightControlLinuxUpgradesCTO {
				message: "CTO models have a maximum selection of 1 Insight Control for Linux Upgrade software.";
				body: dependency (! ProliantServers [ BTO ], InsightControlLinuxUpgrades < 2);
			}
			constraint insightVirtualConnectEnterpriseManager {
				message: "Only BTO models can select Insight Virtual Connect Enterprise Manager software.";
				body: dependency (ProliantServers [ CTO ], ! VirtualConnectEnterpriseManager);
			}
			constraint insightDynamicsCTO {
				message: "CTO models have a maximum selection of 1 Insight Dynamics software.";
				body: dependency (! ProliantServers [ BTO ], InsightDynamics < 2);
			}
			constraint insightOrchestrationCTO {
				message: "CTO models have a maximum selection of 1 Insight Orchestration software.";
				body: dependency (! ProliantServers [ BTO ], InsightOrchestration < 2);
			}
			constraint warningInsightOrchestration {
				message: " This sku requires one of the 'Insight Dynamics - Virtual Server Environment' skus in order to work properly.";
				body: thisInst.selected(InsightOrchestration).count = 0;
			}
			//not on ML350g6 or BL460g7/BL685G7
			constraint bladeMatrixRequire {
				message: "Each ISS BLc7000 BladeSystem Matrix Starter Kit (535888-B21 and 627806-B21) requires the (TC637A) HP BL Matrix SW 16-Svr 3y 24x7 Supp Insight Software SKU on the same order.";
				body: dependency (RootProductClass [ 535888-B21 || 627806-B21 ], BladeSystemMatrixSoftware [ TC637A ]);
			}
			//not on ML350g6 or BL460g7/BL685G7
			constraint bladeMatrixRequireCount {
				message: "A max of 1 instance of TC637A should be ordered for each 535888-B21 and 627806-B21.";
				body: restriction (RootProductClass [ 535888-B21 || 627806-B21 ] = BladeSystemMatrixSoftware [ TC637A ]);
			}
			constraint bladeMatrixRequire1yr {
				message: "Each ISS BLc7000 BladeSystem Matrix Starter Kit (644499-B21 and 644503-B21) requires the (TE980A) HP BL Matrix SW 16-Svr 1y 24x7 Supp Insight Software SKU on the same order.";
				body: dependency (RootProductClass [ 644499-B21 || 644503-B21 ], BladeSystemMatrixSoftware [ TE980A ]);
			}
			constraint bladeMatrixRequireCount1yr {
				message: "A max of 1 instance of TE980A should be ordered for each 644499-B21 and 644503-B21.";
				body: restriction (RootProductClass [ 644499-B21 || 644503-B21 ] = BladeSystemMatrixSoftware [ TE980A ]);
			}
			constraint insightControlForLinux {
				message: "Insight Control includes the following components:  Integrated Lights Out Advanced, Insight Virtual Machine Management, Insight Power Manager.";
				body:
				thisInst.InsightSoftwareSubsystem.selected(InsightControlLinux).filter(b => b.id = sProducts).count = 0;
			}
			constraint insightWarning {
				message: "It is recommended to select electronic or flex license types when requiring 5 or more licenses.  For more info see:  http://bizsupport1.austin.hp.com/bc/docs/support/SupportManual/c02478425/c02478425.pdf";
				body: sum(thisInst.InsightSoftwareSubsystem.selected(InsightSoftware).filterByAttribute(bGreaterThanFiveLicenses, true), 1) <= 5;
			}
			constraint contractRequiredInsightControl { //junit
				message: "Customer must have a signed contract with HP prior to purchasing the tracking license product.";
				body:
				thisInst.InsightSoftwareSubsystem.selected(InsightControl).filter(bPriorContract = true).count = 0;
			}
			constraint contractRequiredIntegratedLightsOut { //junit
				message: "Customer must have a signed contract with HP prior to purchasing the tracking license product.";
				body: thisInst.InsightSoftwareSubsystem.selected(IntegratedLightsOut).filter(bPriorContract = true).count = 0;
			}
			constraint contractRequiredMatrixOperatingEnvironment { //junit
				message: "Customer must have a signed contract with HP prior to purchasing the tracking license product.";
				body: thisInst.InsightSoftwareSubsystem.selected(MatrixOperatingEnvironment).filter(bPriorContract = true).count = 0;
			}
			constraint eSDNextCannotBeWithPhysical {
				message: "eSD Next SKUs cannot be configured to the same hardware as a physical SW Sku.";
				body: thisInst.selected(BladeManagementSoftware).count = (thisInst.selected(BladeManagementSoftware).filter(y => y.id >= "C6N32ABE" || y.id >= "C6N33ABE").count) || (thisInst.selected(BladeManagementSoftware).filter(y => y.id >=
				"C6N32ABE" || y.id >= "C6N33ABE").count = 0);
				thisInst.selected(InsightControl).count = (thisInst.selected(InsightControl).filter(y => y.id >= "C6N28ABE" || y.id >= "C6N36ABE").count) || (thisInst.selected(InsightControl).filter(y => y.id >= "C6N28ABE" || y.id >=
				"C6N36ABE").count = 0);
				thisInst.selected(VirtualConnectEnterpriseManager).count = (thisInst.selected(VirtualConnectEnterpriseManager).filter(y => y.id >= "T9094ABE" || y.id >= "T9095ABE").count) ||
				(thisInst.selected(VirtualConnectEnterpriseManager).filter(y => y.id >= "T9094ABE" || y.id >= "T9095ABE").count = 0);
				thisInst.selected(IntegratedLightsOut).count = (thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "E6U59ABE" || y.id >= "E6U60ABE" || y.id >= "E6U61ABE" || y.id >= "E6U62ABE" || y.id >= "E6U63ABE" || y.id >=
				"E6U64ABE").count) || (thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "E6U59ABE" || y.id >= "E6U60ABE" || y.id >= "E6U61ABE" || y.id >= "E6U62ABE" || y.id >= "E6U63ABE" || y.id >= "E6U64ABE").count = 0);
			}
			constraint bladeMgtWarning {
				message:
				"This Insight Dynamics product includes the following components: Insight Control,  Insight Control server deployment,  Insight Control server deployment, Insight Capacity Advisor, Insight Orchestration, Insight Recovery,  Insight Virtual Machine Management, Insight Power Manager, Insight Server Migration.  If Insight Dynamics has been selected as a factory integrated option, then none of these individual components should be orderable as factory integrated option.";
				body: restriction (BladeManagementSoftware [ TC226BAE || TC227BAE ] = 0);
			}
			//PM Adding warning for Insight Dynamics Choice Software 02/23/2015
			constraint insightDynamicsChoiceSoftwareWarning {
				message:
				"This Insight Dynamics product includes the following components: Insight Control,  Insight Control server deployment,  Integrated Lights Out Advanced, Insight Capacity Advisor, Insight Orchestration, Insight Recovery,  Insight Virtual Machine Management, Insight Power Manager, Insight Server Migration.  If Insight Dynamics has been selected as a factory integrated option, then none of these individual components should be orderable as factory integrated option.";
				body: restriction (MatrixOperatingEnvironment [ TC222B || TC223B || TC224B || TC225BAE || TC296AAE ] = 0);
			}
			//PM Adding warning for Insight Dynamics Choice Software 03/10/2015
			constraint matrixOpEnvUpgradesWarning {
				message:
				"This Insight Dynamics product includes the following components: Insight Capacity Advisor,  Insight Orchestration, Insight Recovery,  Insight Virtual Machine Management.  If Insight Dynamics has been selected as a factory integrated option, then none of these individual components should be orderable as factory integrated option.";
				body: restriction (MatrixOperatingEnvironmentUpgrades [ TC228B || TC229B || TC230B || TC231BAE ] = 0);
			}
			ifEffective KES_VAL {
				constraint hideOCCProducts {
					message: "";
					body: dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || XL230KG10 || BL460CG10 || BL460CG10OEM || DL360Gen10 || DL360Gen10OEM || DL380Gen10 || DL380Gen10OEM || DL560Gen10 || MicroServerG10 || M510Cartridge || M710xCartridge ||
					Synergy480Gen10 || Synergy480Gen10OEM || Synergy660Gen10 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM), InsightControl [ Q6M69AAE ] = 0);
				}
			}
			otherwise {
				constraint hideOCCProducts {
					message: "";
					body: dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || Apollo4200Gen9 || xl450gen9 || XL230aG9 || XL230KG10 || XL250aG9 || XL260AGen9 || XL270dG9 || XL730fG9Server || XL750fG9 || BL460CG10 || BL460CG10OEM || BL460CG9 ||
					BL460CGEN9OEM || BL660CGen9 || DL120G9 || DL160G9 || DL180G9 || DL20G9 || DL20G9OEM || DL360Gen10 || DL360Gen10OEM || DL360G9 || DL360G9OEM || DL380Gen10 || DL380Gen10OEM || DL380G9 || DL380G9OEM || DL385pGen8 || DL560Gen10 ||
					DL560G9 || DL580G9 || DL60G9 || DL80G9 || ECML110G9 || MicroServerG10 || MicroServerGen8 || ML10Gen9 || ML110Gen9 || ML150Gen9 || ML30Gen9 || ML350Gen9 || M510Cartridge || M710xCartridge || Synergy480Gen10 || Synergy480Gen10OEM ||
					Synergy480Gen9 || Synergy620Gen9 || Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM || Synergy480Gen9 || Synergy620Gen9 ||
					Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9), InsightControl [ Q6M69AAE ] = 0);
				}
			}
		}
		subsystem ThreePOSoftwareSubsystem {
			choice ThreePODropboxSoftwareChoice {
				optional: true;
				choiceType: multi_select;
				//targetClass: ThreePOSoftware;
				targetClass: DropboxSoftware;
			}
			locationArray ThreePODockerServerSoftwareLocationArray {
			//fillerClasses: ThreePOSoftware;
				fillerClasses: DockerServerBundleSoftware;
				rows: 10;
			}
			locationArray ThreePODockerEngineSoftwareLocationArray {
			//fillerClasses: ThreePOSoftware;
				fillerClasses: DockerCSEngineSoftware;
				//rows: 99;commented for ANV_ALM106215
				rows: 99; //GSB ALM 107838

			}
			ifEffective KES_VAL {
			}
			otherwise {
				constraint FIOskunotavailBTOmodel { //FIO not avaialble for BTO base model
					message: "Clear OS FIO cannot be selected for BTO model";
					body:
					//dependency(DL20G9_4SFF[823556-291||823556-AA1||823556-B21||823559-291||823559-AA1||823559-B21||823562-291||823562-AA1||823562-B21||829889-291||829889-B21||871428-291||871428-AA1||829889-B21||871428-B21||871429-291||871429-AA1||871429-B21||871430-AA1||871430-B21||871431-B21],DropboxSoftware[874549-B21]=0);//ANV_ALM_115737
					dependency (DL20G9_4SFF [ 871431-B21 || 823562-291 ], DropboxSoftware [ 874549-B21 ] = 0); //ANV_ALM_115737
					dependency (DL20G9_4SFF [ 871430-AA1 || 871430-B21 || 823559-291 ], DropboxSoftware [ 874549-B21 ] = 0);
					dependency (DL20G9_NHP_2LFF [ 829889-291 || 871428-291 || 871428-AA1 || 871428-B21 || 829889-B21 ], DropboxSoftware [ 874549-B21 ] = 0);
					dependency (DL20G9_2LFF [ 871429-291 || 871429-AA1 || 871429-B21 || 823556-291 ], DropboxSoftware [ 874549-B21 ] = 0);
				}
			}
			//ANV software rule -perch launch
			//			ifEffective ANV_PPM_73047 {
			//				constraint clearOSwithAHCI {
			//					message: "ClearOS is selected then the AHCI option should also be selected.";
			//					body: dependency (DTInternalM2Storage1 [ PCIE_AHCI ] > 0, DropboxSoftware [ 874549-B21 ] > 0);
			//				}
			//				constraint noClearOSwithML110G9 {
			//					message: "ClearOS cannot be selected with ML110 Gen9 with 140W CPU and 8SFF drive cage.";
			//
			//					//if thisConfig.getInstancesOfModel("ML110Gen9").count > 0 && thisInst.selected(ProliantProcessor).filter(x => x.iNumWattage >= "140").count>0 && thisInst.selected(ProliantDriveCage).filter(x => x.iNumHarddiskBays >= "8").count>0 then thisInst.selected(DropboxSoftware).filter(x => x.id >= "874549-B21").count=0 else "";
			//					body: dependency (((ML110Gen9 > 0) && (ProliantProcessor [ iNumWattage = 140 ] > 0) && (ProliantDriveCage [ iNumHarddiskBays = 8 ] > 0)), DropboxSoftware [ 874549-B21 ] = 0);
			//				}
			//			} //end of ANV
			//Rule #1
			constraint ThirdPartySoftRule20W {
				message:
				" Mesosphere DC/OS deployments are complex so the HPE/Mesos OEM agreement requires Mesosphere DC/OS subscriptions to be sold with the HPE Cloud Native Container Service (H5UP8A1) in order to ensure that the SW is successfully integrated into customer environments.";
				body: if thisInst.selected(DropboxSoftware).filter(p => p.id >= "Q1N37AAE" or p.id >= "Q1N38AAE" or p.id >= "Q1P46AAE").count > 0 then false;
			}
			constraint ThirdPartySoftRule20W_bluenote_rule1 {
				message:
				"Blue Note: Mesosphere DC/OS deployments are complex so the HPE/Mesos OEM agreement requires Mesosphere DC/OS subscriptions to be sold with the HPE Cloud Native Container Service (H5UP8A1) in order to ensure that the SW is successfully integrated into customer environments.";
				body: if thisInst.selected(DropboxSoftware).filter(p => p.id >= "Q1N37AAE" or p.id >= "Q1N38AAE" or p.id >= "Q1P46AAE").count > 0 then false;
			}
			constraint max99 {
				message: "Max 99 can be ordered";
				body: //restriction(ThreePOSoftware[Q0J89AAE or Q0J90AAE or Q0J91AAE or Q0J92AAE] <= 99);
				restriction (DockerCSEngineSoftware [ Q0J89AAE || Q0J90AAE || Q0J91AAE || Q0J92AAE ] <= 99);
			}
			//MS removed for ALM: 117934
			constraint dockerEnginesInstalled {
				message: "Must have Docker Engines installed Q0J89AAE or Q0J90AAE or Q0J91AAE or Q0J92AAE";
				body:
				{
					val softwareList = "Q0K91AAE Q0K92AAE Q0K97AAE Q0K98AAE Q0K99AAE Q0L00AAE";
					val dockerEngineList = "Q0J89AAE Q0J90AAE Q0J91AAE Q0J92AAE";
					val countSoftwareList = thisInst.selected(DockerCSEngineSoftware).filter(x => split(x.id, "#").get(0) <= softwareList).count;
					val countDockerEngineList = thisInst.selected(DockerCSEngineSoftware).filter(x => split(x.id, "#").get(0) <= dockerEngineList).count;
					if countSoftwareList > 0 then countDockerEngineList > 0;
				}
			}
			constraint dtrOnly {
				message: "DTR only. Does not include any DDC functionality";
				body:
				{
					val softwareList = "Q0K89AAE Q0K90AAE Q0K95AAE Q0K96AAE";
					val countSoftwareList = thisInst.selected(DockerCSEngineSoftware).filter(x => split(x.id, "#").get(0) <= softwareList).count;
					if countSoftwareList > 0 then false;
				}
			}
			constraint Subisonlyforonenode {
				message: "Subscription is for only one node, additional nodes require additional subscriptions.";
				body: if thisInst.selected(DropboxSoftware).filter(x => x.id >= "Q1N37AAE" or x.id >= "Q1N38AAE").count > 0 then false else true;
			}
			constraint Trainingisforoneseat {
				message: "Training is for one seat, additional seats require purchasing of additional training.";
				body: if thisInst.selected(DropboxSoftware).filter(x => x.id >= "Q1P46AAE").count > 0 then false else true;
			}
			constraint maxtenpercatridge {
				message: "This Docker Engine Bundle SKU can be maximum of 10 per Cartridge.";
				body: if thisInst.selected(DockerServerBundleSoftware).filter(x => x.id >= "Q0J89AAE" or x.id >= "Q0J88AAE" or x.id >= "Q0J93AAE" or x.id >= "Q0J94AAE").count > 0 then false else true;
			}
			constraint Software3PO_Rule14 {
				message: "A hard drive must be present for the ClearOS image to be installed.";
				body:
				{
					val dropboxSoftwareList = "Q7G68AAE Q7G69AAE Q7G70AAE Q7G71AAE Q7G72AAE Q7G73AAE";
					val countDropboxSoftwareList = thisInst.selected(DropboxSoftware).filter(x => split(x.id, "#").get(0) <= dropboxSoftwareList).count;
					val countOtherSoftwareList = thisInst.selected(DockerCSEngineSoftware).filter(x => x.id >= "Q7G74AAE").count;
					if((countDropboxSoftwareList > 0 || countOtherSoftwareList > 0) && thisInst.selected(ProliantHardDrive).count < 1) then false else true;
				}
			}
			constraint noStandAloneProduct {
				message: "Can not be ordered as stand alone product, will always be ordered with the server";
				body:
				if thisInst.selected(DockerServerBundleSoftware).filter(x => x.id >= "Q0J87AAE" or x.id >= "Q0J88AAE" or x.id >= "Q0J93AAE" or x.id >= "Q0J94AAE").count > 0 then count(thisConfig.getInstancesOfModel("BL460CG9")) > 0 or
				count(thisConfig.getInstancesOfModel("DL360G9")) > 0 or count(thisConfig.getInstancesOfModel("DL360G9_4LFF")) > 0 or count(thisConfig.getInstancesOfModel("DL360G9_8SFF")) > 0 or count(thisConfig.getInstancesOfModel("DL360G9_C")) > 0
				or count(thisConfig.getInstancesOfModel("DL380G9")) > 0 or count(thisConfig.getInstancesOfModel("DL380G9_4LFF")) > 0 or count(thisConfig.getInstancesOfModel("DL380G9_8SFF")) > 0 or
				count(thisConfig.getInstancesOfModel("DL380G9_24SFF")) > 0 or count(thisConfig.getInstancesOfModel("DL380G9_NVMe_8SFF")) > 0 or count(thisConfig.getInstancesOfModel("MoonshotCartridgeServer")) > 0;

				//message: "Can not be ordered as stand alone product, will always be ordered with the server";//order changed to constraint to work-ANV
				//body:
				//if  count(thisConfig.getInstancesOfModel("BL460CG9")) > 0 or
				//count(thisConfig.getInstancesOfModel("DL360G9")) > 0 or count(thisConfig.getInstancesOfModel("DL360G9_4LFF")) > 0 or count(thisConfig.getInstancesOfModel("DL360G9_8SFF")) > 0 or count(thisConfig.getInstancesOfModel("DL360G9_C")) > 0
				//or count(thisConfig.getInstancesOfModel("DL380G9")) > 0 or count(thisConfig.getInstancesOfModel("DL380G9_4LFF")) > 0 or count(thisConfig.getInstancesOfModel("DL380G9_8SFF")) > 0 or
				//count(thisConfig.getInstancesOfModel("DL380G9_24SFF")) > 0 or count(thisConfig.getInstancesOfModel("DL380G9_NVMe_8SFF")) > 0 or count(thisConfig.getInstancesOfModel("MoonshotCartridgeServer")) > 0 then count(thisInst.selected("Q0J87AAE"))>=1 and count(thisInst.selected("Q0J88AAE"))>=1 and count(thisInst.selected("Q0J93AAE"))>=1 and count(thisInst.selected("Q0J94AAE"))>=1  ;

			}
			ifEffective KES_VAL {
				constraint maxten {
					message: "Max 10 can be ordered per Moonshot Cartridge";
					body: dependency (~ (Edgeline1000Chassis || Edgeline4000Chassis || MoonshotCartridgeServer || Moonshot1500), DockerServerBundleSoftware [ Q0J87AAE or Q0J88AAE or Q0J93AAE or Q0J94AAE ] <= 10);
				}
			}
			otherwise {
				constraint maxten {
					message: "Max 10 can be ordered per Moonshot Cartridge";
					body: dependency (~ (Edgeline1000Chassis || Edgeline4000Chassis || MoonshotCartridgeServer || Moonshot1500 || XL730fG9Server || XL750fG9), DockerServerBundleSoftware [ Q0J87AAE or Q0J88AAE or Q0J93AAE or Q0J94AAE ] <= 10);
				}
			}
			constraint twocpusocket {
				message: "Supports 2 CPU Sockets.";
				body: if thisInst.selected(DockerServerBundleSoftware).filter(x => x.id >= "Q0J89AAE" or x.id >= "Q0J88AAE" or x.id >= "Q0J93AAE" or x.id >= "Q0J94AAE").count > 0 then false else true;
			}
			constraint twocpusocket2 {
				message: "Supports 2 CPU Sockets.";
				body: if thisInst.selected(DockerCSEngineSoftware).filter(x => x.id >= "Q0J89AAE" or x.id >= "Q0J90AAE" or x.id >= "Q0J91AAE" or x.id >= "Q0J92AAE").count > 0 then false else true;
			}
			constraint Software3PO_14 {
				message: "A hard drive must be present for the ClearOS image to be installed.";
				body:
				//if thisInst.selected(DropboxSoftware).filter(y =>  y.id >= "874549-B21").count > 0 then false else true;//DVE_PPM_71965
				if thisInst.selected(ProliantHardDrive).count = 0 and thisInst.selected(DropboxSoftware).filter(y => y.id >= "874549-B21").count > 0 then false else true; //DVE_PPM_71965

			}
			constraint Software3PO_15 {
			//message: "ClearOS does not support the S100i controller.  ClearOS software RAID (ships with ClearOS) should be used instead.";//HPN ALM 108041
				message: "ClearOS does not support the S100i and B140i controller. Please use another HPE controller or use ClearOS software RAID (ships with ClearOS) instead."; // RVL - PPM 74376 - Change Rule Text 
				body:
				//{
				//RVL - PPM - 73817
				//val softwareList = "874549-B21 Q7G68AAE Q7G69AAE Q7G70AAE Q7G71AAE Q7G72AAE Q7G73AAE";
				//val countSoftwareList = thisInst.selected(DropboxSoftware).filter(x => split(x.id, "#").get(0) <= softwareList).count;
				//if(thisInst.selected(DropboxSoftware).filter(y => y.id >= "874549-B21").count > 0 || countSoftwareList > 0) then false else true; //DVE_PPM_71965
				//MS for ALM: 129083
				dependency (DropboxSoftware [ 874549-B21 || Q7G68AAE || Q7G69AAE || Q7G70AAE || Q7G71AAE || Q7G72AAE || Q7G73AAE ], EmbededControllerState [ 784308-B21 ] = 0);

				//}

			}
			part addShipBrtTrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "software3poFunc_16";
			}
			constraint Software3PO {
				message: "Software (874549-B21) should be preselected whenever a HDD is selected.";
				body:
				//						if (count(thisConfig.getInstancesOfModel("ML110Gen9")) > 0 or count(thisConfig.getInstancesOfModel("DL20G9")) > 0 or 
				//						count(thisConfig.getInstancesOfModel("ML30Gen9")) > 0) and thisInst.selected(ProliantHardDrive).filter(x => x.tDriveSSD >= "nonSSD").count > 0 and 
				//						thisInst.selected(DropboxSoftware).filter(y =>  y.id >= "874549-B21").count > 0 then false else true;
				if(count(thisConfig.getInstancesOfModel("ML110Gen9")) > 0 or count(thisConfig.getInstancesOfModel("DL20G9")) > 0 or count(thisConfig.getInstancesOfModel("ML30Gen9")) > 0) and thisInst.selected(ProliantHardDrive).count > 0 and
				thisInst.selected(DropboxSoftware).filter(y => y.id >= "874549-B21").count > 0 then false else true;
			}
			constraint Software3PO_21 {
				message: "ClearOS Subscriptions may be sold separately, but for any supported ProLiant 10, 100, and 300 series Gen9 and Gen10 server as well as the MicroServer Gen10 (reference www.hpe.com/servers/clearoscert).";
				body:
				{
					val softwareList = "Q7G68AAE Q7G69AAE Q7G70AAE Q7G71AAE Q7G72AAE Q7G73AAE";
					val countSoftwareList = thisInst.selected(DropboxSoftware).filter(x => split(x.id, "#").get(0) <= softwareList).count;
					if countSoftwareList > 0 then false else true;
				}
			}
			constraint ClearOS_rule8 {
				message: "This option 874549-B21 cannot be selected with 758959-B22 - HPE Legacy FIO Mode Setting";
				body: if thisInst.selected(DropboxSoftware).filter(x => x.id >= "874549-B21").count > 0 and thisInst.selected(ProliantBIOSMode).filter(x => x.id >= "758959-B22").count > 0 then false;
			}
		}
		subsystem VMWareSubsystem { //vmware	
			locationArray VMWareCoreEditionsChoice {
				fillerClasses: VMWareCoreEditions;
				rows: 10;
			}
			constraint licenseWarning { //junit
				message: "This license is for one processor and Customers must order as many licenses as there are processors (sockets) that will be populated for the server.";
				body: dependency (VMWareSoftware [ bLicensePerProcessor = true ], Processor = VMWareSoftware [ bLicensePerProcessor = true ]);
			}
			//			constraint productWarning {
			//				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
			//				body:
			//				thisInst.selected(VMWareSoftware).filter(bVMWareCertified = true).count = 0;
			//			}	
			//Shashwat Bhattarai (12/17/2013)
			//CPT PPM 70219 Added virtualization rule #1
			constraint warningGreekvRealizeRule3 {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body: if thisInst.selected(VMwareVSAN).filter(y => y.id >= "P3Q68B" || y.id >= "P3Q68BAE" || y.id >= "P3Q69B" || y.id >= "P3Q69BAE" || y.id >= "P3Q70BAE" || y.id >= "Q0E31A" || y.id >= "Q0E31AAE" || y.id >= "Q0E32A" || y.id >=
				"Q0E32AAE" || y.id >= "Q0E33A" || y.id >= "Q0E33AAE" || y.id >= "Q0E34A" || y.id >= "Q0E34AAE" || y.id >= "Q0E35A" || y.id >= "Q0E35AAE" || y.id >= "Q0E36A" || y.id >= "Q0E36AAE" || y.id >= "Q1P49A" || y.id >= "Q1P49AAE" || y.id >=
				"Q1P50A" || y.id >= "Q1P50AAE" || y.id >= "Q1P51A" || y.id >= "Q1P51AAE" || y.id >= "Q2C29A" || y.id >= "Q2C29AAE" || y.id >= "Q2C30A" || y.id >= "Q2C30AAE" || y.id >= "Q2C31A" || y.id >= "Q2C31AAE" || y.id >= "Q8U60A" || y.id >=
				"Q8U60AAE" || y.id >= "Q8U61A" || y.id >= "Q8U61AAE" || y.id >= "Q8U62A" || y.id >= "Q8U62AAE" || y.id >= "Q8U63A" || y.id >= "Q8U63AAE" || y.id >= "Q8U64A" || y.id >= "Q8U64AAE" || y.id >= "Q8U65A" || y.id >= "Q8U65AAE" || y.id >=
				"Q8U66A" || y.id >= "Q8U66AAE" || y.id >= "Q8U67A" || y.id >= "Q8U67AAE" || y.id >= "Q8U68A" || y.id >= "Q8U68AAE" || y.id = "Q9L12A" || y.id = "Q9L12AAE" || y.id = "Q9L13A" || y.id = "Q9L13AAE" || y.id = "Q9L14A" || y.id = "Q9L14AAE"
				|| y.id >= "Q9R94AAE" || y.id >= "Q9R95AAE" || y.id >= "Q9R96AAE" || y.id >= "R0Y26A" || y.id >= "R0Y26AAE" || y.id >= "R0Y27A" || y.id >= "R0Y27AAE" || y.id >= "R0Y28A" || y.id >= "R0Y28AAE" || y.id >= "R0Y29A" || y.id >= "R0Y29AAE"
				|| y.id >= "R0Y30A" || y.id >= "R0Y30AAE" || y.id >= "R0Y31A" || y.id >= "R0Y31AAE" || y.id >= "R0Y32A" || y.id >= "R0Y32AAE" || y.id >= "R0Y33A" || y.id >= "R0Y33AAE" || y.id >= "R0Y34A" || y.id >= "R0Y34AAE" || y.id >= "R0Y35A" ||
				y.id >= "R0Y35AAE" || y.id >= "R0Y39A" || y.id >= "R0Y39AAE" || y.id >= "R0Y40A" || y.id >= "R0Y40AAE" || y.id >= "R0Y42AAE" || y.id >= "R0Y43AAE" || y.id >= "R0Y44AAE" || y.id >= "R0Y45AAE" || y.id >= "R0Y46AAE" || y.id >= "R0Y47AAE"
				|| y.id >= "R1T79A" || y.id >= "R1T79AAE" || y.id >= "R1T80AAE" || y.id >= "R1T81AAE").count > 0 then false else true;
				if thisInst.selected(VMwareVSAN).filter(y => y.id >= "R9L81AAE" || y.id >= "R9L82AAE" || y.id >= "R9L83AAE" || y.id >= "R9L84AAE" || y.id >= "R9L85A" || y.id >= "R9L85AAE" || y.id >= "R9L86A" || y.id >= "R9L86AAE" || y.id >=
				"R9L87AAE" || y.id >= "R9L88AAE" || y.id >= "R9L89AAE" || y.id >= "R9L90AAE" || y.id >= "R9L91AAE").count > 0 then false else true;
				// NL added for Pert 14484, 20-Dec-2018 , // NL modified for an existing issue 	//SE - Added NPI SW sku's for PERT 24866		14-Feb-2022

			}
			constraint warningGreekvRealizeRule3a {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body: if thisInst.selected(VMwareVSAN).filter(y => y.id >= "Q0E37BAE" || y.id >= "Q0E38BAE" || y.id >= "Q0E39BAE").count > 0 then false else true; // NL modified for an existing rule issue 

			}
			//NL fixed with an existing rule issue, 02-May-2019
			constraint vCenterSRMRule16W {
				message: " HPE Customers are advised to check the quickspecs (http://h18004.www1.hp.com/products/quickspecs/12307_div/12307_div.html) for the entitlements per license.";
				body: if thisInst.selected(VMWareVCenterSrmProducts).filter(p => p.id >= "BD534A" or p.id >= "BD534AAE" or p.id >= "BD535A" or p.id >= "BD535AAE" or p.id >= "BD536AAE" or p.id >= "BD748A" or p.id >= "BD748AAE" or p.id >= "BD749A" or
				p.id >= "BD749AAE" or p.id >= "BD750A" or p.id >= "BD750AAE" or p.id >= "BD751A" or p.id >= "BD751AAE" or p.id >= "BD762AAE" or p.id >= "BD763AAE").count > 0 then false;
			}
			constraint resellerrule {
				message: "Reseller Option Kit is ONLY available for HPE Channel Partners so it can be resold. DON'T use this product if you're HPE Sales or Direct Sales, as HPE will be in violation of Licensing Agreement.";
				body: if thisInst.selected(VMWareSoftware).filter(y => y.id >= "P00487-041" || y.id >= "P00487-051" || y.id >= "P00487-061" || y.id >= "P00487-071" || y.id >= "P00487-051" || y.id >= "P00487-131" || y.id >= "P00487-141" || y.id >=
				"P00487-201" || y.id >= "P00487-221" || y.id >= "P00487-241" || y.id >= "P00487-251" || y.id >= "P00487-291" || y.id >= "P00487-331" || y.id >= "P00487-AA1" || y.id >= "P00487-AB1" || y.id >= "P00487-AD1" || y.id >= "P00487-B21" ||
				y.id >= "P00487-B71").count > 0 then false else true;
			}
			constraint associationWarning {
				message: "All Uplift services or Support Services associated with this VMware order must be purchased within 30-days."; //FR 4-April-16 [PPM 68613]-  TS Care Pack Rebranding
				body: restriction (! VMWareSoftware [ BC464A || BCB464AAE || TD439AAE ]);
			}
			constraint vMware2StepProcess {
				message:
				"Upgrade is two step process. ThinApp Client -> View Premier (1st step) . View Premier -> Horizon View product (2nd step). Both SKUs need to be bought for full upgrade. These SKUs cannot be bought individually,only as a two SKU bundle.";
				body: dependency (VMWareClientVirtualizationProducts [ F0P21AAE ], VMWareClientVirtualizationProducts [ F0P24AAE ] = 1);
				dependency (VMWareClientVirtualizationProducts [ F0P22AAE ], VMWareClientVirtualizationProducts [ F0P25AAE ] = 1);
				dependency (VMWareClientVirtualizationProducts [ F0P23AAE ], VMWareClientVirtualizationProducts [ F0P26AAE ] = 1);
			}
			constraint VMWareLinkWarning { //junit
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io.";
				body:
				isCS7xx () || (for(squickvSphereEdt) s => selected(VMWareSubsystem, VMWareVSphereEditions).filter(p => p.id >= s).count = 0);
			}
			constraint thirtyDayWarning { //junit
				message: "Initial VMware license(s) must be purchased within 30 days of purchase of server(s). Subsequent licenses can be purchased independently.";
				body:
				{
				//LAW PERF dependency
					val vCenter = selected(VMWareSubsystem, VMWareVCenterProducts);
					val vCloud = selected(VMWareSubsystem, VMWareVCloudProducts);
					val vSphere = thisInst.selected(VMWareVSphereKits);
					thisInst.selected(VMWareBundles).filter(b30DayLicensePurchase = true).count = 0 && thisInst.selected(VMWareVSphereEditions).filter(b30DayLicensePurchase = true).count = 0 && (if(vCenter.count > 0) then for(sThirtyDay) s =>
					vCenter.filter(p => p.id >= s).count = 0) && (if(vCloud.count > 0) then for(sThirtyDayVCloud) s => vCloud.filter(p => p.id >= s).count = 0) && (if(vSphere.count > 0) then for(vmwarelicense) s => vSphere.filter(p => p.id >= s).count =
					0);
				}
				/*				thisInst.selected(VMWareBundles).filter(b30DayLicensePurchase = true).count = 0;
				thisInst.selected(VMWareVSphereEditions).filter(b30DayLicensePurchase = true).count = 0;
				//SE FOR PERT 12198 -Removing and re-adding 15-10-2018  thisInst.selected(VMWareVSphereKits).filter(b30DayLicensePurchase = true).count = 0;
				//RS PPM:75104 22Nov2017	This condition check is not required as this is class SKU doesnt applies with this rule :: Menu_1712.042
				//RS	thisInst.selected(VMwareVSAN).count = 0;
				//PRS removed for PERT- 15687 25 June 2019  thisInst.selected(VMWareClientVirtualizationProducts).filter(b30DayLicensePurchase = true).count = 0;
				

				(for(sThirtyDay) s => selected(VMWareSubsystem, VMWareVCenterProducts).filter(p => p.id >= s).count = 0);
				(for(sThirtyDayVCloud) s => selected(VMWareSubsystem, VMWareVCloudProducts).filter(p => p.id >= s).count = 0);
				(for(vmwarelicense) s => thisInst.selected(VMWareVSphereKits).filter(p => p.id >= s).count = 0); //SE FOR PERT 12198 Re-adding VMWareVSphereKits
*/
			}
			constraint horizonWarning {
				message: "Horizon Add-ons require an a la carte vSphere license to support the concurrent";
				body: /*if selected(E1U90BAE).count > 0 then false
					else if selected(E1U91BAE).count > 0 then false
					else if selected(E1U92BAE).count > 0 then false
					else true;*/ if thisInst.selected(VMWareClientVirtualizationProducts).filter(y => y.id >= "E1U90BAE" || y.id >= "E1U91BAE" || y.id >= "E1U92BAE").count > 0 then false else true;
			}
			constraint telcoAndOEMWarning {
				message: "These products are intended for OEM and Telco customers.If you are not an OEM or Telco customer,you do not have the rights to order these products";
				body: if thisInst.selected(VMWareVSphereEditions).filter(y => y.id >= "K2K60AAE" || y.id >= "K2K61AAE" || y.id >= "K2K62AAE" || y.id >= "K2K63AAE" || y.id >= "K2K64AAE" || y.id >= "K2K65AAE" || y.id >= "K2K66AAE" || y.id >= "K2K67AAE"
				|| y.id >= "K2K68AAE" || y.id >= "K2K69AAE" || y.id >= "K2K73AAE").count > 0 then false else true;
			}
			constraint baseProductContractWarning { //junit
				message:
				"Customer must have the original base product on a current HPE services contract and must have registered for HP support on the original base product so that upgrade can be added to an existing service contract. Base product service contract must remain in place when upgrade is applied.";
				body: thisInst.selected(VMWareSoftware).filter(baseProductContracte = true).count = 0;
				thisInst.selected(VMWareVCloudProducts).filter(baseProductContracte = true).count = 0;
				thisInst.selected(VMWareVSphereKits).filter(baseProductContracte = true).count = 0;
			}
			constraint redHatEnterpriseServerNotSupportedInOCC { //IRS 08/24/2016 Fix for ALM 100696
				message: "Cannot be selected in One Config Catalog.";
				body: dependency (targetEnv ("ezc", "ipcs"), RedHatEnterpriseServer [ Q0D18A || Q0D19A || Q0D20A || Q0D21A || Q0D22A || Q0D23A || Q0D24A || Q0D25A || Q0D26A || Q0D27A || Q0D28A || Q0D29A || Q0D30A || Q0D95A ] = 0);
			}
			constraint RHsocketpair {
				message: "2 socket pair can be stackable.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D18AAE" || y.id >= "Q0D18A" || y.id >= "Q0D19AAE" || y.id >= "Q0D19A" || y.id >= "Q0D20AAE" || y.id >= "Q0D20A" || y.id >= "Q0D21AAE" || y.id >= "Q0D21A" || y.id >=
				"Q0D22AAE" || y.id >= "Q0D22A" || y.id >= "Q0D23AAE" || y.id >= "Q0D23A" || y.id >= "Q0D26AAE" || y.id >= "Q0D26A" || y.id >= "Q0D28AAE" || y.id >= "Q0D28A" || y.id >= "Q0D30AAE" || y.id >= "G3J23AAE" || y.id >= "G3J22AAE" || y.id >=
				"G3J24AAE" || y.id >= "G3J25AAE" || y.id >= "G3J26AAE" || y.id >= "G3J27AAE" || y.id >= "G5J62AAE" || y.id >= "G5J63AAE" || y.id >= "G5J64AAE" || y.id >= "G5J65AAE" || y.id >= "J8J35AAE" || y.id >= "J8J36AAE" || y.id >= "AG3J22A" ||
				y.id >= "G3J22A" || y.id >= "G3J23A" || y.id >= "G3J24A" || y.id >= "G3J25A" || y.id >= "G3J26A" || y.id >= "G3J27A" || y.id >= "G5J62A" || y.id >= "G5J63A" || y.id >= "G5J64A" || y.id >= "G5J65A" || y.id >= "J8J35A" || y.id >=
				"J8J36A" || y.id >= "Q8U15A" || y.id >= "Q8U16A" || y.id >= "Q8U17A" || y.id >= "Q8U18A" || y.id >= "Q8U19A" || y.id >= "Q8U20A" || y.id >= "Q8U21A" || y.id >= "Q8U22A" || y.id = "Q8U15AAE" || y.id = "Q8U16AAE" || y.id = "Q8U17AAE" ||
				y.id = "Q8U18AAE" || y.id = "Q8U19AAE" || y.id = "Q8U20AAE" || y.id = "Q8U21AAE" || y.id = "Q8U22AAE").count > 0 then false else true; //PRS Added Sku for PERT-15687 24 June 2019  //IRS 08/24/2016 Fix for ALM 100696  //RV 31-Oct-2017 SMR- CRISSPINK added Duck skus
				//ALM fix 104410 27/04/2017
				//ALM 104374 19/04/2017 - JRH - Software Menu Red Hat Enterprise Virtualization Rule 22   
				thisInst.selected(RedHatEnterpriseVirtualization).filter(x => split(x.id, "#").get(0) <= (sSkusRHEV + " " + sSkusRHEVELVcd)).count = 0;
				//ALM 104374 19/04/2017 			

			}
			//RV 29-Mar-2021 SMR Pink Pig
			constraint SUSECaas_Rule50 {
				message: "Private SKUs, ONLY for GreenLake use";
				body:
				if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "R7R61A" || y.id >= "R7R61A" || y.id >= "R7R63AAE").count > 0 then false else true;
			}
			constraint RHnotfactory {
				message: "Software not factory installed.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D18AAE" || y.id >= "Q0D19AAE" || y.id >= "Q0D20AAE" || y.id >= "Q0D21AAE" || y.id >= "Q0D22AAE" || y.id >= "Q0D23AAE" || y.id >= "Q0D24AAE" || y.id >= "Q0D24A" ||
				y.id >= "Q0D25AAE" || y.id >= "Q0D26AAE" || y.id >= "Q0D27AAE" || y.id >= "Q0D28AAE" || y.id >= "Q0D29AAE" || y.id >= "Q0D30AAE" || y.id >= "G3J22AAE" || y.id >= "G3J23AAE" || y.id >= "G3J24AAE" || y.id >= "G3J25AAE" || y.id >=
				"G3J26AAE" || y.id >= "G3J27AAE" || y.id >= "G5J62AAE" || y.id >= "G5J63AAE" || y.id >= "G5J64AAE" || y.id >= "G5J65AAE" || y.id >= "J8J35AAE" || y.id >= "J8J36AAE" || y.id >= "G3J28AAE" || y.id >= "G3J29AAE" || y.id >= "G3J30AAE" ||
				y.id >= "G3J31AAE" || y.id >= "G3J32AAE" || y.id >= "G3J33AAE" || y.id >= "R1A94AAE" || y.id >= "R1A95AAE" || y.id >= "R1A96AAE" || y.id >= "R1A97AAE" || y.id >= "R1A98AAE" || y.id >= "R1A99AAE" || y.id >= "R1B00AAE" || y.id >=
				"R1B01AAE" || y.id >= "R1B02AAE" || y.id >= "R1B03AAE" || y.id >= "R1B04AAE" || y.id >= "R1B05AAE" || y.id >= "R1B06AAE" || y.id >= "R1B07AAE" || y.id >= "R1B08AAE" || y.id >= "R1B09AAE" || y.id >= "R1B10AAE" || y.id >= "R1B11AAE" ||
				y.id >= "R1B12AAE" || y.id >= "R1B13AAE" || y.id >= "R1B14AAE" || y.id >= "R1B15AAE" || y.id >= "R1B16AAE" || y.id >= "R1B17AAE" || y.id >= "R1B18AAE" || y.id >= "R1B19AAE" || y.id >= "P08525-291" || y.id >= "P08526-291" || y.id >=
				"P08527-291" || y.id >= "R1Z74AAE" || y.id >= "R1Z75AAE" || y.id >= "R1Z76AAE" || y.id >= "R1Z77AAE" || y.id >= "R1Z78AAE" || y.id >= "R1Z79AAE" || y.id >= "R1Z80AAE" || y.id >= "R1Z81AAE" || y.id >= "R1Z82AAE" || y.id >= "R1Z83AAE"
				|| y.id >= "R1Z84AAE" || y.id >= "R1Z85AAE" || y.id >= "R1Z86AAE" || y.id >= "R1Z87AAE" || y.id >= "R1Z88AAE" || y.id >= "R1Z89AAE" || y.id >= "R1Z90AAE" || y.id >= "R1Z91AAE" || y.id >= "R1Z92AAE" || y.id >= "R1Z94AAE" || y.id >=
				"R1Z96AAE" || y.id >= "R1Z97AAE" || y.id >= "R1Z98AAE" || y.id >= "R1Z99AAE" || y.id >= "P12456-291" || y.id >= "P12457-291" || y.id >= "P12458-291" || y.id >= "P12459-291" || y.id >= "P12460-291" || y.id >= "P12461-291" || y.id >=
				"P12462-291").count > 0 then false else true; //IRS 08/24/2016 Fix for ALM 100696    /  //NL modified for PERT 1484 , 15-Dec-2018 
				//ALM fix 104410 27/04/2017
				//ALM 104374 19/04/2017 - JRH - Software Menu Red Hat Enterprise Virtualization Rule 21 
				thisInst.selected(RedHatEnterpriseVirtualization).filter(x => x.tQuoteType = "BTO" && split(x.id, "#").get(0) <= (sSkusRHEV + " " + sSkusRHEVELVcd)).count = 0;
				//ALM 104374 19/04/2017

			}
			constraint HDDdrive23Info {
				message: "Hard Drive is required";
				body: if thisInst.selected(RedHatEnterpriseServer).filter(p => p.id >= "P12456-291").count > 0 or thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "P27982-291" || p.id >= "P50010-291" || p.id >= "P50013-291").count > 0
				then false;
				//RV 27-May-2021 removed based on BU mail || p.id >= "P27980-291" || p.id >= "P27981-291" || p.id >= "P27982-291"		//SE - Added P50010-291 P50013-291 for PERT 24824		12-Jan-2022
				if thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "P50016-291" || p.id >= "P50019-291").count > 0 then false;
				//SE - Added NPI SW P50016-291 and P50019-291 for PERT 24866		14-Feb-2022					

			}
			constraint RHsmartmanagement {
				message: "Need Smart Management Add-on.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D24AAE" || y.id >= "Q0D24A").count > 0 then false else true; //IRS 08/24/2016 Fix for ALM 100696

			}
			constraint RHmatchRHEL {
				message: "Must match RHEL socket pair and virtual guest.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D25AAE" || y.id >= "Q0D25A" || y.id >= "Q0D26AAE" || y.id >= "Q0D26A" || y.id >= "Q0D27AAE" || y.id >= "Q0D27A" || y.id >= "Q0D28AAE" || y.id >= "Q0D28A" || y.id >=
				"Q0D29AAE" || y.id >= "Q0D30AAE" || y.id >= "Q0D30A").count > 0 then false else true; //IRS 08/24/2016 Fix for ALM 100696

			}
			constraint RH2socket {
				message: "May be stacked either as 2 socket pair or 2 virtual guests.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D25AAE" || y.id >= "Q0D25A" || y.id >= "Q0D27AAE" || y.id >= "Q0D27A" || y.id >= "Q0D29AAE" || y.id >= "Q0D29A" || y.id >= "G3J28AAE" || y.id >= "G3J29AAE" || y.id >=
				"G3J30AAE" || y.id >= "G3J31AAE" || y.id >= "G3J32AAE" || y.id >= "G3J33AAE" || y.id >= "G3J28A" || y.id >= "G3J29A" || y.id >= "G3J30A" || y.id >= "G3J31A" || y.id >= "G3J32A" || y.id >= "G3J33A").count > 0 then false else true; //IRS 08/24/2016 Fix for ALM 100696
				//ALM fix 104410 27/04/2017

			}
			constraint RHRHEL {
				message: "RHEL subscriptions are required to run Red Hat guests/virtual machines.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D18AAE" || y.id >= "Q0D18A" || y.id >= "Q0D19AAE" || y.id >= "Q0D19A").count > 0 then false else true; //IRS 08/24/2016 Fix for ALM 100696
				//ALM 104374 19/04/2017 - JRH - Software Menu Red Hat Enterprise Virtualization Rule 23 
				thisInst.selected(RedHatEnterpriseVirtualization).filter(x => split(x.id, "#").get(0) <= sSkusRHEV).count = 0;
				//ALM 104374 19/04/2017

			}
			//PRS Added the correct class for PERT-20267 12-Nov-2020     //RedHatEnterpriseServer
			constraint RHSupportedOperatingsystem_18 {
				message: "It is supported on all Physical and Virtual Deployments starting with SUSE Linux Enterprise Server 12 on x86-64.";
				body:
				if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "Q1X74AAE" || y.id >= "Q1X75AAE").count > 0 then false else true; //DVE_PPM_71964

			}
			constraint RHSupportedOperatingsystem_19 {
				message: "Unit of Measure for SUSE Linux Enterprise Live Patching is the same as SUSE Linux Enterprise Server Subscription Offerings for x86-64.";
				body:
				if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "Q1X74AAE" || y.id >= "Q1X75AAE").count > 0 then false else true; //DVE_PPM_71964

			}
			constraint RHSupportedOperatingsystem_20 {
				message: "Requires an underlying Current SUSE Linux Enterprise Server Priority Subscription Offering.";
				body:
				if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "Q1X74AAE" || y.id >= "Q1X75AAE").count > 0 then false else true; //DVE_PPM_71964

			}
			constraint RHHead {
				message: "Head nodes provide support for compute nodes - both may be purchased together. Customers would only need a single head node, but may need multiple compute nodes.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D95AAE" || y.id >= "Q0D95A").count > 0 then false else true; //IRS 08/24/2016 Fix for ALM 100696

			}
			constraint RHHeadNotes {
				message: "Head Nodes and Compute Nodes should have matching terms. (i.e.: 3yr to 3yr; 5yr to 5yr)";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D95AAE" || y.id >= "Q0D95A").count > 0 then false else true; //IRS 08/24/2016 Fix for ALM 100696

			}
			constraint RHMoonshot {
				message: "Red Hat doesn't provide ARM processor on Moonshot platforms support at this time.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D24AAE" || y.id >= "Q0D24A").count > 0 then false else true; //IRS 08/24/2016 Fix for ALM 100696
				//ALM 104374 19/04/2017 - JRH - Software Menu Red Hat Enterprise Virtualization Rule 19  
				thisInst.selected(RedHatEnterpriseVirtualization).filter(x => split(x.id, "#").get(0) <= (sSkusRHEV + " " + sSkusRHEVELVcd)).count = 0;
				//ALM 104374 19/04/2017

			}
			constraint RHMoonshotPlatforms { //IRS 08/24/2016 Fix for ALM 100696
				message: "Red Hat doesn't provide ARM processor support or offer an ARM distribution for Moonshot platforms at this time.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D22AAE" || y.id >= "Q0D22A" || y.id >= "Q0D23AAE" || y.id >= "Q0D23A" || y.id >= "Q0D25AAE" || y.id >= "Q0D25A" || y.id >= "Q0D26AAE" || y.id >= "Q0D26A" || y.id >=
				"Q0D27AAE" || y.id >= "Q0D27A" || y.id >= "Q0D28AAE" || y.id >= "Q0D28A" || y.id >= "Q0D29AAE" || y.id >= "Q0D29A" || y.id >= "Q0D30AAE" || y.id >= "Q0D30A" || y.id >= "Q8U17A" || y.id >= "Q8U17AAE" || y.id >= "Q8U18A" || y.id >=
				"Q8U18AAE" || y.id >= "Q8U19A" || y.id >= "Q8U19AAE" || y.id >= "Q8U20A" || y.id >= "Q8U20AAE" || y.id >= "Q8U21A" || y.id >= "Q8U21AAE" || y.id >= "Q8U22A" || y.id >= "Q8U22AAE").count > 0 then false else true; //RV 31-Oct-2017 SMR- CRISSPINK added Darug skus

			}
			constraint RHValidSubscription { //IRS 08/24/2016 Fix for ALM 100696
				message: "A valid Red Hat subscription on a ProLiant platform is needed in order to activate this license.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D24AAE" || y.id >= "Q0D24A").count > 0 then false else true;
			}
			constraint VMWareCoreEditionsRule4 //Warning
			{
				message: "SUSE doesn't provide ARM processor on Moonshot platforms support at this time.";
				body:
				if thisInst.selected(VMWareCoreEditions).filter(y => y.id >= "Q5T74A" || y.id >= "Q5T75A" || y.id >= "Q5T76A" || y.id >= "Q5T78A" || y.id >= "Q5T80A" || y.id >= "Q5T83A" || y.id >= "Q5T88A" || y.id >= "R8V72A" || y.id >= "R8V72AAE" ||
				y.id >= "R8V73A" || y.id >= "R8V73AAE" || y.id >= "R8V74A" || y.id >= "R8V74AAE" || y.id >= "R8V75A" || y.id >= "R8V75AAE" || y.id >= "R8V76A" || y.id >= "R8V76AAE" || y.id >= "R8V77A" || y.id >= "R8V77AAE" || y.id >= "R8V78A" || y.id
				>= "R8V78AAE" || y.id >= "R8V79A" || y.id >= "R8V84A" || y.id >= "R8V85A" || y.id >= "S0F23AAE" || y.id >= "S0F24AAE").count > 0 then false else true; //SE - Added NPI SKU's for PERT 24669 	14-Sep-2021

			}
			constraint VMWareCoreEditionsRule5 //Warning
			{
				message: "Software not factory installed.";
				body:
				if thisInst.selected(VMWareCoreEditions).filter(y => y.id >= "Q5T74A" || y.id >= "Q5T75A" || y.id >= "Q5T76A" || y.id >= "Q5T78A" || y.id >= "Q5T80A" || y.id >= "Q5T83A" || y.id >= "Q5T88A" || y.id >= "R8V72A" || y.id >= "R8V72AAE" ||
				y.id >= "R8V73A" || y.id >= "R8V73AAE" || y.id >= "R8V74A" || y.id >= "R8V74AAE" || y.id >= "R8V75A" || y.id >= "R8V75AAE" || y.id >= "R8V76A" || y.id >= "R8V76AAE" || y.id >= "R8V77A" || y.id >= "R8V77AAE" || y.id >= "R8V78A" || y.id
				>= "R8V78AAE" || y.id >= "R8V79A" || y.id >= "R8V84A" || y.id >= "R8V85A" || y.id >= "R8V86AAE" || y.id >= "R8V87AAE" || y.id >= "R8V88AAE" || y.id >= "R8V89AAE" ||
				y.id >= "S0F21AAE" || y.id >= "S0F22AAE" || y.id >= "S0F23AAE" || y.id >= "S0F24AAE" || y.id >= "S0F25AAE" || y.id >= "S0F26AAE" || y.id >= "S0F27AAE" || y.id >= "S0F28AAE" || y.id >= "S0F29AAE" || y.id >= "S0F30AAE").count > 0 then false else true; //SE - Added NPI SKU's for PERT 24669		14-Sep-2021

			}
			constraint LCM_info_rule2 //SE - Added info for PERT 24669		14-Sep-2021
			{
				message: "May be stacked as 2 socket pair";
				body:
				if thisInst.selected(VMWareCoreEditions).filter(y => y.id >= "R8V87AAE" || y.id >= "R8V89AAE" || y.id >= "S0F22AAE" || y.id >= "S0F26AAE" || y.id >= "S0F28AAE" || y.id >= "S0F30AAE").count > 0 then false else true; //SE - Added NPI SKU's for PERT 24669		14-Sep-2021

			}
			constraint LCM_info_rule3 //SE - Added info for PERT 24669		14-Sep-2021
			{
				message: "One SUSE Mgr LCM SKU is required for every server managed by SUSE Manager";
				body:
				if thisInst.selected(VMWareCoreEditions).filter(y => y.id >= "R8V86AAE" || y.id >= "R8V87AAE" || y.id >= "R8V88AAE" || y.id >= "R8V89AAE" || y.id >= "S0F21AAE" || 
				y.id >= "S0F22AAE" || y.id >= "S0F25AAE" || y.id >= "S0F26AAE" || y.id >= "S0F27AAE" || y.id >= "S0F28AAE" || y.id >= "S0F29AAE" || y.id >= "S0F30AAE").count > 0 then false else true; //SE - Added NPI SKU's for PERT 24669		14-Sep-2021

			}
			constraint VMWareCoreEditionsRule7 //Info
			{
				message: "May be stacked either as 2 socket pair or 2 virtual guests."; //RV 31-Oct-2017 SMR- CRISSPINK added Duck skus
				body:
				if thisInst.selected(VMWareCoreEditions).filter(y => y.id >= "Q5T80A" || y.id >= "Q5T83A" || y.id >= "Q5T89A" || y.id >= "R8V86AAE" || y.id >= "R8V88AAE" ||
				y.id >= "S0F21AAE" || y.id >= "S0F25AAE" || y.id >= "S0F27AAE" || y.id >= "S0F29AAE").count > 0 then false else true; //SE - Added NPI for PERT 24669		14-sep-2021

			}
			constraint VMWareCoreEditionsRule8 //Warning
			{
				message: "KVM and Xen hypervisor are not included.";
				body:
				if thisInst.selected(VMWareCoreEditions).filter(y => y.id >= "Q5T80A" || y.id >= "Q5T83A").count > 0 then false else true;
			}
			constraint VMWareCoreEditionsRule16 //Info
			{
				message: "2 socket pair can be stackable.";
				body:
				if thisInst.selected(VMWareCoreEditions).filter(y => y.id >= "Q5T74A" || y.id >= "Q5T75A" || y.id >= "Q5T76A" || y.id >= "Q5T88A" || y.id >= "R8V72A" || y.id >= "R8V72AAE" || y.id >= "R8V73A" || y.id >= "R8V73AAE" || y.id >= "R8V74A"
				|| y.id >= "R8V74AAE" || y.id >= "R8V75A" || y.id >= "R8V75AAE" || y.id >= "R8V76A" || y.id >= "R8V76AAE" || y.id >= "R8V77A" || y.id >= "R8V77AAE" || y.id >= "R8V78A" || y.id >= "R8V78AAE" || y.id >= "R8V79A" || y.id >= "R8V84A" ||
				y.id >= "R8V85A" || y.id >= "S0F23AAE" || y.id >= "S0F24AAE").count > 0 then false else true; //SE - Added NPI SKU's for PERT 24669		14-Sep-2021

			}
			constraint RedHatEnterpriseServerDuck //Warning
			{
				message: "SUSE doesn't provide ARM processor on Moonshot platforms support at this time.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q8U15A" || y.id >= "Q8U15AAE" || y.id >= "Q8U16A" || y.id >= "Q8U16AAE").count > 0 then false else true; //SE FOR PERT 12198 - Removed as per menu - || y.id >= "Q8U17A" || y.id >= "Q8U17AAE" 

			}
			//RV 17-Mar-2021 SMR Pink Pig added "R7Q93AAE" or p.id = "R7Q94AAE" or p.id = "R7Q95AAE
			constraint rulevirclient_vmwarerule8 {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body: if thisInst.selected(VMWareClientVirtualizationProducts).filter(x => x.id >= "BD500AAE" || x.id >= "BD501AAE" || x.id >= "BD701AAE" || x.id = "R7Q93AAE" or x.id = "R7Q94AAE" or x.id = "R7Q95AAE" or x.id = "R9A95AAE" or x.id =
				"R9A96AAE" or x.id = "R9A97AAE" or x.id = "R9A98AAE" or x.id = "R9B03AAE" or x.id = "R9B04AAE" or x.id = "R9B05AAE" or x.id = "R9B06AAE" or x.id = "R9B15AAE" or x.id = "R9B16AAE" or x.id = "R9B17AAE" or x.id = "R9B18AAE").count > 0
				then false else true; //NL fixed with an existing issues, 03-May-2019		//SE - Added NPI SKU's for PERT 24820		30-Nov-2021

			}
			//RV 17-Mar-2021 SMR Pink Pig
			constraint rulevirclient_vmwarerule24 {
				message: "For VDI workload only. Requires vSphere 7 or higher to support the concurrent connections purchased";
				body: if thisInst.selected(VMWareClientVirtualizationProducts).filter(p => p.id = "R7Q93AAE" or p.id = "R7Q94AAE" or p.id = "R7Q95AAE").count > 0 then false else true; //NL fixed with an existing issues, 03-May-2019

			}
			constraint MayaSWRule3a {
				message: "requires ownership of VMware vSphere and VMware vCenter Server";
				body:
				if thisInst.selected(VMWareVSphereEditions).filter(y => y.id >= "Q5T24AAE" || y.id >= "Q5T25AAE" || y.id >= "Q5T26AAE").count > 0 then false else true;
			}
			constraint MayaSWRule3b {
				message: "requires ownership of VMware vSphere and VMware vCenter Server";
				body:
				if thisInst.selected(VMWareVCenterSrmProducts).filter(p => p.id = "BD534A" or p.id = "BD534AAE" or p.id = "BD535A" or p.id = "BD535AAE" or p.id = "BD536AAE" or p.id = "BD748A" or p.id = "BD748AAE" or p.id = "BD749A" or p.id =
				"BD749AAE" or p.id = "BD750A" or p.id = "BD750AAE" or p.id = "BD751A" or p.id = "BD751AAE" or p.id = "BD762AAE" or p.id = "BD763AAE").count > 0 then false else true;
			}
			constraint RedHatEnterpriseServer3 //Info
			{
				message: "2 socket pair can be stackable.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q5W23A" || y.id >= "Q5W23AAE" || y.id >= "Q5W24A" || y.id >= "Q5W24AAE" || y.id >= "Q5W25A" || y.id >= "Q5W25AAE" || y.id >= "Q5W26A" || y.id >= "Q5W26AAE").count > 0
				then false else true;
			}
			constraint RedHatEnterpriseServer4 //Warning
			{
				message: "May be stacked either as 2 socket pair or 2 virtual guests.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q5W19A").count > 0 then false else true;
			}
			constraint warningGreekvRealizeRule2 {
				message:
				"ONLY FOR LATAM: VMware requires Channel Partners to achieve and maintain the VMware Network Virtualization Competency. The competency requirements are outlined on vmware.com and partner central. https://www.vmware.com/partners/partner-learning/solution-competencies";
				//RV 31-Jan-2019 ALM.127290	Removed " to avoid special characters			"ONLY FOR LATAM: VMware requires Channel Partners to achieve and maintain the “ VMware Network Virtualization Competency ” . The competency requirements are outlined on vmware.com and partner central. https://www.vmware.com/partners/partner-learning/solution-competencies";
				body: if thisInst.selected(VMwareVSAN).filter(y => y.id >= "P3Q68B" || y.id >= "P3Q68BAE" || y.id >= "P3Q69B" || y.id >= "P3Q69BAE" || y.id >= "P3Q70BAE" || y.id >= "Q0E31A" || y.id >= "Q0E31AAE" || y.id >= "Q0E32A" || y.id >=
				"Q0E32AAE" || y.id >= "Q0E33A" || y.id >= "Q0E33AAE" || y.id >= "Q0E34A" || y.id >= "Q0E34AAE" || y.id >= "Q0E35A" || y.id >= "Q0E35AAE" || y.id >= "Q0E36A" || y.id >= "Q0E36AAE" || y.id >= "Q1P49A" || y.id >= "Q1P49AAE" || y.id >=
				"Q1P50A" || y.id >= "Q1P50AAE" || y.id >= "Q1P51A" || y.id >= "Q1P51AAE" || y.id >= "Q2C29A" || y.id >= "Q2C29AAE" || y.id >= "Q2C30A" || y.id >= "Q2C30AAE" || y.id >= "Q2C31A" || y.id >= "Q2C31AAE" || y.id >= "Q8U60A" || y.id >=
				"Q8U60AAE" || y.id >= "Q8U61A" || y.id >= "Q8U61AAE" || y.id >= "Q8U62A" || y.id >= "Q8U62AAE" || y.id >= "Q8U63A" || y.id >= "Q8U63AAE" || y.id >= "Q8U64A" || y.id >= "Q8U64AAE" || y.id >= "Q8U65A" || y.id >= "Q8U65AAE" || y.id >=
				"Q8U66A" || y.id >= "Q8U66AAE" || y.id >= "Q8U67A" || y.id >= "Q8U67AAE" || y.id >= "Q8U68A" || y.id >= "Q8U68AAE" || y.id >= "Q9L12A" || y.id >= "Q9L12AAE" || y.id >= "Q9L13A" || y.id >= "Q9L13AAE" || y.id >= "Q9L14A" || y.id >=
				"Q9L14AAE" || y.id >= "Q9R94AAE" || y.id >= "Q9R95AAE" || y.id >= "Q9R96AAE" || y.id >= "R0Y26A" || y.id >= "R0Y26AAE" || y.id >= "R0Y27A" || y.id >= "R0Y27AAE" || y.id >= "R0Y28A" || y.id >= "R0Y28AAE" || y.id >= "R0Y29A" || y.id >=
				"R0Y29AAE" || y.id >= "R0Y30A" || y.id >= "R0Y30AAE" || y.id >= "R0Y31A" || y.id >= "R0Y31AAE" || y.id >= "R0Y32A" || y.id >= "R0Y32AAE" || y.id >= "R0Y33A" || y.id >= "R0Y33AAE" || y.id >= "R0Y34A" || y.id >= "R0Y34AAE" || y.id >=
				"R0Y35A" || y.id >= "R0Y35AAE" || y.id >= "R0Y39A" || y.id >= "R0Y39AAE" || y.id >= "R0Y40A" || y.id >= "R0Y40AAE" || y.id >= "R0Y42AAE" || y.id >= "R0Y43AAE" || y.id >= "R0Y44AAE" || y.id >= "R0Y45AAE" || y.id >= "R0Y46AAE" || y.id
				>= "R0Y47AAE" || y.id >= "R1T79A" || y.id >= "R1T79AAE" || y.id >= "R1T80AAE" || y.id >= "R1T81AAE").count > 0 then false else true; // NL added for Pert 14484, 20-Dec-2018
				if thisInst.selected(VMwareVSAN).filter(y => y.id >= "R9L81AAE" || y.id >= "R9L82AAE" || y.id >= "R9L83AAE" || y.id >= "R9L84AAE" || y.id >= "R9L85A" || y.id >= "R9L85AAE" || y.id >= "R9L86A" || y.id >= "R9L86AAE" || y.id >= "R9L87AAE"
				|| y.id >= "R9L88AAE" || y.id >= "R9L89AAE" || y.id >= "R9L90AAE" || y.id >= "R9L91AAE").count > 0 then false else true;
				//SE - Added NPI SW SKU's for PERT 24866		14-Feb-2022 

			}
			constraint resellerrule1 {
				message:
				"Reseller Option Kit (ROK) SKUs are ONLY available for HPE Channel Partners so they can be resold. DON'T use this product if you're HPE Sales or Direct Sales, as HPE will be in violation of Licensing Agreement.COA's are not replaceable. Please adhere to the server prior to delivery to an end user.";
				body: if thisInst.selected(MSWindowsServer2012ROK).filter(y => y.id >= "782516-291" || y.id >= "871141-041" || y.id >= "871141-051" || y.id >= "871141-061" || y.id >= "871141-071" || y.id >= "871141-131" || y.id >= "871141-141" ||
				y.id >= "871141-201" || y.id >= "871141-221" || y.id >= "871141-241" || y.id >= "871141-251" || y.id >= "871141-291" || y.id >= "871141-331" || y.id >= "871141-AD1" || y.id >= "871141-B22" || y.id >= "871141-B71" || y.id >=
				"P00487-041" || y.id >= "P00487-051" || y.id >= "P00487-061" || y.id >= "P00487-071" || y.id >= "P00487-131" || y.id >= "P00487-141" || y.id >= "P00487-201" || y.id >= "P00487-221" || y.id >= "P00487-241" || y.id >= "P00487-251" ||
				y.id >= "P00487-291" || y.id >= "P00487-291" || y.id >= "P00487-331" || y.id >= "P00487-AA1" || y.id >= "P00487-AB1" || y.id >= "P00487-AD1" || y.id >= "P00487-B21" || y.id >= "P00487-B71" || y.id >= "P00488-041" || y.id >=
				"P00488-051" || y.id >= "P00488-061" || y.id >= "P00488-071" || y.id >= "P00488-131" || y.id >= "P00488-201" || y.id >= "P00488-221" || y.id >= "P00488-241" || y.id >= "P00488-251" || y.id >= "P00488-291" || y.id >= "P00488-331" ||
				y.id >= "P00488-AA1" || y.id >= "P00488-AB1" || y.id >= "P00488-AD1" || y.id >= "P00488-B21" || y.id >= "P00488-B71" || y.id >= "P46123-021" || y.id >= "P46123-371" || y.id >= "P46123-A21" || y.id >= "P46123-AA1" || y.id >=
				"P46123-AB1" || y.id >= "P46123-DN1" || y.id >= "P46171-021" || y.id >= "P46171-371" || y.id >= "P46171-A21" || y.id >= "P46171-AA1" || y.id >= "P46171-AB1" || y.id >= "P46171-DN1" || y.id >= "P46172-021" || y.id >= "P46172-371" ||
				y.id >= "P46172-A21" || y.id >= "P46172-AA1" || y.id >= "P46172-AB1" || y.id >= "P46172-DN1").count > 0 then false else true; //SE - For PERT 24669		14-Sep-2021
				//MS for PERT: 14472
				if thisInst.selected(MSWindowsServer2012ROK).filter(p => p.id >= "P11058-041" or p.id >= "P11058-051" or p.id >= "P11058-061" or p.id >= "P11058-071" or p.id >= "P11058-131" or p.id >= "P11058-201" or p.id >= "P11058-221" or p.id >=
				"P11058-241" or p.id >= "P11058-251" or p.id >= "P11058-291" or p.id >= "P11058-331" or p.id >= "P11058-AA1" or p.id >= "P11058-AB1" or p.id >= "P11058-AD1" or p.id >= "P11058-B21" or p.id >= "P11058-B71" or p.id >= "P11061-041" or
				p.id >= "P11061-051" or p.id >= "P11061-061" or p.id >= "P11061-071" or p.id >= "P11061-131" or p.id >= "P11061-201" or p.id >= "P11061-221" or p.id >= "P11061-241" or p.id >= "P11061-251" or p.id >= "P11061-291" or p.id >=
				"P11061-331" or p.id >= "P11061-AA1" or p.id >= "P11061-AB1" or p.id >= "P11061-AD1" or p.id >= "P11061-B21" or p.id >= "P11070-041" or p.id >= "P11070-051" or p.id >= "P11070-061" or p.id >= "P11070-071" or p.id >= "P11070-131" or
				p.id >= "P11070-201" or p.id >= "P11070-221" or p.id >= "P11070-241" or p.id >= "P11070-251" or p.id >= "P11070-291" or p.id >= "P11070-331" or p.id >= "P11070-AD1" or p.id >= "P11070-B21" or p.id >= "P11070-B71").count > 0 then false
				else true;
			}
			constraint resellerrule2 {
				message:
				"Reseller Option Kit (ROK) SKUs are ONLY available for HPE Channel Partners so they can be resold. DON'T use this product if you're HPE Sales or Direct Sales, as HPE will be in violation of Licensing Agreement. COA's are not replaceable. The COA is affixed to a license card.";
				body: if thisInst.selected(MSWindowsServer2012ROK).filter(y => y.id >= "P00489-041" || y.id >= "P00489-051" || y.id >= "P00489-061" || y.id >= "P00489-291" || y.id >= "P00489-B21" || y.id >= "P00490-291" || y.id >= "P00491-291"
				//MS for PERT: 14472	
				|| y.id >= "P11062-041" || y.id >= "P11062-051" || y.id >= "P11062-061" || y.id >= "P11062-291" || y.id >= "P11062-B21" || y.id >= "P11084-291" || y.id >= "P11085-291" || y.id >= "P45863-291" || y.id >= "P45880-291" || y.id >=
				"P46128-291" || y.id >= "P46128-B21").count > 0 then false else true; //SE - For PERT 24669			14-Sep-2021

			}
			constraint VMwcloudfndbasicW {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use </br>
						  is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body:
				if thisInst.selected(VMWareVCloudProducts).filter(y => y.id >= "R0S63A" || y.id >= "R0S63AAE" || y.id >= "R0S64A" || y.id >= "R0S64AAE" || y.id >= "R0S65A" || y.id >= "R0S65AAE" || y.id >= "R0S66A" || y.id >= "R0S66AAE" || y.id >=
				"R0S67A" || y.id >= "R0S67AAE" || y.id >= "R0S68A" || y.id >= "R0S68AAE" || y.id >= "R0S69A" || y.id >= "R0S70A" || y.id >= "R0S70AAE" || y.id >= "R0S71A" || y.id >= "R0S71AAE" || y.id >= "R0S72A" || y.id >= "R0S72AAE" || y.id >=
				"R0S73A" || y.id >= "R0S73AAE" || y.id >= "R0S74A" || y.id >= "R0S74AAE" || y.id >= "R0S69AAE").count > 0 then false else true;
			}
			constraint vmwarevCenterproductsforruleno_8_warning {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io.";
				body:
				isCS7xx || (for(vcenterproducts) s => selected(VMWareSubsystem, VMWareVCenterProducts).filter(p => p.id >= s).count = 0);
				isCS7xx || (for(vcenterproducts) s => selected(VirtualizationSubsystem, VMWareVCenterProducts).filter(p => p.id >= s).count = 0); //SE for PERT 12198 - updating rule for exixting products 

			}
			constraint thirtyDayWarningforVSphereditions {
				message: "Initial VMware license(s) must be purchased within 30 days of purchase of server(s). ";
				body:
				if thisInst.selected(VMWareVSphereEditions).filter(y => y.id >= "R0S95A" || y.id >= "R0S95AAE" || y.id >= "R0S96A" || y.id >= "R0S96AAE" || y.id >= "R0S97A" || y.id >= "R0S97AAE").count > 0 then false else true;
			}
			constraint notsupportedSKUforOCC {
				message: "These SKS's are not supported for OCC.";
				body: dependency (targetEnv ("ezc", "ipcs", "sce", "eocs"), RedHatEnterpriseServer [ Q5W20A || Q5W21A || Q5W22A ] = 0);
			}
			constraint RedHatEnterpriseServer2 //Warning
			{
				message: "Red Hat doesn't provide ARM processor support or offer an ARM distribution for Moonshot platforms at this time.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q5W19A" || y.id >= "Q5W23A" || y.id >= "Q5W23AAE" || y.id >= "Q5W24A" || y.id >= "Q5W24AAE" || y.id >= "Q5W25A" || y.id >= "Q5W25AAE" || y.id >= "Q5W26A" || y.id >=
				"Q5W26AAE" || y.id >= "Q5W20A" || y.id >= "Q5W21A" || y.id >= "Q5W22A").count > 0 then false else true;
			}
			constraint RedHatEnterpriseLinuxServer_Rule4 {
				message: "May be stacked either as 2 socket pair or 2 virtual guests";
				body: if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q5W23A" or y.id >= "Q5W23AAE" or y.id >= "Q5W24A" or y.id >= "Q5W24AAE" or y.id >= "Q5W25A" or y.id >= "Q5W25AAE" or y.id >= "Q5W26A" or y.id >= "Q5W26AAE" or
				y.id >= "Q8U15A" or y.id >= "Q8U16A" or y.id >= "Q8U17A" or y.id >= "Q8U18A" or y.id >= "Q8U15AAE" or y.id >= "Q8U16AAE" or y.id >= "Q8U17AAE" or y.id >= "Q8U18AAE" or y.id >= "Q5W20A" or y.id >= "Q5W21A" or y.id >= "Q5W22A").count >
				0 then false;
			}
			constraint vcntrcludRule8 {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body: if thisInst.selected(VMWareVCenterProducts).filter(y => y.id >= "R1T82A" || y.id >= "R1T82AAE" || y.id >= "R1T83A" || y.id >= "R1T83AAE" || y.id >= "R1T84A" || y.id >= "R1T84AAE" || y.id >= "R1T85A" || y.id >= "R1T85AAE" || y.id
				>= "R1T86A" || y.id >= "R1T86AAE" || y.id >= "R1T87A" || y.id >= "R1T87AAE" || y.id >= "R1T88AAE" || y.id >= "R1T89AAE" || y.id >= "R1T90AAE" || y.id >= "R1T91AAE" || y.id >= "R1T92AAE" || y.id >= "R1T93AAE").count > 0 then false else
				true;
			}
			constraint customerWarning1 { //junit
				message: "HPE Customers are advised to check the quickspecs for license VRAM entitlement.";
				body:
				{
					val vsphereEditions = selected(VMWareSubsystem, VMWareVSphereEditions);
					val vsphereKits = thisInst.selected(VMWareVSphereKits);
					(for(squickvSphereEdt) s => vsphereEditions.filter(p => p.id >= s).count = 0) && (for(squickvSphereKits) s => vsphereKits.filter(p => p.id >= s).count = 0) && (for(squickvSphereKits1) s => vsphereKits.filter(p => p.id >= s).count =
					0);
				}
			}
			constraint customerWarning { //junit
				message: "HPE Customers are advised to check the quickspecs for license VRAM entitlement.";
				body:
				//(for(squickSRM) s => selected(VMWareSubsystem, VMWareVCenterSrmProducts).filter(p => p.id >= s).count = 0); //PRS Removed VMWareVCenterSrmProducts as it brings the message twice in OCA for PERT-15687 25 June 2019
				(for(squickvSphereEdt) s => selected(VMWareSubsystem, VMWareVSphereEditions).filter(p => p.id >= s).count = 0);
				(for(squickvSphereKits) s => selected(VMWareSubsystem, VMWareVSphereKits).filter(p => p.id >= s).count = 0);
				(for(squickvSphereKits1) s => thisInst.selected(VMWareVSphereKits).filter(p => p.id >= s).count = 0);
			}
			constraint VMWareLinkWarning1 {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified:
				<a href='http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io' target='_blank'>
				<span>http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io</span></a>";
				body:
				if ! isCS7xx () && thisInst.selected(VMWareVSphereEditions).filter(y => y.id >= "R0S95A" || y.id >= "R0S95AAE" || y.id >= "R0S96A" || y.id >= "R0S96AAE" || y.id >= "R0S97A" || y.id >= "R0S97AAE" || y.id >= "BD512A" || y.id >=
				"BD710AAE" || y.id >= "BD738AAE" || y.id >= "BD745A" || y.id >= "D9Y74AAE" || y.id >= "G2D06AAE" || y.id >= "P9U07AAE" || y.id >= "P9U15AAE" || y.id >= "BD512AAE" || y.id >= "BD711A" || y.id >= "BD739A" || y.id >= "BD745AAE" || y.id
				>= "D9Y75AAE" || y.id >= "G2D07AAE" || y.id >= "P9U08AAE" || y.id >= "P9U16AAE" || y.id >= "BD514A" || y.id >= "BD711AAE" || y.id >= "BD739AAE" || y.id >= "D9Y64AAE" || y.id >= "P9A81AAE" || y.id >= "P9U09AAE" || y.id >= "P9U17AAE" ||
				y.id >= "BD514AAE" || y.id >= "BD714A" || y.id >= "BD740A" || y.id >= "D9Y65AAE" || y.id >= "P9A82AAE" || y.id >= "P9A83AAE" || y.id >= "P9U10AAE" || y.id >= "P9U18AAE" || y.id >= "BD527A" || y.id >= "BD714AAE" || y.id >= "BD740AAE"
				|| y.id >= "D9Y66AAE" || y.id >= "P9A82AAE" || y.id >= "P9U11AAE" || y.id >= "P9U81AAE" || y.id >= "BD527AAE" || y.id >= "BD715A" || y.id >= "BD741A" || y.id >= "D9Y70AAE" || y.id >= "P9A84AAE" || y.id >= "P9U12AAE" || y.id >=
				"P9U82AAE" || y.id >= "BD532AAE" || y.id >= "BD715AAE" || y.id >= "BD741AAE" || y.id >= "D9Y71AAE" || y.id >= "P9A85AAE" || y.id >= "P9U13AAE" || y.id >= "P9U83AAE" || y.id >= "BD710A" || y.id >= "BD738A" || y.id >= "BD744AAE" || y.id
				>= "D9Y73AAE" || y.id >= "P9A86AAE" || y.id >= "P9U14AAE" || y.id >= "Q8U57AAE" || y.id >= "Q8U58AAE" || y.id >= "Q8U59AAE" || y.id >= "R0G41AAE" || y.id >= "R0G42AAE" || y.id >= "R0G43AAE" || y.id >= "R0G44AAE" || y.id >= "R0G45AAE"
				|| y.id >= "R0G46AAE" || y.id >= "Q5T24AAE" || y.id >= "Q5T25AAE" || y.id >= "Q5T26AAE").count > 0 then false else true; //NL added for an existing sw rule issue, 02-May-2019	

			}
			constraint thirtyDayWarningforVSphereditions1 {
				message: "Initial VMware license(s) must be purchased within 30 days of purchase of server(s). ";
				body:
				if thisInst.selected(VMWareVSphereKits).filter(y => y.id >= "BD510A" || y.id >= "BD510AAE" || y.id >= "BD706A" || y.id >= "BD706AAE" || y.id >= "BD707A" || y.id >= "BD707AAE" || y.id >= "F6M48A" || y.id >= "F6M48AAE" || y.id >=
				"F6M49A" || y.id >= "F6M49AAE" || y.id >= "F6M50A" || y.id >= "F6M50AAE").count > 0 then false else true;
			}
			constraint Redhatrule17info {
				message: "This bundle includes RHEV and RHEL Virtual Datacenter 2 socket pair stackable.";
				body: if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D20A" || y.id >= "Q0D21A" || y.id >= "Q0D20AAE" || y.id >= "Q0D21AAE").count > 0 then false else true;
			}
			constraint syrule3info {
				message: "Only offered for Synergy  and PL S7";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1Z74AAE" || y.id >= "R1Z75AAE" || y.id >= "R1Z76AAE" || y.id >= "R1Z77AAE" || y.id >= "R1Z78AAE" || y.id >= "R1Z79AAE" || y.id >= "R1Z80AAE" || y.id >= "R1Z81AAE" ||
				y.id >= "R1Z82AAE" || y.id >= "R1Z83AAE" || y.id >= "R1Z84AAE" || y.id >= "R1Z85AAE" || y.id >= "R1Z86AAE" || y.id >= "R1Z87AAE" || y.id >= "R1Z88AAE" || y.id >= "R1Z89AAE" || y.id >= "R1Z90AAE" || y.id >= "R1Z91AAE" || y.id >=
				"R1Z92AAE" || y.id >= "R1Z94AAE" || y.id >= "R1Z96AAE" || y.id >= "R1Z97AAE" || y.id >= "R1Z98AAE" || y.id >= "R1Z99AAE").count > 0 then false else true;
			}
			constraint RHresellruleinfo {
				message: "Not OEM Offer, product offered as Resell";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1A94AAE" || y.id >= "R1A95AAE" || y.id >= "R1A96AAE" || y.id >= "R1A97AAE" || y.id >= "R1A98AAE" || y.id >= "R1A99AAE" || y.id >= "R1B00AAE" || y.id >= "R1B01AAE" ||
				y.id >= "R1B02AAE" || y.id >= "R1B03AAE" || y.id >= "R1B04AAE" || y.id >= "R1B05AAE" || y.id >= "R1B06AAE" || y.id >= "R1B07AAE" || y.id >= "R1B08AAE" || y.id >= "R1B09AAE" || y.id >= "R1B10AAE" || y.id >= "R1B11AAE" || y.id >=
				"R1B12AAE" || y.id >= "R1B13AAE" || y.id >= "R1B14AAE" || y.id >= "R1B15AAE" || y.id >= "R1B16AAE" || y.id >= "R1B17AAE" || y.id >= "R1B18AAE" || y.id >= "R1B19AAE" || y.id >= "R1Z74AAE" || y.id >= "R1Z75AAE" || y.id >= "R1Z76AAE" ||
				y.id >= "R1Z77AAE" || y.id >= "R1Z78AAE" || y.id >= "R1Z79AAE" || y.id >= "R1Z80AAE" || y.id >= "R1Z81AAE" || y.id >= "R1Z82AAE" || y.id >= "R1Z83AAE" || y.id >= "R1Z84AAE" || y.id >= "R1Z85AAE" || y.id >= "R1Z86AAE" || y.id >=
				"R1Z87AAE" || y.id >= "R1Z88AAE" || y.id >= "R1Z89AAE" || y.id >= "R1Z90AAE" || y.id >= "R1Z91AAE" || y.id >= "R1Z92AAE" || y.id >= "R1Z94AAE" || y.id >= "R1Z96AAE" || y.id >= "R1Z97AAE" || y.id >= "R1Z98AAE" || y.id >= "R1Z99AAE" ||
				y.id >= "R6J26AAE" || y.id >= "R6J29AAE" || y.id >= "R6J33AAE" || y.id >= "R6J34AAE" || y.id >= "R6J35AAE" || y.id >= "R6J37AAE" || y.id >= "R6J38AAE" || y.id >= "R6J39AAE").count > 0 then false else true; // NL modified for Pert ID 14484. 14-Dec-2018

			}
			//RV 30-Jun-2020 PERT 20124 SMR Quartz launch
			constraint RedHatOCPRule4 {
				message: "Support not provided by HPE, Provided by Red Hat ";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R6J26AAE" || y.id >= "R6J29AAE" || y.id >= "R6J33AAE" || y.id >= "R6J34AAE" || y.id >= "R6J35AAE" || y.id >= "R6J37AAE" || y.id >= "R6J38AAE" || y.id >=
				"R6J39AAE").count > 0 then false else true;
			}

			//RV 29-Sep-2020 PERT 20204 Added DMF 7.X skus
			constraint DMFrule14info {
				message: "Can be ordered standalone for new installations";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R0J89AAE" || y.id >= "R0J90AAE" || y.id >= "R0J91AAE" || y.id >= "R1C83AAE" || y.id >= "R1C84AAE" || y.id >= "R1C85AAE" || y.id >= "R1C86AAE" || y.id >= "R1C87AAE" ||
				y.id >= "R1C88AAE" || y.id >= "R1C89AAE" || y.id >= "R1D38AAE" || y.id >= "R1D39AAE" || y.id >= "R1D40AAE" || y.id >= "R1D41AAE" || y.id >= "R1D42AAE" || y.id >= "R1D43AAE" || y.id >= "R1D49AAE" || y.id >= "R1D50AAE" || y.id >=
				"R1D51AAE" || y.id >= "R1D52AAE" || y.id >= "R1D53AAE" || y.id >= "R1D54AAE" || y.id >= "R1D55AAE" || y.id >= "R1D56AAE" || y.id >= "R1D57AAE").count > 0 then false else true;
				//SE - For PERT 23595

			}
			//RV 29-Sep-2020 PERT 20204 Added DMF 7.X skus
			constraint DMFrule15info {
				message: "Supports RHEL 7.5 or later releases";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R0J89AAE" || y.id >= "R0J90AAE" || y.id >= "R0J91AAE" || y.id >= "R1C83AAE" || y.id >= "R1C84AAE" || y.id >= "R1C85AAE" || y.id >= "R1C86AAE" || y.id >= "R1C87AAE" ||
				y.id >= "R1C88AAE" || y.id >= "R1C89AAE" || y.id >= "R1D38AAE" || y.id >= "R1D39AAE" || y.id >= "R1D40AAE" || y.id >= "R0J92AAE" || y.id >= "R0J93AAE" || y.id >= "R0J94AAE" || y.id >= "R0J95AAE" || y.id >= "R0J96AAE" || y.id >=
				"R0J97AAE" || y.id >= "R1D32AAE" || y.id >= "R1D33AAE" || y.id >= "R1D34AAE" || y.id >= "R1D35AAE" || y.id >= "R1D36AAE" || y.id >= "R1D37AAE" || y.id >= "R1D41AAE" || y.id >= "R1D42AAE" || y.id >= "R1D43AAE" || y.id >= "R1D44AAE" ||
				y.id >= "R1D45AAE" || y.id >= "R1D46AAE" || y.id >= "R1D49AAE" || y.id >= "R1D50AAE" || y.id >= "R1D51AAE" || y.id >= "R1D52AAE" || y.id >= "R1D53AAE" || y.id >= "R1D54AAE" || y.id >= "R1D55AAE" || y.id >= "R1D56AAE" || y.id >=
				"R1D57AAE" || y.id >= "R1D58AAE" || y.id >= "R1D59AAE" || y.id >= "R1D60AAE" || y.id >= "R1D61AAE" || y.id >= "R1D62AAE" || y.id >= "R1D63AAE" || y.id >= "R1D64AAE" || y.id >= "R1D65AAE" || y.id >= "R1D66AAE").count > 0 then false
				else true; //SE - For PERT 23595

			}
			constraint DMFrule16info {
				message: "Order multiples to get desired capacity or server count";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R0J92AAE" || y.id >= "R0J93AAE" || y.id >= "R0J94AAE" || y.id >= "R0J95AAE" || y.id >= "R0J96AAE" || y.id >= "R0J97AAE" || y.id >= "R1D32AAE" || y.id >= "R1D33AAE" ||
				y.id >= "R1D34AAE" || y.id >= "R1D35AAE" || y.id >= "R1D36AAE" || y.id >= "R1D44AAE" || y.id >= "R1D45AAE" || y.id >= "R1D46AAE" || y.id >= "R1D37AAE" || y.id >= "R1D58AAE" || y.id >= "R1D59AAE" || y.id >= "R1D60AAE" || y.id >=
				"R1D61AAE" || y.id >= "R1D62AAE" || y.id >= "R1D63AAE" || y.id >= "R1D64AAE" || y.id >= "R1D65AAE" || y.id >= "R1D66AAE").count > 0 then false else true; //SE - For PERT 23595

			}
			ifEffective MFG_PERT_26197{//MFG PERT 26197 - July-31-2022
			constraint DMFrule17_Information_message {
				message: "(R1D67AAE) Can be ordered standalone for existing installations with any of the 1 YR DMF BASE SKUs:   R1D49AAE, R1D52AAE, or R1D55AAE.";
				body:
				if  thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D67AAE").count > 0 then false else true;
			}	
			constraint DMFrule18_Information_message {
				message: "(R1D68AAE) Can be ordered standalone for existing installations with any of the 3 YR DMF BASE SKUs: R1D50AAE, R1D53AAE, or R1D56AAE.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D68AAE").count > 0 then false else true;
			}	
			constraint DMFrule19_Information_message {
				message: "(R1D69AAE) Can be ordered standalone for existing installations with any of the 5 YR DMF BASE SKUs: R1D51AAE, R1D54AAE, or R1D57AAE.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D69AAE").count > 0 then false else true;
			}	
			//MFG PERT 26197 - August-03-2022
			constraint DMFrule27_Information_message {
				message: "[For DL325/DL385 Gen10 Plus only]: For additional DMF servers to be configured in DMF7 solution <br>
                          (i.e. > 3, DMF servers total in DMF7 solution), must configure server SKU per additional DMF server: <br>
                        - HPE DMF Addl Svr 1yr Sub E-LTU   [R1D67AAE] <br>
                        - HPE DMF Addl Svr 3yr Sub E-LTU   [R1D68AAE] <br>
                        - HPE DMF Addl Svr 5yr Sub E-LTU   [R1D69AAE] <br>
                         *Note the additional DMF servers must have the same subscription term as the Base SKU. (i.e 1 year, 3 year, or 5 year).";

				body:  if 				
			
              ((thisInst.id = "P18603-291" or thisInst.id = "P18603-B21" or thisInst.id = "P18604-291" or thisInst.id = "P18604-B21" or thisInst.id = "P18605-291" or thisInst.id = "P18605-B21") or				
               (thisInst.id = "P07594-291" or thisInst.id = "P07594-B21" or thisInst.id = "P07595-291" or thisInst.id = "P07595-B21" or thisInst.id = "P07596-291" or thisInst.id = "P07596-B21" or thisInst.id = "P07597-291" or thisInst.id = "P07597-B21" or thisInst.id = "P07598-291" or thisInst.id = "P07598-B21"))
				and thisInst.selected(RedHatEnterpriseServer).filter(x => split(x.id, "#").get(0) <= "R1D67AAE R1D68AAE R1D69AAE").count > 0 then false;
			
			}
		
			}//26197
			constraint DMFrule17info {
				message: "Can be ordered standalone for existing installations with any of the XFS or DMF BASE SKUs: R1D38AAE,  R0J89AAE, R1C84AAE, or R1C87AAE";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D32AAE").count > 0 then false else true;
			}
			constraint DMFrule18info {
				message: "Can be ordered standalone for existing installations with any of the 3 YR XFS or DMF BASE SKUs: R1D39AAE,  R0J90AAE, R1C85AAE, or R1C88AAE";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D33AAE").count > 0 then false else true;
			}
			constraint DMFrule19info {
				message: "Can be ordered standalone for existing installations with any of the 5 YR XFS or DMF BASE SKUs: R1D40AAE,  R0J91AAE, R1C86AAE, or R1C89AAE";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D34AAE").count > 0 then false else true;
			}
			//RV 29-Sep-2020 PERT 20204 added || y.id >= "R1D44AAE" || y.id >= "R1D45AAE" || y.id >= "R1D46AAE"
			constraint DMFrule20info {
				message: "Can be ordered standalone for existing installations with any of the DMF BASE SKUs";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D35AAE" || y.id >= "R1D36AAE" || y.id >= "R1D37AAE" || y.id >= "R1D44AAE" || y.id >= "R1D45AAE" || y.id >= "R1D46AAE").count > 0 then false else true;
			}
//			//SE - For PERT 23595
//			constraint DMFrule20_info {
//				message: "Can be ordered standalone for existing installations with any of the 1 YR DMF BASE SKUs: R1D49AAE, R1D52AAE, or R1D55AAE";
//				body:
//				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D58AAE" || y.id >= "R1D61AAE" || y.id >= "R1D64AAE").count > 0 then false else true;
//			}
			constraint DMFrule21_info {
				message: "Can be ordered standalone for existing installations with any of the 3 YR DMF BASE SKUs: R1D50AAE, R1D53AAE, or R1D56AAE";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D59AAE" || y.id >= "R1D62AAE" || y.id >= "R1D65AAE").count > 0 then false else true;
			}
			constraint DMFrule22_info {
				message: "Can be ordered standalone for existing installations with any of the 5 YR DMF BASE SKUs: R1D51AAE, R1D54AAE, or R1D57AAE";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R1D60AAE" || y.id >= "R1D63AAE" || y.id >= "R1D66AAE").count > 0 then false else true;
			}
			constraint DMFrule21info {
				message: "Can be ordered standalone for existing installations with any of the 3 YR DMF BASE SKUs: R0J90AAE, R1C85AAE, or R1C88AAE";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R0J92AAE" || y.id >= "R0J93AAE" || y.id >= "R0J94AAE").count > 0 then false else true;
			}
			constraint DMFrule22info {
				message: "Can be ordered standalone for existing installations with any of the 5 YR DMF BASE SKUs: R0J91AAE, R1C86AAE, or R1C89AAE";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R0J95AAE" || y.id >= "R0J96AAE" || y.id >= "R0J97AAE").count > 0 then false else true;
			}
			constraint RHRedHat {
				message: "Red Hat doesn't provide ARM processor support or offer an ARM distribution for Moonshot platforms at this time.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D95AAE" || y.id >= "Q0D95A" || y.id >= "G3J22AAE" || y.id >= "G3J23AAE" || y.id >= "G3J24AAE" || y.id >= "G3J25AAE" || y.id >= "G3J26AAE" || y.id >= "G3J27AAE" ||
				y.id >= "G5J62AAE" || y.id >= "G5J63AAE" || y.id >= "G5J64AAE" || y.id >= "G5J65AAE" || y.id >= "J8J35AAE" || y.id >= "J8J36AAE" || y.id >= "G3J28AAE" || y.id >= "G3J29AAE" || y.id >= "G3J30AAE" || y.id >= "G3J31AAE" || y.id >=
				"G3J32AAE" || y.id >= "G3J33AAE" || y.id >= "G3J28A" || y.id >= "G3J29A" || y.id >= "G3J30A" || y.id >= "G3J31A" || y.id >= "G3J32A" || y.id >= "G3J33A" || y.id >= "AG3J22A" || y.id >= "G3J22A" || y.id >= "G3J23A" || y.id >= "G3J24A"
				|| y.id >= "G3J25A" || y.id >= "G3J26A" || y.id >= "G3J27A" || y.id >= "G5J62A" || y.id >= "G5J63A" || y.id >= "G5J64A" || y.id >= "G5J65A" || y.id >= "J8J35A" || y.id >= "J8J36A").count > 0 then false else true; //IRS 08/24/2016 Fix for ALM 100696

			}
			constraint ClientVirtualizationRule11W {
				message: "Initial VMware license(s) must be purchased within 30 days of purchase of server(s). Subsequent licenses can be purchased independently.";
				body: if thisInst.selected(VMWareClientVirtualizationProducts).filter(p => p.id = "BD500AAE" or p.id = "BD501AAE" or p.id = "BD701AAE" or p.id = "R7Q93AAE" or p.id = "R7Q94AAE" or p.id = "R7Q95AAE" or p.id = "R9A95AAE" or p.id =
				"R9A96AAE" or p.id = "R9A97AAE" or p.id = "R9A98AAE" or p.id = "R9B03AAE" or p.id = "R9B04AAE" or p.id = "R9B05AAE" or p.id = "R9B06AAE" or p.id = "R9B15AAE" or p.id = "R9B16AAE" or p.id = "R9B17AAE" or p.id = "R9B18AAE").count > 0
				then false; //RV 17-Mar-2021 SMR pink pig added "R7Q93AAE" or p.id = "R7Q94AAE" or p.id = "R7Q95AAE 
				//SE - Added NPI SKU's for PERT 24820		30-Nov-2021

			}
			constraint RHDenaliSkusRule1 {
				message: "Software not factory installed.";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R6J26AAE" || y.id >= "R6J29AAE" || y.id >= "R6J33AAE" || y.id >= "R6J34AAE" || y.id >= "R6J35AAE" || y.id >= "R6J37AAE" || y.id >= "R6J38AAE" || y.id >=
				"R6J39AAE").count > 0 or thisInst.selected(MSWindows2012Essentials).filter(y => y.id >= "P27980-291" || y.id >= "P27981-291").count > 0 then false else true; //RV 27-May-2021 added as per BU mail || p.id >= "P27980-291" || p.id >= "P27981-291" || p.id >= "P27982-291"

			}
			constraint MSWindows19Rule46 {
				message: "Base licenses: Min 0 / Max 1";
				body: restriction (MSWindows2012Essentials [ P12456-291 || P12457-291 || P12458-291 || P12466-291 || P12467-291 || P12468-291 || P22000-291 || P22001-291 || P27980-291 || P27981-291 || P27982-291 || P50010-291 || P50011-291 ||
				P50012-291 || P50013-291 || P50014-291 || P50015-291 || P50016-291 || P50017-291 || P50018-291 || P50019-291 || P50020-291 || P50021-291 || P58617-291 || P58618-291 || P58619-291 ] <= 1); //SE - Added for PERT  24824		12-Jan-2022
				//SE - Added NPI SW skus for PERT 24866		14-Feb-2022

			}
			constraint MSWindows19Rule47 {
				message:
				"To license a physical server, all physical cores must be licensed in the server. A minimum of 8 core licenses is required for each physical processor in the server and a minimum of 16 cores is required to be licensed for servers with one processor. Additional Licenses for 2 and 16 cores are available to license additional cores.";
				body:
				if thisInst.selected(MSWindows2012Essentials).filter(y => y.id >= "P12459-291" || y.id >= "P12460-291" || y.id >= "P12461-291" || y.id >= "P12462-291" || y.id >= "P50022-291" || y.id >= "P50023-291" || y.id >= "P50024-291" || y.id >=
				"P50025-291").count > 0 then false else true; //SE - Added NPI softwares for PERT 24824		12-Jan-2022

			}
			constraint MSWindows19Rule48 {
				message: "Additional Licenses (Add Lic) may be selected in any of the following scenarios: <br>
					'Additional license' for Windows Server 2019 Standard. Each Hitachi OEM base license for Windows Server 2019 Standard provides rights for up to 16 cores and two virtual OSes or Hyper-V containers when all physical cores on a server are licensed (minimum of 8 cores per proc and 16 cores per server). 
						'Additional licenses' may be added to a server to support more cores and/or more concurrent VMs. For every two additional VMs, all the cores in the server have to be licensed again. They are available in packs of 2 and 16 Cores.<br>
					'Additional license' for Windows Server 2019 Datacenter. Each Hitachi OEM base license for Windows Server 2019 Datacenter supports 16 cores and permits unlimited virtual OSes and Hyper-V containers on a server. 'Additional licenses' may be added to a server to support additional cores. They are available in packs of 2 and 16 Cores";
				body:
				if thisInst.selected(MSWindows2012Essentials).filter(y => y.id >= "P12459-291" || y.id >= "P12460-291" || y.id >= "P12461-291" || y.id >= "P12462-291" || y.id >= "P50022-291" || y.id >= "P50023-291" || y.id >= "P50024-291" || y.id >=
				"P50025-291").count > 0 then false else true; //SE - Added NPI softwares for PERT 24824		12-Jan-2022

			}
			constraint MSWindows19Rule49 {
				message: "Additional licenses: Minimum of Additional Licenses are total cores on the Server including all processors (The Base license covers 16 cores)  MAX: No Limit ";
				body:
				if thisInst.selected(MSWindows2012Essentials).filter(y => y.id >= "P12459-291" || y.id >= "P12460-291" || y.id >= "P12461-291" || y.id >= "P12462-291" || y.id >= "P50022-291" || y.id >= "P50023-291" || y.id >= "P50024-291" || y.id >=
				"P50025-291").count > 0 then false else true; //SE - Added NPI softwares for PERT 24824		12-Jan-2022

			}

			//SE - Added NPI softwares for PERT 24824		12-Jan-2022
			constraint MSWindows19Rule51_info {
				message: "This is a pre-installed OS SKU";
				body:
				if(thisInst.selected(MSWindows2012Essentials).filter(y => y.id <=
				"P12456-291 P12459-291 P12460-291 P12461-291 P12462-291 P22000-291 P27982-291 P50022-291 P50023-291 P50024-291 P50025-291 P11071-291 P12456-291 P12468-291 P22001-291 P50025-291 P58617-291 P58618-291 P58619-291").count > 0 or thisInst.selected(HPCRHEL).filter(y =>
				y.id <= "Q6J43A Q6J44A R4T04A").count > 0 or thisInst.selected(HPCSLES).filter(y => y.id <= "Q6J45A Q6J46A R1Z69A").count > 0 or thisInst.selected(MSWindows2012Server).filter(y => y.id <= "P11059-041 P11059-291 P11059-B21").count > 0)
				then false else true;

				//SE - Added missing SW SKU's for PERT 24866			16-Feb-2022   

			}
			constraint RedHatOCPRule5 {
				message: "If you are configuring HPE Inference Solution – ProLiant, we recommend the SOW for HPE PointNext A&PS Service for RH OCP consultative implementation services. Please use the link below to include the SOW to your customer offering
								https://hpe-my.sharepoint.com/personal/trish_macinnis_hpe_com/_layouts/15/AccessDenied.aspx?Source=https%3A%2F%2Fhpe%2Dmy%2Esharepoint%2Ecom%2Fpersonal%2Ftrish%5Fmacinnis%5Fhpe%5Fcom%2F%5Flayouts%2F15%2Fdoc2%2Easpx%3Fsourcedoc%3D%257B8068EAEA%2D22E5%2D4625%2D968D%2D771FBEC42D26%257D%26file%3DDirect%2520FP%2520HPE%2520Container%2520Adoption%2520Serivce%2520for%2520RHOCP%2520SOW%2520%2Dv0%2E4%2Edocm%26action%3Ddefault%26mobileredirect%3Dtrue%26cid%3D45d46125%2D7595%2D4e2f%2Da66b%2D4c3410d5c860&correlation=30d4719f%2De000%2Db000%2D55cb%2D5822ac892ddd ";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "R6J33AAE" || y.id >= "R6J34AAE" || y.id >= "R6J35AAE").count > 0 then false else true;
			}
			constraint resellerrule5 {
				message: "This product(P11061-201) is only allowed in Brazil";
				body: if thisInst.selected(MSWindowsServer2012ROK).filter(y => y.id >= "P11061-201").count > 0 then false;
			}
			constraint resellerrule3_info {
				message: "64GB Max Memory.";
				body: if thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "P11070-041" or p.id >= "P11070-051" or p.id >= "P11070-061" or p.id >= "P11070-071" or p.id >= "P11070-131" or p.id >= "P11070-201" or p.id >= "P11070-221" or
				p.id >= "P11070-241" or p.id >= "P11070-251" or p.id >= "P11070-291" or p.id >= "P11070-331" or p.id >= "P11070-AD1" or p.id >= "P11070-B21").count > 0 then false;
			}
		}
		subsystem proliantSoftwareMediaKitsUpgradesSubsystem {
			choice ProliantSoftwareTrackingLicenseChoice {
				optional: true;
				targetClass: ProliantSoftwareTrackingLicense;
				choiceType: single_select;
				title: "Proliant Software Tracking License";
			}
			//SE - To fix the software container issue		29-Nov-2021			
			//			choice ProliantSoftwareMediaKitsChoice {
			//				optional: true;
			//				targetClass: ProliantSoftwareMediaKits;
			//				choiceType: multi_select; //RVL - ALM 110674 - Modify type of Selection.
			//				title: "Proliant Software Media Kits";
			//			}
			locationArray ProliantSoftwareSecureEncryptionArray {
				fillerClasses: SecureEncryption;
				rows: securityHwQty;
			}
			choice CloudOSChoice {
				optional: true;
				targetClass: CloudOS;
				choiceType: single_select;
				title: "Cloud OS";
			}
			choice MediaOnlyKitsChoice {
				optional: true;
				targetClass: MediaOnlyKits;
				choiceType: single_select;
				title: "Media Only Kits";
			}
			choice RedHatLinuxAddOnsChoice {
				optional: true;
				targetClass: RedHatLinuxAddOns;
				choiceType: multi_select; //RVL - ALM 110674 - Modify type of Selection.
				title: "Red Hat Linux Add Ons";
			}

			// vp 20141023 Flex SW options are not supported for EZC.
			constraint noFlexSWforEZCMediaKit {
				message: "Flex Software options are not supported for EZC.";
				body: dependency (targetEnv ("ezc", "ipcs"), SecureEncryption [ D8S84A ] = 0 && ProliantSoftwareHotplugAdvancePack [ TC422A ] = 0 && SASLicensing [ BC393B ] = 0 && SmartArrayAdvancePack [ 516474-B21 ] = 0 && SmartArrayAdvancePack [
				D7S27A ] = 0 && CloudOS [ G2E78A || G6N92A ] = 0);
			}
			// SS, PM , 7/1/2015
			locationArray DCNMLicSoftwareLocationArray {
				fillerClasses: BrocadeSoftware;
				rows: 999;
			}
			//PM - adding constraint to show only TC367A 
			constraint showOnlyOneSku {
				message: "Show only TC367A";
				body: restriction (! BrocadeSoftware [ T5517A ]);
			}
			constraint notFactoryInstalled { //junit
				message: "Software not factory installed.";
				body: restriction (! MediaOnlyKits [ 416064-B21 || 452561-B21 || BC353A || J1U56A ]);
			} //ANV_ALM_106631
			constraint RedHatRule1Info {
				message: "Software not factory installed";
				body: if thisInst.selected(RedHatLinuxAddOns).filter(y => y.id >= "A1L29A" or y.id >= "A1L29AAE" or y.id >= "A1L30A" or y.id >= "A1L30AAE" or y.id >= "G3J34AAE" or y.id >= "G3J35AAE" or y.id >= "G3J36AAE" or y.id >= "G3J37AAE" or y.id
				>= "G3J38AAE" or y.id >= "G3J39AAE" or y.id >= "G3J40AAE" or y.id >= "G3J41AAE" or y.id >= "G3J42AAE" or y.id >= "G3J43AAE" or y.id >= "G5J66AAE" or y.id >= "G5J67AAE" or y.id >= "G5J68AAE" or y.id >= "G5J69AAE" or y.id >= "R2A00AAE"
				or y.id >= "R2A01AAE" or y.id >= "R2A02AAE" or y.id >= "R2A03AAE" or y.id >= "R2A04AAE" or y.id >= "R2A05AAE").count > 0 then false; //NL modified for Pert 14484 , 21-Dec-2018

			}
			constraint RedHatRule2Info {
				message: "Red Hat doesn't provide ARM processor support or offer an ARM distribution for Moonshot platforms at this time.";
				body: if thisInst.selected(RedHatLinuxAddOns).filter(y => y.id >= "G3J34AAE" or y.id >= "G3J34A" or y.id >= "G3J35A" or y.id >= "G3J35AAE" or y.id >= "G3J36A" or y.id >= "G3J36AAE" or y.id >= "G3J37A" or y.id >= "G3J37AAE" or y.id >=
				"G3J38A" or y.id >= "G3J38AAE" or y.id >= "G3J39A" or y.id >= "G3J39AAE" or y.id >= "G3J40A" or y.id >= "G3J40AAE" or y.id >= "G3J41A" or y.id >= "G3J41AAE" or y.id >= "G3J42A" or y.id >= "G3J42AAE" or y.id >= "G3J43A" or y.id >=
				"G3J43AAE" or y.id >= "G5J66A" or y.id >= "G5J66AAE" or y.id >= "G5J67A" or y.id >= "G5J67AAE" or y.id >= "G5J68A" or y.id >= "G5J68AAE" or y.id >= "G5J69A" or y.id >= "G5J69AAE" or y.id >= "R2A00A" or y.id >= "R2A00AAE" or y.id >=
				"R2A01A" or y.id >= "R2A01AAE" or y.id >= "R2A02A" or y.id >= "R2A02AAE" or y.id >= "R2A03A" or y.id >= "R2A03AAE" or y.id >= "R2A04A" or y.id >= "R2A04AAE" or y.id >= "R2A05A" or y.id >= "R2A05AAE").count > 0 then false; //NL modified for Pert 14484 , 21-Dec-2018

			}
			constraint RedHatRule3Info {
				message: "2 socket pair can be stackable";
				body: if thisInst.selected(RedHatLinuxAddOns).filter(y => y.id >= "G3J42A" or y.id >= "G3J42AAE" or y.id >= "G3J43A" or y.id >= "G3J43AAE" or y.id >= "G5J66A" or y.id >= "G5J66AAE" or y.id >= "G5J67A" or y.id >= "G5J67AAE" or y.id >=
				"G5J68A" or y.id >= "G5J68AAE" or y.id >= "G5J69A" or y.id >= "G5J69AAE" or y.id >= "R2A03A" or y.id >= "R2A03AAE" or y.id >= "R2A04A" or y.id >= "R2A04AAE" or y.id >= "R2A05A" or y.id >= "R2A05AAE").count > 0 then false; //NL modified for Pert 14484 , 21-Dec-2018

			}
			constraint RedHatRule6Info {
				message: "Need Smart Management Add-on";
				body: if thisInst.selected(RedHatLinuxAddOns).filter(y => y.id >= "A1L29A" or y.id >= "A1L29AAE" or y.id >= "A1L30A" or y.id >= "A1L30AAE").count > 0 then false;
			}
			constraint RedHatRule9Warning {
				message: "Red Hat doesn't provide ARM processor on Moonshot platforms support at this time";
				body: if thisInst.selected(RedHatLinuxAddOns).filter(y => y.id >= "A1L29A" or y.id >= "A1L29AAE" or y.id >= "A1L30A" or y.id >= "A1L30AAE").count > 0 then false;
			}
			constraint doesntCountTowardMaxOS { //junit
				message: "Important Note:   This part number does not count against the Max of 1 OS selection per server.";
				body: restriction (! MediaOnlyKits [ 416064-B21 || 452561-B21 || BC353A || J1U56A ]);
			}
			constraint contractRequired { //junit
				message: "Customer must have a signed contract with HP prior to purchasing the tracking license product.";
				body:
				thisInst.proliantSoftwareMediaKitsUpgradesSubsystem.selected(SmartArrayAdvancePack).filter(b => b.id >= "516475-B21").count = 0; //JGG ALM 104594

			}
			constraint redHatSubscriptionOnProliantServerNeeded {
				message: "A valid Red Hat subscription on a ProLiant platform is needed in order to activate this license.";
				body: if thisInst.selected(RedHatLinuxAddOns).filter(p => p.id >= "A1L29A" or p.id >= "A1L29AAE" or p.id >= "A1L30A" or p.id >= "A1L30AAE").count > 0 then false else true;
			}
			constraint RedHatRule5Warning {
				message: "Must match RHEL socket pair and virtual guest.";
				body: if thisInst.selected(RedHatLinuxAddOns).filter(y => y.id >= "G3J34AAE" or y.id >= "G3J34A" or y.id >= "G3J35A" or y.id >= "G3J35AAE" or y.id >= "G3J36A" or y.id >= "G3J36AAE" or y.id >= "G3J37A" or y.id >= "G3J37AAE" or y.id >=
				"G3J38A" or y.id >= "G3J38AAE" or y.id >= "G3J39A" or y.id >= "G3J39AAE" or y.id >= "G3J40A" or y.id >= "G3J40AAE" or y.id >= "G3J41A" or y.id >= "G3J41AAE" or y.id >= "G3J42A" or y.id >= "G3J42AAE" or y.id >= "G3J43A" or y.id >=
				"G3J43AAE" or y.id >= "G5J66A" or y.id >= "G5J66AAE" or y.id >= "G5J67A" or y.id >= "G5J67AAE" or y.id >= "G5J68A" or y.id >= "G5J68AAE" or y.id >= "G5J69A" or y.id >= "G5J69AAE" or y.id >= "R2A00A" or y.id >= "R2A00AAE" or y.id >=
				"R2A01A" or y.id >= "R2A01AAE" or y.id >= "R2A02A" or y.id >= "R2A02AAE" or y.id >= "R2A03A" or y.id >= "R2A03AAE" or y.id >= "R2A04A" or y.id >= "R2A04AAE" or y.id >= "R2A05A" or y.id >= "R2A05AAE").count > 0 then false; //NL modified for Pert 14484 , 21-Dec-2018	

			}
			constraint notsupportedSKU_OCC {
				message: "These SKS's are not supported for OCC.";
				body: dependency (targetEnv ("ezc", "ipcs", "sce", "eocs"), ProliantSoftwareMediaKits [ Q5T84A || Q5T85A ] = 0);
			}
		}
		subsystem msWindowsServerROK {
			choice MSWindowsServer2008ROKChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: MSWindowsServer2008ROK;
			}
			choice MSWindowsServer2011ROKChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: MSWindowsServer2011ROK;
			}
			choice MSWindowsServerBundlesROKChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: MSWindowsServerBundlesROK;
			}
			choice MSWindowsServer2012ROKChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: MSWindowsServer2012ROK;
			}
			constraint resaleOptionKitInfoMsg {
				message:
				"Reseller Option is ONLY available for HP Channel Partner so it can be resold. DON'T use this product if you're HP Sales or Direct Sales, as HP will be in violation of Licensing Agreement. COA's are not replaceable. Please adhere to the server prior to delivery to an end user.";
				body: selected(MSWindowsServer2012ROK).count = 0;
			}
			constraint resaleOptionKit2008InfoMsg {
				message:
				"Reseller Option is ONLY available for HP Channel Partner so it can be resold. DON'T use this product if you're HP Sales or Direct Sales, as HP will be in violation of Licensing Agreement. COA's are not replaceable. Please adhere to the server prior to delivery to an end user.";
				body: selected(MSWindowsServer2008ROK).count = 0;
			}
			ifEffective KES_VAL {
				constraint hideOCCProducts {
					message: "";
					body: dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || BL460CG10 || BL460CG10OEM || DL360Gen10 || DL360Gen10OEM || DL380Gen10 || DL380Gen10OEM || DL560Gen10 || MicroServerG10 || M510Cartridge || M710xCartridge ||
					Synergy480Gen10 || Synergy480Gen10OEM || Synergy660Gen10 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM || Synergy660Gen10), MSWindowsServer2012ROK [ 748921-B21 || 871148-041 ||
					871148-051 || 871148-061 || 871148-071 || 871148-131 || 871148-201 || 871148-221 || 871148-241 || 871148-251 || 871148-291 || 871148-331 || 871148-AA1 || 871148-AB1 || 871148-AD1 || 871148-B21 || 871153-041 || 871153-051 ||
					871153-061 || 871153-071 || 871153-131 || 871153-201 || 871153-221 || 871153-241 || 871153-251 || 871153-291 || 871153-331 || 871153-AA1 || 871153-AB1 || 871153-AD1 || 871153-B21 || 871154-041 || 871154-051 || 871154-061 ||
					871154-291 || 871154-B21 ] = 0);
				}
			}
			otherwise {
				constraint hideOCCProducts {
					message: "";
					body: dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || Apollo4200Gen9 || xl450gen9 || XL230aG9 || XL230KG10 || XL250aG9 || XL260AGen9 || XL270dG9 || XL730fG9Server || XL750fG9 || BL460CG10 || BL460CG10OEM || BL460CG9 ||
					BL460CGEN9OEM || BL660CGen9 || DL120G9 || DL160G9 || DL180G9 || DL20G9 || DL20G9OEM || DL360Gen10 || DL360Gen10OEM || DL360G9 || DL360G9OEM || DL380Gen10 || DL380Gen10OEM || DL380G9 || DL380G9OEM || DL385pGen8 || DL560Gen10 ||
					DL560G9 || DL580G9 || DL60G9 || DL80G9 || ECML110G9 || MicroServerG10 || MicroServerGen8 || ML10Gen9 || ML110Gen9 || ML150Gen9 || ML30Gen9 || ML350Gen9 || M510Cartridge || M710xCartridge || Synergy480Gen10 || Synergy480Gen10OEM ||
					Synergy480Gen9 || Synergy620Gen9 || Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM || Synergy480Gen9 || Synergy620Gen9 ||
					Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9), MSWindowsServer2012ROK [ 748921-B21 || 871148-041 || 871148-051 || 871148-061 || 871148-071 || 871148-131 || 871148-201 || 871148-221 || 871148-241 || 871148-251 ||
					871148-291 || 871148-331 || 871148-AA1 || 871148-AB1 || 871148-AD1 || 871148-B21 || 871153-041 || 871153-051 || 871153-061 || 871153-071 || 871153-131 || 871153-201 || 871153-221 || 871153-241 || 871153-251 || 871153-291 ||
					871153-331 || 871153-AA1 || 871153-AB1 || 871153-AD1 || 871153-B21 || 871154-041 || 871154-051 || 871154-061 || 871154-291 || 871154-B21 ] = 0);
				}
			}
		}
		subsystem OperatingSystemsSubsystem {
			locationArray OperatingLocArray {
				rows: iNumRedHatHPC; //NL changed as 100 from 99 for ALM: 121184 , 31- july-2018				
				fillerClasses: OperatingSystem, HPCSoftware, MSWindowsServerROK, RedHatLinuxAddOns, DropboxSoftware, VMWareSoftware, MediaOnlyKits, DockerCSEngineSoftware, SuseContainers;
				//SE - To fix the software container issue 		29-Nov-2021  ProliantSoftwareMediaKits, 

			}
			//MS for PPM: 76708			
			locationArray OEMSoftwareArray {
				rows: 999; //NL modified for PERT 14596,26-Apr-2019
				fillerClasses: OEMSoftwareNFV, casSoftware;
			}
			constraint SGISoftwareRule1 {
				message: "Quantity is calculated as 1 SKU per server or 1 SKU per solution for clustered configurations.";
				body: restriction (HPCRHEL [ Q6J44A ] <= 1);
				restriction (HPCSLES [ Q6J46A ] <= 1);
				restriction (HPCSLES [ R1Z69A ] <= 1); //NL added for Pert 14484 , 21-Dec-2018	

			}
			constraint Unsupported_for_china_q6j4a {
				message: "Available everywhere except China";
				body: not (thisInst.id >= "Q6J44A") or not (thisConfig.getProperty("country") = "CN");
			}
			constraint NFVSoftwareRule1warning {
				message: " HPE NFV PLM needs to approve the build before the order can be placed. <br>
						   This build needs to be reviewed by the Product Management ( PLM ) team. Please contact PLM at ' telcohit-plm@hpe.com ' for approval.<br>
						   NOTE: A FAN Override is required. ";
				body: if thisInst.selected(OEMSoftwareNFV).filter(y => y.id >= "Q1F35A" or y.id >= "Q1F36A" or y.id >= "Q1F37A" or y.id >= "Q1F38A" or y.id >= "Q1F40A" or y.id >= "Q1F41A" or y.id >= "Q1F42A" or y.id >= "Q2N45A" or y.id >= "Q7L16A" or
				y.id >= "Q7L17A").count > 0 || thisInst.selected(casSoftware).filter(y => y.id >= "Q1F39A" or y.id >= "Q2B20A").count > 0 then false;
			}
			//SE - Added for PERT 24687			14-Oct-2021
			constraint MSWindowsServerEssRule22and23Info {
				message: " 64GB Max Memory.</br>
								Hard Drive of minimum 160GB is required";
				body: if thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "871140-041" or p.id >= "871140-051" or p.id >= "871140-061" or p.id >= "871140-071" or p.id >= "871140-291" or p.id >= "871140-AD1" or p.id >= "871140-B22"
				//MS for PERT: 14472
				or p.id >= "P11071-291" or p.id >= "P11071-B21" or p.id >= "P11072-041" or p.id >= "P11072-051" or p.id >= "P11072-061" or p.id >= "P11072-071" or p.id >= "P11072-291" or p.id >= "P11072-AD1" or p.id >= "P11072-B21").count > 0 then
				false;
			}
			constraint ReleaseOptkitRule3W {
				message: " 64GB Max Memory";
				body: if thisInst.selected(MSWindowsServer2012ROK).filter(p => p.id >= "871141-041" or p.id >= "871141-051" or p.id >= "871141-061" or p.id >= "871141-071" or p.id >= "871141-131" or p.id >= "871141-201" or p.id >= "871141-221" or
				p.id >= "871141-241" or p.id >= "871141-251" or p.id >= "871141-291" or p.id >= "871141-331" or p.id >= "871141-AD1" or p.id >= "871141-B22"
				//MS for PERT: 14472
				or p.id >= "P11070-041" or p.id >= "P11070-051" or p.id >= "P11070-061" or p.id >= "P11070-071" or p.id >= "P11070-131" or p.id >= "P11070-201" or p.id >= "P11070-221" or p.id >= "P11070-241" or p.id >= "P11070-251" or p.id >=
				"P11070-291" or p.id >= "P11070-331" or p.id >= "P11070-AD1" or p.id >= "P11070-B21" or p.id >= "P11070-B71").count > 0 then false;
			}
			constraint MSWindowsServerNotPreinstall_Rule22W {
			// 22-Jan-2019 PERT 17895 Replced with new message Orderable as 1 downgrade SKU per 1 Windows Server 2016 or 2019 Standard or Datacenter OS license on the order
			//Versions are important, 2016 or 2019 Standard can only get Standard downgrade: 2016 or 2019 Datacenter can get Datacenter or Standard downgrade.
				message: "Orderable as 1 downgrade SKU per 1 Windows Server 2019 Standard or Datacenter OS license on the order
                          - Factory integrated only
                          -  Versions are important, 2019 Standard can only get Standard downgrade: 2019 Datacenter can get Datacenter or Standard downgrade. 
                          - Language has to match 
                          Can only be ordered in conjunction with Windows Server 2019  Standard or Datacenter.";
				body: dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-041 || 871140-041 || P11072-041 ], DowngradedMedia [ 756691-291 || 756691-371 || 756691-A41 || 756691-B21 || 756692-291 || 756692-371 || 756692-B21 || P00492-021
				|| P00492-291 || P00492-B21 || P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-051 || 871140-051 || P11072-051 ], DowngradedMedia [ 756691-291 || 756691-371 || 756691-A41 || 756692-291 || 756692-371 || P00492-021 || P00492-291 || P00492-B21 ||
				P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-061 || 871140-061 || P11072-061 ], DowngradedMedia [ 756691-291 || 756691-371 || 756691-A41 || 756692-291 || 756692-371 || P00492-021 || P00492-291 || P00492-B21 ||
				P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-071 || 871140-061 || P11072-071 ], DowngradedMedia [ 756691-291 || 756691-371 || 756691-A41 || 756692-291 || 756692-371 || P00492-021 || P00492-291 || P00492-B21 ||
				P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-AD1 || 871140-AD1 || P11072-AD1 ], DowngradedMedia [ 756691-291 || 756691-A41 || 756691-B21 || 756692-291 || 756692-B21 || P00492-021 || P00492-291 || P00492-B21 ||
				P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-B22 || 871140-B22 ], DowngradedMedia [ 756691-291 || 756691-A41 || 756692-291 || P00492-021 || P00492-291 || P00492-B21 || P00493-041 || P00493-051 || P00493-061 ||
				P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11072-291 ], DowngradedMedia [ P00492-021 || P00492-291 || P00492-B21 || P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 ||
				P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11072-B21 ], DowngradedMedia [ P00492-021 || P00492-291 || P00492-B21 || P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 ||
				P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
			}
		}
		subsystem ManagementSoftwareSubsystem {
			locationArray ManagementLocArray {
			//MS for BU request rows: 99;
				rows: iNumIloAdvanced;
				fillerClasses: InsightSoftware, MediaOptions, HPCSoftware, ConvergedInfrastructureManagementSoftware, ProliantSoftware, VMWareSoftware; //RV 22-Feb-2019 ALM.127290, WorkloadAwareSecurity;

			}
			//AB 04-May-2018 for ALM ID: 118342
			/*constraint global_ILO_max_limit1 {
				message: "Only one iLO license SKU across all iLO license category should be allowed when it is ordered with factory integrated option 0D1</br>
					  Max 1 of iLO SKU with factory integrated option 0D1 can be selected per server.";
				body:
				{
				//					val countilo= thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21" or y.id >= "512488-B21" or y.id >= "512489-B21" or y.id >= "BD505A" or y.id >= "BD502A" or y.id >= "Q7D90A" or y.id >= "Q1P77A" or y.id >= "Q1P78A" or y.id >= "Q8T72A" or y.id >= "Q8T73A" or y.id >= "E6U59ABE" or y.id >= "E6U60ABE" or y.id >= "E6U61ABE"
				//				    or y.id >= "E6U62ABE" or y.id >= "E6U63ABE" or y.id >= "E6U64ABE" or y.id >= "G6F49A" or y.id >= "M3X99B" or y.id >= "M3X99C" or y.id >= "Q1P79A" or y.id >= "Q1P80A" or y.id >= "Q7E31A" or y.id >= "Q7E33A" or y.id >= "BD774A" or y.id >= "BD775A").count;
				//					val countiso= thisInst.selected(InsightSoftware).filter(y => y.id >= "Q8T72A" or y.id >= "Q8T73A").count;
				//					//if thisConfig.getInstancesOfModel("468640-B21").count() = 0  and (countilo+countiso) > 1 then false else true;//PS_ALM_119020
				//					if thisConfig.getInstancesOfModel("867056-B21").count() = 0  and (countilo+countiso) > 1 then false else true;//MS for ALM
				//				   //(countilo+countiso) <= 1;
				//MS for ALM: 120068
					if (!thisConfig.getInstancesOfModel("Apollo2000r2x00").isEmpty) then true
					else if (!thisConfig.getInstancesOfModel("SDXModel").isEmpty) then true
					else if ! (thisConfig.getInstancesOfModel("BulkPackModel").count + thisConfig.getInstancesOfModel("Edgeline4000Chassis").count + thisConfig.getInstancesOfModel("XL170RG10").count +
					thisConfig.getInstancesOfModel("Apollo2000XL190RG10").count + thisConfig.getInstancesOfModel("XL270dG9").count) > 0 then thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21" or y.id >= "512488-B21" or y.id >= "512489-B21" or y.id >= "BD505A" or y.id >= "BD502A" or
					y.id >= "Q7D90A" or y.id >= "Q1P77A" or y.id >= "Q1P78A" or y.id >= "Q8T72A" or y.id >= "Q8T73A" or y.id >= "E6U59ABE" or y.id >= "E6U60ABE" or y.id >= "E6U61ABE" or y.id >= "E6U62ABE" or y.id >= "E6U63ABE" or y.id >= "E6U64ABE" or
					y.id >= "G6F49A" or y.id >= "M3X99B" or y.id >= "M3X99C" or y.id >= "Q1P79A" or y.id >= "Q1P80A" or y.id >= "Q7E31A" or y.id >= "Q7E33A" or y.id >= "BD774A" or y.id >= "BD775A").count + thisInst.selected(InsightSoftware).filter(y =>
					y.id >= "Q8T72A" or y.id >= "Q8T73A").count <= 1;
				}
			}*/
//RV 03-Sep-2019  removed BTO skus E6U59ABE, E6U64ABE from this rule since this rule is applicable only to 0D1 products
			constraint global_ILO_max_limit1 {
				message: "Only one iLO license SKU across all iLO license category should be allowed when it is ordered with factory integrated option 0D1</br>
					  		Max 1 of iLO SKU with factory integrated option 0D1 can be selected per server.";
				body:
				{
					val piLO = "512485-B21 512488-B21 512489-B21 BD502A BD505A E6U60ABE E6U61ABE E6U62ABE E6U63ABE Q1P77A Q1P78A Q7D90A Q8T72A Q8T73A G6F49A M3X99B M3X99C Q1P79A Q1P80A Q7E31A Q7E33A BD774A BD775A";
					val pInsightSW = "Q8T72A Q8T73A";
					val ciLO = thisInst.selected(IntegratedLightsOut).filter(x => split(x.id, "#").get(0) <= piLO).count;
					val cInsightSW = thisInst.selected(InsightSoftware).filter(x => split(x.id, "#").get(0) <= pInsightSW).count;
					if(! thisConfig.getInstancesOfModel("Apollo2000r2x00").isEmpty) then true else if(! thisConfig.getInstancesOfModel("SDXModel").isEmpty) then true //CPT ALM 126204 exclude SDX Model
					else if(! thisConfig.getInstancesOfModel("Apollor2x00ChassisG10Plus").isEmpty) then true //SE - Added Apollor2x00ChassisG10Plus into this constraint as per KA request	26-Aug-2021
					else if ! (thisConfig.getInstancesOfModel("BulkPackModel").count + thisConfig.getInstancesOfModel("Edgeline4000Chassis").count + thisConfig.getInstancesOfModel("XL170RG10").count + thisConfig.getInstancesOfModel("C7000Enclosure").count
					+ thisConfig.getInstancesOfModel("Apollo2000XL190RG10").count + thisConfig.getInstancesOfModel("XL270dG9").count + thisConfig.getInstancesOfModel("Edgeline8kBlade").count + thisConfig.getInstancesOfModel("XL230KG10").count +
					thisConfig.getInstancesOfModel("XL225nG10Plus").count) > 0 then ciLO + cInsightSW <= 1;
					//RS ALM 132982/132985 15Oct2019 adding edgeline 8k this.Id = Edgeline8kBlade       //PRS Added class XL225nG10Plus for ALM-135768 24-Apr-2020

				}
			}
			constraint MicroserverBD505ARule {
				message: "For Microserver Gen10 Plus , when any of the iLO Advance licenses is selected, then the enablement kit(P13788-B21) is a prerequisite";
				body:
				if(thisInst.id >= "P16005-001" || thisInst.id >= "P16005-291" || thisInst.id >= "P16005-371" || thisInst.id >= "P16005-421" || thisInst.id >= "P16005-AA1" || thisInst.id >= "P16006-001" || thisInst.id >= "P16006-291" || thisInst.id >=
				"P16006-371" || thisInst.id >= "P16006-421" || thisInst.id >= "P18584-001" || thisInst.id >= "P18584-421" || thisInst.id >= "P19752-371") and thisInst.selected(IntegratedLightsOut).count > 0 then
				thisInst.selected(ProliantManagementHardware).filter(x => split(x.id, "#").get(0) <= "P13788-B21").count > 0;
			}
			constraint ilo_rl21_Warning {
				message: "You have selected an AKA Tracking license.   This is a special license and requires that you already have an AKA contract signed with HPE.<br>  
				
				An AKA contract is a 1, 2, or 3 years contract where customer commits to purchase a minimum of 100 licenses during the duration of contract .<br>
				 Upon execution of this contract  HPE delivers to customer the Activation Key(s) ( AKA key(s)) that will be used to activate the BD507A licenses.<br>
				The Activation Key(s) are intended for future purchases of license activations.  If you have already an active AKA contract please proceed with this. <br> 
				Please note that you will not receive any license entitlement to activate as you need to use the AKA key that you have received upon signing the agreement with HPE. <br>
				If you don’t have an AKA contract in place already please select a different SKU. <br> 
				If you are interested to discuss an AKA further  contract please contact aka.request@hpe.com";
				body: if thisInst.selected(IntegratedLightsOut).filter(x => x.id >= "512487-B21" or x.id >= "BD507A").count > 0 then false;
			}
		}
		subsystem VirtualizationSubsystem {
			locationArray VirtualizationLocArray {
				rows: 99;
				fillerClasses: VMWareSoftware;
			}

			//SE - to fix the software container issue		02-Dec-2021
			constraint max_for_vmr_vspr_edt {
				message: "Min 0 and Max 10";
				body: restriction (VMWareVSphereEditions <= 10);
			}
			constraint Max10VMware {
				message: "Max 10 CTO models";
				enabled: // JCN PERF  
				count(thisInst.subTypes * "0D1") > 0;
				body: dependency (DLG10Common [ 0D1 ] or BLG10Common [ 0D1 ] or MLG10Common [ 0D1 ], VMWareVCenterProducts [ subCategory = "VMwareVCenter" ] <= 10);
				dependency (DLG10Common [ 0D1 ] or BLG10Common [ 0D1 ] or MLG10Common [ 0D1 ], VMWareVCenterProducts [ subCategory = "vRealize" ] <= 10);
				dependency (DLG10Common [ 0D1 ] or BLG10Common [ 0D1 ] or MLG10Common [ 0D1 ], VMWareVCenterSrmProducts [ subCategory = "SRM" ] <= 10);
				dependency (DLG10Common [ 0D1 ] or BLG10Common [ 0D1 ] or MLG10Common [ 0D1 ] or EdgelineSeriesCommon [ 0D1 ], VMWareVCloudProducts [ subCategory = "vCloudSuite" ] <= 10); //PRS Max qty restricted for EL for PERT-15687 26 June 2019
				dependency (DLG10Common [ 0D1 ] or BLG10Common [ 0D1 ] or MLG10Common [ 0D1 ], VMWareClientVirtualizationProducts [ subCategory = "VMwareVS" ] <= 10);
				dependency (DLG10Common [ 0D1 ] or BLG10Common [ 0D1 ] or MLG10Common [ 0D1 ], VMWareClientVirtualizationProducts [ subCategory = "vRealize" ] <= 10);
				dependency (DLG10Common [ 0D1 ] or BLG10Common [ 0D1 ] or MLG10Common [ 0D1 ], VMWareClientVirtualizationProducts [ subCategory = "Horizon" ] <= 10);
				dependency (DLG10Common [ 0D1 ] or BLG10Common [ 0D1 ] or MLG10Common [ 0D1 ] or targetEnv ("sce", "eocs", "ezc", "ipcs"), VMWareClientVirtualizationProducts [ subCategory = "Horizon" ] <= 10); //RVL - ALM 109880 - limit to select 0 - 10 
				dependency (DLG10Common [ 0D1 ] or BLG10Common [ 0D1 ] or MLG10Common [ 0D1 ] or targetEnv ("sce", "eocs", "ezc", "ipcs"), VMWareClientVirtualizationProducts [ subCategory = "vRealize" ] <= 10); //RVL - ALM 109880 - limit to select 0 – 10

			}
			constraint PreInstalledOperatingSys_Rule4W {
				message: "If ClearOS is selected then the AHCI option should also be selected.";
				body: if thisInst.selected(DropboxSoftware).filter(x => x.id >= "874549-B21").count > 0 then false;
			}
			constraint Nvidiaswrule5Warning {
				message: "Renewal SKUs are only available for customers who have previously purchased Initial SKUs";
				body: if thisInst.selected(NVIDIAGPUSW).filter(x => x.id >= "R3Q40AAE" or x.id >= "R3Q42AAE" or x.id >= "R3Q63AAE" or x.id >= "R3Q68AAE" or x.id >= "R3Q73AAE" or x.id >= "R3Q79AAE" or x.id >= "R3Q81AAE" or x.id >= "R3Q95AAE" or x.id
				>= "R3R02AAE" or x.id >= "R3R03AAE" or x.id >= "R3R07AAE" or x.id >= "R3R12AAE" or x.id >= "R6H03AAE").count > 0 then false;
			}

			
			ifEffective MFG_PERT_25108{
			//RV 30-Sep-2020 PERT 20204
			constraint Nvidiaswrule10Err {
				message: "When this Perpetual license is ordered, then any one of the below GRID vApps Prod SUMs license must be selected.
                          R3Q77AAE           GRID vApps Prod SUMS 5 year 1 CCU";
                //MFG - Removed as per BU arequest - Pierogui June 6 2022
				//R3Q77AAE           GRID vApps Prod SUMS 5 year 1 CCU
				body:
				{
					val listsoftware = "R3Q77AAE"; //MFG PERT 25108
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3R01AAE").count > 0 then softwarecount > 0;
				}                                                        
			}	
			}otherwise{
			//RV 30-Sep-2020 PERT 20204
			constraint Nvidiaswrule10Err {
				message: "When the Perpetual license R3R01AAE is ordered, then any one of the below GRID vApps Prod SUMs license must be selected <br>
								R3Q76AAE           GRID vApps Prod SUMS 4 year 1 CCU <br>
								R3Q77AAE           GRID vApps Prod SUMS 5 year 1 CCU ";
            //RV 13-Mar-2021 SMR Pink pig 	R3Q73AAE           GRID vApps Prod SUMS 1 yr Renew 1 CCU";
				body:
				{
					val listsoftware = "R3Q76AAE R3Q77AAE"; //RV 13-Mar-2021 SMR Pink pig R3Q73AAE
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3R01AAE").count > 0 then softwarecount > 0;
				}
			}	
			}
			
			
			
			

			//RV 30-Sep-2020 PERT 20204
			constraint Nvidiaswrule11Err {
				message: "Whenever GRID vApps Prod SUM license R3Q76AAE/ R3Q77AAE is ordered, then the below mentioned Perpetual license must be selected <br>
							  R3R01AAE           GRID vApps Perpetual License, 1 CCU";
//					"Whenever GRID vApps Prod SUM license R3Q76AAE/ R3Q77AAE / R3Q73AAE is ordered, then the below mentioned Perpetual license must be selected <br>
				//								R3R01AAE           GRID vApps Perpetual License, 1 CCU";
				body:
				{
					val listsoftware = "R3Q76AAE R3Q77AAE"; // PRS Removed R3Q73AAE for ALM-138587 12-Nov-2020
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if softwarecount > 0 then thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3R01AAE").count > 0;
				}
			}

            ifEffective MFG_PERT_25108{            		
			//MFG 06-June-2022 PERT 25108
			constraint Nvidiaswrule12Err {
				message: "STOP ERROR : When this Perpetual license is ordered, then any one of the below GRID vPC Prod SUMs license must be selected <br>
						  R3R21AAE           GRID vPC Production SUMS 5 year 1 CCU";
                //MFG - Removed as per BU arequest - Pierogui June 6 2022 
				//R3R21AAE           GRID vPC Production SUMS 5 year 1 CCU
				body:
				{
					val listsoftware = "R3R21AAE "; // 
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3R06AAE").count > 0 then softwarecount > 0;
				}
			}	
            }otherwise{
            //RV 30-Sep-2020 PERT 20204
			constraint Nvidiaswrule12Err {
				message: "When the Perpetual license R3R06AAE is ordered, then any one of the below GRID vPC Prod SUMs license must be selected <br>
								R3R20AAE           GRID vPC Production SUMS 4 year 1 CCU<br>
								R3R21AAE           GRID vPC Production SUMS 5 year 1 CCU";
                //SE - Removed As per BU request		17-Nov-2021
				//R3R07AAE           GRID vPC Prod SUMS 1 yr Renew 1CCU";
				body:
				{
					val listsoftware = "R3R20AAE R3R21AAE "; // R3R07AAE
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3R06AAE").count > 0 then softwarecount > 0;
				}
			}	
            }   
			//RV 30-Sep-2020 PERT 20204
			constraint Nvidiaswrule13Err {
				message: "Whenever GRID vPC Prod SUM license R3R20AAE/R3R21AAE is ordered, then the below mentioned Perpetual license must be selected <br>
							  R3R06AAE           NVIDIA GRID vPC 1CU Perp E-LTU";
//					"Whenever GRID vPC Prod SUM license R3R20AAE/R3R21AAE/R3R07AAE is ordered, then the below mentioned Perpetual license must be selected <br>
				//								R3R06AAE           NVIDIA GRID vPC 1CU Perp E-LTU
				//								";
				body:
				{
					val listsoftware = "R3R20AAE R3R21AAE"; // PRS Removed R3R07AAE for ALM-138587 12-Nov-2020
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if softwarecount > 0 then thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3R06AAE").count > 0;
				}
			}

			ifEffective MFG_PERT_25108{			
			//RV 30-Sep-2020 PERT 20204
			constraint Nvidiaswrule14Err {
				message: "STOP ERROR : When this Perpetual license is ordered, then any one of the below Quadro vDWS Prod SUMs license must be selected.<br>
                          R3Q67AAE           Quadro vDWS Production SUMS 5 year 1 CCU";
                //MFG - Removed as per BU arequest - Pierogui June 6 2022
				//R3Q67AAE           Quadro vDWS Production SUMS 5 year 1 CCU
				body:
				{
					val listsoftware = "R3Q66AAE"; // R3Q63AAE";
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3Q93AAE").count > 0 then softwarecount > 0;
				}
			}	
			}otherwise{
			//RV 29-Sep-2020 PERT 20204
			constraint Nvidiaswrule14Err {
				message: "When the Perpetual license R3Q93AAE is ordered, then any one of the below GRID vPC Prod SUMs license must be selected <br>
								R3Q66AAE           Quadro vDWS Production SUMS 4 year 1 CCU<br>
								R3Q67AAE           Quadro vDWS Production SUMS 5 year 1 CCU";
                //R3Q63AAE           Quadro vDWS Prod SUMS 1 yr Renewal 1 CCU";
				body:
				{
					val listsoftware = "R3Q66AAE R3Q67AAE"; // R3Q63AAE";
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3Q93AAE").count > 0 then softwarecount > 0;
				}
			}	
			}

			//RV 29-Sep-2020 PERT 20204
			constraint Nvidiaswrule15Err {
				message: "Whenever Quadro vDMS Production SUMS license R3Q66AAE/R3Q67AAE is ordered, then the below mentioned Perpetual license must be selected <br>
 						      R3Q93AAE           Quadro vDWS Perpetual License, 1 CCU";
//					"Whenever Quadro vDMS Production SUMS license R3Q76AAE/R3Q77AAE/R3Q73AAE is ordered, then the below mentioned Perpetual license must be selected <br>
				//								R3Q93AAE           Quadro vDWS Perpetual License, 1 CCU 
				//								";
				body:
				{
					val listsoftware = "R3Q66AAE R3Q67AAE"; // PRS Removed R3Q63AAE for ALM-138587 12-Nov-2020
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if softwarecount > 0 then thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3Q93AAE").count > 0;
				}
			}
			//RV 29-Sep-2020 PERT 20204
			constraint Nvidiaswrule16Err {
				message: "When the Perpetual license R3Q94AAE is ordered, then any one of the below GRID vPC Prod SUMs license must be selected <br>
								R3Q72AAE           Quadro vDWS EDU SUMS 5 year 1CCU ";
//R3Q68AAE           Quadro vDWS EDU SUMS 1 yr Renew 1CCU";
				body:
				{
					val listsoftware = "R3Q72AAE"; // R3Q68AAE";
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3Q94AAE").count > 0 then softwarecount > 0;
				}
			}
			//RV 29-Sep-2020 PERT 20204
			constraint Nvidiaswrule17Err {
				message: "Whenever Quadro vDMS EDU SUMS license R3Q72AAE is ordered, then the below mentioned Perpetual license must be selected <br>
							  R3Q94AAE    Quadro vDWS 1CU Edu Perp E-LTU";
//					"Whenever Quadro vDMS EDU SUMS license R3Q72AAE/R3Q68AAE is ordered, then the below mentioned Perpetual license must be selected <br>
				//								R3Q94AAE    Quadro vDWS 1CU Edu Perp E-LTU ";
				body:
				{
					val listsoftware = "R3Q72AAE"; // PRS Removed R3Q68AAE for ALM-138587 12-Nov-2020 
					val softwarecount = thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= listsoftware).count;
					if softwarecount > 0 then thisInst.selected(NVIDIAGPUSW).filter(x => x.id <= "R3Q94AAE").count > 0;
				}
			}
			constraint Nvidiaswrule4Warning {
				message: "Only orderable under NVIDIA Education Pricing Program including specific eligibility requirements and legal terms and conditions";
				body: if thisInst.selected(NVIDIAGPUSW).filter(x => x.id >= "R3Q40AAE" or x.id >= "R3Q42AAE" or x.id >= "R3Q68AAE" or x.id >= "R3Q72AAE" or x.id >= "R3Q94AAE" or x.id >= "R3R26AAE" or x.id >= "R3R27AAE").count > 0 then false;
			}
			constraint Nvidiaswrule19 {
				message: "The following end user (entity that will own/utilize the licenses) information is REQUIRED to deliver the electronic licenses/services: <br>
							  1) End User Company Name <br>
							  2) End User Company Address  (please include the full address: street name, number, city, state, and zip code) <br>
							  3) End User Customer contact name <br>
							  4) End User Email Address <br>
							  5) Reseller Name and Address <br>
							  6) Distributor Name and Address";
				body: if thisInst.selected(NVIDIAGPUSW).filter(x => x.id >= "R3Q35AAE" or x.id >= "R3Q37AAE" or x.id >= "R3Q38AAE" or x.id >= "R3Q39AAE" or x.id >= "R3Q40AAE" or x.id >= "R3Q42AAE" or x.id >= "R3Q44AAE" or x.id >= "R3Q46AAE" or x.id
				>= "R3Q47AAE" or x.id >= "R3Q48AAE" or x.id >= "R3Q49AAE" or x.id >= "R3Q51AAE" or x.id >= "R3Q52AAE" or x.id >= "R3Q53AAE" or x.id >= "R3Q63AAE" or x.id >= "R3Q66AAE" or x.id >= "R3Q67AAE" or x.id >= "R3Q68AAE" or x.id >= "R3Q72AAE"
				or x.id >= "R3Q73AAE" or x.id >= "R3Q76AAE" or x.id >= "R3Q77AAE" or x.id >= "R3Q79AAE" or x.id >= "R3Q81AAE" or x.id >= "R3Q93AAE" or x.id >= "R3Q94AAE" or x.id >= "R3Q95AAE" or x.id >= "R3R01AAE" or x.id >= "R3R02AAE" or x.id >=
				"R3R03AAE" or x.id >= "R3R06AAE" or x.id >= "R3R07AAE" or x.id >= "R3R12AAE" or x.id >= "R3R20AAE" or x.id >= "R3R21AAE" or x.id >= "R3R26AAE" or x.id >= "R3R27AAE" or x.id >= "R6H02AAE" or x.id >= "R6H03AAE").count > 0 then false;
				if thisInst.selected(HPEcStorMagic).filter(x => x.id >= "R7H06AAE" or x.id >= "R7H07AAE" or x.id >= "R7H08AAE" or x.id >= "R7H09AAE" or x.id >= "R7H10AAE" or x.id >= "R7H11AAE" or x.id >= "R7H12AAE" or x.id >= "R7H13AAE" or x.id >=
				"R7H14AAE" or x.id >= "R7H15AAE" or x.id >= "R7H16AAE" or x.id >= "R7H17AAE" or x.id >= "R7H19AAE" or x.id >= "R7H20AAE" or x.id >= "R7H21AAE" or x.id >= "R7H22AAE" or x.id >= "R7H23AAE" or x.id >= "R7H24AAE" or x.id >= "R7H25AAE" or
				x.id >= "R7H26AAE" or x.id >= "R7H27AAE" or x.id >= "R7H28AAE" or x.id >= "R7H29AAE" or x.id >= "R7H30AAE" or x.id >= "R7H31AAE" or x.id >= "R7H32AAE" or x.id >= "R7H33AAE" or x.id >= "R7H34AAE" or x.id >= "R7H35AAE" or x.id >=
				"R7H36AAE" or x.id >= "R7H37AAE" or x.id >= "R7H38AAE").count > 0 then false; //SE - Added for PERT 24820		01-Dec-2021 

			}
			ifEffective SE_PERT_24923 { //SE - Added warning for PERT 24923		10-Mar-2022
				constraint Nvidiaswrule20 {
					message: "vComputeServer(vCS) is NOT compatible with any vSphere environment  ";
					body: if thisInst.selected(NVIDIAGPUSW).filter(x => split(x.id, "#").get(0) <= "R6H02AAE R6H03AAE").count > 0 then false;
				}
			}
			constraint Nvidiaswrule3Error {
				message:
				"Each Enterprise Software Perpetual License part number must be purchased with the equivalent SUMS Support part number in equal quantities and the SUMS part number may only be sold with a corresponding Software Perpetual License part number";
				body: if thisInst.selected(NVIDIAGPUSW).filter(x => x.id >= "R3Q65AAE" or x.id >= "R3Q66AAE" or x.id >= "R3Q67AAE" or x.id >= "R3Q70AAE" or x.id >= "R3Q72AAE" or x.id >= "R3Q75AAE" or x.id >= "R3Q76AAE" or x.id >= "R3Q77AAE" or x.id
				>= "R3Q93AAE" or x.id >= "R3Q94AAE" or x.id >= "R3R01AAE" or x.id >= "R3R06AAE" or x.id >= "R3R19AAE" or x.id >= "R3R20AAE" or x.id >= "R3R21AAE").count > 0 then false;
			}
			constraint stor_magicrule2 {
				message: "If R7H19AAE SKU is selected, then Min quantity of 1 of (R7H20AAE, R7H21AAE or R7H22AAE) per R7H19AAE must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H19AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H20AAE R7H21AAE R7H22AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H19AAE").count;
			}
			constraint stor_magicrule3 {
				message: "If R7H23AAE SKU is selected, Then Min quantity of 1 of (R7H24AAE, R7H25AAE or R7H26AAE) per R7H23AAE must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H23AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H24AAE R7H25AAE R7H26AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H23AAE").count;
			}
			constraint stor_magicrule4 {
				message: "If R7H27AAE SKU is selected, Then Min quantity of 1 of (R7H28AAE, R7H29AAE or R7H30AAE) per R7H27AAE must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H27AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H28AAE R7H29AAE R7H30AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H27AAE").count;
			}
			constraint stor_magicrule5 {
				message: "If R7H31AAE SKU is selected, Then Min quantity of 1 of (R7H32AAE, R7H33AAE or R7H34AAE) per R7H31AAE must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H31AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H32AAE R7H33AAE R7H34AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H31AAE").count;
			}
			constraint stor_magicrule6 {
				message: "If R7H35AAE SKU is selected, Then Min quantity of 1 of (R7H36AAE, R7H37AAE or R7H38AAE) per R7H35AAE must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H35AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H36AAE R7H37AAE R7H38AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H35AAE").count;
			}
			constraint stor_magicrule7 {
				message: "If R7H06AAE SKU is selected, Then Min Qty of 1 - (R7H07AAE) must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H06AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H07AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H06AAE").count;
			}
			constraint stor_magicrule8 {
				message: "If R7H08AAE SKU is selected, Then Min Qty of 1 - (R7H09AAE) must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H08AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H09AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H08AAE").count;
			}
			constraint stor_magicrule9 {
				message: "If R7H10AAE SKU is selected, Then Min Qty of 1 - (R7H11AAE) must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H10AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H11AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H10AAE").count;
			}
			constraint stor_magicrule10 {
				message: "If R7H12AAE SKU is selected, Then Min Qty of 1 - (R7H13AAE) must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H12AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H13AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H12AAE").count;
			}
			constraint stor_magicrule11 {
				message: "If R7H14AAE SKU is selected, Then Min Qty of 1 - (R7H15AAE) must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H14AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H15AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H14AAE").count;
			}
			constraint stor_magicrule12 {
				message: "If R7H16AAE SKU is selected, Then Min Qty of 1 - (R7H17AAE)  must be selected";
				body: if thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H16AAE").count > 0 then thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H17AAE").count >=
				thisInst.selected(HPEcStorMagic).filter(x => split(x.id, "#").get(0) <= "R7H16AAE").count;
			}
		}
		subsystem PartnerSoftwareSubsystem {
			locationArray PartnerLocArray {
				rows: 99;
				fillerClasses: HPCSoftware, DockerServerBundleSoftware, DockerCSEngineSoftware, IssSolutionsSoftware, MS_SQL, IntelProClass, DropboxSoftware, VMWareSoftware, PartnerSWIM; //SE removed , WorkloadAwareSecurity for PPM 77660 	//	RV 30-Jul-2018 ALM.121108 added WorkloadAwareSecurity 

			}
			//			constraint MaxContainerAndContainer {
			//				message: "Max 10";
			//				body: restriction (DockerCSEngineSoftware <= 10);
			//			}

		}
		subsystem CloudSoftwareandServicesSubsystem {
			locationArray CloudSoftLocArray {
				rows: 99;
				fillerClasses: CloudOS, CloudSystem, HPHelionOpenStack, HPHelionCloudFoundry, ContexNetSW, IssSolutionsSoftware, VMWareSoftware;
			}
		}
		subsystem HighAvailabilityandDisasterRecoverySubsystem {
			locationArray ServiceguardLocArray {
				rows: 99;
				fillerClasses: HACClusterSw;
				//NEW FAMILY IMPLEMENT NEW RULES

			}
		}
		subsystem HPCSoftwareSubsystem {
			locationArray HPCLocArray {
				rows: 99;
				fillerClasses: HPCSoftware, HPCMUSoftware, HPCSoftwareProducts,HPCAltairPBSPro1Sck, HPCAltairGridEng1Sckt, HPCAltairBdl1Sckt;// MFG PERT 26197
			}
			locationArray MPILocArray {
				rows: 99;
				fillerClasses: HPCSGI;
			}
			constraint SolutionSoftwareRule10 {
				message: "Required SKU if customer is enabling greater than 200TB and 1PB or less of Hard Drive (HDD) usable capacity - single site installation only.  If multiple site, P8Y92AAE is required.";
				body: if thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Y89AAE" or p.id >= "P8Y90AAE").count > 0 then thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Y92AAE").count > 0;
			}
			constraint SolutionSoftwareRule11 {
				message: "Required SKU if customer is enabling greater than 200TB and 1PB or less of Hard Drive (HDD) usable capacity - multi-site installation only.  If single site, P8Y90AAE is required.";
				body: if thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Y91AAE" or p.id >= "P8Y92AAE").count > 0 then thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Y90AAE").count > 0;
			}
			constraint SolutionSoftwareRule25 {
				message: "If any Quantity of P8Y89AAE, P8Y90AAE, P8Y91AAE, P8Y92AAE  is selected, then P8Z01AAE must be selected and its quantity must be equal to OR multiples of these SKU (P8Y89AAE, P8Y90AAE, P8Y91AAE, P8Y92AAE)";
				body:
				if thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Y89AAE" or p.id >= "P8Y91AAE" or p.id >= "P8Y90AAE" or p.id >= "P8Y92AAE").count > 0 or thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Z01AAE").count >
				0 then thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Y89AAE" or p.id >= "P8Y91AAE" or p.id >= "P8Y90AAE" or p.id >= "P8Y92AAE").count = thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Z01AAE").count;
			}
			//PRS Removed the rule for PERT-20267 15-Nov-2020
			//			constraint SolutionSoftwareRule14Wms {
			//				message: "Required on every Scality deal.";
			//				body: if thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Z01AAE").count > 0 then false;
			//			}
			constraint solutionsSoftware_P8Z02AAE_info { //DK Added for PPM 77217 on 19th-July-18.
				message:
				"Scality RING has two Dedicated Care Services products which may optionally be added to any RING order. DCS Extended P8Z00AAE provides 20 professional service days per year.  DCS Fundamental P8Z02AAE provides 5 professional service days per year.  DCS products must be renewed annually.";
				body: if thisInst.selected(IssSolutionsSoftware).filter(x => x.id >= "P8Z02AAE").count > 0 then false;
			}
			constraint solutionsSoftware_P8Z03AAE_info {
				message:
				"Scality RING support is sold by HPE and delivered by Scality.  There are two support products, both of which are sold per TB and per year.  Choose Single Site Support P8Z01AAE to add support for single site license products, P8Y89AAE or P8Y90AAE.  Choose Geo Site Support P8Z03AAE to add support for geo site license products, P8Y91AAE or P8Y92AAE.";
				body: if thisInst.selected(IssSolutionsSoftware).filter(x => x.id >= "P8Z03AAE").count > 0 then false;
			}
			constraint SolutionSoftwareRule17wr {
				message:
				"EMEA Only! To ensure a valid and optimized solution EVERY Scality based configuration MUST be created or validated by the TecHub EMEA team.To learn more visit file://C:/Trilogy/lib/Reports/TecHub_Object_Storage_Request_Jan_2017.pdf";
				body: if thisInst.selected(IssSolutionsSoftware).filter(p => p.id >= "P8Y89AAE" or p.id >= "P8Y91AAE" or p.id >= "P8Y90AAE" or p.id >= "P8Y92AAE" or p.id >= "P8Y93AAE" or p.id >= "P8Y94AAE" or p.id >= "P8Y95AAE" or p.id >= "P8Y96AAE"
				or p.id >= "P8Y97AAE" or p.id >= "P8Y98AAE" or p.id >= "P8Y99AAE" or p.id >= "P8Z00AAE" or p.id >= "P8Z01AAE").count > 0 then false;
			} //PRS Added skus for PERT-20267 15-Nov-2020

			//PRS Removed rule for PERT-20267 14-Nov-2020
			//			constraint performanceMPI_Rule22 {
			//				message: "When SKU is selected at the base system or solution level, the SKU should be nested at the node level";
			//				body:
			//				if thisInst.selected(HPCSGI).filter(y => y.id >= "Q8K21A").count > 0 then false;
			//			}
			//MS For KA request
			constraint Unsupported_for_china_q8k21a {
				message: "Available everywhere except China";
				body: not (thisInst.id >= "Q8K21A") or not (thisConfig.getProperty("country") = "CN");
			}
			constraint SolutionSoftwareRule29 {
				message:
				"When ordering the HPE Container Platform or HPE ML Ops software subscription with HPE EL4000 (R3B67A/R3B68A), EL8000 (R3B66A), or SY480 (R3B69A), use the respective Hardware Tracking SKUs in the OCA Catalog under Enterprise Solutions -> AI and Analytics.  This will allow you to order the 'Select' subscription at a 20% lower list price.  Universal subscriptions are intended for other, non-select servers.";
				body: if thisInst.selected(UniversalBD).filter(p => p.id >= "R4T54AAE" or p.id >= "R4T55AAE" or p.id >= "R4T56AAE" or p.id >= "R4T57AAE" or p.id >= "R4T58AAE" or p.id >= "R4T59AAE" or p.id >= "R4T60AAE" or p.id >= "R4T61AAE" or p.id
				>= "R4T62AAE" or p.id >= "R4T63AAE" or p.id >= "R4T74AAE" or p.id >= "R4T75AAE" or p.id >= "R4T76AAE" or p.id >= "R4T77AAE" or p.id >= "R4T78AAE" or p.id >= "R4T79AAE" or p.id >= "R4T80AAE" or p.id >= "R4T81AAE" or p.id >= "R4T82AAE"
				or p.id >= "R4T83AAE").count > 0 then false;
			}
		}
		def isFlex (): boolean = thisConfig.getProperty("services") = "fixedServicesType";
		//TD ALM 143864 Show fixed service tab if fixed is configured to allow user to remove it
		def isFixed (): boolean = thisConfig.getProperty("services") = "flexibleServicesType"; //and ! isFixedServiceConfigured (); PERT 26328
		def isFixedServiceConfigured (): boolean = thisInst.selected(FixedServices).count > 0;
		subsystem bcsothersoftwareSubsystem {
			locationArray bcsOtherSoftwareLocArray {
				rows: 999; //RV 03-Jul-2019 ALM.131102 as per KA/BU comments menu will be updted later //1;
				fillerClasses: HACClusterSGLtu;
			}
			//RV 17-Mar-2021 SMR Pink pig added SGLX SE 2.3 skus
			constraint bcsRuleno5 {
				message: "PSL LTU: </br> 
						For deployments on physical servers :  One LTU is required for each active processor socket (CPU) in the system running SGLX.</br> 
						For deployments on virtual machines: Required LTUs should be calculated by dividing the 'Total number of vCPUs in all VMs using SGLX in a server' by the 'Number of physical processor cores per socket in that server' (rounded off to next higher number)";
				body:
				if thisInst.selected(HACClusterSGLtu).count > 0 or thisInst.selected(casSoftware).filter(y => y.id >= "R7P98AAE" || y.id >= "R7P99AAE" || y.id >= "R7Q00AAE" || y.id >= "R7Q01AAE" || y.id >= "R7Q01AC" || y.id >= "R8V44AAE").count > 0
				then false else true; //SE - Added for PERT  || y.id >= "R8V44AAE"		14-Sep-2021

			}
			constraint bcsRuleno8 {
				message: " Customer using subscription can upgrade from one SGLX edition to other by purchasing the subscription for the required edition at the end or during the current subscription period. Any remaining term on the current subscription will not be carried over during such upgrades.</br>
  						When upgrading all the required LTU in a system must be upgraded at the same time";
				body:
				if(thisInst.selected(HACClusterSGLtu).filter(x => split(x.id, "#").get(0) <= "R1T30AAE R1T31AAE R1T32AAE R1T33AAE R1T34AAE R1T35AAE R1T36AAE R1T37AAE R8V40AAE R8V41AAE R8V42AAE R8V43AAE").count > 0 or
				thisInst.selected(casSoftware).filter(x => split(x.id, "#").get(0) <= "R8V44AAE").count > 0) then false else true;
			}
			constraint bcsRuleno9 {
				message: "For the most recent list of supported configurations see the 'HPE Serviceguard for Linux Certification and Support Matrix' at http://www.hpe.com/info/linux-serviceguard-docs.</br>
                             For more information on how to calculate the required number of LTU's, what alert mechanisms are available to customers to track expiry of subscription and other subscription related information refer to the SGLX Ordering Guide in seismic. ";
				body:
				if(thisInst.selected(HACClusterSGLtu).filter(x => split(x.id, "#").get(0) <= "R1T30AAE R1T31AAE R1T32AAE R1T33AAE R1T34AAE R1T35AAE R1T36AAE R1T37AAE R8V40AAE R8V41AAE R8V42AAE R8V43AAE").count > 0 or
				thisInst.selected(casSoftware).filter(y => y.id >= "R7P98AAE" || y.id >= "R7P99AAE" || y.id >= "R8V44AAE").count > 0) then false else true;
			}
			constraint bcsRuleno7 {
				message: "To renew license and support at the end of the subscription period reorder the same 1/3/5 year SKU as per required subscription period. While renewing customers currently on 1 yr. subscription can move to a 3 or 5 yr. subscription and vice versa. 
							When renewing it is recommended to renew all the expiring LTU’s in a system at the same time to simplify management of license";
				body: if thisInst.selected(HACClusterSGLtu).count > 0 or thisInst.selected(casSoftware).filter(y => y.id >= "R7P98AAE" || y.id >= "R7P99AAE").count > 0 then false else true;
			}
			constraint bcsRuleno6 {
				message: "The Serviceguard for Linux (SGLX) one, three and five year subscription SKU's deliver time bound license and 24x7 SW Support & Updates for the Base, Advanced, Enterprise, Premium editions 
						and the SGLX Flex Storage Add-On for the specified period. For SAP HANA deployments order R1T36AAE / R1T37AAE / R8V43AAE, R7P98AAE / R7P99AAE / R8V44AAE.The subscription SKU's are only available as E-LTU and software is delivered electronically. 
						For physical media order BB094AA, BB095AA, BB097AA, R7Q02A, R8V48A as per requirement. ";
				body: if thisInst.selected(HACClusterSGLtu).count > 0 or thisInst.selected(casSoftware).filter(y => y.id >= "R7P98AAE" || y.id >= "R7P99AAE" || y.id >= "R8V44AAE").count > 0 then false else true;
			}
			constraint bcsRuleno_6 {
				message:
				"This license for Serviceguard for Linux includes 1 year 24x7 SW Support & Updates.  For the most recent list of supported configurations see the ‘HPE Serviceguard for Linux Certification and Support Matrix’ at http://www.hpe.com/servers/sglx.";
				body:
				if thisInst.selected(casSoftware).filter(y => y.id >= "R7Q00AAE" || y.id >= "R7Q01AAE" || y.id >= "R7Q01AC").count > 0 then false else true;
			}
		}
		subsystem VrocSubsystem {
			ifEffective SE_PERT_24824 { //SE - Added warning for PERT 24824		17-Jan-2022
				constraint vroc_rule1_warning {
					message: "The SKU (R7J60AAE) can  be selected  when customer orders  P4xxx series NVMe drives  Note: P4xxx represents P4510/ P4610/P4800x on drive description";
					body: if thisInst.selected(INTELVROCPRODUCTS).filter(x => split(x.id, "#").get(0) <= "R7J60AAE").count > 0 then false;
				}
				constraint vroc_rule2_warning {
					message: "The SKU (R7J59AAE) can  be selected  when customer orders non P4xxx NVMe Drives only";
					body: if thisInst.selected(INTELVROCPRODUCTS).filter(x => split(x.id, "#").get(0) <= "R7J59AAE").count > 0 then false;
				}
				constraint INTELVROCPRODUCTS_rule3 {
					message: "The Legacy Mode Setting and VROC SKUs (R7J59AAE || R7J60AAE) CAN NOT be selected together.";
					body: dependency (INTELVROCPRODUCTS [ R7J59AAE || R7J60AAE ] > 0, ProliantBIOSMode [ 758959-B22 ] = 0);
				}
			}
		}
	}
	class EnclosureModel extends ProductModelISS {
		string powerNodeType: "PowerConnectionEndpoint";
		string ethernetNodeType: "EthernetConnectionEndpoint";
		string storageNodeType: "StorageConnectionEndpoint";
		string rackRole: "MustBeRacked";
		
		//BOM Product View
		string productViewCategory: "CHASSIS";
				
		boolean suppressRackBallast: false;
		//DK added for ALM 115733 on 08-Feb-2018.
		string[] validRackList: "P9K08A", "P9K10A", "P9K12A", "P9K18A", "P9K16A", "P9K38A", "P9K40A", "P9K42A", "P9K46A", "P9K48A", "AT978A", "P9K50A", "P9K52A", "P9K54A", "P9K60A", "P9K58A", "BW974A", "BW975A", "P9K06A", "P9K04A", "P9K61A",
		"BW904A"; //RS ALM_141546 07Jun2021 updated BW904A
		string overviewCategory: "Enclosures"; //LAW 9/9/14 - OCA Extended Overview
		string[] sBladeEnclFEAlaCartes: "HA838A1", "HA839A1", "HA840A1", "HA841A1", "HA844A1", "HA846A1", "HA848A1", "HA849A1", "HA850A1", "HA851A1", "HA868A1", "HA869A1", "HA875A1", "469776-715", "ZU707A", "ZU709A", "ZU710A", "ZU714A", "ZU749A",
		"ZU723A", "HA861A1", "HC790A"; // APM 1/24/14		subsystem alaCarteFESubsystemEncl{
		subsystem alaCarteFESubsystem { // APM 1/27/12
			constraint checkFECategoryEncl {
				message: "Only $a{sBladeEnclFEAlaCartes} Factory Express Ala Carte services are available for blade enclosures."; // APM 1/24/14				body: restriction(SubItemedACFEServices[bFEBladeEnclosure = false] = 0);
				body:
				thisInst.alaCarteFESubsystem.selected(SubItemedACFEServices).filterByAttribute(bFEBladeEnclosure, false).count = 0;
			}
		} //subsystem	
		//		subsystem hpClusterSubsystem {//add by qing-yun.li@hpe.com
		//			locationArray serverNodesBays {
		//				rows: 9999;	
		//				fillerClasses: ProliantServers;
		//			} 
		//		}
		boolean supportsTechCare: true;
	}
	class ProliantServers extends ProductModelISS {

	// JCN GLSC
		string LRFT: "Servers";
		def lrftSet (): boolean = callout("CSUtils", "cascadeAttribute", thisInst, "LRFT", "Others");
		// JCN GLSC
		int iNumProcessorSlots;
		int iNumMemoryRows;
		int iNumMemoryColumns;
		int iNumHarddiskBays;
		int iNumNVMEHarddiskBays;
		boolean bIsL21Server: true;
		string sProcessorSubType: "";
		def billingTierSet (): boolean = callout("SynergyUtility", "updateBillingTier", thisInst);

		//DK added for ALM 115733 on 6-Feb-2018.
		//string[] validRackList: "P9K08A", "P9K10A", "P9K12A", "P9K18A", "P9K16A", "P9K38A", "P9K40A", "P9K42A", "P9K46A", "P9K48A", "AT978A", "P9K50A", "P9K52A", "P9K54A", "P9K60A", "P9K58A", "BW974A", "BW975A", "P9K06A", "P9K04A";
		string[] validRackList: "P9K06A", "P9K04A", "P9K38A", "P9K40A", "P9K08A", "P9K10A", "P9K61A", "P9K50A", "P9K52A", "P9K42A", "P9K46A", "P9K48A", "P9K60A", "P9K54A", "P9K58A", "BW974A", "BW975A", "Q8L41A", "Q7G92A", "P9E36A", "P9K07A",
		"P9K09A", "P9K11A", "P9K15A", "P9K37A", "P9K39A", "P9K41A", "P9K45A", "Q7M86A", "P9K19A", "P9K51A", "P9K05A", "P9K03A", "R8N93A", "R8N95A", "BW904A"; //RS ALM 143213 19Oct2021 updated BW904A as per KA Swami comments //RS updated R8N93A R8N95A 26Aug2021 Unicorn launch //AB 26-Feb-2020 for ALM ID: 134882
		def maxAdditonalCPU: int = {
			val fioProcessors = thisInst.selected(ProliantProcessor).filter(x => count(x.subTypes * "FIO") > 0);
			val fioNum = if fioProcessors.count > 0 then fioProcessors.sum(iNumProcessors) else 1;
			thisInst.iNumProcessorSlots - fioNum;
		}
		//Processor counter		//jwl 120815
		def minProcessorFunction: int = 0;
		def maxProcessorFunction: int = iNumProcessorSlots;
		def processorPositionFunction: double = {
			if iNumProcessorSlots = 0 then 0.0 else Processor.selected.sum(iNumProcessors) * 1.0 / iNumProcessorSlots;
		}
		//LAW - PCI Attributes
		int iNumPciSlotRows: 0; //Slots directly on the server
		int iNumRiserRows: 0; //Dedicated Riser slots on server
		int iMaxNumPciSlotRows: 0;
		int iNumIloAdvanced: 999;
		//jwl 100813 Max number of PCI slots including riser slots For PCI Slot counter
		int iMaxNetworkUpgrades: 0; //Pci Card Counter
		def minPcieCardsFunction: int = 0;
		def maxPcieCardsFunction: int = iMaxNumPciSlotRows;
		def PcieCardsPositionFunction: double = {
			if iMaxNumPciSlotRows = 0 then 0.0 else (PciCard.selected.count + (if iNumRiserRows = 0 then ProliantPciRiser.selected.count else 0)) * 1.0 / iMaxNumPciSlotRows;
		}
		int iNumControllerBatterySlots;
		string[] sSupportedProcessorTypes;
		int iMinNumMemoryPerProcessor;
		int iMaxNumMemoryPerProcessor;
		int iMaxNumMemoryPerProcessorAdvancedMemory;
		double iMinMemoryCapacityGB: 0.;
		int iNumMemoryBoardKits: 0;
		boolean show_in_system_overview: true;
		int weight: 0; //lAW - getting agent test to work	
		string[] sPrimaryControllerPrioritizationList; //TD new attribute for controller prioritization list	
		boolean bEmbeddedCardRaidSupported: false;
		boolean isProStackModel: false;
		//TD new attribute for raid supported on embedded cards, used in primary controller since if it supports raid then part of raid rule
		string[] sSecondaryControllerList; //SGD secondary controllers mostly for Drive cage

		/* @Author: Alan Linares
	     * @Source: ALM 110159 fix for PPM 74260
	     * @Date: 23-09-2017 
	     * @Family: Proliant Servers
	     * @EffectivityID: N/A
	     * @Description: It is intended to use in total memory capacity vs non-M Processors comparision contraints 
	     */
		int iMaxMemoryCapacityPerServer: 0;
		def curentMemorySelected (): double = selected(MemoryArray).sum(dCapacity);
		def nonMProcessorsSelected (): boolean = thisInst.selected(ProliantProcessor).isNonEmpty and (! stringEndsWith (thisInst.selected(ProliantProcessor).get(0).sProcessorType, "M") or ! stringStartsWith
		(thisInst.selected(ProliantProcessor).get(0).sProcessorType, "M"));
		def MProcessorsSelected (): boolean = thisInst.selected(ProliantProcessor).isNonEmpty and stringEndsWith (thisInst.selected(ProliantProcessor).get(0).sProcessorType, "M");
		def memoryAllowedPerProc (): int = if nonMProcessorsSelected then iMaxMemoryCapacityPerServer * processorSubsystem.selected(Processor).count else 0;

		/* @Author: Alan Linares
	     * @Source: PERT
	     * @Date: 13-02-2019
	     * @Family: Proliant Servers
	     * @EffectivityID: GV_PERT_14514
	     * @EffectivityDate: 02-04-2019
	     * @Description: It is indended to provide the 1st or 2nd Generation Processor label from sProcessorType Attribute, in order to validate the processor generaton in furter constraints for all Proliant Servers , right sProcessorType attribute value needs to be mapped to the corresponding processor
	     */
		def procGen (): string = {
			if thisInst.selected(ProliantProcessor).count > 0 then if stringSplit (proccModel, "").get(2) = "2" then "2nd" else if stringSplit (proccModel, "").get(2) = "1" then "1st" else "";
		}
		def proccModel (): string = {
			if thisInst.selected(ProliantProcessor).count > 0 then thisInst.selected(ProliantProcessor).get(0).sProcessorType;
		}
		//CPT function to identify processors subtype to be used to restrict different behaviours
		def identifyProcSubtype (): string = {
			val procSubtype = if thisInst.selected(ProliantProcessor).isNonEmpty then if stringSplit (proccModel, "").get(1) = "5" then "5" else if stringSplit (proccModel, "").get(1) = "6" then "6" else if stringSplit (proccModel, "").get(1) =
			"8" then "8" else "";
			if procSubtype = "5" && procGen = "1st" then "51" else if procSubtype = "5" && procGen = "2nd" then "52" else if procSubtype = "6" && procGen = "1st" then "61" else if procSubtype = "6" && procGen = "2nd" then "62" else if procSubtype
			= "8" && procGen = "1st" then "81" else "";
		}
		def totDrvsWituFF (): int = { //PS_ALM_129169
			thisInst.selected(ProliantHardDrive).filter(x => x.tDriveFormFactor >= "lff").count + thisInst.selected(ProliantHardDrive).filter(x => x.tDriveFormFactor >= "sff").count + thisInst.selected(ProliantHardDrive_HP_uFF).filter(x =>
			x.tDriveFormFactor >= "uFF").count * 2;
		}
		/* @Author: Alan Linares
	     * @Source: ALM 134851 
	     * @Date: 20-02-2020 
	     * @Description: to check it the configurations is showing banding page 
	     */
		def isBandingPage (): boolean = {
			thisConfig.getProperty("evaluateInBandingMode") = "true";
		}
		def isEOCSBanding (): boolean = {
			isBandingPage () and thisConfig.getProperty("targetEnvironment") = "eocs";
		}
		/**
		 * @author TD
		 * @date 2012-02-08
		 * @about Get primary controller for each server, return null if one does not exist 
		 * @modified
		 */
		def getPrimaryController: RootProductClass = //PciCard = 
		{
			val configured = thisInst.selected(PciCard) + thisInst.selected(EmbededControllerState); //map productnumbers to prodNums
			val prodNums = map(configured, x => stringSplit (x.id, "#").get(0));
			//find intersection of prioritization list and productnumbers
			val targetList = sPrimaryControllerPrioritizationList * prodNums; //get cards at intersection point
			val targetCards = filter(configured, x => count(stringSplit (x.id, "#") * targetList) > 0); //return null if no cards or return first card in index
			if(configured.count = 0 or targetCards.count = 0) then null else targetCards.get(0);
		}

		//MS for PPM: 76072	
		def getDefaultPcmSoftware (): string[] = {
			if thisInst.id = "798155-B21" or thisInst.id = "798156-B21" or thisInst.id = "808028-B21" or thisInst.id = "808027-B21" or thisInst.id = "Q2D16A" or thisInst.id = "Q5S68A" or thisInst.id = "Q5S69A" or thisInst.id = "Q9B47A" or
			thisInst.id = "845628-B21" or thisInst.id = "R0N49A" or thisInst.id = "R0N50A" or thisInst.id = "R0N52A" or thisInst.id = "R0M97A" then expanderString ("Q9V60AAE", 1) else "";
		} //PRS Added new base model to the rule for PERT-15687 28 June 2019

		/**
		 * @author APM (totally fashioned after getPrimaryController above, but here the whole set is returned)
		 * @date 2012-09-10
		 * @about Get primary controllers for each server, return null if none exist 
		 * @modified
		*/
		def getPrimaryControllers: RootProductClass =
		{
			val configured = thisInst.selected(PciCard) + thisInst.selected(EmbededControllerState); //map productnumbers to prodNums
			val prodNums = map(configured, x => stringSplit (x.id, "#").get(0));
			//find intersection of prioritization list and productnumbers
			val targetList = sPrimaryControllerPrioritizationList * prodNums; //get cards at intersection point
			val targetCards = filter(configured, x => count(stringSplit (x.id, "#") * targetList) > 0); //return null if no cards or return the set
			if(configured.count = 0 or targetCards.count = 0) then null else targetCards;
		} //SGD 09/12/2014
		def getSecondaryControllers: RootProductClass = //PciCard = 
		{
			val configured = thisInst.selected(PciCard) + thisInst.selected(EmbededControllerState); //map productnumbers to prodNums
			val prodNums = map(configured, x => stringSplit (x.id, "#").get(0));
			//find intersection of prioritization list and productnumbers
			val targetList = sSecondaryControllerList * prodNums; //get cards at intersection point
			val targetCards = filter(configured, x => count(stringSplit (x.id, "#") * targetList) > 0); //return null if no cards or return the set
			if(configured.count = 0 or targetCards.count = 0) then null else targetCards;
		}
		def noCrayModel (): boolean = { //JQD Hide Cray Networking Cards
			thisConfig.getInstancesOfModel("ShastaSolutionModel").count = 0;
		}
		def maxSlingshot: int = 2;
		string[] sServerFEAlaCartes: "HA838A1", "HA839A1", "HA840A1", "HA841A1", "HA842A1", "HA843A1", "HA844A1", "HA845A1", "HA846A1", "HA848A1", "HA849A1", "HA850A1", "HA851A1", "HA852A1", "HA853A1#007", "HA854A1", "HA855A1", "HA856A1",
		"HA862A1", "HA867A1", "HA868A1", "HA875A1", "469776-715", "ZU706A", "ZU709A", "ZU710A", "ZU713A", "ZU716A", "ZU727A", "ZU748A", "ZU723A", "HA861A1", "HC790A", "ZU721A", "ZU722A";
		string[] sOwnership: "BD520A", "BD520AAE", "BD726A", "BD726AAE", "BD727A", "BD727AAE", "BD896AAE", "BD897AAE", "BD898AAE", "BD899AAE", "BD900AAE", "BD901AAE", "BD902AAE", "BD903AAE", "BD904AAE", "K8X46AAE", "K8X47AAE", "K8X48AAE",
		"K8X49AAE", "K8X50AAE", "K8X51AAE", "K8X52AAE", "K8X53AAE", "K8X54AAE", "L8M86AAE", "L8M87AAE", "L8M88AAE", "L8M89AAE", "L8M90AAE", "L8M91AAE", "L8M92AAE", "L8M93AAE", "L8M94AAE", "L8M95AAE", "L8M96AAE", "L8M97AAE", "L8M98AAE",
		"L8M99AAE", "L8N00AAE", "M1J60AAE", "M1J61AAE", "M1J62AAE";
		string[] sOwnershipSRM: "BD534A", "BD534AAE", "BD535A", "BD535AAE", "BD536AAE", "BD748A", "BD748AAE", "BD749A", "BD749AAE", "BD750A", "BD750AAE", "BD751A", "BD751AAE", "BD762AAE", "BD763AAE";
		string[] VMWareCliVirtualization: "Q8U31AAE", "Q8U32AAE", "Q8U33AAE", "Q8U34AAE", "Q8U35AAE", "Q8U36AAE", "Q8U37AAE", "Q8U38AAE", "Q8U39AAE", "Q8U40AAE", "Q8U41AAE", "Q8U42AAE";
		string[] VMWareHciOwnership: "Q2V92AAE", "Q2V93AAE", "Q2V94AAE", "Q2V95AAE", "Q2V96AAE", "Q2V97AAE", "Q2V98AAE", "Q2V99AAE", "Q2W00AAE", "Q2W01AAE", "Q2W02AAE", "Q2W03AAE"; //RV 25-Nov-2017 added VMWareHciOwnership SMR Crisspink		
		subsystem generalRulesSubsystem {

		// JCN GLSC
			constraint setLRFT {
				message: "Setting LRFT";
				body:
				lrftSet ();
			}
			// JCN GLSC
			constraint raidRequiredIfSASPrimaryAndOSFact {
				message: "RAID level must be selected if Factory Installed OS is present and Smart Array SAS controller (embedded or otherwise) is the primary controller.";
				body:
				{
					val raid = thisInst.selected(RAIDLevelSettings);
					val complex = thisInst.selected(ComplexConfiguration);
					val contrl = getPrimaryController;
					val os = thisInst.selected(OperatingSystem).filterByAttribute(bIsFactoryInstalledMicrosoft, true);
					raid.count > 0 or complex.count > 0 or ! ((contrl != null or thisInst.bEmbeddedCardRaidSupported = true) and os.count > 0);
				}
			}
			constraint raidRequiredIfSASPrimaryAndOS {
				message: "If a P440,H240,E-series and P-series array controller is selected as the primary boot controller one of the following part numbers must also be selected:
  
						 339777-B21         FIO         HP RAID 0 Drive 1 FIO Setting ALL              
						 339778-B21         FIO         HP RAID 1 Drive 1 FIO Setting ALL              
						 339779-B21         FIO         HP RAID 5 Drive 1 FIO Setting ALL              
						 339780-B21         FIO         Raid 5 w/SP drive 1 FIO Set ALL  
						 339781-B21         FIO         HP RAID Adv Data Guarding FIO ALL        
						 389692-B21         FIO         HP Customer Defined RAID SetSVC ALL
						";
				body:
				{
					val raid = thisInst.selected(RAIDLevelSettings);
					val complex = thisInst.selected(ComplexConfiguration);
					//					body: if thisInst.selected(ProliantStorageContSASSA).filter(x =>x.iTypeCntrl="P").count > 0 then thisInst.selected(SAP420iControllerCacheUpgrade).count>0 ;
					val contrl = thisInst.selected(ProliantStorageContSASSA).filter(x => x.iTypeCntrl = "P" or x.iTypeCntrl = "E"); //.count ; //or thisInst.selected(ProliantStorageContSASSA).filter(x =>x.iTypeCntrl="E").count;
					val os = thisInst.selected(DropboxSoftware).filterByAttribute(bIsFactoryInstalledMicrosoft, true);
					if(os.count > 0 and contrl.count > 0) then (raid.count > 0 or complex.count > 0);
					//(os.count > 0 and contrl.count > 0) and (raid.count > 0 or complex.count = 0);
					//raid.count > 0 or complex.count > 0 or (contrl.count > 0 and os.count = 0);

				}
			}
			constraint Max1clearOS {
				message: "Quantity is calculated as 1 SKU per server due to controller rule.";
				body: restriction (DropboxSoftware [ 874549-B21 ] <= 1);
			}
			constraint processorGenerationNoMix {
				message: " Only 1st generation processors x1xx (i.e. 6144) can be selected with 2666 memory options; and vice versa <br>
                                          Only 2nd generation processors x2xx (i.e. 6244) can be selected with 2933 memory options; and vice versa.";
				body: dependency (ProliantProcessor [ sProcessorGeneration = "First" ] > 0, ProliantMemoryArray [ sMemorySubType = "PC4-2933Y" ] = 0);
				dependency (ProliantProcessor [ sProcessorGeneration = "Second" ] > 0, ProliantMemoryArray [ sMemorySubType = "PC4-2666V" ] = 0);
			}
		}
		//This subystem is used to capture the parent container choices: Racks and Enclosures
		//These are custom controls that require special Agent handling
		subsystem bottomUpPlacementSubsystem {
			choice rackChoice {
				targetClass: BottomUpRackReference;
				optional: true;
			}
		}
		subsystem processorSubsystem {
			locationArray processorSlots {
				rows: iNumProcessorSlots;
				rowsConsumed: iNumProcessors;
				fillerClasses: ProliantProcessor;
			}
			constraint processor_1st_generation_memory_compatibility_rule {
				message: "This processor is classified as '1st generation' of Intel Xeon Scalable processor. </br>
							Only '1st generation' processors '1xx' (i.e. 6144) can be selected with '2666' memory options; and vice versa. </br>
							NOTE: </br>
							- The 2nd digit of processor model number 'x1xx' (i.e. 6144) is used to denote the processor generation (i.e. 1 = 1st generation). </br>
							- The 4 digits in memory description 'xxxx' (i.e. 2666) is used to denote the memory transfer rate (i.e. 2666 = 2666 MT/s).</br>
							Processor selected: $a{procGen} generation processor, model number: $a{proccModel}";
				body:
				if thisInst.selected(ProliantProcessor).count > 0 and procGen = "1st"
				//SE - For PERT 17884  10-Nov-2019
				//then thisInst.selected(ProliantMemoryArray).filter(sMemorySubType != "PC4-2666V").count = 0;
				then thisInst.selected(ProliantMemoryArray).filter(sMemorySubType = "PC4-2933Y").count <= 0;
			}
			constraint processor_2nd_generation_memory_compatibility_rule {
				message: "This processor is classified as '2nd generation' of Intel Xeon Scalable processor. </br>
							Only '2nd generation' processors 'x2xx' (i.e. 6244) can be selected with '2933' memory options; and vice versa. </br>
							NOTE: </br>
							- The 2nd digit of processor model number 'x2xx' (i.e. 6244) is used to denote the processor generation (i.e. 2 = 2nd generation). </br>
							- The 4 digits in memory description 'xxxx' (i.e. 2933) is used to denote the memory transfer rate (i.e. 2933 = 2933 MT/s).</br>
							Processor selected: $a{procGen} generation processor, model number: $a{proccModel}";
				body:
				if thisInst.selected(ProliantProcessor).count > 0 and procGen = "2nd"
				//SE - For PERT 17884  10-Nov-2019 
				//then thisInst.selected(ProliantMemoryArray).filter(sMemorySubType != "PC4-2933Y").count = 0 or thisInst.selected(ProliantMemoryArray).filter(subCategory != "PersistentMemoryKit").count = 0;
				then thisInst.selected(ProliantMemoryArray).filter(sMemorySubType = "PC4-2666V").count <= 0 or thisInst.selected(ProliantMemoryArray).filter(subCategory != "PersistentMemoryKit").count = 0;
			}
			constraint processor_1st_generation_graphic_cards_compatibility_rule {
				message: "Only Supported with 1st Generation Processors 'x1xx' (i.e. 6144)</br>
							NOTE: </br>
							- The 2nd digit of processor model number 'x1xx' (i.e. 6144) is used to denote the processor generation (i.e. 1 = 1st generation)";
				body:
				{
					val pGraphicCards = "M3X67A M3X68A Q0E21A Q2S42A Q0V79A";
					val cGraphicCards = thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= pGraphicCards).count;
					if thisConfig.getInstancesOfModel("DL360G9").isEmpty && procGen != "1st" then cGraphicCards = 0;
				}
			}
			constraint processor_Y_serie_2nd_generation_rule { //Warning
				message: "The Y series 2nd generation processor (i.e. x2xxY) have the capability to configure the CPU to three distinct core count/base frequency operating points.  See Quickspecs for more details";
				body: if thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorSeries, "Y").isNonEmpty && procGen = "2nd" then false;
			}
			constraint processor_N_serie_2nd_generation_rule { //Warning
				message: "The N series 2nd generation processor's (i.e. x2xxN) deterministic base frequency rating only applicable for 'Network Function Virtualization' (NFV) workloads, others may see throttling. See Quickspecs for more details.";
				body: if thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorSeries, "N").isNonEmpty && procGen = "2nd" then false;
			}
			constraint processor_U_serie_2nd_generation_rule { //Warning
				message: "The U series 2nd generation processor (i.e. x2xxU) only support one socket; dual socket not feasible. See Quickspecs for more details.";
				body: if thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorSeries, "U").isNonEmpty && procGen = "2nd" then false;
			}
		}
		subsystem softwareSubsystem { //VM_PPM_75851			
			choice software {
				choiceType: multi_select;
				targetClass: NCSLicense;
			}
		}

		//LAW - insert memory subsystem here!!!
		subsystem memorySubsystem {
			locationArray memorySlots {
				columns: iNumMemoryColumns;
				rows: iNumMemoryRows;
				fillerClasses: ProliantMemoryArray;
				layout {
					range (1, -1);
				}
				def min (): int = 0;
			}
			locationArray memoryBoardKitArray {
				rows: iNumMemoryBoardKits;
				columns: 1;
				fillerClasses: ProliantMemoryBoardKit;
			}
			constraint setBillingTier {
				message: "Setting Billing Tier";
				body:
				billingTierSet ();
			}
			constraint maxMemoryCapacityPer2G_Standard_Processor {
				message: "Standard 2nd generation CPUs support up to and including 1024GB Max of memory per processor/socket. </br>
								Note:</br>
								-Standard 2nd generation CPUs includes all Series CPUs except for the M and L-Series CPUs. (i.e. S, B, V, N, Y, U, etc. are all considered 'standard' 2nd generation CPUs)"; //changed capacity text PS_PERT_14596
				body:
				{
					val isStandardProcessor2G = thisInst.selected(ProliantProcessor).filter(x => x.sProcessorSeries = "" || x.sProcessorSeries = "B" || x.sProcessorSeries = "N" || x.sProcessorSeries = "U" || x.sProcessorSeries = "Y" ||
					x.sProcessorSeries = "S" || x.sProcessorSeries = "V" || x.sProcessorSeries = "R").isNonEmpty && procGen = "2nd"; //NL modified the logic to work correctly by including S,V attributes, 25-May-2019
					val maxMemoryPerProcessor = thisInst.selected(ProliantProcessor).count * 1024;
					if isStandardProcessor2G then thisInst.selected(ProliantMemoryArray).sum(dCapacity) <= maxMemoryPerProcessor;
				}
			}
			constraint maxMemoryCapacityPer2G_M_Processor {
				message: "M-series 2nd generation CPUs support up to and including 2048GB Max of memory per processor/socket."; //changed capacity text PS_PERT_14596
				body:
				{
					val isMProcessor2G = thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorSeries, "M").isNonEmpty && procGen = "2nd";
					val maxMemoryPerProcessor = thisInst.selected(ProliantProcessor).count * 2048;
					if isMProcessor2G then thisInst.selected(ProliantMemoryArray).sum(dCapacity) <= maxMemoryPerProcessor;
				}
			}
			constraint maxMemoryCapacityPer2G_L_Processor {
				message: "L-series 2nd generation CPU support up to and including 4500GB Max of memory per processor/socket."; //changed capacity text PS_PERT_14596
				body:
				{
					val isLProcessor2G = thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorSeries, "L").isNonEmpty && procGen = "2nd";
					val maxMemoryPerProcessor = thisInst.selected(ProliantProcessor).count * 4500; // changed capacity PS_PERT_14596
					if isLProcessor2G then thisInst.selected(ProliantMemoryArray).sum(dCapacity) <= maxMemoryPerProcessor;
				}
			}
		}
		subsystem pciSubsystem {
			locationArray pciSlots {
				rows: iNumPciSlotRows;
				columns: 1;
				fillerClasses: PciCard;
			}
			locationArray riserSlots {
				rows: iNumRiserRows;
				columns: 1;
				fillerClasses: ProliantPciRiser;
				layout {
					range (1, -1);
				} // APM 10/24/11 Assign the starting slot index.

			}
		}
		def cardIsCompatibleWithSlotForServer (card: IoCard, slot: PciSlot): boolean = true;
		//MS for PPM: 76072	
		//		def ILOPCMModDef (): string[] = { JQD ALM 129483
		//			if thisInst.id = "864625-B21" then expanderString ("Q9V60AAE", 1) else "";
		//		}
		//RV 27-May-2021 PERT 22465
		subsystem HPECompleteSWSectionSubsystem {
			choice StorMagicChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: HPEcStorMagic;
			}
		}
		def isSupportedCountryGLSCOM (): boolean = {
			if thisConfig.getProperty("region") != "LA" and 
			thisConfig.getProperty("country") != "TR" and
			thisConfig.getProperty("country") != "PL" and
			thisConfig.getProperty("country") != "IN" and
			thisConfig.getProperty("country") != "IR" and
			thisConfig.getProperty("country") != "RU" and
			thisConfig.getProperty("country") != "SY" and
			thisConfig.getProperty("country") != "UA" and
			thisConfig.getProperty("country") != "TW" and
			thisConfig.getProperty("country") != "VN" then true else false;
		}
		def isSupportedUserRolGLSCOM (): boolean = {
			if thisConfig.getProperty("user_role") != "ECP/CSP" and 
			thisConfig.getProperty("user_role") != "Reseller" and 
			thisConfig.getProperty("user_role") != "ECP/CSP Administrator" and 
			thisConfig.getProperty("user_role") != "Reseller Administrator" then true else false;
		}
		def defaultGreenLakeCOMSKU (): string[] = {
			if !isGlscConfiguration() and !isGreenlakeConfig() and thisInst.subTypes.get(0) = "0D1" and isSupportedCountryGLSCOM() and isSupportedUserRolGLSCOM() then expanderString("R6Z89AAE", 1);
		}
		def defaultGreenLakeCOMSKUOCC (): string[] = {
			if isSupportedCountryGLSCOM() then expanderString("R6Z89AAE", 1);
		}
		//SE - Added for PERT 25043		29-Apr-2022
		subsystem HPEGrenLkeComOpsChoiceSubsystem {
			choice HPEGrenLkeComOpsChoice {
				optional: true;
				choiceType: single_select;
				targetClass: HPEGreenLakeComOps;
			}
			
		constraint HPEGreenLakeComOpsRule1_info {
				message: "Orders through NGQ/OCA will results in a new Subscription Contract and a new Entitlement. <br>
						For purchases related to changes to an existing subscription, as described below, please contact: orders_wwcomputestorage_eaas@hpe.com before proceeding<br>
						1) Add Qty<br>
						2) Upgrade Tier Level<br>
						3) Downgrade Tier<br>
						4) Cancel Subscription<br>
						5) Renew<br>
						6) Extend Contract Terms<br>
						7) Add Product to Existing Subscription<br>
						8) Convert and Eval to a Subscription<br>
						9) Any other Changes";
				body:
					if thisInst.selected(HPEGreenLakeComOps).count > 0 then false;
			}
			
			//SE - Added this info as per UAT update
			constraint HPEGreenLakeComOpsRule2_info {
				message: "This SKU can be configured as STAND ALONE (without selecting any server) following the below paths in OCA<br>
						1) Software tab <br>
						Management Software -> HPE GreenLake for Compute Ops Management<br>
						2) Hardware tab<br>
						Compute Servers-> HPE GreenLake for Compute Ops Management";
				body:
					if thisInst.selected(HPEGreenLakeComOps).count > 0 then false;
			}	
			ifEffective JQD_PERT_26387{
//				part defaultGreenLakeCOMSKU: triggerInternalDefaults {
//					string modelDefaultsFunc:"defaultGreenLakeCOMSKU";,
//					string[] targetEnvs: "sce", "oca", "eocs";
//				}
//				part defaultGreenLakeCOMSKU_OCC: triggerInternalDefaults {
//					string[] modelDefaults:"R6Z89AAE";,
//					string[] targetEnvs: "ezc", "ipcs";
//				}
				constraint softwareFilterForGLSCCustom {
					message: "Product not available for HPE GreenLake (select solutions).";
					enabled: isGlscConfiguration() or isGreenlakeConfig();
					body: restriction(HPEGreenLakeComOps = 0);
				}
				constraint HPEGreenLakeComOpsRule126_warning {
					message: "These SKUs should only be available for the customer to pick along with CTO servers. If customer adds a COM license to a BTO server (COM license + BTO server in the same order), then COM license will automatically activate in 90 days. If this is an issue, then please order the COM license separately in ASQ";
					body: if thisInst.selected(HPEGreenLakeComOps).count > 0 then false;
				}
				constraint HPEGreenLakeComOpsRule130 {
					message: "These SKUs must be hidden for BTO Servers";
					body: dependency (ProliantServers [BTO], HPEGreenLakeComOps = 0);
				}
			}
			
		}
		// RV 22-Feb-2019 ALM.127290
		subsystem SecurityComplianceSWSectionSubsystem {
		//SE - For PERT 20148     19-Aug-2020	
			choice HPESCSWChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: HPESCSW;
			}
			locationArray ManagementLocArray {
				fillerClasses: WorkloadAwareSecurity;
				rows: 999;
			}
			//07-August-2020 PERT 20124
			locationArray ArtemisLocArray {
				fillerClasses: UniversalBD;
				rows: 999;
			}
		}
		//RV 06-May-2020 PERT 19027 SMR-Obsidian
		subsystem SmartIOSubsystem {
			choice pensandoRTUsChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: PensandoDSPSoftware;
			}
		}
		subsystem HPCSoftwareSystemSubsystem {
			choice HPCMUSoftwareChoice {
				optional: true;
				targetClass: HPCMUSoftware;
				//choiceType: single_select;
				choiceType: multi_select;
				title: "HP CMU Software";
			}
			locationArray PartnerSoftware_InterconnectMgmtArray { // RAP_PPM_73293
				fillerClasses: PartnerSWIM;
				rows: 999;
			}
			locationArray PartnerSoftwareOperatingSystem8pksArray {
				fillerClasses: PartnerSoftwareOperatingSystem8pks;
				rows: 99; //anv //RVL - ALM 110674 - Modify type of Selection.

			}
			//MS for PPM: 76708
			locationArray OEMSoftwareArray {
				fillerClasses: OEMSoftwareNFV, casSoftware;
				rows: 999; //NL modified for PERT 14596,26-Apr-2019

			}
			/* @Author: Alan Linares
                * @Source: Ice House Project Advanced
                * @MenuSection: HPC Software Products
                * @Choice: HPCSoftProdChoice
                * @Section: HPCSoftwareSection
                * LAW - Adding direct subClass b/c it is finding multiple containers & I can sort on it.
                */
			locationArray HPCprodLocArray {
				rows: 99;
				fillerClasses: HPCSoftwareProducts, HPCAltairPBSPro;
			}
			/* @Author: Alan Linares
                * @Source: Ice House Project Advanced 
                * @MenuSection: HPC Software Products
                * @Choice: SGIManagementSuiteChoice
                * @Section: HPCSoftwareSection
                */
//ABP ALM fix:106078
			locationArray ServiceguardLocArray {
				rows: 99;
				fillerClasses: HACClusterSw;
			}
			locationArray SGIManagementSuiteLocArray {
				rows: 99;
				fillerClasses: HPESGIManagementSuite;
			}
			part getDefaultPcmSoftwareTrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "getDefaultPcmSoftware";
			}
			part addMediaDefTrigg: triggerInternalDefaults {
				string modelDefaultsFunc: "ILOPCMModDef";
			}
			ifEffective KES_VAL {
			}
			otherwise {
				constraint noSoftwareForColdSpare {
					message: "Cold Spare servers DO NOT USE any SW.";
					body: dependency (Apollo9000ManagementNode [ R0N51A || R0N54A ], Software = 0);
					dependency (Apollo9000ManagementNode [ R0N51A || R0N54A ], SoftwareMedia = 0);
				}
			}
			constraint contractRequiredMediaKitAndLicenseWarning {
				message: "When ordering HP CMU Software products, please make sure to include at least one Media Kit and one License in the configuration.NOTE:Ignore this message if the Media Kit or the Licenses are already available On-Site.";
				body: thisInst.selected(HPCMUSoftware).count = 0;
			}
			constraint SGISoftwareRule1_Blue {
				message: "Blue note: SKU can NOT be applied as follow-on support for existing licenses. </br>
						Customer must have the original base product. SKU does not include the application license. $a{totalViews}";
				enabled: // JCN PERF
				thisConfig.getInstancesOfModel("HPCTotalView").count > 0;
				body:
				{
					val totalViews = "Q5V65A Q5V66A Q5V67A Q5V68A Q5V79A Q5V80A Q5V83A";
					val totalViewsc = thisInst.selected(HPCTotalView).filter(y => y.id <= totalViews).count;
					if thisConfig.getProperty("targetEnvironment") = "oca" and totalViewsc > 0 then false;
				}
			}
			constraint SGISoftwareRule2_Blue {
				message: "Blue note: SKU can be applied as follow-on support for existing licenses. </br>
							Customer must have the original base product. SKU does not include the application license. For Intel Software products";
				body:
				{
					val IntelPrePostExpc = thisInst.selected(HPCIntel).filterByAttribute(subHeading, "Pre-exp").count + thisInst.selected(HPCIntel).filterByAttribute(subHeading, "Post-exp").count;
					val SGIManaggementc = thisInst.selected(HPESGIManagementSuite).filter(y => y.id >= "Q2A41A").count;
					if thisConfig.getProperty("targetEnvironment") = "oca" and IntelPrePostExpc + SGIManaggementc > 0 then false;
				}
			}
			constraint SGISoftwareRule3_error { // GKK PPM 75464 Min 0 || Max 1
				message: "Max 1 license can be ordered per solution or base system.";
				body:
				{
					val totalViewsc = thisInst.selected(HPCTotalView).filter(y => y.id != "Q5V65A" || y.id != "Q5V66A" || y.id != "Q5V67A" || y.id != "Q5V68A" || y.id != "Q5V79A" || y.id != "Q5V80A").count; //SE FOR PERT 12198 Removing SKU asper menu not supported to this rule || y.id != "Q5V68A" y.id != "Q5V79A" || y.id != "Q5V80A" ||
					//val Allineac = thisInst.selected(HPCAllineaForge).count;
					val hpcSGIc = thisInst.selected(HPCSGI).filter(a => a.id >= "Q5U69A").count;
					val centOSc = thisInst.selected(HPCCentOS).filter(b => b.id >= "Q2A75A").count;
					val SGIManaggementc = thisInst.selected(HPESGIManagementSuite).filter(d => d.id >= "Q2A36A").count;
					if totalViewsc + hpcSGIc + centOSc + SGIManaggementc > 1 then false; //+ Allineac 

				}
			}
			constraint SGISoftwareRule4_Info {
				message: "Partner customer form must be completed in order to include this SKU with the order.";
				body:
				{
					val IntelPrePostExpc = thisInst.selected(HPCIntel).filterByAttribute(subHeading, "Pre-exp").count + thisInst.selected(HPCIntel).filterByAttribute(subHeading, "Post-exp").count;
					val totalViewsc = thisInst.selected(HPCTotalView).count;
					val HPCHPEBCMc = thisInst.selected(HPCHPEBCM).filter(b => b.id >= "Q5U90A" || b.id >= "Q5U92A" || b.id >= "Q5U93A" || b.id >= "Q5U94A" || b.id >= "Q5U95A" || b.id >= "Q5U96A").count; //SE FOR PERT 12198 - Adding only supported products for this constraint 29-10-2018
					if IntelPrePostExpc + totalViewsc + HPCHPEBCMc > 0 then false else true;
				}
			}
			constraint SGISoftwareRule5_Info {
				message: "This is not stacked software. Please select the SKU that represents the number of annual licenses needed for the total number of nodes.</br> 
				    			For example:  To support 500 nodes for 3 years, you will need 1500 licenses (500*3). Based on the number of licenses, select the appropriate tier.</br> 
								In this example, you will need to select a SKU for 1024-3071 nodes.";
				body:
				thisInst.selected(HPCHPEBCM).filter(b => b.id >= "Q5U90A" || b.id >= "Q5U92A" || b.id >= "Q5U93A" || b.id >= "Q5U94A" || b.id >= "Q5U95A" || b.id >= "Q5U96A").count <= 0; //SE FOR PERT 12198 - Adding only supported products for this constraint 29-10-2018

			}
			constraint SGISoftwareRule6_Info {
				message: "Support license can be applied as follow-on support only if the current support contract has not expired.";
				body:
				{
					val intelPSList = "Q1Z45A Q1Z49A Q1Z50A Q1Z51A Q1Z52A Q1Z53A Q1Z54A Q2A49A Q2A50A Q2A51A Q2A52A Q2A81A Q2A82A Q2A87A Q2A88A Q2A91A Q2A92A Q2A95A Q2A96A Q2A97A Q2A98A Q5V03A Q5V04A";
					val IntelPrePostExpc = thisInst.selected(HPCIntel).filterByAttribute(subHeading, "Pre-exp").count + thisInst.selected(HPCIntel).filterByAttribute(subHeading, "Post-exp").count;
					val iHPCIntelPS = thisInst.selected(HPCIntelPS).filter(y => y.id <= intelPSList).count;
					if IntelPrePostExpc + iHPCIntelPS > 0 then false else true;
				}
			}
			constraint SGISoftwareRule7_Info {
				message: "License is for one seat additional seats require purchasing additional subscriptions.";
				body:
				{
					val intelPSList = "Q1Z45A Q1Z46A Q1Z47A Q1Z48A Q1Z49A Q1Z50A Q2A48A Q2A89A Q2A90A Q2A93A Q2A94A Q2A97A Q2A98A Q2A99A Q2B00A Q5V01A Q5V02A Q5V09A Q5V10A Q5V16A Q5V26A Q5V27A Q5V32A Q5V33A Q5V38A Q5V39A";
					val intelPSc = thisInst.selected(HPCIntelPS).filter(y => y.id <= intelPSList).count;
					val intelVtuneList = "Q5V17A Q5V20A Q5V21A Q5V40A Q5V43A Q5V44A";
					val intelVtunec = thisInst.selected(HPCIntelVTune).filter(y => y.id <= intelVtuneList).count;
					val intelAPIList = "R7N65A R7N66A R7N67A R7N68A R7N69A R7N70A R7N71A R7N72A R7N73A R7N74A R7N75A R7N76A R8V80AAE R8V81AAE R8V82AAE R8V83AAE";
					val intelAPI = thisInst.selected(HPCIntelOneAPI).filter(y => y.id <= intelAPIList).count; //PRS Added for PERT-21301 08-Jan-2021		//SE - Added for PERT 24824		17-Jan-2022
					if intelPSc + intelVtunec + intelAPI > 0 then false else true;
				}
			}
			constraint SGISoftwareRule9_Info {
				message: "If HA is NOT selected (definition: Q1W15A and Q1W16A are NOT present in configuration) than this SKU can be ordered with the following HPE SGI 8600 nodes / controllers: </br>
							Q2N78A Login Nodes, </br>
							Q2N75A SAC Controller, </br>
							Q2N82A Storage Node, </br>
							Q2N79A MDS Nodes, </br>
							Q2N80A OSS Nodes,  </br>
							Q2N81A Rack Lead Controller, </br>
							Q2N76A Batch Node, </br>
							Q2N77A Gateway Node, </br>
							Q2D35A Compute Nodes, </br>
							Q1V16A Compute Nodes, </br>
							Q1V15A Compute Nodes.";
				body:
				if thisConfig.getInstancesOfModel("IceXABaseSystem").count > 0 and thisConfig.getInstancesOfModel("SGINodeConfiguration").count() > 0 and thisConfig.getInstancesOfModel("DL360Gen10").count() > 0 and
				thisInst.selected(SGINodeConfiguration).filter(y => y.id >= "Q1W15A" or y.id >= "Q1W16A").count = 0 and thisInst.selected(HPCCentOS).filter(y => y.id >= "Q2A75A").count > 0 then thisInst.selected(SGINodeConfiguration).filter(y => y.id
				>= "Q2N78A" or y.id >= "Q2N75A" or y.id >= "Q2N82A" or y.id >= "Q2N79A" or y.id >= "Q2N80A" or y.id >= "Q2N81A" or y.id >= "Q2N76A" or y.id >= "Q2N77A" or y.id >= "Q2D35A" or y.id >= "Q1V16A" or y.id >= "Q1V15A").count > 0;
			}
			constraint SGISoftwareRule10_Info {
				message: "All HPE SGI 8600 nodes / controllers are dependent on having adequate operating system licensing coverage. All nodes / controllers must run at minimum 1 of the following: </br>
								BD565A, BD567A, G3J28A, G3J29A, G3J30A, G3J31A, G3J32A, G3J33A, M6K36A, N7F54A, N7F55A, Q1B82A, Q1B83A, Q1B84A, Q1B85A, Q1B86A, Q1B87A, Q2A75A </br>
								Blue Note: Min Qty of 1 may not be enough to cover nodes / controllers. Configuration Specific Compatibility and quantity logic for the SKUs above </br> 
								is located within the Sectional Rules above and should be used to determine if each node is adequately covered by Operating System Licenses.";
				body:
				if thisConfig.getProperty("targetEnvironment") = "oca" and thisInst.selected(HPCCentOS).filter(y => y.id >= "Q2A75A").count > 0 then false else true;
			}
			constraint SGISoftwareRule21_Info { // ppm 75786
				message: "All HPE SGI 8600 nodes / controllers are dependent on having adequate operating system licensing coverage. All nodes / controllers must run at minimum 1 of the following: </br>
								BD565A, BD567A, G3J28A, G3J29A, G3J30A, G3J31A, G3J32A, G3J33A, M6K36A, N7F54A, N7F55A, Q1B82A, Q1B83A, Q1B84A, Q1B85A, Q1B86A, Q1B87A, Q2A75A </br>
								Blue Note: Min Qty of 1 may not be enough to cover nodes / controllers. Configuration Specific Compatibility and quantity logic for the SKUs above </br> 
								is located within the Sectional Rules above and should be used to determine if each node is adequately covered by Operating System Licenses.";
				body:
				if thisConfig.getProperty("targetEnvironment") = "oca" and thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "M6K28A" or y.id >= "M6K29A" or y.id >= "N7F54A" or y.id >= "N7F55A").count > 0 then false else true;
			}
			constraint SGISoftwareRule11_Info {
				message: "When ordering Altair PBS Professional licenses or support products, please make sure you order one for every processor and every GPU. </br>
								Note that Altair PBS Pro Q2A45A and  Q2A44A include a license and 1 year of support.  </br>
								Altair PBS Pro Q2A46A only provides support and can only be applied as follow-on support for systems which have the appropriate number of PBS Professional licenses.";
				body:
				//if thisInst.selected(HPCAltairPBSPro).count > 0 then false;
				selected(ProliantProcessor).count = thisInst.selected(HPCAltairPBSPro).count;
			}
			constraint SGISoftwareRule12_Info {
				message: "Blue Note: Customers identified as Educational Institutions can use PBS Pro Q2A44A licenses.";
				body:
				if thisConfig.getProperty("targetEnvironment") = "oca" and thisInst.selected(HPCAltairPBSPro).filter(y => y.id >= "Q2A44A").count > 0 then false;
			}
			constraint SGISoftwareRule13_Info {
				message: "Blue Note: Customers identified as Educational Institutions can use PBS Pro Q2A44A licenses.";
				body:
				if thisInst.selected(HPCSoftwareProducts).filter(y => y.id >= "Q5U61AAE" or y.id >= "Q5U62AAE").count > 0 then false;
			}
			constraint SGISupportPointextInfo {
				message: "Support is available for 4-year and 5-year increments. Please contact Pointnext for more information.";
				body:
				if thisInst.selected(HPCSGI).filter(y => y.id >= "Q2A48A").count > 0 then false;
			}
			constraint SGISoftwareRule17_Info {
				message: "Optional Selection. If selected, 1 license per socket required.";
				body:
				{
					val ppCount = thisInst.selected(ProliantProcessor).count;
					val smsCount = thisInst.selected(HPESGIManagementSuite).filter(x => x.id >= "Q2A47A").count;
					if smsCount > 0 then smsCount = ppCount else true;
				}
			}
			constraint SGISoftwareRule17_Info2 {
				message: "Optional selection. If selected, 1 license per processor is required."; //PRS changed the text for PERT-15687 28 June 2019"Optional Selection. If selected, 1 license per socket required.";
				body:
				{
					val ppCount = thisInst.selected(ProliantProcessor).count;
					val smsCount = thisInst.selected(HPCSGI).filter(x => x.id >= "Q2A48A").count;
					if smsCount > 0 then smsCount = ppCount else true;
				}
			}
			constraint SGISoftwareRule18_Info {
				message: "Support license can be applied as follow-on support only if the current support contract has expired.";
				body:
				{
					val IntelPSPostExpc = thisInst.selected(HPCIntelPS).filterByAttribute(subHeading, "Post-exp").count;
					val IntelVTunePostExpc = thisInst.selected(HPCIntelVTune).filterByAttribute(subHeading, "Post-exp").count;
					if IntelPSPostExpc + IntelVTunePostExpc > 0 then false;
				}
			}
			constraint SGISoftwareRule19 {
				message: "Quantity is calculated as 1 SKU per server or 1 SKU per solution for clustered configurations.";
				body: restriction (HPCCentOS [ Q2A75A ] <= 1);
			}
			constraint SGIManagementSuiteRule4_info {
				message: "Must be ordered with the appropriate Operating System license(s).";
				body: if thisInst.selected(HPESGIManagementSuite).filter(p => p.id >= "Q2A47A").count > 0 then false;
			}
			constraint mustSelectbcmLicense {
				message:
				"The Bright Cluster Manager Machine Learning offering (Q9B96A, Q9B97A) requires a Bright Cluster Manager license. Please order the appropriate number of Bright Cluster Manager licenses (Q5U90A, Q5U92A, Q5U93A, Q5U94A, Q5U95A or Q5U96A)";
				body:
				if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "Q9B96A" || p.id >= "Q9B97A").count > 0 then thisInst.selected(HPCHPEBCM).filter(p => p.id >= "Q5U90A" || p.id >= "Q5U92A" || p.id >= "Q5U93A" || p.id >= "Q5U94A" || p.id >= "Q5U95A"
				|| p.id >= "Q5U96A").count > 0;
			}
			constraint DCVNICErule1 {
				message: "Minimum 5 desktop licenses must be ordered if selected.";
				body:
				if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "Q9K99AAE" || p.id >= "Q9R46AAE").count > 0 then false else true; //NL modified for ppm : 77645, 13-Aug-2018

			}
			constraint DCVNICErule2 {
				message: "Minimum 5 session licenses must be ordered if selected.";
				body:
				if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "Q9L01AAE").count > 0 then false else true;
			}
			constraint BCMrule76 { //Warning
				message: "This is a subscription license. For a cluster sized 1-49 nodes, order qty 1 of R4V21AAE per cluster node.
                          For years of support, multiply cluster nodes by number of years. Example: 10 node cluster with 3 yrs of support. Order 10x3 = 30 R4V21AAE";
				body: if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V21AAE").count > 0 then false;
			}
			constraint BCMrule77 { //Warning
				message: "This is a subscription license. For a cluster sized 50-499 nodes, order qty 1 of R4V22AAE per cluster node.
   						  For years of support, multiply cluster nodes by number of years. Example: 100 node cluster with 3 yrs of support. Order 100x3 = 300 R4V22AAE";
				body: if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V22AAE").count > 0 then false;
			}
			constraint BCMrule78 { //Warning
				message: "This is a subscription license. For a cluster sized 500-1999 nodes, order qty 1 of R4V23AAE per cluster node.
						  For years of support, multiply cluster nodes by number of years. Example: 1000 node cluster with 3 yrs of support. Order 1000x3 = 3000 R4V23AAE";
				body: if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V23AAE").count > 0 then false;
			}
			constraint BCMrule79 { //Warning
				message: "This is a subscription license. For a cluster sized greater than 2000 nodes, order qty 1 of R4V24AAE per cluster node.
						  For years of support, multiply cluster nodes by number of years. Example: 3000 node cluster with 3 yrs of support. Order 3000x3 = 9000 R4V24AAE";
				body: if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V24AAE").count > 0 then false;
			}
			constraint BCMrule80 { //Warning
				message: "This is a subscription license that must be ordered with Bright Cluster Manager R4V21AAE. Order R4V25AAE, 1 per node,  for 1-49 cluster nodes that require the Data Science software.
						  For years of support, they must match the years for support for Bright Cluster Manager R4V21AAE. Multiply the cluster nodes by number of years.";
				body: if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V25AAE").count > 0 then false;
			}
			constraint BCMrule81 { //Warning
				message: "This is a subscription license that must be ordered with Bright Cluster Manager R4V22AAE. Order R4V26AAE, 1 per node, for 50-249 cluster nodes that require the Data Science software.
						  For years of support, they must match the years for support for Bright Cluster Manager R4V22AAE. Multiply the cluster nodes by number of years.";
				body: if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V26AAE").count > 0 then false;
			}
			constraint BCMrule82 { //Warning
				message: "This is a subscription license that must be ordered with Bright Cluster Manager R4V22AAE. Order R4V27AAE, 1 per node,  for 250-499 cluster nodes that require the Data Science software.
						  For years of support, they must match the years for support for Bright Cluster Manager R4V22AAE. Multiply the cluster nodes by number of years.";
				body: if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V27AAE").count > 0 then false;
			}
			constraint BCMrule83 { //Warning
				message: "This is a subscription license that must be ordered with Bright Cluster Manager R4V23AAE or R4V24AAE. Order R4V28AAE, 1 per node, for 250-499 cluster nodes that require the Data Science software.
						  For years of support, they must match the years for support for Bright Cluster Manager R4V23AAE or R4V24AAE. Multiply the cluster nodes by number of years.";
				body: if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V28AAE").count > 0 then false;
			}
			//			}
			constraint checkMaxlimit {
				message: "Max quantity is 10 for VMware vSphere Editions ";
				enabled: (thisInst.realBasedummyId != "P07244-B21_HSX" && thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisConfig.getInstancesOfModel("BlueDataSW").isEmpty then thisInst.selected(VMWareSoftware).filter(p => p.id >= "Q8U57AAE" || p.id >= "Q8U58AAE" || p.id >= "Q8U59AAE").count > 0;
			}
			constraint PartnerSoftwareOperatingSystem8pksrule8 { //warning
				message: "Needs an active SLES subscription as head node. </br>One compute node per subscription (Max 8 compute nodes). </br>Support is sold separately.";
				body:
				if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q5T86A" || y.id >= "Q5T87A"
				//MS for PPM: 76072	
				|| y.id >= "Q9S73AAE" || y.id >= "Q9S74AAE" || y.id >= "Q9S75AAE" || y.id >= "Q9S76AAE" || y.id >= "Q9S77AAE" || y.id >= "Q9S78AAE" || y.id >= "Q9S80AAE" || y.id >= "Q9S81AAE" || y.id >= "Q9S82AAE" || y.id >= "Q9S83AAE" || y.id >=
				"Q9S84AAE" || y.id >= "Q9S79AAE" || y.id >= "R8R77A").count > 0 then false else true; //SE - Added R8R77A for PERT 23595  14-Jul-2021

			}
			constraint PartnerSoftwareOperatingSystem8pksrule10 { //Warning
				message: "SUSE doesn't provide ARM processor on Moonshot platforms support at this time";
				body:
				if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q5T86A" || y.id >= "Q5T87A").count > 0 then false else true;
			}
			constraint PartnerSoftwareOperatingSystem8pksrule11 { //information
				message: "2 socket pair can be stackable";
				body:
				if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q5T86A" || y.id >= "Q5T87A").count > 0 then false else true;
			}
			constraint HPCMUSoftwareRule13 //Warning
			{
				message: "e-Delivery products will be delivered via e-email.";
				body: if thisInst.selected(HPCSoftwareProducts).filter(y => y.id >= "Q5U61AAE" || y.id >= "Q5U62AAE").count > 0 then false else true; //SR ALM 106842

			}
			constraint HPCMUSoftwareRule16 //LAL_PPM_73131, Information
			{
				message: "Software products with E-LTU will require that an end-user e-mail address is collected for the order so that the products can be delivered to the customer in an e-mail URL.";
				body: if thisInst.selected(HPCSoftwareProducts).filter(y => y.id >= "Q5U61AAE" || y.id >= "Q5U62AAE").count > 0 then false else true;
			}
			constraint HPCMUSoftwareRule6 //LAL_PPM_73131  Warning
			{
				message: "Can only be ordered with standalone clusters of 32 nodes or less.</br> For clusters that exceed 32 nodes, please select a different CMU SKU.";
				body: if thisInst.selected(HPCSoftwareProducts).filter(y => y.id >= "Q5U62AAE" || y.id >= "Q5U61AAE").count > 0 then false else true;
			}
			constraint HPCMUSoftwareRule55 //MS for PPM: 76072
			{
				message: "E-LTU is 1 floating license per user with 1 year Allinea support subscription.";
				body: if thisInst.selected(HPCSoftware).filter(y => y.id >= "Q9S35AAE" || y.id >= "Q9S36AAE").count > 0 then false else true;
			}
			constraint HPCMUSoftwareRule56 //MS for PPM: 76072
			{
				message: "Order quantities to reflect number of users and number of years of support";
				body: if thisInst.selected(HPCSoftware).filter(y => y.id >= "Q9S35AAE" || y.id >= "Q9S36AAE").count > 0 then false else true;
			}
			constraint HPCMUSoftwareRule57 //MS for PPM: 76072
			{
				message: "This sku is for academic degree-granting institutions only.";
				body: if thisInst.selected(HPCSoftware).filter(y => y.id >= "Q9S35AAE" || y.id >= "Q9S36AAE").count > 0 then false else true;
			}
			constraint HPCMUSoftwareRule7 //LAL_PPM_73131, Warning sceServerCommon.xml, Fix: Q5U63AAE added.
			{
				message: "Software products with E-LTU will require that an end-user e-mail address is collected for the order so that the products can be delivered to the customer in an e-mail URL.";
				body: if thisInst.selected(HPCMUSoftware).filter(y => y.id >= "Q5U64AAE" || y.id >= "Q5U63AAE").count > 0 then false else true;
			}
			constraint HPCMUSoftwareRule8 //LAL_PPM_73131, Information sceServerCommon.xml
			{
				message: "e-Delivery products will be delivered via e-email.";
				body: if thisInst.selected(HPCMUSoftware).filter(y => y.id >= "Q5U63AAE" || y.id >= "Q5U64AAE").count > 0 then false else true;
			}
			constraint HPCMUSoftwareRule9 //LAL_PPM_73131 incompleto or rule 14... Warning
			{
				message: "Can only be ordered with a standalone Moonshot chassis, regardless of the number of cartridges.</br> For clusters that exceed more than one chassis, please select a different CMU SKU.";
				body: if thisInst.selected(HPCMUSoftware).filter(y => y.id >= "Q5U64AAE" || y.id >= "Q5U62AAE").count > 0 then false else true;
			}
			constraint PartnerSoftwareOpeSysRule23_info {
				message: "Quantity is calculated as 1 license per 2 socket Server";
				body: if thisConfig.getInstancesOfModel("Apollo10kl20G9").count + thisConfig.getInstancesOfModel("Apollo10pc40G10").count + thisConfig.getInstancesOfModel("Apollo10sx40G10").count > 0 and thisInst.selected(VMwareVSAN).filter(p => p.id
				>= "M6K36A" or p.id >= "Q1B82A" or p.id >= "Q1B83A" or p.id >= "Q1B84A").count > 0 then false;
			}
			constraint PartnerSoftwareOpeSysRule24_Blue {
				message: "Consult with Solution Architect  if unsure which OS selection to make. Select 1 SKU per server based on the function of the server. </br>
								  IE: HPC Head Node server vs. HPC Compute Node Server.";
				body: if thisConfig.getProperty("targetEnvironment") >= "oca" and thisConfig.getInstancesOfModel("Apollo10kl20G9").count + thisConfig.getInstancesOfModel("Apollo10pc40G10").count +
				thisConfig.getInstancesOfModel("Apollo10sx40G10").count > 0 and thisInst.selected(VMwareVSAN).filter(p => p.id >= "M6K36A" or p.id >= "Q1B82A" or p.id >= "Q1B83A" or p.id >= "Q1B84A" or p.id >= "Q1B85A" or p.id >= "Q1B86A" or p.id >=
				"Q1B87A").count > 0 then false;
			}
			constraint SGISoftwareWarningRule4 {
				message: "Partner customer form must be completed in order to include this SKU with the order.";
				body:
				{
					val intelPSList = "Q1Z45A Q1Z46A Q1Z49A Q1Z50A Q1Z51A Q1Z52A Q1Z53A Q1Z54A Q2A49A Q2A50A Q2A51A Q2A52A Q2A81A Q2A82A Q2A87A Q2A88A Q2A91A Q2A92A Q2A95A Q2A96A Q2A97A Q2A98A Q5V03A Q5V04A";
					val totalViewList = "Q5V68A Q5V69A Q5V70A Q5V72A Q5V75A Q5V77A Q5V78A Q5V79A Q5V80A Q5V83A";
					val CHPEBCMList = "Q5U90A Q5U92A Q5U93A Q5U94A Q5U95A Q5U96A";
					val iHPCIntelPSCount = thisInst.selected(HPCIntelPS).filter(y => y.id <= intelPSList).count;
					val itotalViewCount = thisInst.selected(HPCTotalView).filter(y => y.id <= totalViewList).count;
					val iCHPEBCMCount = thisInst.selected(HPCHPEBCM).filter(y => y.id <= CHPEBCMList).count;
					val Brightopenstack = thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "R0T02AAE" || y.id >= "R0T03AAE" || y.id >= "R0T04AAE" || y.id >= "R0T05AAE").count;
					if Brightopenstack + iHPCIntelPSCount + itotalViewCount + iCHPEBCMCount > 0 then false else true;
				}
			}
			constraint SGISoftwareInfoRule5 {
				message: "This is not stacked software. Please select the SKU that represents the number of annual licenses needed for the total number of nodes.</br> 
				    			For example:  To support 500 nodes for 3 years, you will need 1500 licenses (500*3). Based on the number of licenses, select the appropriate tier.</br> 
								In this example, you will need to select a SKU for 1024-3071 nodes.";
				body:
				thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "R0T02AAE" || y.id >= "R0T03AAE" || y.id >= "R0T04AAE" || y.id >= "R0T05AAE").count <= 0; //PRS Added SKUs for PPM: 77300

			}
			constraint SGISoftwareRule8_Info {
				message: "This is a floating license that can be shared across users.";
				body:
				{
					val Allineac = thisInst.selected(HPCAllineaForge).count;
					val ARMDDT = thisInst.selected(HPCARMDDT).count; //PRS Added for PERT-21301 08-Jan-2021
					val intelVtunec = thisInst.selected(HPCIntelVTune).filter(y => y.id >= "Q5V41A" || y.id >= "Q5V42A" || y.id >= "Q5V44A" || y.id >= "Q5V49A" || y.id >= "Q5V52A").count;
					val intelPSc = thisInst.selected(HPCIntelPS).filter(b => b.id >= "Q1Z51A" || b.id >= "Q1Z52A" || b.id >= "Q1Z53A" || b.id >= "Q1Z54A" || b.id >= "Q2A49A" || b.id >= "Q2A50A" || b.id >= "Q2A51A" || b.id >= "Q2A52A" || b.id >= "Q2A81A"
					|| b.id >= "Q2A82A" || b.id >= "Q2A87A" || b.id >= "Q2A88A" || b.id >= "Q2A91A" || b.id >= "Q2A92A" || b.id >= "Q2A95A" || b.id >= "Q2A96A" || b.id >= "Q5U97A" || b.id >= "Q5U98A" || b.id >= "Q5U99A" || b.id >= "Q5V00A" || b.id >=
					"Q5V03A" || b.id >= "Q5V04A" || b.id >= "Q5V05A" || b.id >= "Q5V06A" || b.id >= "Q5V07A" || b.id >= "Q5V08A" || b.id >= "Q2A54A" || b.id >= "Q2A55A" || b.id >= "Q2A56A" || b.id >= "Q2A57A" || b.id >= "Q2A58A" || b.id >= "Q2A59A" ||
					b.id >= "Q2A83A" || b.id >= "Q2A84A" || b.id >= "Q2A85A" || b.id >= "Q2A86A" || b.id >= "Q5V18A" || b.id >= "Q5V22A" || b.id >= "Q5V45A" || b.id >= "Q5V11A" || b.id >= "Q5V12A" || b.id >= "Q5V13A" || b.id >= "Q5V14A" || b.id >=
					"Q5V15A" || b.id >= "Q5V23A" || b.id >= "Q5V24A" || b.id >= "Q5V25A" || b.id >= "Q5V46A" || b.id >= "Q5V47A" || b.id >= "Q5V48A" || b.id >= "Q5V50A" || b.id >= "Q5V51A" || b.id >= "Q5V28A" || b.id >= "Q5V29A" || b.id >= "Q5V30A" ||
					b.id >= "Q5V31A" || b.id >= "Q5V34A" || b.id >= "Q5V35A" || b.id >= "Q5V36A" || b.id >= "Q5V37A").count;
					if Allineac + intelVtunec + intelPSc + ARMDDT > 0 then false else true;
				}
			}
			constraint altairpbsrule70_Info {
				message: "When the user orders a quantity that is equal to, or more than 1000, please fire the following message: </br>
						  Orders that include 1,000 or more sockets must include a proposal for Altair Professional Services. </br>	
						  Please contact the WW HPC Software product management team for more information.";
				body:
				if thisInst.selected(HPCAltairPBSPro).filter(y => y.id >= "Q2A45A").count >= 1000 then false;
			}
			constraint SGISoftware_Rule19 {
				message: "Only 1 license can be ordered per solution or base system.";
				body: restriction (HPCTotalView [ Q5V69A ] <= 1);
				restriction (HPCTotalView [ Q5V70A ] <= 1);
				restriction (HPCTotalView [ Q5V72A ] <= 1);
				restriction (HPCTotalView [ Q5V75A ] <= 1);
				restriction (HPCTotalView [ Q5V77A ] <= 1);
				restriction (HPCTotalView [ Q5V78A ] <= 1);
				restriction (HPCARMDDT [ R7L73AAE ] <= 1);
				restriction (HPCARMDDT [ R7L74AAE ] <= 1);
				restriction (HPCARMDDT [ R7L75AAE ] <= 1);
				restriction (HPCARMDDT [ R7L76AAE ] <= 1);
				restriction (HPCARMDDT [ R7L77AAE ] <= 1);
				restriction (HPCARMDDT [ R7L78AAE ] <= 1);
			} //PRS Added HPCARMDDT SKUs for PERT-21301 08-Jan-2021

			//			ifEffective PRS_PERT_21301{ //PRS Added rules for PERT-21301 08-Jan-2021
			//			constraint socketrule87 {
			//				message: "Customer should select this SKU R7G06AAE whenever he wants to buy sockets between 5001 and 10000.
			//						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
			//				body:
			//				{
			//					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
			//					val graphics = thisInst.selected(GraphicsPciCard).count;
			//					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G06AAE").count;
			//					val totalsockets = processor + graphics;
			//					if thisConfig.getProperty("targetEnvironment") = "oca" and isSupportedServers = true and (totalsockets >= 5001 and totalsockets <= 10000) then software = totalsockets;
			//				}
			//			}
			//			constraint socketrule88 {
			//				message: "Customer should select this SKU R7G07AAE whenever he wants to buy sockets between 1 and 100. 
			//						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
			//				body:
			//				{
			//					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
			//					val graphics = thisInst.selected(GraphicsPciCard).count;
			//					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G07AAE").count;
			//					val totalsockets = processor + graphics;
			//					if thisConfig.getProperty("targetEnvironment") = "oca" and isSupportedServers = true and (totalsockets >= 1 and totalsockets <= 100) then software = totalsockets;
			//				}
			//			}
			//			constraint socketrule89 {
			//				message: "Customer should select this SKU R7G08AAE whenever he wants to buy sockets between 101 and 1000. 
			//						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
			//				body:
			//				{
			//					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
			//					val graphics = thisInst.selected(GraphicsPciCard).count;
			//					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G08AAE").count;
			//					val totalsockets = processor + graphics;
			//					if thisConfig.getProperty("targetEnvironment") = "oca" and isSupportedServers = true and (totalsockets >= 101 and totalsockets <= 1000) then software = totalsockets;
			//				}
			//			}
			//			constraint socketrule90 {
			//				message: "Customer should select this SKU R7G09AAE whenever he wants to buy sockets between 1001 and 5000.
			//						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
			//				body:
			//				{
			//					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
			//					val graphics = thisInst.selected(GraphicsPciCard).count;
			//					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G09AAE").count;
			//					val totalsockets = processor + graphics;
			//					if thisConfig.getProperty("targetEnvironment") = "oca" and isSupportedServers = true and (totalsockets >= 1001 and totalsockets <= 5000) then software = totalsockets;
			//				}
			//			}
			//			constraint socketrule91 {
			//				message: "Customer should select this SKU R7G10AAE whenever he wants to buy sockets above 10000. 
			//						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
			//				body:
			//				{
			//					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
			//					val graphics = thisInst.selected(GraphicsPciCard).count;
			//					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G10AAE").count;
			//					val totalsockets = processor + graphics;
			//					if thisConfig.getProperty("targetEnvironment") = "oca" and isSupportedServers = true and (totalsockets >= 10000) then software = totalsockets;
			//				}
			//			}
			//			}
			constraint SGISoftwareRule21_Blue {
				message: "Blue note: SKU can be applied as follow-on support for existing licenses. </br>
							Customer must have the original base product. SKU does not include the application license. For Intel Software products";
				body: if thisInst.selected(HPCSGI).filter(b => b.id >= "Q8K21A").count > 0 then false;
			}
			constraint SGISoftwareRule22_Blue {
				message: "When SKU is selected at the base system or solution level, the SKU should be nested at the node level";
				body:
				if thisInst.selected(HPCSGI).filter(y => y.id >= "Q8K21A").count > 0 then false;
			}
			constraint SGISoftware_Rule3 {
				message: "Only 1 license can be ordered per solution or base system.";
				body: restriction (HPCSGI [ Q5U69A ] <= 1);
				restriction (HPCAllineaForge [ Q5U71A ] <= 1);
				restriction (HPCAllineaForge [ Q5U73A ] <= 1);
				restriction (HPCAllineaForge [ Q5U75A ] <= 1);
				restriction (HPCAllineaForge [ Q5U77A ] <= 1);
				restriction (HPCAllineaForge [ Q5U79A ] <= 1);
				restriction (HPCAllineaForge [ Q5U81A ] <= 1);
				restriction (HPCAllineaForge [ Q1Z87A ] <= 1);
				restriction (HPCAllineaForge [ Q1Z97A ] <= 1);
			}
			constraint PartnerSoftwareOperatingSystem8pksrule6 {
				message: "Head nodes provide support for compute nodes - both may be purchased together. Customers would only need a single head node, but may need multiple compute nodes.";
				body:
				if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q1B82A" || y.id >= "Q1B82AAE" || y.id >= "Q1B83A" || y.id >= "Q1B83AAE" || y.id >= "Q1B84A" || y.id >= "Q1B84AAE" || y.id >= "Q1B85A" || y.id >= "Q1B85AAE"
				|| y.id >= "Q1B86A" || y.id >= "Q1B86AAE" || y.id >= "Q1B87A" || y.id >= "Q1B87AAE" || y.id >= "Q5U09A" || y.id >= "R1P34A" || y.id >= "R1P34AAE" || y.id >= "R1P35A" || y.id >= "R1P35AAE" || y.id >= "R1P36A" || y.id >= "R1P36AAE" ||
				y.id >= "R1P37A" || y.id >= "R1P37AAE" || y.id >= "R1P38A" || y.id >= "R1P38AAE" || y.id >= "R1P39A" || y.id >= "R1P39AAE" || y.id >= "R1P40A" || y.id >= "R1P40AAE" || y.id >= "R1P41A" || y.id >= "R1P41AAE" || y.id >= "R1P42A" || y.id
				>= "R1P42AAE" || y.id = "R2Z45AAE" || y.id = "R2Z46AAE" || y.id = "R2Z47AAE" || y.id = "R2Z51AAE" || y.id = "R2Z52AAE" || y.id = "R2Z53AAE").count > 0 then false else true;
			}
			constraint PartnerSoftwareOperatingSystem8pksrule7 {
				message: "Head Nodes and Compute Nodes should have matching terms. (i.e.: 3yr to 3yr; 5yr to 5yr)";
				body:
				if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q1B82A" || y.id >= "Q1B82AAE" || y.id >= "Q1B83A" || y.id >= "Q1B83AAE" || y.id >= "Q1B84A" || y.id >= "Q1B84AAE" || y.id >= "Q1B85A" || y.id >= "Q1B85AAE"
				|| y.id >= "Q1B86A" || y.id >= "Q1B86AAE" || y.id >= "Q1B87A" || y.id >= "Q1B87AAE" || y.id >= "Q5U09A" || y.id >= "R1P34A" || y.id >= "R1P34AAE" || y.id >= "R1P35A" || y.id >= "R1P35AAE" || y.id >= "R1P36A" || y.id >= "R1P36AAE" ||
				y.id >= "R1P37A" || y.id >= "R1P37AAE" || y.id >= "R1P38A" || y.id >= "R1P38AAE" || y.id >= "R1P39A" || y.id >= "R1P39AAE" || y.id >= "R1P40A" || y.id >= "R1P40AAE" || y.id >= "R1P41A" || y.id >= "R1P41AAE" || y.id >= "R1P42A" || y.id
				>= "R1P42AAE" || y.id = "R2Z45AAE" || y.id = "R2Z46AAE" || y.id = "R2Z47AAE" || y.id = "R2Z51AAE" || y.id = "R2Z52AAE" || y.id = "R2Z53AAE").count > 0 then false else true;
			}
			constraint PartnerSoftwareOperatingSystem8pksrule9 {
				message: "Red Hat doesn't provide ARM processor on Moonshot platforms support at this time.";
				body:
				if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q1B82A" || y.id >= "Q1B82AAE" || y.id >= "Q1B83A" || y.id >= "Q1B83AAE" || y.id >= "Q1B84A" || y.id >= "Q1B84AAE" || y.id >= "Q1B85A" || y.id >= "Q1B85AAE"
				|| y.id >= "Q1B86A" || y.id >= "Q1B86AAE" || y.id >= "Q1B87A" || y.id >= "Q1B87AAE" || y.id >= "Q5U09A" || y.id >= "R1P34A" || y.id >= "R1P34AAE" || y.id >= "R1P35A" || y.id >= "R1P35AAE" || y.id >= "R1P36A" || y.id >= "R1P36AAE" ||
				y.id >= "R1P37A" || y.id >= "R1P37AAE" || y.id >= "R1P38A" || y.id >= "R1P38AAE" || y.id >= "R1P39A" || y.id >= "R1P39AAE" || y.id >= "R1P40A" || y.id >= "R1P40AAE" || y.id >= "R1P41A" || y.id >= "R1P41AAE" || y.id >= "R1P42A" || y.id
				>= "R1P42AAE" || y.id = "R2Z45AAE" || y.id = "R2Z46AAE" || y.id = "R2Z47AAE" || y.id = "R2Z51AAE" || y.id = "R2Z52AAE" || y.id = "R2Z53AAE").count > 0 then false else true;
			}
			constraint BCMrule75 {
				message: "The Bright Cluster Manager Data Science offering requires a Bright Cluster Manager license.
                          Please order the appropriate number of Bright Cluster Manager licenses (R4V21AAE, R4V22AAE, R4V23AAE or R4V24AAE) to meet this requirement.";
				body: if(thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V25AAE" or p.id >= "R4V26AAE" or p.id >= "R4V27AAE" or p.id >= "R4V28AAE").count > 0 or thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(p => p.id >= "R0T02AAE"
				or p.id >= "R0T03AAE" or p.id >= "R0T04AAE" or p.id >= "R0T05AAE").count > 0) then thisInst.selected(HPCHPEBCM).filter(p => p.id >= "R4V21AAE" or p.id >= "R4V22AAE" or p.id >= "R4V23AAE" or p.id >= "R4V24AAE").count > 0;
			}
			constraint SGISoftwareRule2_Info {
				message: "SKU can be applied as follow-on support for existing licenses. Customer must have the original base product. SKU does not include the application license.";
				body: if thisInst.selected(HPCIntelPS).filter(y => y.id >= "Q1Z45A" or y.id >= "Q1Z46A" or y.id >= "Q1Z49A" or y.id >= "Q1Z50A" or y.id >= "Q1Z51A" or y.id >= "Q1Z52A" or y.id >= "Q1Z53A" or y.id >= "Q1Z54A" or y.id >= "Q2A49A" or
				y.id >= "Q2A50A" or y.id >= "Q2A51A" or y.id >= "Q2A52A" or y.id >= "Q2A81A" or y.id >= "Q2A82A" or y.id >= "Q2A87A" or y.id >= "Q2A88A" or y.id >= "Q2A91A" or y.id >= "Q2A92A" or y.id >= "Q2A95A" or y.id >= "Q2A96A" or y.id >=
				"Q2A97A" or y.id >= "Q2A98A" or y.id >= "Q5V03A" or y.id >= "Q5V04A").count > 0 then false;
			}
			constraint socketrule87_warning {
				message: "This SKU to be selected ONLY when customer wants SLURM support. 
						  Customer should select this SKU R7G06AAE whenever he wants to buy sockets between 5001 and 10000.
						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
				body:
				{
					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
					val graphics = thisInst.selected(GraphicsPciCard).count;
					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G06AAE").count;
					val totalsockets = processor + graphics;
					if isSupportedServers = true and (totalsockets >= 5001 and totalsockets <= 10000) then software = totalsockets;
				} //thisConfig.getProperty("targetEnvironment") != "oca" and 

			}
			constraint socketrule88_warning {
				message: "This SKU to be selected ONLY when customer wants SLURM support. 
						  Customer should select this SKU R7G07AAE whenever he wants to buy sockets between 1 and 100. 
						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				{
					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
					val graphics = thisInst.selected(GraphicsPciCard).count;
					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G07AAE").count;
					val totalsockets = processor + graphics;
					if isSupportedServers = true and (totalsockets >= 1 and totalsockets <= 100) then software = totalsockets;
				} //thisConfig.getProperty("targetEnvironment") != "oca" and 

			}
			constraint socketrule89_warning {
				message: "This SKU to be selected ONLY when customer wants SLURM support. 
						  Customer should select this SKU R7G08AAE whenever he wants to buy sockets between 101 and 1000. 
						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
				body:
				{
					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
					val graphics = thisInst.selected(GraphicsPciCard).count;
					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G08AAE").count;
					val totalsockets = processor + graphics;
					if isSupportedServers = true and (totalsockets >= 101 and totalsockets <= 1000) then software = totalsockets;
				} //thisConfig.getProperty("targetEnvironment") != "oca" and 

			}
			constraint socketrule90_warning {
				message: "This SKU to be selected ONLY when customer wants SLURM support. 
						  Customer should select this SKU R7G09AAE whenever he wants to buy sockets between 1001 and 5000.
						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
				body:
				{
					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
					val graphics = thisInst.selected(GraphicsPciCard).count;
					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G09AAE").count;
					val totalsockets = processor + graphics;
					if isSupportedServers = true and (totalsockets >= 1001 and totalsockets <= 5000) then software = totalsockets;
				} //thisConfig.getProperty("targetEnvironment") != "oca" and 

			}
			constraint socketrule91_warning {
				message: "This SKU to be selected ONLY when customer wants SLURM support. 
						  Customer should select this SKU R7G10AAE whenever he wants to buy sockets above 10000. 
						  The socket should be a CPU or a GPU. The SKU quantity should be equal to the total number of sockets.";
				body:
				{
					val processor = thisInst.selected(ProliantProcessor).count + thisInst.selected(ApolloProcessor).count;
					val graphics = thisInst.selected(GraphicsPciCard).count;
					val software = thisInst.selected(HPCSSS).filter(x => x.id = "R7G10AAE").count;
					val totalsockets = processor + graphics;
					if isSupportedServers = true and (totalsockets >= 10000) then software = totalsockets;
				} //thisConfig.getProperty("targetEnvironment") != "oca" and 

			}
			constraint DCVNICErule3 {
				message: "Requires the selection of support license Q9L02AAE for each Q9L01AAE  for each year of support.";
				body:
				{
					val selectedniceperp = thisInst.selected(HPCHPEBCM).filter(x => x.id = "Q9L01AAE").count;
					val selectednicesupp = thisInst.selected(HPCHPEBCM).filter(x => x.id = "Q9L02AAE").count;
					if selectedniceperp > 0 then selectedniceperp = selectednicesupp;
				}
			}
			constraint DCVNICErule3_warning {
				message: "If the customer wants 10 licenses with 6 years of support, then he should purchase 10 (perpetual license) and 60 (support SKU)";
				body:
				{
					val selectedniceperp = thisInst.selected(HPCHPEBCM).filter(x => x.id = "Q9L01AAE").count;
					if selectedniceperp > 0 then false;
				}
			}
			constraint DCVNICErule23 {
				message: "Requires the selection of support license Q9R47AAE for each Q9R46AAE for each year of support.";
				body:
				{
					val selectedniceperp = thisInst.selected(HPCHPEBCM).filter(x => x.id = "Q9R46AAE").count;
					val selectednicesupp = thisInst.selected(HPCHPEBCM).filter(x => x.id = "Q9R47AAE").count;
					if selectedniceperp > 0 then selectedniceperp = selectednicesupp;
				}
			}
			constraint DCVNICErule23_warning {
				message: "If the customer wants 10 licenses with 6 years of support, then he should purchase 10 (perpetual license) and 60 (support SKU)";
				body:
				{
					val selectedniceperp = thisInst.selected(HPCHPEBCM).filter(x => x.id = "Q9R46AAE").count;
					if selectedniceperp > 0 then false;
				}
			}
			constraint DCVNICErule59 {
				message: "Requires the selection of support license Q9L00AAE (1 year support) for each Q9K99AAE for each year of support.";
				body:
				{
					val selectedniceperp = thisInst.selected(HPCHPEBCM).filter(x => x.id = "Q9K99AAE").count;
					val selectednicesupp = thisInst.selected(HPCHPEBCM).filter(x => x.id = "Q9L00AAE").count;
					if selectedniceperp > 0 then selectedniceperp = selectednicesupp;
				}
			}
			constraint DCVNICErule59_warning {
				message: "If the customer wants 10 licenses with 6 years of support, then he should purchase 10 (perpetual license) and 60 (support SKU)";
				body:
				{
					val selectedniceperp = thisInst.selected(HPCHPEBCM).filter(x => x.id = "Q9K99AAE").count;
					if selectedniceperp > 0 then false;
				}
			}
			constraint DCVNICErule79_warning {
				message: "Min = 5 support SKUs must be ordered if selected. The support SKUs can be purchased separately without the license SKUs";
				body:
				{
					if thisInst.selected(HPCHPEBCM).filter(p => p.id >= "Q9L00AAE" || p.id >= "Q9L02AAE" || p.id >= "Q9R47AAE").count > 0 then false else true;
				}
			}
			constraint ClusterSoftwareRule1 {
				message: "Physical Media cannot be ordered without LTU on the order.  Software download is included with E-LTU.</br>
						BB086AA media requires one of the following LTUs: BB100AC, BB100ACE</br>
						BB094AA media requires one of the following LTUs: BB094AC/ACE, R1T30AAE, R1T33AAE</br>
						BB095AA media requires one of the following LTUs: BB095AC/ACE, BB096AC, R1T31AAE, R1T34AAE</br>
						BB097AA media requires one of the following LTUs: BB097AC/ACE P9B46A, R1T32AAE, R1T35AAE, R1T36AAE, R1T37AAE<br>
						R7Q02A media requires one of the following LTUs: R7P98AAE, R7P99AAE, R7Q00AE,R7Q01AE, R7Q01AC<br>
						R8V48A media requires one of the following LTUs: R8V45AAE, R8V46AAE, R8V47AAE"; //RV 17-Mar-2021 SMR Pink Pig added this line and its conditon only
				//product not available in menu    BB084AA media requires one of the following LTUs: BB084AC/ACE; BB085AC/ACE
				body:
				if thisInst.selected(HACClusterMedia).filter(x => x.id >= "BB086AA").count > 0 then thisInst.selected(HACClusterCCLtu).filter(x => x.id >= "BB100AC" or x.id >= "BB100ACE").count > 0;
				if thisInst.selected(HACClusterSw).filter(x => x.id >= "BB094AA").count > 0 then (thisInst.selected(HACClusterSw).filter(x => x.id >= "BB094AC" or x.id >= "BB094ACE").count + thisInst.selected(HACClusterSGLtu).filter(x => x.id >=
				"R1T30AAE" or x.id >= "R1T33AAE").count) > 0;
				if thisInst.selected(HACClusterSw).filter(x => x.id >= "BB095AA").count > 0 then (thisInst.selected(HACClusterSw).filter(x => x.id >= "BB095AC" or x.id >= "BB095ACE" or x.id >= "BB096AC").count +
				thisInst.selected(HACClusterSGLtu).filter(x => x.id >= "R1T31AAE" or x.id >= "R1T34AAE").count) > 0;
				if thisInst.selected(HACClusterSw).filter(x => x.id >= "BB097AA").count > 0 then (thisInst.selected(HACClusterSw).filter(x => x.id >= "BB097AC" or x.id >= "BB097ACE").count + thisInst.selected(HACClusterSGLtu).filter(x => x.id >=
				"R1T32AAE" or x.id >= "R1T35AAE" or x.id >= "R1T36AAE" or x.id >= "R1T37AAE").count + thisInst.selected(casSoftware).filter(x => x.id >= "P9B46A").count) > 0;
				if thisInst.selected(casSoftware).filter(x => x.id >= "R7Q02A").count > 0 then (thisInst.selected(casSoftware).filter(x => x.id >= "R7P98AAE" or x.id >= "R7P99AAE" or x.id >= "R7Q00AE" or x.id >= "R7Q01AE" or x.id >= "R7Q01AC").count)
				> 0;
				if thisInst.selected(HACClusterMedia).filter(x => x.id >= "R8V48A").count > 0 then (thisInst.selected(HACClusterSGLtu).filter(x => x.id >= "R8V45AAE" or x.id >= "R8V46AAE" or x.id >= "R8V47AAE").count) > 0;
			}
			constraint hpc_software_rule93_warning {
				message: "If the system has GPUs/FPGAs, then you need to select both Bright Cluster Manager SKUs  and Bright Cluster Accelerator SKUs.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R8V80AAE R8V81AAE R8V82AAE R8V83AAE").count > 0 then false;
			}
			constraint hpc_software_rule94_warning {
				message: "This is a subscription license. For a system with  1-49 accelerators, order qty 1 of R8V80AAE per accelerator. For years of support, 
						multiply number of accelerators by number of years. Example: 10 accelerators with 3 yrs of support. Order 10x3 = 30 R8V80AAE. 
						Bright Cluster Manager base SKUs must also be purchased with the Accelerator SKUs.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R8V80AAE").count > 0 then false;
			}
			constraint hpc_software_rule95_warning {
				message: "This is a subscription license.  For a system with  50-499 accelerators, order qty 1 of R8V81AAE per accelerator. For years of support, 
						multiply number of accelerators by number of years. Example: 100 accelerators with 3 yrs of support. Order 100x3 = 300 R8V81AAE. 
						Bright Cluster Manager base SKUs must also be purchased with the Accelerator SKUs.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R8V81AAE").count > 0 then false;
			}
			constraint hpc_software_rule96_warning {
				message: "This is a subscription license. For a system with 500-1999 accelerators, order qty 1 of R8V82AAE per accelerator For years of support, 
						multiply number of accelerators by number of years. Example: 1000 node cluster with 3 yrs of support. Order 1000x3 = 3000 R8V82AAE. 
						Bright Cluster Manager base SKUs must also be purchased with the Accelerator SKUs.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R8V82AAE").count > 0 then false;
			}
			constraint hpc_software_rule97_warning {
				message: "This is a subscription license. For a system with 2000 or more accelerators, order qty 1 of R8V83AAE per accelerator For years of support, 
						multiply number of accelerators by number of years. Example: 3000 node cluster with 3 yrs of support. Order 3000x3 = 9000 R8V83AAE. 
						Bright Cluster Manager base SKUs must also be purchased with the Accelerator SKUs.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R8V83AAE").count > 0 then false;
			}
			constraint cluster_sw_rule11_warning {
				message: "The Serviceguard for Linux (SGLX) one, three and five year subscription SKU's deliver time bound license 
						and 24x7 SW Support & Updates for the Base, Advanced, Enterprise, Premium editions and the SGLX Flex Storage Add-On for the specified period. 
						For SAP HANA deployments order R1T36AAE / R1T37AAE / R8V43AAE, R7P98AAE / R7P99AAE / R8V44AAE.The subscription SKU's are only available as E-LTU and software is delivered electronically. For physical media order BB094AA, BB095AA, BB097AA, R7Q02A, R8V48A as per requirement.";
				body: if thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R8V40AAE R8V41AAE R8V42AAE R8V43AAE R8V44AAE R8V45AAE R8V46AAE R8V47AAE").count > 0 then false;
			}
			constraint cluster_sw_rule14_warning {
				message: "The SGLX Flex Storage Add-On is available as an Add-On for any of the SGLX editions Base/Advanced/Enterprise/Enterprise for HANA/Premium for HANA. 
					The Flex Storage Add-On requires one LTU per OS instance. When ordering this SKU ensure that for every unit of this SKU you have ordered the required number of per socket LTUs of the appropriate SGLX edition. ";
				body: if thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R8V45AAE R8V46AAE R8V47AAE").count > 0 then false;
			}
			constraint cluster_sw_rule15 {
				message: "To complete the order add required number of PSL LTUs for the appropriate SGLX edition.<br> 
							The SGLX Flex Storage Add-On is available as an Add-On for any of the SGLX editions (Base/Advanced/Enterprise/Enterprise for HANA/Premium for HANA).<br> 
							For more details, license entitlement calculations refer QuickSpecs - https://www.hpe.com/h20195/v2/GetDocument.aspx?docname=c04154488 and Configuration Guide -  https://hpe.seismic.com/app?ContentId=2841a7fe-52de-441d-ae15-1342b509ea0f<br>

							Error Purpose (High Level): User is required to select the required number of PSL units for the appropriate SGLX edition (Base/Advanced/Enterprise/Enterprise for HANA/Premium for HANA)";
				body: if thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R8V45AAE R8V46AAE R8V47AAE").count > 0 then false;
			}
			constraint cluster_sw_rule16 {
				message: "Mismatch of subscription period, ensure the subscription time periods match on the SGLX Flex Storage Add-On and the underlying SGLX editions (Base/Advanced/Enterprise/Enterprise for HANA/Premium for HANA) 
						Ex. If ordering the 1 Yr. subscription (R8V45AAE) of Flex Storage Add-On ensure you have order the 1 Yr. subscription of Base/Advanced/Enterprise/Enterprise for HANA/Premium for HANA (R1T30AAE/R1T31AAE/R1T32AAE/R1T36AAE/R7P98AAE).  For 3 Yr subscription (R8V46AAE - R1T33AAE/R1T34AAE/R1T35AAE/R1T37AAE/R7P99AAE, 5 Yr subscription (R8V47AAE - R8V40AAE, R8V41AAE, R8V42AAE, R8V43AAE, R8V44AAE)
						NOTE :  Cannot be ordered with perpetual SKUs BB094AC/ACE, BB095AC/ACE, BB097AC/ACE, P9B46A, R7Q01AC/AAE.
						Error Purpose (High Level): Mismatch of subscription period between the SGLX Flex Storage Add-On and the underlying SGLX editions (Base/Advanced/Enterprise/Enterprise for HANA/Premium for HANA). ";
				body: if thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R8V45AAE").count > 0 then (thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R1T30AAE R1T31AAE R1T32AAE R1T36AAE").count > 0 or
				thisInst.selected(casSoftware).filter(x => x.id <= "R7P98AAE").count > 0);
				if thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R8V46AAE").count > 0 then (thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R1T33AAE R1T34AAE R1T35AAE R1T37AAE").count > 0 or thisInst.selected(casSoftware).filter(x
				=> x.id <= "R7P99AAE").count > 0);
				if thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R8V47AAE").count > 0 then (thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R8V40AAE R8V41AAE R8V42AAE R8V43AAE").count > 0 or thisInst.selected(casSoftware).filter(x
				=> x.id <= "R8V44AAE").count > 0);

				//NOTE :  Cannot be ordered with perpetual SKUs BB094AC/ACE, BB095AC/ACE, BB097AC/ACE, P9B46A, R7Q01AC/AAE.
				if thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R8V45AAE R8V46AAE R8V47AAE").count > 0 and (thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "BB094AC BB094ACE BB095AC BB095ACE BB097AC BB097ACE").count > 0 or
				thisInst.selected(casSoftware).filter(x => x.id <= "P9B46A R7Q01AC R7Q02A").count > 0) then false;
			}
			constraint cluster_sw_rule17 {
				message: "Flex Storage Add-On Physical Media cannot be ordered without Flex Storage Add-On E-LTU(1/3/5 Yr) in the order.<br>
						R8V48A media requires one of the following E-LTUs: R8V45AAE, R8V46AAE, R8V47AAE.Software download is already included with E-LTU, order physical media only in case of requirement to maintain physical media.<br>
						Error Purpose (High Level):Flex Storage Add-On Physical Media cannot be ordered without Flex Storage Add-On E-LTU(1/3/5 Yr) in the order";
				body: if thisInst.selected(HACClusterMedia).filter(x => x.id <= "R8V48A").count > 0 then thisInst.selected(HACClusterSGLtu).filter(x => x.id <= "R8V45AAE R8V46AAE R8V47AAE").count > 0;
			}
			
			ifEffective	SE_PERT_24973{		//SE - Added for PERT 24973		08-Apr-2022
			constraint hpc_sw_rule101_war {		
				message: "This SKU applies to configurations with at least 64 nodes. Must be configured to match the quantity of nodes in the configuration";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P19A R9P20A R9P21A R9P22A R9P23A R9P24A R9P25A").count > 0 then false;
			}
			constraint hpc_sw_rule102_info {		
				message: "Applies to configurations with less than 64 nodes.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P26A R9P27A R9P28A R9P29A R9P30A R9P31A R9P32A R9P33A R9P34A R9P35A 
						R9P36A R9P37A R9P40A R9P41A R9P42A R9P43A R9P44A R9P45A").count > 0 then false;
			}
			constraint hpc_sw_rule103_info {		
				message: "Applies to configurations with  3 year term minimum.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P19A R9P20A R9P28A R9P29A R9P32A R9P33A R9P36A R9P37A").count > 0 then false;
			}
			constraint hpc_sw_rule104_info {		
				message: "Applies to configurations with a 4 year term minimum.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P21A R9P22A").count > 0 then false;
			}
			constraint hpc_sw_rule105_info {		
				message: "Applies to configurations with a 5 year term minimum.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P23A R9P24A").count > 0 then false;
			}
			constraint hpc_sw_rule106_info {		
				message: " No seat restriction for this license.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P19A R9P20A R9P21A R9P22A R9P23A R9P24A R9P25A").count > 0 then false;
			}
			constraint hpc_sw_rule107_info {		
				message: "This SKU is restricted to 10 seats only.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P26A R9P27A R9P28A R9P29A R9P40A R9P41A").count > 0 then false;
			}
			constraint hpc_sw_rule108_info {		
				message: "This SKU is restricted to 25 seats only.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P30A R9P31A R9P32A R9P33A R9P42A R9P43A").count > 0 then false;
			}
			constraint hpc_sw_rule109_info {		
				message: "This SKU is restricted to 50 seats only";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P34A R9P35A R9P36A R9P37A R9P44A R9P45A").count > 0 then false;
			}
			constraint hpc_sw_rule110_info {		
				message: "If more than 50 seats required contact HPC Software Product Management team for custom quote.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P21A R9P34A R9P35A R9P36A R9P37A R9P44A R9P45A").count > 0 then false;
			}
			constraint hpc_sw_rule111_war {		
				message: " Sold only on systems with Intel processors, GPUs or XPUs";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P19A R9P23A R9P26A R9P28A R9P30A R9P32A R9P34A R9P36A").count > 0 then false;
			}
			constraint hpc_sw_rule112_war {		
				message: "Sold only on systems with Non-Intel processors, GPUs or XPUs";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P20A R9P22A R9P24A R9P27A R9P29A R9P31A R9P33A R9P35A R9P37A").count > 0 then false;
			}
			constraint hpc_sw_rule113_war {		
				message: "This SKU is used to extend support on configurations with at least 64 nodes. Must be configured to match the quantity 
						of nodes in the configuration. Allows for 1 additional year. 
						If more years are needed multiply the base quantity by the number of additional years";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P25A R9P40A R9P41A R9P42A R9P43A R9P44A R9P45A").count > 0 then false;
			}
			constraint hpc_sw_rule114_info {		
				message: "Applies to configurations with a 1 year term minimum.";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P26A R9P27A R9P30A R9P31A R9P34A R9P35A").count > 0 then false;
			}	
			}
			ifEffective	SE_PERT_25168{		//Added red error for PERT 25168
			constraint hpc_sw_rule115 {		
				message: "Due to restrictions from Intel, this SKU is UNBUILDABLE and should NOT be selected in the configuration";
				body: if thisInst.selected(HPCIntelOneAPI).filter(x => x.id <= "R9P19A R9P20A R9P21A R9P22A R9P23A R9P24A R9P25A R9P26A R9P27A R9P28A R9P29A
						  R9P30A R9P31A R9P32A R9P33A R9P34A R9P35A R9P36A R9P37A R9P40A R9P41A R9P42A R9P43A R9P44A R9P45A ").count > 0 then false;
			}}
		    ifEffective MFG_PERT_26197{
		    constraint Altair_Rule116_warning {//hpc_sw_rule116_info		
				message: "Altair PBS Pro and Altair Grid Engine both are Work load Managers. They should not be selected together.";
				body: if thisInst.selected(HPCAltairPBSPro1Sck).count > 0 and thisInst.selected(HPCAltairGridEng1Sckt).count > 0 then false;
			
			
			}	
		    constraint Altair_Rule117_warning {//hpc_sw_rule117_info		
				message: "Customer should not include 3 yr, 4yr and 5yr E-LTUs (for Altair PBS Pro, Altair Grid Eng and Altair Bdl) in the same configuration.";
				body: 
				
				false;
			
			
			}	
		    }
		}//End of HPCSoftwareSystemSubsystem definition
		subsystem OperatingSystemSubsystem {
			choice CentosLinuxChoice { //new menu  
				optional: true;
				targetClass: CentosLinux;
				choiceType: single_select;
				title: "Centos Linux";
			}
			choice RedHatEnterpriseLinuxServerChoice {
				optional: true;
				targetClass: RedHatEnterpriseServer;
				choiceType: multi_select;
				title: "Red Hat Enterprise Linux Server";
			}
			choice MS_SBS_2011NonPreinstallChoice {
				optional: true;
				targetClass: MS_SBS_2011NonPreinstall;
				choiceType: single_select;
				title: "MS SBS 2011 Non Preinstall";
			}
			choice MS_SBS_2011PreinstallChoice {
				optional: true;
				targetClass: MS_SBS_2011Preinstall;
				choiceType: single_select;
				title: "MS SBS 2011 Preinstall";
			}
			choice MS_SBS_ESS2011NonPreinstallChoice {
				optional: true;
				targetClass: MS_SBS_ESS2011NonPreinstall;
				choiceType: single_select;
				title: "MS SBS ESS 2011 Non Preinstall";
			}
			choice MS_SBS_ESS2011PreinstallChoice {
				optional: true;
				targetClass: MS_SBS_ESS2011Preinstall;
				choiceType: single_select;
				title: "MS SBS ESS 2011 Preinstall";
			}
			choice MSWindows2003_2008EmbServerChoice {
				optional: true;
				targetClass: MSWindows2003_2008EmbServer;
				choiceType: single_select;
				title: "MSWindows2003 & 2008EmbServer";
			}
			choice MSWindows2008FoundationChoice {
				optional: true;
				targetClass: MSWindows2008Foundation;
				choiceType: single_select;
				title: "MS Windows 2008 Foundation";
			}
			choice MSW2008R2NonPreinstallChoice {
				optional: true;
				targetClass: MSW2008R2NonPreinstall;
				choiceType: single_select;
				title: "MS Windows Server 2008 Non Preinstall";
			}
			choice MSWindowsServer2008PreinstallChoice {
				optional: true;
				targetClass: MSWindowsServer2008Preinstall;
				choiceType: single_select;
				title: "MS Windows Server 2008 Preinstall";
			}
			choice MSWindows2012FoundationChoice {
				optional: true;
				targetClass: MSWindows2012Foundation;
				choiceType: single_select;
				title: "MS Windows 2012 Foundation";
			}
			choice MSWindows2012EssentialsChoice {
				optional: true;
				targetClass: MSWindows2012Essentials;
				choiceType: multi_select;
				title: "MS Windows 2012 Essentials";
			}
			choice MSWindows2012ServerChoice {
				optional: true;
				targetClass: MSWindows2012Server;
				choiceType: multi_select;
				title: "MS Windows 2012 Server";
			}
			constraint RHELSoftRule8_bluenote_rule {
				message:
				"Blue Note: Min Qty of 1 may not be enough to cover nodes / controllers. Configuration Specific Compatibility and quantity logic for the SKUs above is located within the Sectional Rules above and should be used to determine if each node is adequately covered by Operating System Licenses.";
				body: if thisInst.selected(RedHatEnterpriseServer).filter(p => p.id >= "G3J33A" or p.id >= "G3J32A" or p.id >= "G3J31A" or p.id >= "G3J30A" or p.id >= "G3J29A" or p.id >= "G3J28A").count > 0 then false;
			} //ANV_ALM_106631
			//PM added new SKUs 782515-291,782520-291,782515-371,782520-371,782515-A21,782520-B21,782515-DN1
			//RV 16-Dec-2019 ALM. 133984 limit changed to 100 from 5 
			constraint restrictAddLicense {
				message: "Limit";
				body: //AB 29-Sep-15 for ALM ID:94757 restriction(MSWindows2012Server[bIsAddtionalLicense=true]<=5);
				restriction (MSWindows2012Server [ ~ (818546-291 || 701596-291 || 871166-DN1 || 871166-371 || 871166-A21 || P11064-DN1 || P11069-DN1 || P11066-DN1 || P11067-DN1 || P11068-DN1 || P11065-DN1 || max = "100") ] <= 100); //RV 13-Dec-2019 5 changed to 100 ALM.133984  //AB 29-Sep-15 for ALM ID:94757 // JGG Adding max = "100" for ALM 104399 //RV 02-May-2018 added 871166 ALM.118722
				restriction (MSWindows2012Server [ 818546-291 || 818546-B21 || 701596-291 ] <= 20); //AB 29-Sep-15 for ALM ID:94757
				restriction (MSWindows2012Server [ 871166-DN1 || 871166-371 || 871166-A21 ] <= 16); //RV 02-May-2018 added 871166 ALM.118722
				restriction (MSWindows2012Server [ max = "100" ] <= 100); //JGG ALM 104399
				dependency (MSWindows2012Server [ 701593-291 || 701594-291 || 755996-291 || 755997-291 || 782515-291 || 782520-291 ] = 0, MSWindows2012Server [ 701596-291 || 818546-291 ] = 0); //AB 21-Sep-15 added the 818546//RV 30-Jun-2015 ALM.92318 Added 815868-B21  
				dependency (MSWindows2012Server [ 701593-371 || 701594-371 || 755996-371 || 755997-371 || 782515-371 || 782520-371 ] = 0, MSWindows2012Server [ 701596-371 ] = 0); //RV 30-Jun-2015 ALM.92318 Added 815868-B21
				dependency (MSWindows2012Server [ 701593-A21 || 701594-A21 || 755996-B21 || 755997-B21 || 782515-A21 || 782520-B21 ] = 0, MSWindows2012Server [ 701596-A21 ] = 0); //RV 30-Jun-2015 ALM.92318 Added 815868-B21
				dependency (MSWindows2012Server [ 701593-AA1 || 701594-AA1 ] = 0, MSWindows2012Server [ 701596-AA1 ] = 0);
				dependency (MSWindows2012Server [ 701593-AB1 || 701594-AB1 ] = 0, MSWindows2012Server [ 701596-AB1 ] = 0);
				dependency (MSWindows2012Server [ 701593-DN1 || 701594-DN1 || 755996-201 || 782515-DN1 || 755997-B21 ] = 0, MSWindows2012Server [ 701596-DN1 ] = 0);
				//AB 21-Sep-15 added the 818546 //RV 30-Jun-2015 ALM.92318 Added 815868-B21

				//JHA 2016-07-04 : ALM 98169, removing dependencies from all 701601-XX1 parts
				//dependency (MSWindows2012Server [ 701599-291 || 755998-291 ] = 0, MSWindows2012Server [ 701601-291 ] = 0);
				//dependency (MSWindows2012Server [ 701599-371 || 755998-371 ] = 0, MSWindows2012Server [ 701601-371 ] = 0);
				//dependency (MSWindows2012Server [ 701599-A21 || 755998-B21 ] = 0, MSWindows2012Server [ 701601-A21 ] = 0);
				dependency (MSWindows2012Server [ 701599-AA1 ] = 0, MSWindows2012Server [ 701601-AA1 ] = 0);
				dependency (MSWindows2012Server [ 701599-AB1 ] = 0, MSWindows2012Server [ 701601-AB1 ] = 0);
				//dependency (MSWindows2012Server [ 701599-DN1 || 755998-201 ] = 0, MSWindows2012Server [ 701601-DN1 ] = 0);
				//dependency (MSWindows2012Server [ 701599-A41 || 755997-A41 ] = 0, MSWindows2012Server [ 701601-A41 ] = 0);
				// dependency(MSWindows2012Server[815868-B21]=0,MSWindows2012Server[701596-291 || 701596-371 || 701596-A21 || 701596-A41 || 701596-DN1]=0); //RV 26-Jun-2015 ALM.92318

			}
			//ABP ALM fix:107323,107347
			//			constraint addLicensesRequireBase {
			//				message: "Additional Microsoft Licenses require Base License";
			//				body: dependency (MSWindows2012Server [ bIsAddtionalLicense = false ] = 0, MSWindows2012Server [ bIsAddtionalLicense = true ] = 0);
			//				dependency (ProliantProcessor <= 1, MSWindows2012Server [ bIsAddtionalLicense = true ] = 0);
			//			}
			//ABP ALM fix:107323,107347 As from KA Luiz Comment Commenting this Constraint
			//			constraint addLicenseRequiredMS {
			//				message: "When ordering more than 2 processors with MS Windows Server 2012, an extra addon license is required for every two CPUs.";
			//				body:
			//				{
			//					thisInst.selected(MSWindows2012Server).filterByAttribute(bIsAddtionalLicense, false).count = 0 or thisInst.selected(ProliantProcessor).sum(iNumProcessors) < 3 or
			//					(thisInst.selected(MSWindows2012Server).filterByAttribute(bIsAddtionalLicense, true).count * 2) + 2 >= thisInst.selected(ProliantProcessor).sum(iNumProcessors);
			//				}
			//			}
			constraint twoTerabytesRule { //junit
				message:
				"If the selected hard drive storage total is greater than 2TB, a RAID level setting has been selected,  and a preinstalled Microsoft operating system has been selected, then the factory will limit the first logical drive to 2TB.";
				body: thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) <= 2048 || thisInst.selected(RAIDLevelSettings).count = 0 || thisInst.selected(OperatingSystem).filterByAttribute(bIsFactoryInstalledMicrosoft, true).count = 0;
			}
			constraint twoTerabytesRuleOS { //junit
				message: "If the selected hard drive storage total is greater than 2TB, a RAID level setting has been selected then selection of a preinstalled Microsoft SBS Operating System is not allowed.";
				body: thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) <= 2048 || thisInst.selected(RAIDLevelSettings).count = 0 || thisInst.selected(MS_SBS_2011Preinstall).count = 0;
			}
			constraint restrictedOS { //junit
				message: "This is a restricted Operating System that is not for general purpose use and must be approved by Worldwide Microsoft Marketing Manger for a solution.";
				body: restriction (MSWindows2003_2008EmbServer = 0);
			}
			constraint minMemoryRequiredForOS { //junit
				message: "The required minimum memory must be met for this OS.";
				body: thisInst.selected(MS_SBS_ESS2011Preinstall).isEmpty || thisInst.selected(MemoryArray).sum(dCapacity) > thisInst.selected(MS_SBS_ESS2011Preinstall).get(0).dMinGbMemoryRequired;
				//MS_SBS_ESS2011Preinstall.dMinGbMemoryRequired;  //
				thisInst.selected(MS_SBS_ESS2011NonPreinstall).isEmpty || thisInst.selected(MemoryArray).sum(dCapacity) > thisInst.selected(MS_SBS_ESS2011NonPreinstall).get(0).dMinGbMemoryRequired; //MS_SBS_ESS2011NonPreinstall.dMinGbMemoryRequired;
				thisInst.selected(MS_SBS_2011Preinstall).isEmpty || thisInst.selected(MemoryArray).sum(dCapacity) > thisInst.selected(MS_SBS_2011Preinstall).get(0).dMinGbMemoryRequired; //MS_SBS_2011Preinstall.dMinGbMemoryRequired;			

			}
			//SS Updated the below existing rule according to ALM#190952 for OCA.
			constraint maxMemoryRequiredForOS { //junit
				message: "When ordering memory with your Windows server operating system, please consult the Microsoft memory requirements for your operating system edition here:	http://www.microsoft.com/servers/os2.mspx";
				body:
				thisInst.selected(MS_SBS_ESS2011Preinstall).isEmpty || thisInst.selected(MemoryArray).sum(dCapacity) <= thisInst.selected(MS_SBS_ESS2011Preinstall).get(0).dMaxGbMemoryAllowed; //MS_SBS_ESS2011Preinstall.dMaxGbMemoryAllowed;  
				thisInst.selected(MS_SBS_ESS2011NonPreinstall).isEmpty || thisInst.selected(MemoryArray).sum(dCapacity) <= thisInst.selected(MS_SBS_ESS2011NonPreinstall).get(0).dMaxGbMemoryAllowed; //MS_SBS_ESS2011NonPreinstall.dMaxGbMemoryAllowed;
				thisInst.selected(MSWindows2012Essentials).isEmpty || thisInst.selected(MemoryArray).sum(dCapacity) <= thisInst.selected(MSWindows2012Essentials).get(0).dMaxGbMemoryAllowed;
				thisInst.selected(MSWindows2012Foundation).isEmpty || thisInst.selected(MemoryArray).sum(dCapacity) <= thisInst.selected(MSWindows2012Foundation).get(0).dMaxGbMemoryAllowed;
				thisInst.selected(MSWindows2008Foundation).isEmpty || thisInst.selected(MemoryArray).sum(dCapacity) <= thisInst.selected(MSWindows2008Foundation).get(0).dMaxGbMemoryAllowed;
			}
			constraint buyWithNewServerOrWithStandardEdition { //junit
				message: "MS W2011 SBS Premium Add-On must be purchased with a new server if it's not bought at the same time as Standard Edition.";
				body: dependency (MS_SBS_2011NonPreinstall [ 644249-B21 ], MS_SBS_2011NonPreinstall [ 644248-041 || 644248-051 || 644248-291 || 644248-B21 ] || ProliantServers);
			}
			constraint msServer2008Warnings { //junit
				message: "MS Server 2008 media is DVD only.  It is recommended that the minimum of 1 GB of memory be met.";
				body: restriction (MSWindowsServer2008NonPreinstall [ bHasWarnings = true ] = 0 || MSWindowsServer2008Preinstall);
			}
			constraint noFioOsOnBto {
				message: "Model 1 servers may not have a preinstalled OS.";
				body: restriction (! ProliantServers [ BTO ] || ! OperatingSystem [ tQuoteType >= "FIO" ]); //GK 5/22/13 QC69737
				restriction (! ProliantServers [ BTO ] || ! OneViewManagementSoftware [ tQuoteType >= "FIO" ]); //RV 12-Aug-2019 ALM.131982

			}
			constraint socketStackableWarning {
				message: "15 sockets can be stackable.";
				body: if thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "K5Q25A" || y.id >= "K5Q25AAE" || y.id >= "K5Q26A" || y.id >= "K5Q26AAE" || y.id >= "K5Q27A" || y.id >= "K5Q27AAE" || y.id >= "K5Q28A" || y.id >= "K5Q28AAE" ||
				y.id >= "K5Q29A" || y.id >= "K5Q29AAE" || y.id >= "K5Q30A" || y.id >= "K5Q30AAE" || y.id >= "K5Q31A" || y.id >= "K5Q31AAE" || y.id >= "K5Q32A" || y.id >= "K5Q32AAE").count > 0 then false else true;
			}
			constraint RHELAddonSocketStackableWarning {
				message: "May be stacked either as 2 socket pair or 2 virtual guests.";
				body: if thisInst.selected(RedHatLinuxAddOns).filter(y => y.id >= "G3J34A" || y.id >= "G3J34AAE" || y.id >= "G3J35A" || y.id >= "G3J35AAE" || y.id >= "G3J36A" || y.id >= "G3J36AAE" || y.id >= "G3J37A" || y.id >= "G3J37AAE" || y.id >=
				"G3J38A" || y.id >= "G3J38AAE" || y.id >= "G3J39A" || y.id >= "G3J39AAE" || y.id >= "G3J40A" || y.id >= "G3J40AAE" || y.id >= "G3J41A" || y.id >= "G3J41AAE" || y.id >= "R2A00A" || y.id >= "R2A00AAE" || y.id >= "R2A01A" || y.id >=
				"R2A01AAE" || y.id >= "R2A02A" || y.id >= "R2A02AAE").count > 0 then false else true; //NL modified for Pert 14484 , 21-Dec-2018

			}
			//MS 06-03-2018 for ALM: 115363
			//			constraint RHELAddonSocketMatchWarning {
			//				message: "Must match RHEL socket pair and virtual guest.";
			//				body: thisInst.selected(RedHatLinuxAddOns).filter(y => y.id != "A1L29A" && y.id != "A1L29AAE" && y.id != "A1L30A" && y.id != "A1L30AAE").count = 0;
			//			}
			constraint addLicensesInfoMsg {
				message: "When more than 2 processors are selected an additional license must also be selected.  1 Additional license for every 2 CPU's added.";
				body: thisInst.selected(MSWindows2012Server).filter(y => y.bIsAddtionalLicense = false).count = 0;
			}
			//PRS Removed the rule for PERT-15787 05 Sept 2019
			//			constraint oswarningshtcskus {
			//				message: "Min/Max rule not applicable for HTC SKUS";
			//				body:
			//				if thisInst.selected(MSWindows2012Essentials).filter(x => x.id >= "880886-291" || x.id >= "880888-291" || x.id >= "880889-291" || x.id >= "880892-291" || x.id >= "880893-291" || x.id >= "880894-291" || x.id >= "880895-291" || x.id >=
			//				"P02323-291" || x.id >= "P02324-291").count > 0 then false else true;
			//			}
			constraint mediainfo {
				message: "No Software Media/No Product Key included";
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "871157-371" or p.id >= "871157-A21" or p.id >= "871157-DN1" or p.id >= "871158-371" or p.id >= "871158-A21" or p.id >= "871158-DN1" or p.id >= "871159-371" or p.id >=
				"871159-A21" or p.id >= "871159-AA1" or p.id >= "871159-AB1" or p.id >= "871159-DN1" or p.id >= "871166-371" or p.id >= "871166-A21" or p.id >= "871166-DN1" or p.id >= "871167-371" or p.id >= "871167-A21" or p.id >= "871167-DN1" or
				p.id >= "871168-371" or p.id >= "871168-A21" or p.id >= "871168-DN1" or p.id >= "P46195-B21" or p.id >= "P46196-B21" or p.id >= "P46199-AA1" or p.id >= "P46199-AB1" or p.id >= "P46199-B21" or p.id >= "P46212-B21" or p.id >=
				"P46213-B21" or p.id >= "P46214-B21" //SE - For PERT 24669		14-Sep-2021
				//MS for PERT: 14472
				or p.id >= "P11064-371" or p.id >= "P11064-A21" or p.id >= "P11064-DN1" or p.id >= "P11065-371" or p.id >= "P11065-A21" or p.id >= "P11065-DN1" or p.id >= "P11066-371" or p.id >= "P11066-A21" or p.id >= "P11066-AA1" or p.id >=
				"P11066-AB1" or p.id >= "P11066-DN1" or p.id >= "P11067-371" or p.id >= "P11067-A21" or p.id >= "P11067-DN1" or p.id >= "P11068-371" or p.id >= "P11068-A21" or p.id >= "P11068-DN1" or p.id >= "P11069-371" or p.id >= "P11069-A21" or
				p.id >= "P11069-DN1" or p.id >= "P11060-041" or p.id >= "P11060-051" or p.id >= "P11060-061" or p.id >= "P11060-071" or p.id >= "P11060-291" or p.id >= "P11060-B21" or p.id >= "P11063-041" or p.id >= "P11063-051" or p.id >=
				"P11063-061" or p.id >= "P11063-071" or p.id >= "P11063-291" or p.id >= "P11063-B21").count > 0 then false else true; //SE - For PERT 23595  14-Jul-2021

			}
			constraint winlicrule24W {
				message: "Windows Server Additional licenses: Min: 0 / Max: Total cores on the Server including all processors (The Base license covers 16 cores)";
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "871166-371" or p.id >= "871166-A21" or p.id >= "871166-DN1" or p.id >= "871167-371" or p.id >= "871167-A21" or p.id >= "871167-DN1" or p.id >= "871168-371" or p.id >=
				"871168-A21" or p.id >= "871168-DN1" or p.id >= "P11067-371" or p.id >= "P11067-A21" or p.id >= "P11067-DN1" or p.id >= "P11068-371" or p.id >= "P11068-A21" or p.id >= "P11068-DN1" or p.id >= "P11069-371" or p.id >= "P11069-A21" or
				p.id >= "P11069-DN1" or p.id >= "P46195-B21" or p.id >= "P46196-B21" or p.id >= "P46199-AA1" or p.id >= "P46199-AB1" or p.id >= "P46199-B21" or p.id >= "P46212-B21" or p.id >= "P46213-B21" or p.id >= "P46214-B21").count > 0 then false
				else true;
				//SE - For PERT 23595  15-Jul-2021

			}
			constraint winlicrule25W {
				message: "Windows Server Additional licenses: Min: 0 / Max: 100 (The base license covers 16 cores)";
				body:
				if thisInst.selected(MSWindows2012Server).filter(p => p.id >= "871157-371" or p.id >= "871157-A21" or p.id >= "871157-DN1" or p.id >= "871158-371" or p.id >= "871158-A21" or p.id >= "871158-DN1" or p.id >= "871159-371" or p.id >=
				"871159-A21" or p.id >= "871159-AA1" or p.id >= "871159-AB1" or p.id >= "871159-DN1" or p.id >= "P11064-A21" or p.id >= "P11064-DN1" or p.id >= "P11065-371" or p.id >= "P11065-A21" or p.id >= "P11065-DN1" or p.id >= "P11066-371" or
				p.id >= "P11066-A21" or p.id >= "P11066-AA1" or p.id >= "P11066-AB1" or p.id >= "P11066-DN1" or p.id >= "P11064-371").count > 0 then false else true;
			}
		}
		subsystem MSOperatingSystemSOGSubsystem {
			choice MSOperatingSystemSOGChoice {
				optional: true;
				targetClass: MSOSSOGs;
				choiceType: single_select;
				title: "MS OS Services-Owned Goods";
			}
			constraint MSOSSOGAndOSIncompatible {
				message: "RAID is required if Smart Array controller (embedded or otherwise) is present";
				body: dependency (OperatingSystem > 0, MSOSSOGs = 0);
				dependency (MSOSSOGs > 0, OperatingSystem = 0);
			}
			constraint warnOnOldMSOSSOGs {
				message:
				"HPE Microsoft Support offering has been price adjusted. New Service-Owned Goods with Corresponding Support Services have been introduced to replace the old ones. Please choose from U0RW0AS, U0RV6AS, U0RV7AS, U0RV8AS, U0RV6AS from the same drop down"; //FR 4-April-16 [PPM 68613]-  TS Care Pack Rebranding
				body: thisInst.selected(MSOSSOGsOld).count = 0;
			}
			constraint oneView_r132{
				message: "Both iLO Adv license and this One View SKU (E5Y43A) should not be ordered together. Part numbers of iLO Adv SKUs 512485-B21 0D1 HPE iLO Adv 1-svr Lic 1yr Support - BD505A   0D1 HPE iLO Adv 1-svr Lic 3yr Support.";
					body: 
					if thisInst.selected(OneViewManagementSoftware).filter(p => p.id >= "E5Y43A").count > 0
					then thisInst.selected(IntegratedLightsOut).filter(p => p.id >= "512485-B21" or p.id >= "BD505A").count = 0;
					//dependency(OneViewManagementSoftware [ E5Y43A ], IntegratedLightsOut [ 512485-B21 || BD505A ] = 0 );	
			}
			constraint oneView_r139{
				message: "This HPE One View SKU is of FLEX e-Delivery type. After the last item of this order has been shipped, HPE will send an email with HPE One View license entitlement and instructions on how to redeem and activate these licenses in the HPE Software Center  to receive the license key(s). Customers will need to manually add the license key(s) to the HPE One View pool of licenses for servers to be managed by HPE One View ";
					body: 
					if thisInst.selected(OneViewManagementSoftware).filter(p => p.id <= "E5Y35AAE P8B26AAE").count > 0 then false;
			}
		}
		subsystem InsightSoftwareSubsystem {
			choice InsightWithSystemCenterEssentialsChoice {
				optional: true;
				targetClass: InsightWithSystemCenterEssentials;
				choiceType: multi_select;
				title: "Insight With System Center Essentials";
			}
			choice InsightPowerManagerChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: InsightPowerManager;
			}
			choice IntegratedLightsOutChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: IntegratedLightsOut;
			}
			choice InsightControlUpgradeChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: InsightControlUpgrade;
			}
			choice IntegratedLightsOutPowerManagementChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: IntegratedLightsOutPowerManagement;
			}
			//RV 13-Aug-2020 PERT 20124
			choice NvidiagpuswChoice {
				optional: true;
				targetClass: NVIDIAGPUSW;
				choiceType: multi_select;
				title: "NVIDIA GPU SW";
			}
			choice LO100IManagementChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: LO100IManagement;
			}
			choice RapidDeploymentPackChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: RapidDeploymentPack;
			}
			choice VirtualMachineManagementPackChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: VirtualMachineManagementPack;
			}
			constraint insightControlCTO {
				message: "CTO models have a maximum selection of 1 Insight Control software.";
				body: dependency (! ProliantServers [ BTO ], InsightControl < 2);
			}
			constraint insightIntegratedLightsOutPowerManagementCTO {
				message: "CTO models have a maximum selection of 1 Insight Control Upgrade software.";
				body: dependency (! ProliantServers [ BTO ], IntegratedLightsOutPowerManagement < 2);
			}
			constraint insightPowerMngerCTO {
				message: "CTO models have a maximum selection of 1 Insight Power Manager software.";
				body: dependency (! ProliantServers [ BTO ], InsightPowerManager <= 1);
			}
			constraint insightLO100IManagementCTO {
				message: "CTO models have a maximum selection of 1 Insight LO100I Management software.";
				body: dependency (! ProliantServers [ BTO ], LO100IManagement < 2);
			}
			constraint insightVirtualMachineManagementPackCTO {
				message: "CTO models have a maximum selection of 1 Insight Rapid Deployment Pack software.";
				body: dependency (! ProliantServers [ BTO ], VirtualMachineManagementPack < 2);
			}
			constraint insightRapidDeploymentPackCTO {
				message: "CTO models have a maximum selection of 1 Insight Rapid Deployment Pack software.";
				body: dependency (! ProliantServers [ BTO ], RapidDeploymentPack < 2);
			}
			constraint insightControlWarning {
				message: "Insight Control includes the following components: Insight Control Server Deployment,Integrated Lights Out Advanced, Insight Virtual Machine Management, Insight Power Manager, Insight Server Migration.";
				body:
				thisInst.selected(InsightControlUpgrade).count = 0;
				thisInst.selected(InsightControl).filter(y => y.id >= "452150-B21" || y.id >= "C6N27A" || y.id >= "C6N28A" || y.id >= "C6N28ABE" || y.id >= "C6N29A" || y.id >= "C6N36ABE" || y.id >= "C6N37A" || y.id >= "TC275A").count = 0;
				//3-13-15,CR#204734,Locke
				thisInst.selected(casSoftware).filter(y => y.id >= "G2E82A").count = 0;
			}
			constraint systemCenterSoftwareWarning { //junit
				message: "This SKU includes a Server Management License (SML) for the server on which it will be installed. You must also purchase additional SML licenses for each managed HP server, non-HP server, and optionally, for managed clients.";
				body: thisInst.selected(InsightWithSystemCenterEssentials).filter(tSubtype = "software").count = 0;
			} //junit tested
			constraint insightControlOption {
				message: "CTO Enclosure may pick maximum quantity of two 'Insight Control for Linux' or two 'Insight Control' but may not pick both part numbers for the same enclosure.";
				body: restriction (InsightControl <= 2 || InsightControlLinux <= 2 || ! (InsightControl && InsightControlLinux));
			} //junit tested
			constraint insightWarning {
				message: "It is recommended to select electronic or flex license types when requiring 5 or more licenses.  For more info see:  http://bizsupport1.austin.hp.com/bc/docs/support/SupportManual/c02478425/c02478425.pdf";
				body: sum(thisInst.selected(InsightSoftware).filterByAttribute(bGreaterThanFiveLicenses, true), 1) <= 5;
			}
			constraint insightControlUpgradeWarning { //junit
				message: "Must already have RDP to purchase these upgrades.";
				body:
				thisInst.selected(T9101ABE).count = 0;
				thisInst.selected(436753-B23).count = 0;
			}
			constraint eSDNextCannotBeWithPhysical {
				message: "eSD Next SKUs cannot be configured to the same hardware as a physical SW Sku.";
				body: thisInst.selected(InsightControlUpgrade).count = (thisInst.selected(InsightControlUpgrade).filter(y => y.id >= "C6N38ABE").count) || (thisInst.selected(InsightControlUpgrade).filter(y => y.id >= "C6N38ABE").count = 0);
			}
			constraint rapidDeploymentPackWarning {
				message: "Customer must have a signed contract with HP prior to purchasing the tracking license product";
				body: if thisInst.InsightSoftwareSubsystem.selected(RapidDeploymentPack).filter(y => y.id >= "452165-B21").count > 0 then false else true; //JGG ALM 104594

			}
			constraint iLoAdvanceEssencialsRule3Blue {
				message: "Factory integration via #0D1 is not available with electronic SKUs. </br>
								  If you need factory integration via #0D1 option please order the physical equivalent SKU.";
				body: if thisConfig.getProperty("targetEnvironment") >= "oca" and thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "BD774A" or y.id >= "BD775A" or y.id >= "E6U61ABE" or y.id >= "E6U62ABE").count > 0 then false;
			}
			constraint iLoAdvanceRule14Blue {
				message: "Factory integration via #0D1 is not available with electronic SKUs. </br>
								  If you need factory integration via #0D1 option please order the physical equivalent SKU.";
				enabled: (thisInst.realBasedummyId != "P07244-B21_HSX" && thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisConfig.getProperty("targetEnvironment") >= "oca" and ! thisConfig.getInstancesOfModel("IntegrityRX2800I4").count() > 0 and thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21" or y.id >= "BD505A" or
				y.id >= "E6U59ABE" or y.id >= "E6U64ABE" or y.id >= "G6F49A").count > 0 then false;
			}
			constraint iLoAdvanceBladeRule8Blue {
				message: "Factory integration via #0D1 is not available with electronic SKUs. </br>
								  If you need factory integration via #0D1 option please order the physical equivalent SKU.";
				body: if thisConfig.getProperty("targetEnvironment") >= "oca" and thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512488-B21" or y.id >= "512489-B21" or y.id >= "BD502A" or y.id >= "E6U60ABE" or y.id >= "E6U63ABE").count >
				0 then false;
			}
			constraint iLoEssentialsRule1_Rule8 {
				message:
				"Allow either Insight Control FIO SKU (or with #0D1) or iLO Advanced SKU with #0D1 option. Both should not be allowed together Insight control includes iLO advanced license. Please check whether you wish to order iLO advanced license separately.";
				body:
				{
					val ILO = thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "BD774A" or y.id >= "BD775A" or y.id >= "E6U61ABE" or y.id >= "E6U62ABE" or y.id >= "512488-B21" or y.id >= "512489-B21" or y.id >= "BD502A" or y.id >= "E6U60ABE"
					or y.id >= "E6U63ABE" or y.id >= "E6U59ABE" or y.id >= "E6U64ABE" or y.id >= "BD505A" or y.id >= "512485-B21").count;
					val Insight = thisInst.selected(cs300software).filter(y => y.id >= "C6N36A").count;
					if thisConfig.getProperty("targetEnvironment") = "occ" or thisConfig.getProperty("targetEnvironment") = "oca" then (ILO = 0 or Insight = 0);
				}
			}
			ifEffective KES_VAL {
				constraint hideOCCProducts {
					message: "";
					body: dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || XL230KG10 || BL460CG10 || BL460CG10OEM || DL360Gen10 || DL360Gen10OEM || DL380Gen10 || DL380Gen10OEM || MicroServerG10 || M510Cartridge || M710xCartridge ||
					Synergy480Gen10 || Synergy480Gen10OEM || Synergy660Gen10 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM || Synergy660Gen10), IntegratedLightsOut [ Q1P77A || Q1P78A || Q1P79A || Q1P80A ||
					Q7E32A || Q7E34A ] = 0);
				}
			}
			otherwise {
				constraint hideOCCProducts {
					message: "";
					body: dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || Apollo4200Gen9 || xl450gen9 || XL230aG9 || XL230KG10 || XL250aG9 || XL260AGen9 || XL270dG9 || XL730fG9Server || XL750fG9 || BL460CG10 || BL460CG10OEM || BL460CG9 ||
					BL460CGEN9OEM || BL660CGen9 || DL120G9 || DL160G9 || DL180G9 || DL20G9 || DL20G9OEM || DL360Gen10 || DL360Gen10OEM || DL360G9 || DL360G9OEM || DL380Gen10 || DL380Gen10OEM || DL380G9 || DL380G9OEM || DL385pGen8 || DL560Gen10 ||
					DL560G9 || DL580G9 || DL60G9 || DL80G9 || ECML110G9 || MicroServerG10 || MicroServerGen8 || ML10Gen9 || ML110Gen9 || ML150Gen9 || ML30Gen9 || ML350Gen9 || M510Cartridge || M710xCartridge || Synergy480Gen10 || Synergy480Gen10OEM ||
					Synergy480Gen9 || Synergy620Gen9 || Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM || Synergy480Gen9 || Synergy620Gen9 ||
					Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9), IntegratedLightsOut [ Q1P77A || Q1P78A || Q1P79A || Q1P80A || Q7E32A || Q7E34A ] = 0);
				}
			}
			constraint iLoAdvanceSecurityRule1Info {
				message: "HPE iLO Advanced Security licenses are valid only for Gen10 or later servers. After the  license is redeemed it can't be return.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "Q7E12AAE").count > 0 then false;
			}
			constraint iLOCommonInformation { //PRS PPM: 77300
				message: "Learn more on selecting the right iLO License for your business http://www.hpe.com/support/iLO-LicenseMatrix-en";
				enabled: (thisInst.realBasedummyId != "P07244-B21_HSX" && thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21" || y.id >= "512486-B21" || y.id >= "512487-B21" || y.id >= "BD505A" || y.id >= "BD506A" || y.id >= "BD507A" || y.id >= "E6U59ABE" || y.id >= "E6U64ABE"
				|| y.id >= "BD774A" || y.id >= "BD775A" || y.id >= "E6U61ABE" || y.id >= "E6U62ABE" || y.id >= "Q7E12AAE" || y.id >= "Q7E31A" || y.id >= "Q7E32A" || y.id >= "Q7E32AAE" || y.id >= "Q7E33A" || y.id >= "Q7E34A" || y.id >= "Q7E34AAE" ||
				y.id >= "Q7E35A" || y.id >= "Q7E36A" || y.id >= "512488-B21" || y.id >= "512489-B21" || y.id >= "512490-B21" || y.id >= "512491-B21" || y.id >= "BD502A" || y.id >= "BD503A" || y.id >= "BD504A" || y.id >= "E6U60ABE" || y.id >=
				"E6U63ABE").count > 0 then false else true;
			}
			constraint iLOCommonInfo { //PRS PPM: 77300
				message:
				"You have selected an Electronic License. If you would like HPE to install the license key at no extra charge, select a physical license such as BD505A #0D1 non-electronic license OR  refer to our iLO Licensing guide http://www.hpe.com/support/iLOLicenseOverview for more information selecting the right iLO license.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "E6U59ABE" || y.id >= "E6U64ABE" || y.id >= "Q7E12AAE" || y.id >= "Q7E32AAE" || y.id >= "Q7E34AAE" || y.id >= "E6U60ABE" || y.id >= "E6U63ABE" || y.id >= "E6U61ABE"
				|| y.id >= "E6U62ABE").count > 0 then false else true;
			}
			//RV 28-May-2021 PERT 22465 
			constraint iLOODIMRule1_Info {
				message:
				"You have selected an Electronic License. If you would like HPE to install the license key at no extra charge, select a physical license such as R4H60A #0D1 non-electronic license OR refer to our iLO Licensing guide https://www.hpe.com/support/iLO-ODIM-LicenseGuide-en for more information selecting the right iLO license.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "R4H61AAE" || y.id >= "R4H62AAE").count > 0 then false else true;
			}
			//RV 28-May-2021 PERT 22465
			constraint iLOODIMRule2_Warning {
				message:
				"You have selected a Tracking/Activation Key Agreement (AKA) that requires a signed contract between the End Customer and HPE.  In order to fulfill this request, fill out the HPE online Volume Licensing form www.hpe.com/info/aka";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "R4H63AAE" || y.id >= "R4H64AAE").count > 0 then false else true;
			}
			//RV 28-May-2021 PERT 22465
			constraint iLOODIMRule3_Info {
				message:
				"If you are ordering more than five (5) iLO ODIM licenses, HPE recommends that you review our Flexible Quantity or Tracking/Activation Key Agreement Licenses.  See our Selecting the Right iLO License Guide to assist with your decision making. https://www.hpe.com/support/iLO-ODIM-LicenseGuide-en";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "R4H59A" || y.id >= "R4H60A" || y.id >= "R4H61AAE" || y.id >= "R4H62AAE" || y.id >= "R4H63AAE" || y.id >= "R4H64AAE").count > 0 then false else true;
			}
			//RV 28-May-2021 PERT 22465
			constraint iLOODIMRule4_Warning {
				message: "iLO ODIM licensing is NOT applicable / supported when used in MS1500";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "R4H59A" || y.id >= "R4H60A" || y.id >= "R4H61AAE" || y.id >= "R4H62AAE" || y.id >= "R4H63AAE" || y.id >= "R4H64AAE").count > 0 then false else true;
			}
			//RV 28-May-2021 PERT 22465
			constraint iLOODIMRule5_Info {
				message:
				"When selecting factory pre-installed (#0D1) iLO licenses, you can only buy one (1) license per server purchased on the same order. If you need to buy more than one (1) license either select more servers OR select an iLO NON preinstalled license. HPE recommends reviewing the iLO licensing guide. (https://www.hpe.com/support/iLO-ODIM-LicenseGuide-en)";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "R4H59A" || y.id >= "R4H59A").count > 0 then false else true;
			}
			//RV 28-May-2021 PERT 22465
			constraint iLOODIMRule6_Warning {
				message: "Factory integration via #0D1 is not available with electronic SKUs. If you need factory integration via #0D1 option please order the physical equivalent SKU.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "R4H61AAE" || y.id >= "R4H62AAE").count > 0 then false else true;
			}
			//RV 28-May-2021 PERT 22465
			constraint iLOODIMRule7_Info {
				message: "Learn more on selecting the right iLO License for your business https://www.hpe.com/support/iLO-ODIM-LicenseGuide-en.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "R4H59A" || y.id >= "R4H60A" || y.id >= "R4H61AAE" || y.id >= "R4H62AAE" || y.id >= "R4H63AAE" || y.id >= "R4H64AAE").count > 0 then false else true;
			}
			//RV 28-May-2021 PERT 22465
			constraint iLOODIMRule8_Warning {
				message: "Please note that you would get only 1 license key for all units on order. If you would like separate keys for each unit, please choose a Physical SKU instead.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "R4H61AAE" || y.id >= "R4H62AAE").count > 0 then false else true;
			}
			constraint iLOCommonWarning { //PRS PPM: 77300
				message:
				"You have selected a Tracking/Activation Key Agreement (AKA) that requires a signed contract between the End Customer and HPE.  In order to fullfill this request, fill out the HPE online Volume Licensing form www.hpe.com/info/aka.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512487-B21" || y.id >= "BD507A" || y.id >= "Q7E35A" || y.id >= "Q7E36A" || y.id >= "512491-B21" || y.id >= "BD504A").count > 0 then false else true;
			}
			constraint iLOCommonInfoMsg { //PRS PPM: 77300
				message:
				"If you are ordering more than five (5) iLO licenses, HPE recommends that you review our Flexible Quanity or Tracking/Activation Key Agreement Licenses.  See our Selecting the Right iLO License Guide to assist with your decision making. http://www.hpe.com/support/iLOLicenseOverview.";
				enabled: (thisInst.realBasedummyId != "P07244-B21_HSX" && thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21" || y.id >= "512486-B21" || y.id >= "512487-B21" || y.id >= "BD505A" || y.id >= "BD506A" || y.id >= "BD507A" || y.id >= "E6U59ABE" || y.id >= "E6U64ABE"
				|| y.id >= "BD774A" || y.id >= "BD775A" || y.id >= "512488-B21" || y.id >= "BD502A" || y.id >= "E6U60ABE" || y.id >= "E6U63ABE").count > 0 then false else true;
			}
			constraint iLOCommonWarningMessage { //PRS PPM: 77300
				message:
				"When selecting factory pre-installed (#0D1) iLO licenses,  you can only buy one (1) license per server purchased on the same order. If you need to buy more than one (1) license either select more servers OR select an iLO NON preinstalled license. HPE recommends reviewing the iLO licensing guide. (http://www.hpe.com/support/iLOLicenseGuide-en) ";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21" || y.id >= "BD505A" || y.id >= "512488-B21" || y.id >= "BD502A" || y.id >= "Q7E31A" || y.id >= "Q7E33A" || y.id >= "BD774A" || y.id >= "BD775A").count >
				1 then false else true;
			}
			constraint iLOAdvancedSecurityRule3Warning { //PRS PPM: 77300
				message: "You have selected the iLO Advanced Premium Security Upgrade license.  You MUST have an HPE  Gen10  Server or later with iLO 5 or higher AND an iLO Advanced license already installed on the server.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "Q7E12AAE").count > 0 then false else true;
			}
			constraint iLoEssentialsRule1_Rule7_Rule15 {
				message: "Insight Control includes iLO Advanced license, make sure you want to order both.";
				enabled: (thisInst.realBasedummyId != "P07244-B21_HSX" && thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "BD774A" or y.id >= "BD775A" or y.id >= "E6U61ABE" or y.id >= "E6U62ABE" or y.id >= "512488-B21" or y.id >= "512489-B21" or y.id >= "BD502A" or y.id >= "E6U60ABE" or
				y.id >= "E6U63ABE" or y.id >= "E6U59ABE" or y.id >= "E6U64ABE" or y.id >= "BD505A" or y.id >= "BD506A" or y.id >= "512485-B21" or y.id >= "BD507A" or y.id >= "512486-B21" or y.id >= "512487-B21" or y.id >= "Q7E31A" or y.id >=
				"Q7E33A").count > 0 then false;
			}
			constraint rule17eLectronicWarning { //PRS PPM: 77300
				message: "Please note that you would get only 1 license key for all units on order. If you would like separate keys for each unit, please choose a Physical SKU instead.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "E6U59ABE" || y.id >= "E6U64ABE").count > 1 then false else true;
			}
			//
			constraint iLOCommon_rl8_info {
				message: "You have selected iLO Advanced, Insight Control and OneView with iLO.  All of these products contain iLO Advanced .  Select only one of  these licenses to get iLO Advanced.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21" || y.id >= "BD505A" || y.id >= "E6U59ABE" || y.id >= "E6U64ABE").count > 0 then false else true;
			}
			constraint iLOCommondeselectWarningMessage {
				message: "You have deselected an iLO Advanced License.  HPE recommends that you include an iLO license in your server purchase.  iLO allows a system administrator to monitor and manage servers remotely anywhere anytime and anyplace.<br>
						NOTE : The above message NOT applicable for Edgeline server blades since iLO is already built-in for these blades.";
				enabled: (thisInst.realBasedummyId != "P07244-B21_HSX");
				body:
				//MS for ALM: 121500
				//					if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21"||y.id >= "512486-B21"||y.id >= "512487-B21"||y.id >= "BD505A"||y.id >= "BD506A"||y.id >= "BD507A"||y.id >= "E6U59ABE"||y.id >= "E6U64ABE"||y.id >= "G6F49A"||
				//					y.id >= "512488-B21"||y.id >= "512489-B21"||y.id >= "512490-B21"||y.id >= "512491-B21"||y.id >= "BD502A"||y.id >= "BD503A"||y.id >= "BD504A"||y.id >= "E6U60ABE"||y.id >= "E6U63ABE").count = 0 then false else true;
				if ! ((thisConfig.getInstancesOfModel("SGINodeConfiguration").count) > 0 || (thisConfig.getInstancesOfModel("BlueDataSW").count) > 0) then thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21" || y.id >= "512486-B21"
				|| y.id >= "512487-B21" || y.id >= "BD505A" || y.id >= "BD506A" || y.id >= "BD507A" || y.id >= "E6U59ABE" || y.id >= "E6U64ABE" || y.id >= "G6F49A" || y.id >= "512488-B21" || y.id >= "512489-B21" || y.id >= "512490-B21" || y.id >=
				"512491-B21" || y.id >= "BD502A" || y.id >= "BD503A" || y.id >= "BD504A" || y.id >= "E6U60ABE" || y.id >= "E6U63ABE").count > 0;
			}
		}
		def vmWareDeliverIsSelected: boolean = isSelected(VMWareSubsystem.vmWareDeliverMethodChoice);
		subsystem VMWareSubsystem { //vmware	
			choice vmWareDeliverMethodChoice {
				optional: true;
				targetClass: VMWareDeliveryMethod;
				choiceType: multi_select;
			}
			constraint checkDeliveryType {
				message: "";
				body: dependency (vmWarePhysicalDelivery, VMWareSoftware [ VMWElectronic ] = 0);
				dependency (vmWareElectronicDelivery, VMWareSoftware [ VMWPhysical ] = 0);
			}
			choice VMWareBundlesChoice {
				optional: true;
				targetClass: VMWareBundles;
				choiceType: multi_select;
			}
			locationArray VMWareVirtualizationLocationArray {
				fillerClasses: VMWareVirtualization;
				rows: 999;
			}
			locationArray RGSeditionsLocationArray {
				fillerClasses: RGSeditions, RGSMoonshot;
				rows: 999;
			}
			locationArray RGSSupportLocationArray {
				fillerClasses: RGSSupport;
				rows: 999;
			}
			//VM Added for this PPM :75851
			choice HpeonesphereChoice {
				optional: true;
				targetClass: NCSLicense;
				choiceType: multi_select;
				title: "HPE Onesphere subscription";
			}

			//VM Added for this PPM :75851
			locationArray VirtualizationhpeonesphereLocArray {
				fillerClasses: NCSLicense;
				rows: 99;
			}

			//VM Added for this PPM :75851
			//			constraint onesphereinformation {
			//				message: "While multiple HLU licenses may be selected, it is recommended that the single HLU is used to create a relationship between the server configuration and required number of licenses ";
			//				body:
			//				if thisInst.selected(NCSLicense) .count > 0 then false;
			//			}
			//			
			constraint hlu {
				message: "HPE OneSphere Hybrid Licensing Unit is not allowed the mixed.";
				body: restriction (NCSLicense.noMix (License_time));
			}
			choice RedHatEnterpriseVirtualizationChoice {
				optional: true;
				targetClass: RedHatEnterpriseVirtualization;
				choiceType: multi_select;
				title: "Red Hat Enterprise Virtualization";
			}
			locationArray RedHatEnterpriseVirtualizationLocationArray {
				fillerClasses: RedHatEnterpriseVirtualization;
				rows: 10;
			}
			//			choice RedHatEnterpriseLinuxServerChoice {
			//				optional: true;
			//				targetClass: RedHatEnterpriseServer;
			//				choiceType: multi_select;
			//				title: "Red Hat Enterprise Linux Server";
			//			}
			locationArray VMWareVirtualizationUpgradeSoftwareLocationArray {
				fillerClasses: VMWareVirtualizationUpgradeSoftware;
				rows: 999;
			}
			locationArray VMWareUpgradesChoice {
				fillerClasses: VMWareUpgrades;
				rows: 10;
			}
			//JQD Removing duplicate locarray
			locationArray VMWareVCenterProductsChoice {
				fillerClasses: VMWareVCenterProducts;
				rows: 10;
			}
			choice VMWareViewChoice {
				optional: true;
				targetClass: VMWareView;
				choiceType: multi_select;
			}
			//SE - Moving this to top class		25-Nov-2021			
			//			locationArray VMwareVSANChoice {
			//				fillerClasses: VMwareVSAN;
			//				//rows: 10;
			//				rows: 999; //ABP_ALM_117921 max 999 for vmware vsan
			//				//ANV
			//
			//			}
			locationArray VMWareClientVirtualizationProductsChoice {
				fillerClasses: VMWareClientVirtualizationProducts;
				rows: 99;
			}
			locationArray VMWareVCenterSrmProductsChoice { //new menu
				fillerClasses: VMWareVCenterSrmProducts;
				rows: 10;
			}
			locationArray VeeamVirtualizationChoice { //new menu
				fillerClasses: VeeamVirtualization;
				rows: 12;
			}
			locationArray VMWareVCloudProductsChoice { //new menu
				fillerClasses: VMWareVCloudProducts;
				rows: 99;
			}
			//SE - Moving this to top class		26-Nov-2021
			//			locationArray VMWareVSphereEditionsChoice { //new menu
			//				fillerClasses: VMWareVSphereEditions;
			//				rows: 10;
			//			}
			locationArray VMWareVShieldProductsChoice { //new menu
				fillerClasses: VMWareVShieldProducts;
				rows: 2;
			}
			locationArray VMWareVSphereKitsChoice { //new menu
				fillerClasses: VMWareVSphereKits;
				rows: 10;
			}
			//DK for ALM 107805
			//			constraint isEqualfixedSWChoice{
			//				message: "If ordered, then quantity must be equal to total number of VMwareVSAN Carepacks on the order.";
			//				body:
			//				thisInst.selected(VMwareVSAN).count >= thisInst.selected(StandaloneSWFixedServices).count;
			//				thisInst.selected(VMwareVSAN).count = thisInst.selected(StandaloneSWFixedServices).filter(x => x.id = "U6ZY0E").count;
			//				thisInst.selected(VMwareVSAN).count = thisInst.selected(StandaloneSWFixedServices).filter(x => x.id = "U6ZY1E").count;

			//			}
			constraint insightVirtualMachineManagementPackBTO {
				message: "CTO models have a maximum selection of 10 VMWare Bundle software.";
				body: dependency (! ProliantServers [ BTO ], VMWareBundles <= 10);
			}
			//ANV_ALM_106631
			//			constraint OperatingSysRule13W { // ppm 75786
			//				message:
			//				" If HA is NOT selected than this SKU can be ordered with the following HPE SGI 8600 nodes / controllers:  Q2N78A Login Nodes, Q2N75A SAC Controller, Q2N81A Rack Lead Controller, Q2N76A Batch Node, Q2N77A Gateway Node, Q2D35A Compute Nodes, Q1V16A Compute Nodes, Q1V15A Compute Nodes.";
			//				body: if thisInst.selected(VMwareVSAN).filter(y => y.id >= "M6K36A").count > 0 then false;
			//			}
			constraint OperatingSysRule21W {
				message: "All HPE SGI 8600 nodes / controllers are dependent on having adequate operating system licensing coverage. All nodes / controllers must run at minimum 1 of the following: </br>
								BD565A, BD567A, G3J28A, G3J29A, G3J30A, G3J31A, G3J32A, G3J33A, M6K36A, N7F54A, N7F55A, Q1B82A, Q1B83A, Q1B84A, Q1B85A, Q1B86A, Q1B87A, Q2A75A </br>
								Blue Note: Min Qty of 1 may not be enough to cover nodes / controllers. Configuration Specific Compatibility and quantity logic for the SKUs above </br> 
								is located within the Sectional Rules above and should be used to determine if each node is adequately covered by Operating System Licenses.";
				body: if thisInst.selected(VMwareVSAN).filter(y => y.id >= "M6K36A").count > 0 then false;
			}
			//SR ALM 106842
			//RV 30-Nov-2017 updated the classname VMSAN to NovellSUSELinuxEnterpriseServer 
			constraint VMwareVSANrule8 { //warning
				message: "Needs an active SLES subscription as head node. </br>One compute node per subscription (Max 8 compute nodes). </br>Support is sold separately.";
				body:
				if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "M6K35A" || y.id >= "M6K35AAE").count > 0 then false else true;
			}
			//RV 30-Nov-2017 updated the classname VMSAN to NovellSUSELinuxEnterpriseServer
			constraint VMwareVSANrule10 { //Warning
				message: "SUSE doesn't provide ARM processor on Moonshot platforms support at this time";
				body:
				if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "M6K35A" || y.id >= "M6K35AAE" || y.id >= "M6K36A" || y.id >= "M6K36AAE").count > 0 then false else true;
			}
			//RV 30-Nov-2017 updated the classname VMSAN to NovellSUSELinuxEnterpriseServer
			//			constraint VMwareVSANsrule11 { //information
			//				message: "2 socket pair can be stackable";
			//				body:
			//				if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "M6K35A" || y.id >= "M6K35AAE" || y.id >= "M6K36A" || y.id >= "M6K36AAE").count > 0 then false else true;
			//			}
			//RV 30-Nov-2017 updated the classname VMSAN to NovellSUSELinuxEnterpriseServer
			constraint VMwareVSANsrule22 { //information
				message: "HPC Compute Nodes can be purchased independently from Head Nodes. Head Nodes may be purchased if support is desired.";
				body:
				if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "M6K35A" || y.id >= "M6K35AAE").count > 0 or thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id = "Q1B85A" || y.id = "Q1B86A" || y.id =
				"Q1B87A" || y.id = "R1P40A" || y.id = "R1P40AAE" || y.id = "R1P41A" || y.id = "R1P41AAE" || y.id = "R1P42A" || y.id = "R1P42AAE").count > 0 then false else true; //PRS Added SKUs for PERT-15687 24 June 2019     //MS 06-03-2018 for ALM: 115363

			}
			//MS for PPM: 76708
			constraint NFVsoftwarerule {
				message: "HPE NFV PLM needs to approve  the build before the order can be placed. This build needs to be reviewed by the Product Management (PLM) team. Please contact PLM at telcohit-plm@hpe.com for approval";
				body:
				if thisInst.selected(OEMSoftwareNFV).filter(y => y.id >= "Q9W11A" || y.id >= "Q9W12A" || y.id >= "Q9W13A" || y.id >= "Q9W14A" || y.id >= "Q9W15A" || y.id >= "Q9W16A" || y.id >= "Q9W17A" || y.id >= "Q9W18A" || y.id >= "Q9W19A" || y.id
				>= "Q9W20A" || y.id >= "Q9W21A" || y.id >= "Q9W22A" || y.id >= "Q9W23A" || y.id >= "Q9W24A" || y.id >= "Q9W25A" || y.id >= "Q9W26A").count > 0 then false else true;
			}
			constraint pcmsoftwarerule {
				message: "When ordering HPE PCM Software products, please make sure to include at least one Media Kit and one License in the configuration. NOTE: Ignore this message if the Media Kit or the Licenses are already available On-Site.";
				body:
				if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q9V60A" || y.id >= "Q9V60AAE" || y.id >= "Q9V62A").count > 0 then false else true;
			} //PRS Removed || y.id >= "Q9V61A" for PERT-15687 28 June 2019
			constraint pcmsoftwarerule1 {
				message: "Customers should be made aware that their e-Delivery products will be delivered to them via e-email.";
				body:
				if thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(y => y.id >= "Q9V60AAE").count > 0 then false else true;
			}
			//constraint insightVirtualMachineManagementPackCTO {
			//	message: "CTO models have a maximum selection of 999 VMWare Bundle software.";
			//	body: dependency (! ProliantServers [ CTO ], VMWareBundles <= 999);
			//}
			/*MB*/ //Max of 999 is allowed, however user cannot select more than one of each 
			constraint RedHatEnterpriseServerMax999 {
				message: "Max of 999 is allowed per server.";
				body: restriction (RedHatEnterpriseServer <= 999);
			}
			constraint max10VMWareVirtualizationPerCTO {
				message: "CTO models have a maximum selection of 10 VMWare Virtualization Software";
				body: dependency (! ProliantServers [ BTO ], VMWareVirtualization <= 10);
			}
			constraint vmWareVirtualizationMaxPerCTO {
				message: "CTO models have a maximum selection of 10 VMWare Virtualization Upgrade software.";
				body: dependency (! ProliantServers [ BTO ], VMWareVirtualizationUpgradeSoftware <= 10);
			}
			constraint redHatVirtualization_RHEVInformation { //junit ANV_ALM_106631
				message: "RHEV is VM management and hypervisor software.  RHEL not included."; //message: "This bundle includes RHEV and RHEL Virtual Datacenter 2 socket pair stackable."; 
				body:
				if thisInst.selected(RedHatEnterpriseVirtualization).filter(p => p.id = "J1U48A" || p.id = "J1U48AAE" || p.id = "J1U49A" || p.id = "J1U49AAE" || p.id = "J1U50A" || p.id = "J1U50AAE" || p.id = "J1U51A" || p.id = "J1U51AAE").count +
				thisInst.selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D18AAE" || y.id >= "Q0D18A" || y.id >= "Q0D19AAE" || y.id >= "Q0D19A").count > 0 then false;
			}
			constraint redHatVirtualization_RHEV_RHELInformation { //junit ANV_ALM_106631
				message: "This bundle includes RHEV and RHEL Virtual Datacenter 2 socket pair stackable.";
				body: selected(RedHatEnterpriseVirtualization).filter(p => p.id = "J1U52A" || p.id = "J1U52AAE" || p.id = "J1U53A" || p.id = "J1U53AAE" || p.id = "J1U54A" || p.id = "J1U54AAE" || p.id = "J1U55A" || p.id = "J1U55AAE").count = 0;
				//selected(RedHatEnterpriseServer).filter(y => y.id >= "Q0D20A" || y.id >= "Q0D20AAE" || y.id >= "Q0D21A" || y.id >= "Q0D21AAE" || y.id >= "Q0D22A").count = 0;

			} //PRS Removed SKUs for PERT-20267 13-Nov-2020
			constraint ACEflexRedHatVirtualizationNotsupported {
				message: "Red Hat Enterprise Virtualization Flex parts are not supported in ACE.";
				body: dependency (targetEnv ("ezc", "ipcs"), ! RedHatEnterpriseVirtualization [ A1L25A || A1L26A || A1L27A || A1L28A ]);
			}
			constraint rgsLicensesInformation {
				message: "Customer must own equivalent number of RGS 6 or 5.4.x licenses to qualify to purchase RGS 7 upgrade SKUs.";
				body: if thisInst.selected(RGSeditions).filter(x => x.id >= "K8Z53AAE" || x.id >= "K8Z54AAE").count > 0 then false else true;
			}
			constraint rgsLicenses30daywarn {
				message: "Must be sold within 30 days of server purchase. For policy on additional license sale, please contact your regional business lead.";
				body: if thisInst.selected(RGSeditions).filter(x => x.id >= "K8Z51AAE" || x.id >= "K8Z52AAE").count > 0 then false else true;
			}
			constraint upgradeCommercialLicensWarning_rule22 {
				message:
				//RV 17-Mar-2021 SMR Pink pig "Horizon Add-ons require an a la carte vSphere license to support the concurrent connections purchased. HPE Customers are advised to review the following website for further details: http://www.vmware.com/files/pdf/products/horizon/VMware-Horizon-FAQ.pdf.";
				"Horizon Add-ons require an a la carte vSphere license to support the concurrent connections purchased.";
				body: if thisInst.selected(VMWareClientVirtualizationProducts).filter(x => x.id >= "P9T65AAE" || x.id >= "P9T64AAE" || x.id >= "P9T63AAE" || x.id >= "P9T63A" || x.id >= "P9T64A" || x.id >= "P9T65A").count > 0 then false else true; //RV 17-Mar-2021 SMR Pink pig added  x.id >= "P9T63A" || x.id >= "P9T64A" || x.id >= "P9T65A"

			}
			constraint channelOnlySkuMsg {
				message: "Channel Only SKU (not for direct market).";
				body: if thisInst.selected(VMWareVSphereEditions).filter(x => x.id >= "E8H71AAE" || x.id >= "E8H72AAE" || x.id >= "E8H73AAE" || x.id >= "E8H77AAE" || x.id >= "E8H78AAE" || x.id >= "E8H79AAE" || x.id >= "P9U81AAE" || x.id >= "P9U82AAE"
				|| x.id >= "P9U83AAE").count > 0 then false else true;
			}
			constraint upgradeCommercialLicensWarning_vCenter {
				message: "Upgrade commercial licenses cannot be sold to upgrade an Academic or Federal base license.";
				body: if thisInst.selected(VMWareVCenterProducts).filter(x => x.id >= "BD726A" || x.id >= "BD726AAE" || x.id >= "BD727A" || x.id >= "BD727AAE" || x.id >= "BD520A" || x.id >= "BD520AAE" || x.id >= "Q2W04BAE" || x.id >= "Q2W05BAE" ||
				x.id >= "Q2W06BAE" || x.id >= "R1T88AAE" || x.id >= "R1T89AAE" || x.id >= "R1T90AAE" || x.id >= "R1T91AAE" || x.id >= "R1T92AAE" || x.id >= "R1T93AAE"
				/*SE - Removed as per PERT 24687		6-Oct-2021 || x.id >= "D8A85AAE" || x.id >= "D8A86AAE"*/).count > 0 then false else true; // NL added for PPM: 77173 , 18-July-2018 for the rule changed.

			}
			constraint upgradeCommercialLicensWarning_vCenterSrm {
				message: "Upgrade commercial licenses cannot be sold to upgrade an Academic or Federal base license.";
				body: if thisInst.selected(VMWareVCenterSrmProducts).filter(x => x.id >= "BD762AAE" || x.id >= "BD763AAE" || x.id >= "BD536AAE").count > 0 then false else true;
			}
			constraint upgradeCommercialLicensWarningCloudProds {
				message: "Upgrade commercial licenses cannot be sold to upgrade an Academic or Federal base license.";
				body: if thisInst.selected(VMWareVCloudProducts).filter(x => x.id >= "P9U01A" || x.id >= "P9U02A" || x.id >= "P9U04A" || x.id >= "P9U05A").count > 0 then false else true;
			}
			constraint upgradeCommercialLicensWarningSphereKits {
				message: "Upgrade commercial licenses cannot be sold to upgrade an Academic or Federal base license.";
				body: if thisInst.selected(VMWareVSphereKits).filter(x => x.id >= "Q0K22AAE" || x.id >= "Q0K23AAE" || x.id >= "Q0K24AAE" || x.id >= "Q0K25AAE" || x.id >= "Q0K26AAE" || x.id >= "Q0K27AAE" || x.id >= "Q0K28AAE" || x.id >= "Q0K29AAE" ||
				x.id >= "Q0K30AAE").count > 0 then false else true;
			}
			constraint MapucheSW2 {
				message:
				"VMware requires Channel Partners to achieve and maintain the “VMware Network Virtualization Competency�. The competency requirements are outlined on vmware.com and partner central. https://www.vmware.com/partners/partner-learning/solution-competencies";
				body:
				if thisInst.selected(VMwareVSAN).filter(y => y.id >= "Q9R94AAE" || y.id >= "Q9R95AAE" || y.id >= "Q9R96AAE").count > 0 then false else true;
			}
			constraint swcheckVMpage {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body:
				if ! isCS7xx () && thisInst.selected(VMwareVSAN).filter(y => y.id >= "P9U07A" || y.id >= "P9U08A" || y.id >= "P9U09A" || y.id >= "P9U10A" || y.id >= "P9U11A" || y.id >= "P9U12A" || y.id >= "P9U13A" || y.id >= "P9U14A" || y.id >=
				"P9U15A" || y.id >= "P9U16A" || y.id >= "P9U17A" || y.id >= "P9U18A" || y.id = "P9U40A" || y.id = "P9U41A" || y.id = "P9U42A").count > 0 then false else true;
			}
			constraint Kazakhrule1 {
				message: "Requires ownership of VMware vSphere and VMware vCenter Server";
				body: if thisInst.selected(VMWareVCenterProducts).filter(x => x.id >= "P9U28BAE" || x.id >= "P9U29BAE" || x.id >= "P9U31BAE" || x.id >= "P9U30BAE" || x.id >= "P9U32BAE" || x.id >= "P9U33BAE" || x.id >= "Q2W07BAE" || x.id >= "Q2W08BAE"
				|| x.id >= "Q2W09BAE" || x.id >= "R1T82A" || x.id >= "R1T82AAE" || x.id >= "R1T83A" || x.id >= "R1T83AAE" || x.id >= "R1T84A" || x.id >= "R1T84AAE" || x.id >= "R1T85A" || x.id >= "R1T85AAE" || x.id >= "R1T86A" || x.id >= "R1T86AAE" ||
				x.id >= "R1T87A" || x.id >= "R1T87AAE" || x.id >= "K8X46AAE" || x.id >= "K8X47AAE" || x.id >= "K8X48AAE" || x.id >= "K8X49AAE" || x.id >= "K8X50AAE" || x.id >= "K8X51AAE" || x.id >= "K8X52AAE" || x.id >= "K8X53AAE" || x.id >=
				"K8X54AAE" || x.id = "BD726A" || x.id = "BD726AAE" || x.id = "BD727A" || x.id = "BD727AAE" || x.id = "BD520A" || x.id = "BD520AAE").count > 0 then false else true; //NL added for Pert 14484 , 21-Dec-2018		// NL modified to fix with an existing issue, 02-May-2019

			}
			constraint Lykov3 {
				message: "Requires ownership of VMware vSphere and VMware vCenter Server";
				body: if thisInst.selected(VMWareVCenterProducts).filter(x => x.id >= "L8M86BAE" || x.id >= "L8M87BAE" || x.id >= "L8M88BAE").count > 0 then false else true;
			}
			constraint Inuit3 {
				message: "Initial VMware license(s) must be purchased within 30 days of purchase of server(s).";
				body: if thisInst.selected(VMWareVCloudProducts).filter(x => x.id >= "P9U19BAE" || x.id >= "P9U20BAE" || x.id >= "P9U21BAE" || x.id >= "P9U22BAE" || x.id >= "P9U23BAE" || x.id >= "P9U24BAE" || x.id >= "P9U25BAE" || x.id >= "P9U26BAE"
				|| x.id >= "P9U27BAE").count > 0 then false else true;
			}
			constraint swVMpurchaseid {
				message: "[Warning] Initial VMware license(s) must be purchased within 30 days of purchase of server(s).";
				body:
				if thisInst.selected(VMwareVSAN).filter(y => y.id >= "P9U07A" || y.id >= "P9U08A" || y.id >= "P9U09A" || y.id >= "P9U10A" || y.id >= "P9U11A" || y.id >= "P9U12A" || y.id >= "P9U13A" || y.id >= "P9U14A" || y.id >= "P9U15A" || y.id >=
				"P9U16A" || y.id >= "P9U17A" || y.id >= "P9U18A" || y.id >= "Q2V92AAE" || y.id >= "Q2V93AAE" || y.id >= "Q2V94AAE" || y.id >= "Q2V95AAE" || y.id >= "Q2V96AAE" || y.id >= "Q2V97AAE" || y.id >= "Q2V98AAE" || y.id >= "Q2V99AAE" || y.id
				>= "Q2W00AAE" || y.id >= "Q2W01AAE" || y.id >= "Q2W02AAE" || y.id >= "Q2W03AAE").count > 0 then false else true;
			}
			constraint OneProcesorperLicense {
				message: "This license is for one processor and customers must order as many licenses as there are processors (sockets) that will be populated for the server.";
				body:
				if thisInst.selected(VMwareVSAN).filter(y => y.id >= "P9U13A" || y.id >= "P9U14A" || y.id >= "P9U15A" || y.id >= "P9U16A" || y.id >= "Q2V92AAE" || y.id >= "Q2V93AAE" || y.id >= "Q2V94AAE" || y.id >= "Q2V95AAE" || y.id >= "Q2V96AAE" ||
				y.id >= "Q2V97AAE" || y.id >= "Q2V98AAE" || y.id >= "Q2V99AAE" || y.id >= "Q2W00AAE" || y.id >= "Q2W01AAE" || y.id >= "Q2W02AAE" || y.id >= "Q2W03AAE").count > 0 or thisInst.selected(VMWareClientVirtualizationProducts).filter(p =>
				p.id >= "Q8U31AAE" or p.id >= "Q8U32AAE" or p.id >= "Q8U33AAE" or p.id >= "Q8U34AAE" or p.id >= "Q8U35AAE" or p.id >= "Q8U36AAE" or p.id >= "Q8U37AAE" or p.id >= "Q8U38AAE" or p.id >= "Q8U39AAE" or p.id >= "Q8U40AAE" or p.id >=
				"Q8U41AAE" or p.id >= "Q8U42AAE" or p.id >= "R0D19AAE" or p.id >= "R0D20AAE" or p.id >= "R0D21AAE" or p.id >= "R0D22AAE" or p.id >= "R0D23AAE" or p.id >= "R0D24AAE").count > 0 then false else true;
			}
			constraint MayaSWRule4 {
				message: "Requires vSphere 6 or higher";
				body:
				if thisInst.selected(VMwareVSAN).filter(y => y.id >= "Q9N14AAE" || y.id >= "Q9N15AAE" || y.id >= "Q9N16AAE" || y.id >= "Q9N17AAE" || y.id >= "Q9N18AAE" || y.id >= "Q9N19AAE" || y.id >= "G4Y17A" || y.id >= "G4Y18A" || y.id >= "G4Y19A"
				|| y.id >= "G4Y17AAE" || y.id >= "G4Y18AAE" || y.id >= "G4Y19AAE" || y.id >= "P9H44AAE" || y.id >= "P9H45AAE" || y.id >= "P9H46AAE" || y.id >= "P9U53BAE" || y.id >= "P9U54BAE" || y.id >= "P9U52BAE" || y.id >= "G4Y17A" || y.id >=
				"G4Y18A" || y.id >= "G4Y19A" || y.id >= "P9H44A" || y.id >= "P9H45A" || y.id >= "P9H46A" || y.id >= "P9U53B" || y.id >= "P9U54B" || y.id >= "P9U52B").count > 0 then false else true;
			}
			constraint OneProcesorperLicenseVSphrEdtons {
				message: "This license is for one processor and customers must order as many licenses as there are processors (sockets) that will be populated for the server.";
				body:
				if thisInst.selected(VMWareVSphereEditions).filter(y => y.id >= "P9U13AAE" || y.id >= "P9U14AAE" || y.id >= "P9U15AAE" || y.id >= "P9U81AAE" || y.id >= "P9U82AAE" || y.id >= "P9U83AAE" || y.id >= "Q8U57AAE").count > 0 then false else
				true;
			}
			constraint OneProcesorperLicenseCloud {
				message: "This license is for one processor and customers must order as many licenses as there are processors (sockets) that will be populated for the server.";
				body:
				if thisInst.selected(VMWareVCloudProducts).filter(y => y.id >= "P9U05A" || y.id >= "P9U04A" || y.id >= "P9U02A" || y.id >= "P9U01A").count > 0 then false else true;
			}
			constraint cloud_foundn_mgr_rule25 {
				message: "Cloud Foundation includes SDDC Manager, NSX Enterprise, vSAN Enterprise and vSphere Enterprise Plus.";
				body: if thisInst.selected(VMWareVCloudProducts).filter(x => x.id >= "Q8V24AAE" || x.id >= "Q8V25AAE" || x.id >= "Q8V26AAE").count > 0 then false else true;
			}
			constraint vmwVirtualization_12 {
				message: "Quantity is based on total number of sockets at location, not per the server.";
				body: if thisInst.selected(VMWareBundles).filter(x => x.id >= "Q2B10AAE" || x.id >= "Q2B11AAE" || x.id >= "Q2B12AAE" || x.id >= "Q2B13AAE" || x.id >= "Q2B14AAE" || x.id >= "Q2B15AAE" || x.id >= "Q2B16AAE" || x.id >= "Q2B17AAE" || x.id
				>= "Q2B18AAE" || x.id >= "Q2B19AAE").count > 0 then false else true;
			}
			constraint vmwVirtualization_13 {
				message: "This option is stand alone and can be ordered without hardware sales.";
				body: if thisInst.selected(VMWareBundles).filter(x => x.id >= "Q2B10AAE" || x.id >= "Q2B11AAE" || x.id >= "Q2B12AAE" || x.id >= "Q2B13AAE" || x.id >= "Q2B14AAE" || x.id >= "Q2B15AAE" || x.id >= "Q2B16AAE" || x.id >= "Q2B17AAE" || x.id
				>= "Q2B18AAE" || x.id >= "Q2B19AAE").count > 0 then false else true;
			}
			constraint VirtualizationRuleVm {
				message:
				"Includes VMware vSphere 6 Remote Office Branch Office Advanced (25 VM pack) and VMware vSAN 6 Advanced for Remote Office Branch Office (25 VM pack). Customer can deploy a maximum of 25 VMs per Remote Office/Branch Office site.";
				body: if thisInst.selected(VMwareVSAN).filter(p => p.id >= "Q2V98AAE" or p.id >= "Q2V99AAE" or p.id >= "Q2W00AAE" or p.id >= "Q2W01AAE" or p.id >= "Q2W02AAE" or p.id >= "Q2W03AAE").count > 0 or
				thisInst.selected(VMWareClientVirtualizationProducts).filter(p => p.id >= "Q8U37AAE" or p.id >= "Q8U38AAE" or p.id >= "Q8U39AAE" or p.id >= "Q8U40AAE" or p.id >= "Q8U41AAE" or p.id >= "Q8U42AAE").count > 0 then false;
			}
			constraint vsanrequiresVmWareVsphereVcenter {
				message: "Requires ownership of VMware vSphere and VMware vCenter Server";
				body: if thisConfig.getInstancesOfModel("DLG10Common").count() > 0 and thisInst.selected(VMwareVSAN).filter(p => p.id >= "Q5U49AAE" or p.id >= "Q5U50AAE" or p.id >= "Q5U51AAE" or p.id >= "Q5U52AAE" or p.id >= "Q5U53AAE" or p.id >=
				"Q5U54AAE" or p.id >= "Q5U55AAE" or p.id >= "Q5U56AAE" or p.id >= "Q5U57AAE" or p.id >= "Q5U58AAE" or p.id >= "Q5U59AAE" or p.id >= "Q5U60AAE").count > 0 then false;
			}
			constraint rgsmoonshotcartdg {
				message: "RGS Moonshot SKU must be used with the supported moonshot cartridges.";
				body: if thisInst.selected(RGSMoonshot).filter(x => x.id >= "P9E50AAE").count > 0 then false else true;
			}
			constraint rgsmoonshotcartdg30daywarn {
				message: "Must be sold within 30 days of server purchase. For policy on additional license sale, please contact your regional business lead.";
				body: if thisInst.selected(RGSMoonshot).filter(x => x.id >= "P9E50AAE").count > 0 then false else true;
			}
			constraint upgradeCommercialLicensWarning_VSphereEditions {
				message: "Upgrade commercial licenses cannot be sold to upgrade an Academic or Federal base license.";
				body: if thisInst.selected(VMWareVSphereEditions).filter(x => x.id >= "BD526A" || x.id >= "BD526AAE" || x.id >= "BD527A" || x.id >= "BD527AAE" || x.id >= "BD528A" || x.id >= "BD528AAE" || x.id >= "P3X25AAE" || x.id >= "P3X26AAE" ||
				x.id >= "P3X27AAE" || x.id >= "Q8U57AAE" || x.id >= "Q8U58AAE" || x.id >= "Q8U59AAE" || x.id >= "Q5T21AAE" || x.id >= "Q5T22AAE" || x.id >= "Q5T23AAE" || x.id >= "P9U01AAE" || x.id >= "P9U02AAE" || x.id >= "P9U03AAE" || x.id >=
				"P9U04AAE" || x.id >= "P9U05AAE" || x.id >= "P9U06AAE" || x.id >= "P3X27AAE" || x.id >= "R0G41AAE" || x.id >= "R0G42AAE" || x.id >= "R0G43AAE" || x.id >= "R0G44AAE" || x.id >= "R0G45AAE" || x.id >= "R0G46AAE" || x.id >= "BD738A" ||
				x.id >= "BD738AAE" || x.id >= "BD739A" || x.id >= "BD739AAE" || x.id >= "BD740A" || x.id >= "BD740AAE" || x.id >= "BD741A" || x.id >= "BD741AAE").count > 0 then false else true; //x.id >= "Q5T24AAE" || x.id >= "Q5T25AAE" || x.id >= "Q5T26AAE" || removed this SKUs as per menu to fix an existing issue, 02-May-2019

			}
			constraint upgradeCommercialLicensWarning_VCloudProducts {
				message: "Upgrade commercial licenses cannot be sold to upgrade an Academic or Federal base license.";
				body: if thisInst.selected(VMWareVCloudProducts).filter(x => x.id >= "BD865AAE" || x.id >= "BD874AAE" || x.id >= "BD877AAE" || x.id >= "BD880AAE" || x.id >= "F0P36AAE" || x.id >= "F0P39AAE" || x.id >= "P3X28AAE" || x.id >= "P3X29AAE"
				|| x.id >= "P3X30AAE" || x.id >= "Q8V27AAE" || x.id >= "Q8V28AAE" || x.id >= "Q8V29AAE" || x.id >= "Q8V30AAE" || x.id >= "Q8V31AAE" || x.id >= "Q8V32AAE" || x.id >= "Q8V33AAE" || x.id >= "Q8V34AAE" || x.id >= "Q8V35AAE" || x.id >=
				"Q8V36AAE" || x.id >= "Q8V37AAE" || x.id >= "Q8V38AAE" || x.id >= "Q8V39AAE" || x.id >= "Q8V40AAE" || x.id >= "Q8V41AAE" || x.id >= "Q8V42AAE" || x.id >= "Q8V43AAE" || x.id >= "Q8V44AAE" || x.id >= "Q8V45AAE" || x.id >= "Q8V46AAE" ||
				x.id >= "Q8V47AAE" || x.id >= "Q8V48AAE" || x.id >= "Q8V49AAE" || x.id >= "Q8V50AAE" || x.id >= "Q8V51AAE" || x.id >= "Q8V52AAE" || x.id >= "Q8V53AAE" || x.id >= "Q8V54AAE" || x.id >= "Q8V55AAE" || x.id >= "Q8V56AAE" || x.id >=
				"Q8V57AAE" || x.id >= "Q8V58AAE" || x.id >= "Q8V59AAE" || x.id >= "Q8V60AAE" || x.id >= "Q8V61AAE" || x.id >= "Q8V62AAE").count > 0 then false else true;
			}
			constraint StorageAvailVRAMRule1 {
				message: "HPE Customers are advised to check the quickspecs for license VRAM entitlement.";
				body: if thisInst.selected(VMwareVSAN).filter(p => p.id >= "G4Y17AAE" or p.id >= "G4Y18AAE" or p.id >= "G4Y19AAE" or p.id >= "P9H44AAE" or p.id >= "P9H45AAE" or p.id >= "P9H46AAE" or p.id >= "P9U52BAE" or p.id >= "P9U53BAE" or p.id >=
				"P9U54BAE" or p.id >= "G4Y17A" or p.id >= "G4Y18A" or p.id >= "G4Y19A" or p.id >= "P9H44A" or p.id >= "P9H45A" or p.id >= "P9H46A" or p.id >= "P9U52B" or p.id >= "P9U53B" or p.id >= "P9U54B").count > 0 then false;
			} //thisConfig.getInstancesOfModel("DLG10Common").count() > 0 and 
			constraint Vmwarewarning_rule18 {
			//RV 17-Mar-2021 SMR Pink Pig updated message 
				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing HPE support contract ONLY after upgrade purchase, PAC registration and license application of the upgrade to the base product within the VMware portal. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. After upgrade purchase, registration and application of upgrade at the VMware portal - cancel HPE support contract for vSphere Standard). <br> 
						HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.<br> 
						Note: All base contracts MUST be on an active Support & Subscription contract or the upgrade will not work. Advise your customers to apply upgrades immediately. DO NOT allow base contracts to expire before upgrade application or upgrade will fail.";
//message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing support contract after purchase and registration of the upgrade. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. <br>
				//After upgrade purchase and registration cancel contract for vSphere Standard). HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.,<br>
				//Note: All base contracts must be on an active Support & Subscription contract or the upgrade will not work.";
				body: if thisInst.selected(VMWareVCloudProducts).filter(x => x.id >= "R0Y16AAE" || x.id >= "R0Y17AAE" || x.id >= "R0Y18AAE" || x.id >= "R0Y19AAE" || x.id >= "R0Y20AAE" || x.id >= "R0Y21AAE" || x.id >= "R0Y22AAE" || x.id >= "R0Y23AAE" ||
				x.id >= "R0Y24AAE").count > 0 then false else true; //PRS Added SKUs for PERT-11974

			}
			constraint upgradeCommercialLicensWarning_himba_vmwareclient2 {
			//RV 17-Mar-2021 SMR Pink Pig updated message 
				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing HPE support contract ONLY after upgrade purchase, PAC registration and license application of the upgrade to the base product within the VMware portal. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. After upgrade purchase, registration and application of upgrade at the VMware portal - cancel HPE support contract for vSphere Standard). <br> 
						HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.<br> 
						Note: All base contracts MUST be on an active Support & Subscription contract or the upgrade will not work. Advise your customers to apply upgrades immediately. DO NOT allow base contracts to expire before upgrade application or upgrade will fail.";

//				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing support contract after purchase and registration of the upgrade. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. <br>
				//				 After upgrade purchase and registration cancel contract for vSphere Standard). HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.,<br>
				//				 Note: All base contracts must be on an active Support & Subscription contract or the upgrade will not work.";
				body: if thisInst.selected(VMWareVCloudProducts).filter(x => x.id >= "Q0K38AAE" || x.id >= "Q0K39AAE" || x.id >= "Q8V27AAE" || x.id >= "Q8V28AAE" || x.id >= "Q8V28AAE" || x.id >= "Q8V29AAE" || x.id >= "Q8V30AAE" || x.id >= "Q8V31AAE" ||
				x.id >= "Q8V32AAE" || x.id >= "Q8V33AAE" || x.id >= "Q8V34AAE" || x.id >= "Q8V35AAE" || x.id >= "Q8V36AAE" || x.id >= "Q8V37AAE" || x.id >= "Q8V38AAE" || x.id >= "Q8V39AAE" || x.id >= "Q8V40AAE" || x.id >= "Q8V41AAE" || x.id >=
				"Q8V42AAE" || x.id >= "Q8V43AAE" || x.id >= "Q8V44AAE" || x.id >= "Q8V45AAE" || x.id >= "Q8V46AAE" || x.id >= "Q8V47AAE" || x.id >= "Q8V48AAE" || x.id >= "Q8V49AAE" || x.id >= "Q8V50AAE" || x.id >= "Q8V51AAE" || x.id >= "Q8V52AAE" ||
				x.id >= "Q8V53AAE" || x.id >= "Q8V54AAE" || x.id >= "Q8V55AAE" || x.id >= "Q8V57AAE" || x.id >= "Q8V58AAE" || x.id >= "Q8V59AAE" || x.id >= "Q8V60AAE" || x.id >= "Q8V61AAE" || x.id >= "Q8V62AAE" || x.id >= "Q8W53AAE" || x.id >=
				"Q8W54AAE" || x.id >= "Q8W55AAE" || x.id >= "Q8W56AAE" || x.id >= "Q8W57AAE" || x.id >= "Q8W58AAE" || x.id >= "Q8W59AAE" || x.id >= "Q8W60AAE" || x.id >= "Q8W61AAE" || x.id >= "Q8W62AAE" || x.id >= "Q8W62AAE" || x.id >= "Q8W63AAE" ||
				x.id >= "Q8W64AAE" || x.id >= "Q8W65AAE" || x.id >= "Q8W66AAE" || x.id >= "Q8W67AAE" || x.id >= "Q8W68AAE" || x.id >= "Q8W69AAE" || x.id >= "Q8W70AAE" || x.id >= "Q8W71AAE" || x.id >= "Q8W72AAE" || x.id >= "Q8W73AAE" || x.id >=
				"Q8W74AAE" || x.id >= "Q8W75AAE" || x.id >= "Q8W76AAE" || x.id >= "Q8W77AAE" || x.id >= "Q8W78AAE" || x.id >= "Q8W79AAE" || x.id >= "Q8W80AAE" || x.id >= "Q8W81AAE" || x.id >= "Q8W82AAE" || x.id >= "Q8W83AAE" || x.id >= "Q8W84AAE" ||
				x.id >= "Q8W85AAE" || x.id >= "Q8W86AAE" || x.id >= "Q8W87AAE" || x.id >= "Q8W88AAE" || x.id >= "Q8W89AAE" || x.id >= "Q8W90AAE" || x.id >= "Q8W91AAE" || x.id >= "Q8W92AAE" || x.id >= "Q8W93AAE" || x.id >= "Q8W94AAE" || x.id >=
				"Q8W95AAE" || x.id >= "Q8W96AAE" || x.id >= "Q8W97AAE" || x.id >= "Q8V56AAE" || x.id >= "Q8V57AAE" || x.id >= "Q8V58AAE" || x.id >= "Q8V59AAE" || x.id >= "Q8V60AAE" || x.id >= "Q8V61AAE" || x.id >= "Q8V62AAE").count > 0 then false
				else true; //SE - Removed || x.id >= "D8A84AAE"  as per PERT 24687		6-Oct-2021

			}
			constraint upgradeCommercialLicensWarning_greek_vspherekits {
			//RV 17-Mar-2021 SMR Pink Pig updated message 
				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing HPE support contract ONLY after upgrade purchase, PAC registration and license application of the upgrade to the base product within the VMware portal. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. After upgrade purchase, registration and application of upgrade at the VMware portal - cancel HPE support contract for vSphere Standard). <br> 
						HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.<br> 
						Note: All base contracts MUST be on an active Support & Subscription contract or the upgrade will not work. Advise your customers to apply upgrades immediately. DO NOT allow base contracts to expire before upgrade application or upgrade will fail.";

//				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing support contract after purchase and registration of the upgrade. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. <br>
				//				 After upgrade purchase and registration cancel contract for vSphere Standard). HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.,<br>
				//				 Note: All base contracts must be on an active Support & Subscription contract or the upgrade will not work.";
				body: if thisInst.selected(VMWareVSphereKits).filter(x => x.id >= "Q0K22AAE" || x.id >= "Q0K23AAE" || x.id >= "Q0K24AAE" || x.id >= "Q0K25AAE" || x.id >= "Q0K26AAE" || x.id >= "Q0K27AAE" || x.id >= "Q0K28AAE" || x.id >= "Q0K29AAE" ||
				x.id >= "Q0K30AAE").count > 0 then false else true;
			}
			constraint upgradeCommercialLicensWarning_greek_vmwareclient2 {
			//RV 17-Mar-2021 SMR Pink Pig updated message 
				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing HPE support contract ONLY after upgrade purchase, PAC registration and license application of the upgrade to the base product within the VMware portal. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. After upgrade purchase, registration and application of upgrade at the VMware portal - cancel HPE support contract for vSphere Standard). <br> 
						HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.<br> 
						Note: All base contracts MUST be on an active Support & Subscription contract or the upgrade will not work. Advise your customers to apply upgrades immediately. DO NOT allow base contracts to expire before upgrade application or upgrade will fail.";

//				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing support contract after purchase and registration of the upgrade. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. <br>
				//				 After upgrade purchase and registration cancel contract for vSphere Standard). HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.,<br>
				//				 Note: All base contracts must be on an active Support & Subscription contract or the upgrade will not work.";
				body: if thisInst.selected(VMWareVSphereEditions).filter(x => x.id >= "Q8U57AAE" || x.id >= "Q8U58AAE" || x.id >= "Q8U59AAE" || x.id >= "R0G41AAE" || x.id >= "R0G42AAE" || x.id >= "R0G43AAE" || x.id >= "R0G44AAE" || x.id >= "R0G45AAE"
				|| x.id >= "R0G46AAE" || x.id >= "BD527A" || x.id >= "BD527AAE" || x.id >= "BD738A" || x.id >= "BD738AAE" || x.id >= "BD739A" || x.id >= "BD739AAE" || x.id >= "BD740A" || x.id >= "BD740AAE" || x.id >= "BD741A" || x.id >=
				"BD741AAE").count > 0 then false else true; //NL fixed with an existing issue, 02-May-2019

			}
			constraint vCenterProductsRule18W {
			//RV 17-Mar-2021 SMR Pink Pig updated message 
				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing HPE support contract ONLY after upgrade purchase, PAC registration and license application of the upgrade to the base product within the VMware portal. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. After upgrade purchase, registration and application of upgrade at the VMware portal - cancel HPE support contract for vSphere Standard). <br> 
						HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.<br> 
						Note: All base contracts MUST be on an active Support & Subscription contract or the upgrade will not work. Advise your customers to apply upgrades immediately. DO NOT allow base contracts to expire before upgrade application or upgrade will fail.";

//				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing support contract after purchase and registration of the upgrade. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. <br>
				//				 After upgrade purchase and registration cancel contract for vSphere Standard). HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.,<br>
				//				 Note: All base contracts must be on an active Support & Subscription contract or the upgrade will not work.";
				body: if thisInst.selected(VMWareVCenterProducts).filter(p => p.id >= "BD520A" or p.id >= "BD520AAE" or p.id >= "BD726A" or p.id >= "BD726AAE" or p.id >= "BD727A" or p.id >= "BD727AAE" or p.id >= "Q2W04BAE" or p.id >= "Q2W05BAE" or p.id
				>= "Q2W06BAE").count > 0 then false else true;
			}
			constraint VMWareVCenterSrmProductsRule18W {
			//RV 17-Mar-2021 SMR Pink Pig updated message 
				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing HPE support contract ONLY after upgrade purchase, PAC registration and license application of the upgrade to the base product within the VMware portal. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. After upgrade purchase, registration and application of upgrade at the VMware portal - cancel HPE support contract for vSphere Standard). <br> 
						HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.<br> 
						Note: All base contracts MUST be on an active Support & Subscription contract or the upgrade will not work. Advise your customers to apply upgrades immediately. DO NOT allow base contracts to expire before upgrade application or upgrade will fail.";

//				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing support contract after purchase and registration of the upgrade. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. <br>
				//				 After upgrade purchase and registration cancel contract for vSphere Standard). HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.,<br>
				//				 Note: All base contracts must be on an active Support & Subscription contract or the upgrade will not work.";
				body: if thisInst.selected(VMWareVCenterSrmProducts).filter(p => p.id >= "BD536AAE" or p.id >= "BD762AAE" or p.id >= "BD763AAE").count > 0 then false else true;
			}
			constraint VMwareVSAN23W {
				message: "Upgrade commercial licenses cannot be sold to upgrade an Academic or Federal base license.";
				body: if thisInst.selected(VMwareVSAN).filter(x => x.id >= "Q9N14AAE" || x.id >= "Q9N15AAE" || x.id >= "Q9N16AAE" || x.id >= "Q9N17AAE" || x.id >= "Q9N18AAE" || x.id >= "Q9N19AAE" || x.id >= "R1T79A" || x.id >= "R1T79AAE" || x.id >=
				"R1T80AAE" || x.id >= "R1T81AAE" || x.id >= "R2H05AAE" || x.id >= "R2H06AAE" || x.id >= "R2H07AAE" || x.id >= "R9L90AAE" || x.id >= "R9L91AAE").count > 0 then false else true; // NL modified for Pert 14484, 20-Dec-2018
				//SE - Added R9L90AAE & R9L91AAE for PERT 24866		15-Feb-2022

			}
			constraint storageavailabilitywar {
				message: "HPE Customers are advised to check the quickspecs for license VRAM entitlement.";
				body:
				if thisInst.selected(VMwareVSAN).filter(y => y.id >= "Q0E37BAE" || y.id >= "Q0E38BAE" || y.id >= "Q0E39BAE").count > 0 or thisInst.selected(VMWareVSphereEditions).filter(y => y.id >= "Q5T24AAE" || y.id >= "Q5T25AAE" || y.id >=
				"Q5T26AAE").count > 0 then false; // then false else true;	//NL modified this rule ,31-Oct-2018

			} //PRS Removed y => y.id >= "G4Y17A" || y.id >= "G4Y18A" || y.id >= "G4Y19A" || y.id >= "P9H44A" || y.id >= "P9H45A" || y.id >= "P9H46A" || y.id >= "P9U52B" || y.id >= "P9U53B" || y.id >= "P9U54B" ||  for PERT-20267 13-Nov-2020
			constraint vmwarevcenterproducts_ruleno10and11 {
				message: "Initial VMware license(s) must be purchased within 30 days of purchase of server(s).";
				body: if thisInst.selected(VMWareSoftware).filter(x => x.id = "K8X46A" || x.id = "K8X47A" || x.id = "K8X48A" || x.id = "K8X49A" || x.id = "K8X50A" || x.id = "K8X51A" || x.id = "K8X52A" || x.id = "K8X53A" || x.id = "K8X54A" || x.id =
				"L8M86B" || x.id = "L8M87B" || x.id = "L8M88B" || x.id = "P9U28B" || x.id = "P9U29B" || x.id = "P9U30B" || x.id = "P9U31B" || x.id = "P9U32B" || x.id = "P9U33B" || x.id = "Q2W07B" || x.id = "Q2W08B" || x.id = "Q2W09B" || x.id >=
				"P9U34A" || x.id >= "P9U34AAE" || x.id >= "P9U35A" || x.id >= "P9U35AAE" || x.id >= "P9U36A" || x.id >= "P9U36AAE" || x.id >= "P9U37A" || x.id >= "P9U37AAE" || x.id >= "P9U38A" || x.id >= "P9U38AAE" || x.id >= "P9U39A" || x.id >=
				"P9U39AAE").count > 0 then false else true;
			}
			constraint upgCommercialLicenWarning {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body: if ! isCS7xx () && thisInst.selected(VMWareSoftware).filter(x => x.id >= "P9U19BAE" || x.id >= "P9U20BAE" || x.id >= "P9U21BAE" || x.id >= "P9U22BAE" || x.id >= "P9U23BAE" || x.id >= "P9U24BAE" || x.id >= "P9U25BAE" || x.id >=
				"P9U26BAE" || x.id >= "P9U27BAE" || x.id >= "Q8V21AAE" || x.id >= "Q8V22AAE" || x.id >= "Q8V23AAE" || x.id >= "Q8V24AAE" || x.id >= "Q8V25AAE" || x.id >= "Q8V26AAE" || x.id >= "Q8V27AAE" || x.id >= "Q8V28AAE" || x.id >= "Q8V29AAE" ||
				x.id >= "Q8V30AAE" || x.id >= "Q8V31AAE" || x.id >= "Q8V32AAE" || x.id >= "Q8V33AAE" || x.id >= "Q8V34AAE" || x.id >= "Q8V35AAE" || x.id >= "Q8V36AAE" || x.id >= "Q8V37AAE" || x.id >= "Q8V38AAE" || x.id >= "Q8V39AAE" || x.id >=
				"Q8V40AAE" || x.id >= "Q8V41AAE" || x.id >= "Q8V42AAE" || x.id >= "Q8V43AAE" || x.id >= "Q8V44AAE" || x.id >= "Q8V45AAE" || x.id >= "Q8V46AAE" || x.id >= "Q8V47AAE" || x.id >= "Q8V48AAE" || x.id >= "Q8V49AAE" || x.id >= "Q8V50AAE" ||
				x.id >= "Q8V51AAE" || x.id >= "Q8V52AAE" || x.id >= "Q8V53AAE" || x.id >= "Q8V54AAE" || x.id >= "Q8V55AAE" || x.id >= "Q8V56AAE" || x.id >= "Q8V57AAE" || x.id >= "Q8V58AAE" || x.id >= "Q8V59AAE" || x.id >= "Q8V60AAE" || x.id >=
				"Q8V61AAE" || x.id >= "Q8V62AAE" || x.id >= "Q8V21A" || x.id >= "Q8V22A" || x.id >= "Q8V23A" || x.id >= "R0Y16AAE" || x.id >= "R0Y17AAE" || x.id >= "R0Y18AAE" || x.id >= "R0Y19AAE" || x.id >= "R0Y20AAE" || x.id >= "R0Y21AAE" || x.id
				>= "R0Y22AAE" || x.id >= "R0Y23AAE" || x.id >= "R0Y24AAE").count > 0 then false else true;
			}
			constraint Lykov2 {
				message: "Requires original VMware NSX perpetual per CPU license (any edition).";
				body: if thisInst.selected(VMwareVSAN).filter(x => x.id >= "Q9L12AAE" || x.id >= "Q9L13AAE" || x.id >= "Q9L14AAE" || x.id >= "Q8U60A" || x.id >= "Q8U60AAE" || x.id >= "Q8U61A" || x.id >= "Q8U61AAE" || x.id >= "Q8U62A" || x.id >=
				"Q8U62AAE" || x.id >= "Q9L12A" || x.id >= "Q9L13A" || x.id >= "Q9L14A" || x.id >= "R9L90AAE" || x.id >= "R9L91AAE").count > 0 then false else true;
				//SE - Added for PERT 24866		14-Feb-2022

			}
			constraint networkingandsecurity_war {
				message: "Requires original VMware NSX perpetual CCU license (any edition).";
				body: if thisInst.selected(VMwareVSAN).filter(x => x.id >= "Q8U63A" || x.id >= "Q8U63AAE" || x.id >= "Q8U64A" || x.id >= "Q8U64AAE" || x.id >= "Q8U65A" || x.id >= "Q8U65AAE" || x.id >= "Q8U66A" || x.id >= "Q8U66AAE" || x.id >=
				"Q8U67A" || x.id >= "Q8U67AAE" || x.id >= "Q8U68A" || x.id >= "Q8U68AAE").count > 0 then false else true;
			}
			constraint swVMCloudpurchaseid {
				message: "[Warning] Initial VMware license(s) must be purchased within 30 days of purchase of server(s).";
				body:
				if thisInst.selected(VMWareVCloudProducts).filter(y => y.id >= "P9U19A" || y.id >= "P9U20A" || y.id >= "P9U21A" || y.id >= "P9U22A" || y.id >= "P9U23A" || y.id >= "P9U24A" || y.id >= "Q8V21AAE" || y.id >= "Q8V22AAE" || y.id >=
				"Q8V23AAE" || y.id >= "Q8V24AAE" || y.id >= "Q8V25AAE" || y.id >= "Q8V26AAE" || y.id >= "Q8V27AAE" || y.id >= "Q8V28AAE" || y.id >= "Q8V28AAE" || y.id >= "Q8V29AAE" || y.id >= "Q8V30AAE" || y.id >= "Q8V31AAE" || y.id >= "Q8V32AAE" ||
				y.id >= "Q8V33AAE" || y.id >= "Q8V34AAE" || y.id >= "Q8V35AAE" || y.id >= "Q8V36AAE" || y.id >= "Q8V37AAE" || y.id >= "Q8V38AAE" || y.id >= "Q8V39AAE" || y.id >= "Q8V40AAE" || y.id >= "Q8V41AAE" || y.id >= "Q8V42AAE" || y.id >=
				"Q8V43AAE" || y.id >= "Q8V44AAE" || y.id >= "Q8V45AAE" || y.id >= "Q8V46AAE" || y.id >= "Q8V47AAE" || y.id >= "Q8V48AAE" || y.id >= "Q8V49AAE" || y.id >= "Q8V50AAE" || y.id >= "Q8V51AAE" || y.id >= "Q8V52AAE" || y.id >= "Q8V53AAE" ||
				y.id >= "Q8V54AAE" || y.id >= "Q8V55AAE" || y.id >= "Q8V56AAE" || y.id >= "Q8V57AAE" || y.id >= "Q8V58AAE" || y.id >= "Q8V59AAE" || y.id >= "Q8V60AAE" || y.id >= "Q8V61AAE" || y.id >= "Q8V62AAE" || y.id >= "Q8V21A" || y.id >= "Q8V22A"
				|| y.id >= "Q8V23A" || y.id >= "R0Y16AAE" || y.id >= "R0Y17AAE" || y.id >= "R0Y18AAE" || y.id >= "R0Y19AAE" || y.id >= "R0Y20AAE" || y.id >= "R0Y21AAE" || y.id >= "R0Y22AAE" || y.id >= "R0Y23AAE" || y.id >= "R0Y24AAE").count > 0 then
				false else true;
			}
			constraint swVMCloudProdid {
				message: "Initial VMware license(s) must be purchased within 30 days of purchase of server(s).";
				body:
				if thisInst.selected(VMWareVCloudProducts).filter(y => y.id >= "Q8W53AAE" || y.id >= "Q8W54AAE" || y.id >= "Q8W55AAE" || y.id >= "Q8W56AAE" || y.id >= "Q8W57AAE" || y.id >= "Q8W58AAE" || y.id >= "Q8W59AAE" || y.id >= "Q8W60AAE" ||
				y.id >= "Q8W61AAE" || y.id >= "Q8W62AAE" || y.id >= "Q8W62AAE" || y.id >= "Q8W63AAE" || y.id >= "Q8W64AAE" || y.id >= "Q8W65AAE" || y.id >= "Q8W66AAE" || y.id >= "Q8W67AAE" || y.id >= "Q8W68AAE" || y.id >= "Q8W69AAE" || y.id >=
				"Q8W70AAE" || y.id >= "Q8W71AAE" || y.id >= "Q8W72AAE" || y.id >= "Q8W73AAE" || y.id >= "Q8W74AAE" || y.id >= "Q8W75AAE" || y.id >= "Q8W76AAE" || y.id >= "Q8W77AAE" || y.id >= "Q8W78AAE" || y.id >= "Q8W79AAE" || y.id >= "Q8W80AAE" ||
				y.id >= "Q8W81AAE" || y.id >= "Q8W82AAE" || y.id >= "Q8W83AAE" || y.id >= "Q8W84AAE" || y.id >= "Q8W85AAE" || y.id >= "Q8W86AAE" || y.id >= "Q8W87AAE" || y.id >= "Q8W88AAE" || y.id >= "Q8W89AAE" || y.id >= "Q8W90AAE" || y.id >=
				"Q8W91AAE" || y.id >= "Q8W92AAE" || y.id >= "Q8W93AAE" || y.id >= "Q8W94AAE" || y.id >= "Q8W95AAE" || y.id >= "Q8W96AAE" || y.id >= "Q8W97AAE" || y.id >= "R0S63A" || y.id >= "R0S63AAE" || y.id >= "R0S64A" || y.id >= "R0S64AAE" || y.id
				>= "R0S65A" || y.id >= "R0S65AAE" || y.id >= "R0S66A" || y.id >= "R0S66AAE" || y.id >= "R0S67A" || y.id >= "R0S67AAE" || y.id >= "R0S68A" || y.id >= "R0S68AAE" || y.id = "R0S69A" || y.id >= "R0S70A" || y.id >= "R0S70AAE" || y.id >=
				"R0S71A" || y.id >= "R0S71AAE" || y.id >= "R0S72A" || y.id >= "R0S72AAE" || y.id >= "R0S73A" || y.id >= "R0S73AAE" || y.id >= "R0S74A" || y.id >= "R0S74AAE").count > 0 then false else true;
			}
			constraint MayaSWRule1 {
				message: "This license is for one processor and customers must order as many licenses as there are processors (sockets) that will be populated for the server.";
				body:
				if thisInst.selected(VMwareVSAN).filter(y => y.id >= "Q9N14AAE" || y.id >= "Q9N15AAE" || y.id >= "Q9N16AAE" || y.id >= "Q9N17AAE" || y.id >= "Q9N18AAE" || y.id >= "Q9N19AAE" || y.id >= "G4Y17A" || y.id >= "G4Y17AAE" || y.id >=
				"G4Y18A" || y.id >= "G4Y18AAE" || y.id >= "G4Y19A" || y.id >= "G4Y19AAE" || y.id >= "P9H44A" || y.id >= "P9H44AAE" || y.id >= "P9H45A" || y.id >= "P9H45AAE" || y.id >= "P9H46A" || y.id >= "P9H46AAE" || y.id >= "P9U52B" || y.id >=
				"P9U53B" || y.id >= "P9U54B" || y.id >= "P9U52BAE" || y.id >= "P9U53BAE" || y.id >= "P9U54BAE" || y.id = "R2H05AAE" || y.id = "R2H06AAE" || y.id = "R2H07AAE").count > 0 then false else true;
			}
			constraint MayaSWRule2 {
			//RV 18-Dec-2018 PERT 14484 testing message:  "If customer selects this part number, please display the following warning:
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified:
 					</br>http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body:
				if ! isCS7xx () && thisInst.selected(VMwareVSAN).filter(y => y.id >= "Q9N14AAE" || y.id >= "Q9N15AAE" || y.id >= "Q9N16AAE" || y.id >= "Q9N17AAE" || y.id >= "Q9N18AAE" || y.id >= "Q9N19AAE" || y.id >= "G4Y17A" || y.id >= "G4Y17AAE" ||
				y.id >= "G4Y18A" || y.id >= "G4Y18AAE" || y.id >= "G4Y19A" || y.id >= "G4Y19AAE" || y.id >= "P9H44A" || y.id >= "P9H44AAE" || y.id >= "P9H45A" || y.id >= "P9H45AAE" || y.id >= "P9H46A" || y.id >= "P9H46AAE" || y.id >= "P9U52B" || y.id
				>= "P9U53B" || y.id >= "P9U54B" || y.id >= "P9U52BAE" || y.id >= "P9U53BAE" || y.id >= "P9U54BAE").count > 0 then false else true; // NL added for Pert 14484, 18-Dec-2018 //|| y.id >= "R1T79A" || y.id >= "R1T79AAE" || y.id >= "R1T80AAE"|| y.id >= "R1T81AAE" NL removed to modify the rule, 07-01-2019

			}
			constraint MayaSWRule3 {
				message: "requires ownership of VMware vSphere and VMware vCenter Server";
				body:
				if thisInst.selected(VMwareVSAN).filter(y => y.id >= "Q9N14AAE" || y.id >= "Q9N15AAE" || y.id >= "Q9N16AAE" || y.id >= "Q9N17AAE" || y.id >= "Q9N18AAE" || y.id >= "Q9N19AAE" || y.id >= "G4Y17A" || y.id >= "G4Y17AAE" || y.id >=
				"G4Y18A" || y.id >= "G4Y18AAE" || y.id >= "G4Y19A" || y.id >= "G4Y19AAE" || y.id >= "P9H44A" || y.id >= "P9H44AAE" || y.id >= "P9H45A" || y.id >= "P9H45AAE" || y.id >= "P9H46A" || y.id >= "P9H46AAE" || y.id = "P9U52B" || y.id =
				"P9U53B" || y.id = "P9U54B").count > 0 then false else true;
			}
			constraint sddc_mgr_vmware_rule24 {
				message:
				"SDDC Manager is part of the VMware Cloud Foundation offering, and is for customers who have a minimum of NSX Advanced, vSAN Advanced, and vSphere Enterprise Plus. SDDC Manager will also work with higher editions of each component.";
				body: if thisInst.selected(VMWareVCloudProducts).filter(x => x.id >= "Q8V21AAE" || x.id >= "Q8V22AAE" || x.id >= "Q8V23AAE" || x.id >= "Q8V21A" || x.id >= "Q8V22A" || x.id >= "Q8V23A").count > 0 then false else true;
			}
			constraint VSANncxR9warn {
				message: "Customer must have the original base product on a current HPE services contract and must have registered for HPE support on the original base product so that upgrade can be added to an existing service contract.<br>
				 Upgrades are delta priced for license and service between base product and target upgrade.  Base product service contract must remain in place when upgrade is applied.";
				body: if thisInst.selected(VMwareVSAN).filter(x => x.id >= "R1T79A" || x.id >= "R1T79AAE" || x.id >= "R1T80AAE" || x.id >= "R1T81AAE" || x.id >= "R9L90AAE" || x.id >= "R9L91AAE").count > 0 then false else true;
				//SE - Added NPI SW for PERT 24866		14-Feb-2022

			}
			constraint upgradeComlicrule24 {
				message: "Customer must have the original base product on a current HPE services contract and must have registered for HPE support on the original base product so that upgrade can be added to an existing service contract. <br>
				Upgrades are delta priced for license and service between base product and target upgrade. Base product service contract must remain in place when upgrade is applied.";
				body: if thisInst.selected(VMWareVCenterProducts).filter(x => x.id >= "R1T88AAE" || x.id >= "R1T89AAE" || x.id >= "R1T90AAE" || x.id >= "R1T91AAE" || x.id >= "R1T92AAE" || x.id >= "R1T93AAE").count > 0 then false else true;
			}
			constraint vmwarevspherekitsruleno8 {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body:
				if ! isCS7xx () && thisInst.selected(VMWareVSphereKits).filter(y => y.id >= "BD510A" || y.id >= "BD510AAE" || y.id >= "BD706A" || y.id >= "BD706AAE" || y.id >= "BD707A" || y.id >= "BD707AAE" || y.id = "F6M48A" || y.id = "F6M48AAE" ||
				y.id = "F6M49A" || y.id = "F6M49AAE" || y.id = "F6M50A" || y.id = "F6M50AAE").count > 0 then false else true;
			}
			constraint upgradeCommercialLicensWarning_himba_vmwareclient222 {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body: if thisInst.selected(VMWareSoftware).filter(x => x.id >= "Q8V38AAE" || x.id >= "Q8V48AAE" || x.id >= "Q8V49AAE" || x.id >= "Q8V50AAE" || x.id >= "Q8V60AAE" || x.id >= "Q8V61AAE" || x.id >= "Q8V62AAE" || x.id >= "Q8V56AAE" ||
				x.id >= "Q8U43AAE" || x.id >= "Q8U44AAE" || x.id >= "Q8U45AAE").count > 0 then false else true;
			} //PRS Removed x.id >= "Q0K38AAE" || x.id >= "Q0K39AAE" || x.id >= "Q8V36AAE" || x.id >= "Q8V37AAE" || for PERT-20267 13-Nov-20220
			constraint VMwareVSANRule18W {
				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing HPE support contract ONLY after upgrade purchase, PAC registration and license application of the upgrade to the base product within the VMware portal.<br>
                          (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. After upgrade purchase, registration and application of upgrade at the VMware portal - cancel HPE support contract for vSphere Standard). <br>
                          HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license. <br>
                          Note: All base contracts MUST be on an active Support & Subscription contract or the upgrade will not work. Advise your customers to apply upgrades immediately. DO NOT allow base contracts to expire before upgrade application or upgrade will fail.";
				body: if thisInst.selected(VMwareVSAN).filter(p => p.id >= "Q9N14AAE" or p.id >= "Q9N15AAE" or p.id >= "Q9N16AAE" or p.id >= "Q9N17AAE" or p.id >= "Q9N18AAE" or p.id >= "Q9N19AAE" or p.id >= "R2H05AAE" or p.id >= "R2H06AAE" or p.id >=
				"R2H07AAE").count > 0 /* SE - Removed as per PERT 24687		6-Oct-2021	or thisInst.selected(VMWareClientVirtualizationProducts).filter(p => p.id >= "D8A85AAE" || p.id >= "D8A86AAE").count > 0*/ then false else true; //RV 16-Mar-2021 added D8A85AAE and D8A86AAE

			}
			constraint MapucheSW1 {
				message: "HPE Customers are advised to check the following website to ensure that the HPE hardware they intend to use is VMWare certified: http://www.vmware.com/resources/compatibility/search.php?action=base&deviceCategory=io";
				body:
				if(thisInst.selected(VMwareVSAN).filter(y => y.id >= "Q9R94AAE" || y.id >= "Q9R95AAE" || y.id >= "Q9R96AAE" || y.id >= "Q9L14A" || y.id >= "R2H05AAE" || y.id >= "R2H06AAE" || y.id >= "R2H07AAE").count > 0 or
				thisInst.selected(VMWareClientVirtualizationProducts).filter(y => y.id >= "D8A84AAE" || y.id >= "D8A85AAE" || y.id >= "D8A86AAE" || y.id >= "P9T48A" || y.id >= "P9T48AAE" || y.id >= "P9T49A" || y.id >= "P9T49AAE" || y.id >= "P9T51AAE"
				|| y.id >= "P9T52AAE" || y.id >= "P9T54A" || y.id >= "P9T54AAE" || y.id >= "P9T55A" || y.id >= "P9T55AAE" || y.id >= "P9T57AAE" || y.id >= "P9T58AAE" || y.id >= "P9T60A" || y.id >= "P9T60AAE" || y.id >= "P9T61A" || y.id >=
				"P9T61AAE").count > 0) then false else true; //SE - Added for PERT 24687		6-Oct-2021

			}
			//SE - Added for PERT 24687		6-Oct-2021
			constraint wareClientVirtualizationRule11Warning {
				message: "Initial VMware license(s) must be purchased within 30 days of purchase of server(s). Subsequent licenses can be purchased independently.";
				body: if thisInst.selected(VMWareClientVirtualizationProducts).filter(y => y.id >= "D8A84AAE" || y.id >= "D8A85AAE" || y.id >= "D8A86AAE" || y.id >= "P9T48A" || y.id >= "P9T48AAE" || y.id >= "P9T49A" || y.id >= "P9T49AAE" || y.id >=
				"P9T51AAE" || y.id >= "P9T52AAE" || y.id >= "P9T54A" || y.id >= "P9T54AAE" || y.id >= "P9T55A" || y.id >= "P9T55AAE" || y.id >= "P9T57AAE" || y.id >= "P9T58AAE" || y.id >= "P9T60A" || y.id >= "P9T60AAE" || y.id >= "P9T61A" || y.id >=
				"P9T61AAE").count > 0 then false else true;
			}
			constraint upgradeCommercialLicensWarning_vmwareclient2 {
				message: "HPE sales of VMware upgrade SKUs include fully priced support for the 'target' product license. Customers should be advised to cancel the existing HPE support contract ONLY after upgrade purchase, PAC registration and license application of the upgrade to the base product within the VMware portal. (Example- customer has vSphere Standard and purchases vSphere Standard to Enterprise Plus Upgrade. After upgrade purchase, registration and application of upgrade at the VMware portal - cancel HPE support contract for vSphere Standard). <br> 
						HPE upgrade SKUs can now be sold to customers with previous HPE or VMware direct licenses. The upgrade sale will move Support and Subscription to HPE if a VMware native license.<br> 
						Note: All base contracts MUST be on an active Support & Subscription contract or the upgrade will not work. Advise your customers to apply upgrades immediately. DO NOT allow base contracts to expire before upgrade application or upgrade will fail.";
				body: if thisInst.selected(VMWareClientVirtualizationProducts).filter(x => x.id >= "P9T62A" || x.id = "P9T63A" || x.id = "P9T64A" || x.id = "P9T65A" || x.id >= "Q0K31AAE" || x.id >= "Q0K32AAE" || x.id >= "Q0K33AAE" || x.id >=
				"Q0K34AAE" || x.id >= "Q0K35AAE" || x.id >= "Q0K36AAE" || x.id >= "Q0K37AAE" || x.id >= "Q0K38AAE" || x.id >= "Q0K39AAE").count > 0 then false else true;
			}
			constraint Virtualization_war_rl15 {
				message: "Requires the latest version of vSphere.";
				body:
				if thisInst.selected(VMwareVSAN).filter(x => split(x.id, "#").get(0) <= "Q0E37BAE Q0E38BAE Q0E39BAE G4Y17A G4Y17AAE G4Y18A G4Y18AAE G4Y19A G4Y19AAE 
					P9H44A P9H44AAE P9H45A P9H45AAE P9H46A P9H46AAE P9U52B P9U52BAE P9U53B P9U53BAE P9U54B P9U54BAE Q9N14AAE Q9N15AAE Q9N16AAE Q9N17AAE Q9N18AAE Q9N19AAE").count > 0 or thisInst.selected(VMWareVSphereEditions).filter(y => y.id >=
				"Q5T24AAE" || y.id >= "Q5T25AAE" || y.id >= "Q5T26AAE").count > 0 then thisInst.selected(VMwareVSAN).filter(y => y.id >= "P9U07A" || y.id >= "P9U08A" || y.id >= "P9U09A" || y.id >= "P9U10A" || y.id >= "P9U11A" || y.id >= "P9U12A" ||
				y.id >= "P9U40A" || y.id >= "P9U41A" || y.id >= "P9U42A").count > 0 or thisInst.selected(VMWareVCenterProducts).filter(y => y.id >= "P9U40AAE" || y.id >= "P9U41AAE" || y.id >= "P9U42AAE").count > 0;
			}
			constraint Virtualization_war_rl17 {
				message: "The license selected is on a PER INSTANCE basis.";
				body: if thisInst.selected(VMwareVSAN).filter(y => y.id >= "P9U40A" || y.id >= "P9U41A" || y.id >= "P9U42A").count > 0 or thisInst.selected(VMWareVCenterProducts).filter(y => y.id >= "P9U40AAE" || y.id >= "P9U41AAE" || y.id >=
				"P9U42AAE").count > 0 then false;
			}
			constraint upgradeCommercialLicensWarning_vmwareclient {
				message: "Upgrade commercial licenses cannot be sold to upgrade an Academic or Federal base license.";
				body: if thisInst.selected(VMWareClientVirtualizationProducts).filter(x => x.id >= "Q0K31AAE" || x.id >= "Q0K32AAE" || x.id >= "Q0K33AAE" || x.id >= "Q0K34AAE" || x.id >= "Q0K35AAE" || x.id >= "Q0K36AAE" || x.id >= "Q0K37AAE" || x.id
				>= "Q0K38AAE" || x.id >= "Q0K39AAE").count > 0 then false else true;
			}
			//SE - For PERT 23595
			constraint DMFrule20_info_1 {
				message: "Can be ordered standalone for existing installations with any of the 1 YR DMF BASE SKUs: R1D49AAE, R1D52AAE, or R1D55AAE";
				body:
				if thisInst.selected(RedHatEnterpriseServer).filter(x => x.id <= "R1D58AAE R1D61AAE R1D64AAE").count > 0 then false else true;
			}
		}
		//SE - For ALM 142446			19-Aug-2021
		subsystem VMwareVSAN_HC_Kit {
			choice VMWareVan_HC_Choice {
				optional: true;
				targetClass: VMwareVSAN_HC;
				choiceType: multi_select;
			}
			//SE - For ALM 142446			19-Aug-2021
			constraint vmWare_vsan_HC_war1 {
				message: "This license is for one processor and customers must order as many licenses as there are processors (sockets) that will be populated for the server.";
				body: if thisInst.selected(VMwareVSAN_HC).filter(p => p.id >= "Q2V92AAE" or p.id >= "Q2V93AAE" or p.id >= "Q2V94AAE").count > 0 then false;
			}
			constraint vmWare_vsan_HC_war2 {
				message: "Initial VMware license(s) must be purchased within 30 days of purchase of server(s).";
				body: if thisInst.selected(VMwareVSAN_HC).filter(p => p.id >= "Q2V92AAE" or p.id >= "Q2V93AAE" or p.id >= "Q2V94AAE").count > 0 then false;
			}
		}
		subsystem ContexNetSWSubsystem { //cloud
			choice ContexNetSWChoice {
				optional: true;
				targetClass: ContexNetSoftware;
				choiceType: multi_select;
			}
		}
		subsystem CloudSubsystem { //cloud	
			choice CloudSystemEnterpriseChoice {
				optional: true;
				targetClass: CloudSystemEnterprise;
				choiceType: multi_select;
			}
			choice CloudSystemFoundationChoice {
				optional: true;
				targetClass: CloudSystemFoundation;
				choiceType: multi_select;
			}
		}
		subsystem HPCloudSubsystem { //cloud	
			choice HPCloudSystemEnterpriseChoice {
				optional: true;
				targetClass: HPCloudSystemEnterprise;
				choiceType: multi_select;
			}
			choice HPCloudSystemFoundationChoice {
				optional: true;
				targetClass: HPCloudSystemFoundation;
				choiceType: multi_select;
			}
		}
		subsystem proliantSoftwareMediaKitsUpgradesSubsystem {
			choice DowngradedMediaChoice {
				optional: true;
				targetClass: DowngradedMedia;
				choiceType: single_select;
				title: "Downgraded Media";
			}
			//prolient software
			choice ProliantSoftwareAcceleratedSCSIChoice {
				optional: true;
				targetClass: ProliantSoftwareAcceleratedSCSI;
				choiceType: single_select;
				title: "Proliant Software Accelerated SCSI";
			}
			choice ProliantSoftwareHotplugAdvancePackChoice {
				optional: true;
				targetClass: ProliantSoftwareHotplugAdvancePack;
				choiceType: single_select;
				title: "Proliant Software Hotplug Advance Pack";
			}
			choice SmartArrayAdvancePackChoice {
				optional: true;
				targetClass: SmartArrayAdvancePack;
				choiceType: single_select;
				title: "Smart Array Advance Pack";
			}
			choice SASLicensingChoice {
				optional: true;
				targetClass: SASLicensing;
				choiceType: single_select;
				title: "SAS Licensing";
			}
			choice ProliantSoftwareTrackingLicenseChoice { //new menu
				optional: true;
				targetClass: ProliantSoftwareTrackingLicense;
				choiceType: single_select;
				title: "Proliant Software Tracking License";
			}
			//SE - To fix the software container issue 	26-Nov-2021			
			//			choice ProliantSoftwareMediaKitsChoice { //new menu
			//				optional: true;
			//				targetClass: ProliantSoftwareMediaKits;
			//				choiceType: multi_select; //RVL - ALM 110674 - Modify type of Selection.
			//				title: "Proliant Software Media Kits";
			//			}
			choice MediaOnlyKitsChoice { //new menu
				optional: true;
				targetClass: MediaOnlyKits;
				choiceType: single_select;
				title: "Media Only Kits";
			}
			choice CloudChoice { //new menu
				optional: true;
				targetClass: CloudOS;
				choiceType: single_select;
				title: "Cloud OS";
			}
			locationArray MicrosoftSqlApplicationChoice { //new menu
				fillerClasses: MicrosoftSqlApplication;
				rows: 4;
			}
			locationArray MicrosoftSqlCalsChoice { //new menu
				fillerClasses: MicrosoftSqlCals; //rows: 999;
				rows: 20;
			}
			constraint MSWindowsServerNotPreinstall_Rule21W {
				message: "Orderable as 1 sku per 2012 R2 on the order </br>
    						- Only with MS 2012 R2 on the order. </br>
    						- Factory integrated only</br>
   						 	- Versions have to match, 2012 R2 Standard gets Standard or Enterprise; 2012 R2 Datacenter gets Datacenter, Enterprise or Standard.  Cannot downgrade 2012 R2 Datacenter to 2012 R2 Standard.</br>
    						- Language has to match </br>

							Needs to be ordered in conjunction w/2012 R2, so needs to be added to the 'add on software tab' under proliant sw - proliant media kits & licenses";
				body: if thisInst.selected(DowngradedMedia).filter(x => x.id >= "756691-A41" or x.id >= "756692-371" or x.id >= "756691-A41").count > 0 then false;
			}
			constraint MSWindowsServerNotPreinstall_Rule22W1 {
				message: "Orderable as 1 downgrade SKU per 1 Windows Server 2019 Standard or Datacenter OS license on the order </br>
  						  - Factory integrated only </br>
    					  - Versions are important, 2019 Standard can only get Standard downgrade: 2019 Datacenter can get Datacenter or Standard downgrade. </br> 
    				      - Language has to match </br>
						  Can only be ordered in conjunction with Windows Server 2016 Standard or Datacenter.";
				body: dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11071-291 || P11072-291 ], DowngradedMedia [ P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-B21 || P11086-041 || P11086-051 || P11086-061 || P11086-071
				|| P11086-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11072-041 ], DowngradedMedia [ P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 || P11086-051 || P11086-061 || P11086-071 || P11086-291 || P11086-B2 ]);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11072-051 ], DowngradedMedia [ P11083-041 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 || P11086-041 || P11086-061 || P11086-071 || P11086-291 || P11086-B21 ]);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11072-061 ], DowngradedMedia [ P11083-041 || P11083-051 || P11083-071 || P11083-291 || P11083-B21 || P11086-041 || P11086-051 || P11086-071 || P11086-291 || P11086-B21 ]);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11072-071 ], DowngradedMedia [ P11083-041 || P11083-051 || P11072-061 || P11083-291 || P11083-B21 || P11086-041 || P11086-051 || P11086-061 || P11086-291 || P11086-B21 ]);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11072-AD1 ], DowngradedMedia [ P11083-041 || P11083-051 || P11072-061 || P11083-291 || P11083-B21 || P11086-041 || P11086-051 || P11086-061 || P11086-291 || P11086-B21 ||
				P11072-071 || P11086-071 ]);
			}
			constraint noMixMsSql { //junit
				message: "SQL Application skus cannot be mixed on the same order.";
				body: restriction (! MS_SQL [ 625457-AA1 || 625455-B21 || 625456-B21 || 625457-B21 || 625458-B21 ]);
			}
			constraint noMixMsSql1 {
				message: "SQL Application skus cannot be mixed on the same order.";
				body: dependency (MicrosoftSqlApplication [ 694474-AA1 ], MicrosoftSqlApplication [ 694474-B21 || 768859-AA1 || 768859-B21 ] = 0);
				dependency (MicrosoftSqlApplication [ 694474-B21 ], MicrosoftSqlApplication [ 694474-AA1 || 768859-AA1 || 768859-B21 ] = 0);
				dependency (MicrosoftSqlApplication [ 768859-AA1 ], MicrosoftSqlApplication [ 694474-AA1 || 694474-B21 || 768859-B21 ] = 0);
				dependency (MicrosoftSqlApplication [ 768859-B21 ], MicrosoftSqlApplication [ 694474-AA1 || 694474-B21 || 768859-AA1 ] = 0);
			}
			constraint max4ProcessorsWarning {
				message: "Microsoft SQL Standard utilizes a maximum of four processors";
				body: if thisInst.selected(MicrosoftSqlApplication).filter(y => y.id >= "768859-AA1" || y.id >= "768859-B21").count > 0 then false else true;
			}
			constraint purchasedAtCTOWarning {
				message: "This can only be purchased at the time of a CTO order.";
				body: if thisInst.selected(MicrosoftSqlApplication).filter(y => y.id >= "768860-B21" || y.id >= "841183-B21").count > 0 then false else true;
			}
			constraint purchasedWithSrv2014Warning {
				message: "Must be purchased with MS SQL Srv 2014 Std FIO Npi en SW (768859-B21)";
				body: if thisInst.selected(MicrosoftSqlApplication).filter(y => y.id >= "768860-B21").count > 0 then thisInst.selected(MicrosoftSqlApplication).filter(y => y.id >= "768859-B21").count > 0;
			}
			constraint purchasedWithSrv2014Warningnew {
				message: "841184-B21 Must be purchased with MS SQL14 Std 4 Core FIO Npi en SW (841182-B21)";
				body: if thisInst.selected(MicrosoftSqlApplication).filter(y => y.id >= "841184-B21").count > 0 then thisInst.selected(MicrosoftSqlApplication).filter(y => y.id >= "841182-B21").count > 0;
			}
			constraint purchasedWithSrv2014Warningnew2 {
				message: "841182-B21 Must be purchased along with 841184-B21 if total number of Cores (physical or Virtual) exceeds the count of the minimum 4 cores to match total number of physical or virtual cores."; //AB 02-Apr-16 for PPM ID:68897
				body: if thisInst.selected(MicrosoftSqlApplication).filter(y => y.id >= "841182-B21").count > 0 then thisInst.selected(MicrosoftSqlApplication).filter(y => y.id >= "841184-B21").count > 0;
			}
			constraint purchasedWithSrv2014Warningnew3 {
			//FR 21-Dec-15 ALM 95696 message: "min = 0, max = 1; Must be purchased along with 841184-B21 to license all physical cores on Hardware or virtual cores in the Virtual Operating System Environment (OSE).";
				message: "Max 1 qty of 841182-B21 can be purchased.";
				body: restriction (MicrosoftSqlApplication [ 841182-B21 ] <= 1);
			}
			constraint maxProcessors { //junit
				message: "This server has exceeded the number of processors for this application.";
				body: sum(thisInst.selected(Processor), 1) <= thisInst.selected(MS_SQL).get(0).iMaxProcessors || thisInst.selected(MS_SQL).isEmpty;
			}
			constraint noAppSku { //junit
				message: "This sku does not include the application.";
				body: restriction (! MS_SQL [ bContainsApplication = false ]);
			}
			constraint workWithSQL2014Warning {
				message: "Microsoft SQL CALs are only work with Microsoft SQL Server 2014 Standard Edition or previous.";
				body: if thisInst.selected(MicrosoftSqlCals).filter(y => y.id >= "768861-B21" || y.id >= "768862-B21" || y.id >= "841185-B21" || y.id >= "841186-B21" || y.id >= "841187-B21").count > 0 then false else true;
			}
			constraint workGroupEdition { //junit
				message: "Sku's 625463-B21 and 625464-B21 will only work with Microsoft SQL Server 2008 R2 Workgroup Edition.";
				body: restriction (! MS_SQL [ 625463-B21 || 625464-B21 ]);
			}
			constraint standardEdition { //junit
				message: "Skus 625461-B21 and 625462-B21 will only work with Microsoft SQL Server 2008 R2 Standard Edition.";
				body: restriction (! MS_SQL [ 625461-B21 || 625461-AA1 || 625462-B21 || 625462-AA1 ]);
			}
			constraint reqMSSQLLic {
				message: "694475-B21-Must be purchased with MS SQL Srv 2012 Std FIO Npi en SW (694474-B21)";
				body: dependency (MS_SQL [ 694474-B21 ], MS_SQL [ 694475-B21 ]);
			}
			constraint maxFourProcessorsSqlStandard { //junit
				message: "Microsoft SQL Standard utilizes a maximum of four processors.";
				body: restriction (! MS_SQL [ 625455-B21 ]);
			}
			constraint maxTwoProcessorsSqlWorkgroup { //junit
				message: "Microsoft SQL Workgroup utilizes a maximum of 2 processors.";
				body: restriction (! MS_SQL [ 625456-B21 ]);
			}
			//SE - Removed this message as per BU request		20-Jan-2022			
			//			constraint downgradeMedia { //junit
			//				message: "Downgrade Media requires Microsoft Windows Server 2008 R2 Non Preinstall or Microsoft Windows Server 2012 or 2012 R2.";
			//				body:
			//				//PM added compatibility with MS Server 2012 R2
			//				dependency (DowngradedMedia [ bDowngrade2012 = true ], MSW2008R2NonPreinstall || (MSWindows2012Server && MSWindows2012R2Server));
			//			}
			constraint DowngradeNeedsBaseStandardOption {
				message: "If Downgrade option is selected then Microsoft Windows Server Base must be selected.";
				body:
				if thisInst.selected(DowngradedMedia).filter(y => y.id = "756691-291" || y.id = "756691-371" || y.id = "756691-A41" || y.id = "756691-B21").count > 0 then thisInst.selected(MSWindows2012Server).filter(y => y.id = "871143-041" || y.id
				= "871143-051" || y.id = "871143-061" || y.id = "871143-071" || y.id = "871143-291" || y.id = "871143-B21" || y.id = "871147-041" || y.id = "871147-051" || y.id = "871147-061" || y.id = "871147-071" || y.id = "871147-291" || y.id =
				"871147-B21" || y.id = "871150-B21" || y.id = "871157-371" || y.id = "871157-A21" || y.id = "871157-DN1" || y.id = "871158-371" || y.id = "871158-A21" || y.id = "871158-DN1" || y.id = "871159-371" || y.id = "871159-A21" || y.id =
				"871159-AA1" || y.id = "871159-AB1" || y.id = "871159-DN1").count > 0;
			}
			constraint memoryNotMixDimmTypes {
				message: "SmartCache license is not applicable on P830i and P830, as they already include SmartCache enabled";
				body:
				//SE - Updated as warning messaged as per PERT 24738		17-Nov-2021
				if thisInst.selected(SmartArrayAdvancePack).filter(x => x.id >= "D7S26A").count > 0 then false;
				//if selected(SmartArrayAdvancePack).filter(x => x.id >= "D7S26A").count > 0 then thisInst.selected(ProliantStorageContSASSA).filter(x => x.id >= "698533-B21").count = 0;

			}
			//			ifEffective RV_PERT22465 {
			constraint reqControllers {
				message: "The Secure Encryption product requires the following controllers to be present in the server configuration:<br />
								Gen8 Smart Array controllers (PX3X)<br />
								Gen9 Smart Array (PX4X)<br />
								Smart HBA (HX4X) controllers<br />
								Smart Array SR controllers (EXXXx-x & PXXXx-x) on Gen10 and Gen10 Plus and Microchip Gen10 Plus controllers(SRXXX)
								";
				body:
				{
					val pSASControllers =
					"698529-B21 698530-B21 698531-B21 698532-B21 698533-B21 726736-B21 726740-B21 726793-B21 726809-B21 726821-B21 726825-B21 726897-B21 726903-B21 726907-B21 726911-B21 735062-B21 749680-B21 749974-B21 749975-B21 749976-B21 761871-B21 761872-B21 761873-B21 761874-B21 761878-B21 766205-B21 786087-B21 787840-B21 787841-B21 804326-B21 804331-B21 804338-B21 804367-B21 804394-B21 804398-B21 804405-B21 820834-B21 830824-B21 843199-B21 869079-B21 869081-B21 869083-B21 804424-B21 823852-B21 872955-B21";
					val pMezzanineControllers = "698535-B21 698536-B21 804381-B21 804428-B21"; //NL modified for ALM : 128513, 20-Mar-2019
					val pMezzanineAccelerators = "726782-B21";
					val pMicroChipControllers = "P04220-B21 P12688-B21";
					val pSecureEncryption = "D8S84A D8S85AAE C9A82AAE Q2F26AAE";
					val cSASControllers = thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= pSASControllers).count;
					val cMezzanineControllers = thisInst.selected(SASControllerMezzanineBoard).filter(x => split(x.id, "#").get(0) <= pMezzanineControllers).count;
					val cMezzanineAccelerators = thisInst.selected(MezzanineIOAcceleratorBoard).filter(x => split(x.id, "#").get(0) <= pMezzanineAccelerators).count;
					val cMicroChipControllers = thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= pMicroChipControllers).count;
					val cSecureEncryption = thisInst.selected(SecureEncryption).filter(x => split(x.id, "#").get(0) <= pSecureEncryption).count;
					if(thisInst.id != "728551-B21" && cSASControllers = 0 && cMezzanineControllers = 0 && cMezzanineAccelerators = 0 && cMicroChipControllers = 0) then cSecureEncryption = 0;
				}
			}
			//			}
			//			otherwise {
			//				constraint reqControllers {
			//					message: "The Secure Encryption product requires the following controllers to be present in the server configuration:<br />
			//								Gen8 Smart Array controllers (PX3X)<br />
			//								Gen9 Smart Array (PX4X)<br />
			//								Smart HBA (HX4X) controllers<br />
			//								Gen10 Smart Array SR controllers (EXXXx-x & PXXXx-x)";
			//					body:
			//					{
			//						val pSASControllers =
			//						"698529-B21 698530-B21 698531-B21 698532-B21 698533-B21 726736-B21 726740-B21 726793-B21 726809-B21 726821-B21 726825-B21 726897-B21 726903-B21 726907-B21 726911-B21 735062-B21 749680-B21 749974-B21 749975-B21 749976-B21 761871-B21 761872-B21 761873-B21 761874-B21 761878-B21 766205-B21 786087-B21 787840-B21 787841-B21 804326-B21 804331-B21 804338-B21 804367-B21 804394-B21 804398-B21 804405-B21 820834-B21 830824-B21 843199-B21 869079-B21 869081-B21 869083-B21 804424-B21 823852-B21 872955-B21";
			//						val pMezzanineControllers = "698535-B21 698536-B21 804381-B21 804428-B21"; //NL modified for ALM : 128513, 20-Mar-2019
			//						val pMezzanineAccelerators = "726782-B21";
			//						val pSecureEncryption = "D8S84A D8S85AAE C9A82AAE Q2F26AAE";
			//						val cSASControllers = thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= pSASControllers).count;
			//						val cMezzanineControllers = thisInst.selected(SASControllerMezzanineBoard).filter(x => split(x.id, "#").get(0) <= pMezzanineControllers).count;
			//						val cMezzanineAccelerators = thisInst.selected(MezzanineIOAcceleratorBoard).filter(x => split(x.id, "#").get(0) <= pMezzanineAccelerators).count;
			//						val cSecureEncryption = thisInst.selected(SecureEncryption).filter(x => split(x.id, "#").get(0) <= pSecureEncryption).count;
			//						if(thisInst.id != "728551-B21" && cSASControllers = 0 && cMezzanineControllers = 0 && cMezzanineAccelerators = 0) then cSecureEncryption = 0;
			//					}
			//				}
			//			}
			constraint qty1PerDriveInformation {
				message: "Secure encryption must be qty 1 per drive.";
				body: if(thisInst.selected(SecureEncryption).count - thisInst.selected(SecureEncryption).filter(p => p.id >= "C9A82AAE").count) > 0 then false else true; //|| p.id >= "Q2F26AAE"           //JEG 2017/03/17 PPM 72275    

			}
			constraint qty1PerServerC9A82AAE {
				message: "Secure encryption must be qty 1 per server regardless of the number of controllers and drives attached in the server.";
				body: if thisInst.selected(SecureEncryption).filter(p => p.id >= "C9A82AAE" || p.id >= "Q2F26AAE").count > 1 then false else true; //JEG 2017/03/17 PPM 72275

			}
			constraint approvalforsecurencription {
				message: "An application for approval (permit) while importing or exporting cryptographic facilities will be needed.";
				body: if thisInst.selected(SecureEncryption).filter(p => p.id >= "D8S84A" || p.id >= "D8S85AAE").count > 0 then false else true;
			}
			constraint rule7C9A82AAE {
				message: "Secure Encryption part number C9A8AAE is being discontinued.  Please update your orders to part number Q2F26AAE(HPE Smart Array Secure Encryption E-LTU).";
				body: if thisInst.selected(SecureEncryption).filter(p => p.id >= "C9A82AAE").count > 0 then false else true;
			}
			constraint needsActiveSLESWarning {
				message:
				"Needs an active SLES subscription with the same number of sockets. Inherits the virtual guests (physical or unlimited) from the active SLES subscription. Inherits the same level of service from the active SLES subscription.";
				body: if thisInst.selected(RedHatLinuxAddOns).filter(y => y.id >= "BD803AAE" || y.id >= "BD804AAE" || y.id >= "BD805AAE").count > 0 then false else true;
			}
			constraint needsActiveSLESWarning1 {
				message:
				"Needs an active SLES subscription with the same number of sockets. Inherits the virtual guests (physical or unlimited) from the active SLES subscription. Inherits the same level of service from the active SLES subscription.";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "M6K34A" || y.id >= "M6K34AAE").count > 0 then false else true; //ANV-reverted the change for the alm 107083

			}
			constraint suseAddOnsSocketPairInformation {
				message: "2 socket pair can be stackable";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id >= "M6K34A" || x.id >= "M6K34AAE").count > 0 then false else true; //ANV-reverted the change for the alm 107083

			}
			constraint CALpacksRule1Info {
				message: "Client Access Licences (CALs) must match the language of selected Windows Server Base OS."; // NL added for PPM: 77301 , 23-July-2018 for the rule changed.	
				body: if thisInst.selected(MSWindowsServer2012License).filter(p => p.id >= "701604-291" or p.id >= "701604-371" or p.id >= "701604-A21" or p.id >= "701604-DN1" or p.id >= "701605-291" or p.id >= "701605-371" or p.id >= "701605-A21" or
				p.id >= "701605-DN1" or p.id >= "871175-291" or p.id >= "871175-371" or p.id >= "871175-A21" or p.id >= "871175-DN1" or p.id >= "871176-291" or p.id >= "871176-371" or p.id >= "871176-A21" or p.id >= "871176-DN1" or p.id >=
				"871177-291" or p.id >= "871177-371" or p.id >= "871177-A21" or p.id >= "871177-DN1" or p.id >= "871178-291" or p.id >= "871178-371" or p.id >= "871178-A21" or p.id >= "871178-DN1" or p.id >= "871179-291" or p.id >= "871179-371" or
				p.id >= "871179-A21" or p.id >= "871179-DN1" or p.id >= "871180-291" or p.id >= "871181-371" or p.id >= "871182-A21" or p.id >= "871232-371" or p.id >= "871232-A21" or p.id >= "871232-DN1"
				//	or p.id >= "871233-371" or p.id >= "871233-A21"  or p.id >= "871233-DN1").count > 0 then false; KTH 14-July-2017 for ALM 107076
				or p.id >= "871233-371" or p.id >= "871233-A21" or p.id >= "871233-DN1"
				//SE - For PERT 24669		15-Sep-2021
				or p.id >= "P46191-AA1" or p.id >= "P46191-B21" or p.id >= "P46194-B21" or p.id >= "P46215-AA1" or p.id >= "P46215-AB1" or p.id >= "P46215-B21" or p.id >= "P46216-B21" or p.id >= "P46217-B21" or p.id >= "P46218-B21" or p.id >=
				"P46219-B21" or p.id >= "P46220-B21" or p.id >= "P46221-B21" or p.id >= "P46222-B21"
				//MS for PERT: 14472 
				or p.id >= "P11073-371" or p.id >= "P11073-A21" or p.id >= "P11073-DN1" or p.id >= "P11074-371" or p.id >= "P11074-A21" or p.id >= "P11074-DN1" or p.id >= "P11075-371" or p.id >= "P11075-A21" or p.id >= "P11075-AA1" or p.id >=
				"P11075-DN1" or p.id >= "P11076-371" or p.id >= "P11076-A21" or p.id >= "P11076-DN1" or p.id >= "P11077-371" or p.id >= "P11077-A21" or p.id >= "P11077-AA1" or p.id >= "P11077-AB1" or p.id >= "P11077-DN1" or p.id >= "P11078-371" or
				p.id >= "P11078-A21" or p.id >= "P11078-DN1" or p.id >= "P11079-B21" or p.id >= "P11080-B21" or p.id >= "P11081-B21" or p.id >= "P11082-B21").count > 0 // KTH 14-July-2017 for ALM 107076
				then thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "871136-041" or p.id >= "871136-051" or p.id >= "871136-061" or p.id >= "871136-071" or p.id >= "871136-291" or p.id >= "871136-AD1" or p.id >= "871136-B22" or p.id >=
				"871140-041" or p.id >= "871140-051" or p.id >= "871140-061" or p.id >= "871140-071" or p.id >= "871140-291" or p.id >= "871140-AD1" or p.id >= "871140-B22").count > 0 or thisInst.selected(MSWindows2012Server).filter(p => p.id >=
				"871143-041" or p.id >= "871143-051" or p.id >= "871143-061" or p.id >= "871143-071" or p.id >= "871143-291" or p.id >= "871143-B21" or p.id >= "871147-041" or p.id >= "871147-051" or p.id >= "871147-061" or p.id >= "871147-071" or
				p.id >= "871147-291" or p.id >= "871147-B21" or p.id >= "871150-041" or p.id >= "871150-051" or p.id >= "871150-061" or p.id >= "871150-071" or p.id >= "871150-291" or p.id >= "871150-B21" or p.id >= "871157-371" or p.id >=
				"871157-A21" or p.id >= "871157-DN1" or p.id >= "871158-371" or p.id >= "871158-A21" or p.id >= "871158-DN1" or p.id >= "871159-371" or p.id >= "871159-A21" or p.id >= "871159-AA1" or p.id >= "871159-AB1" or p.id >= "871159-DN1" or
				p.id >= "871166-371" or p.id >= "871166-A21" or p.id >= "871166-DN1" or p.id >= "871167-371" or p.id >= "871167-A21" or p.id >= "871167-DN1" or p.id >= "871168-371" or p.id >= "871168-A21" or p.id >= "871167-DN1"
				//MS for PERT: 14472 
				or p.id >= "P11071-291" or p.id >= "P11071-B21" or p.id >= "P11072-041" or p.id >= "P11072-051" or p.id >= "P11072-061" or p.id >= "P11072-071" or p.id >= "P11072-291" or p.id >= "P11072-AD1" or p.id >= "P11072-B21").count > 0;
			}
			constraint CALpacksRule1Info1 {
				message: "Client Access Licences (CALs) must match the language of selected Windows Server Base OS."; // NL added for PPM: 77301 , 23-July-2018 for the rule changed.	
				body: if thisInst.selected(MSWindowsServer2012License).filter(p => p.id >= "701604-291" or p.id >= "701604-371" or p.id >= "701604-A21" or p.id >= "701604-DN1" or p.id >= "701605-291" or p.id >= "701605-371" or p.id >= "701605-A21" or
				p.id >= "701605-DN1" or p.id >= "871175-291" or p.id >= "871175-371" or p.id >= "871175-A21" or p.id >= "871175-DN1" or p.id >= "871176-291" or p.id >= "871176-371" or p.id >= "871176-A21" or p.id >= "871176-DN1" or p.id >=
				"871177-291" or p.id >= "871177-371" or p.id >= "871177-A21" or p.id >= "871177-DN1" or p.id >= "871178-291" or p.id >= "871178-371" or p.id >= "871178-A21" or p.id >= "871178-DN1" or p.id >= "871179-291" or p.id >= "871179-371" or
				p.id >= "871179-A21" or p.id >= "871179-DN1" or p.id >= "871180-291" or p.id >= "871181-371" or p.id >= "871182-A21" or p.id >= "871232-371" or p.id >= "871232-A21" or p.id >= "871232-DN1"
				//	or p.id >= "871233-371" or p.id >= "871233-A21"  or p.id >= "871233-DN1").count > 0 then false; KTH 14-July-2017 for ALM 107076
				or p.id >= "871233-371" or p.id >= "871233-A21" or p.id >= "871233-DN1").count > 0 // KTH 14-July-2017 for ALM 107076
				then thisInst.selected(MSWindows2012Essentials).filter(p => p.id >= "871136-041" or p.id >= "871136-051" or p.id >= "871136-061" or p.id >= "871136-071" or p.id >= "871136-291" or p.id >= "871136-AD1" or p.id >= "871136-B22" or p.id >=
				"871140-041" or p.id >= "871140-051" or p.id >= "871140-061" or p.id >= "871140-071" or p.id >= "871140-291" or p.id >= "871140-AD1" or p.id >= "871140-B22").count > 0 or thisInst.selected(MSWindows2012Server).filter(p => p.id >=
				"871143-041" or p.id >= "871143-051" or p.id >= "871143-061" or p.id >= "871143-071" or p.id >= "871143-291" or p.id >= "871143-B21" or p.id >= "871147-041" or p.id >= "871147-051" or p.id >= "871147-061" or p.id >= "871147-071" or
				p.id >= "871147-291" or p.id >= "871147-B21" or p.id >= "871150-041" or p.id >= "871150-051" or p.id >= "871150-061" or p.id >= "871150-071" or p.id >= "871150-291" or p.id >= "871150-B21" or p.id >= "871157-371" or p.id >=
				"871157-A21" or p.id >= "871157-DN1" or p.id >= "871158-371" or p.id >= "871158-A21" or p.id >= "871158-DN1" or p.id >= "871159-371" or p.id >= "871159-A21" or p.id >= "871159-AA1" or p.id >= "871159-AB1" or p.id >= "871159-DN1" or
				p.id >= "871166-371" or p.id >= "871166-A21" or p.id >= "871166-DN1" or p.id >= "871167-371" or p.id >= "871167-A21" or p.id >= "871167-DN1" or p.id >= "871168-371" or p.id >= "871168-A21" or p.id >= "871167-DN1").count > 0;
			}
			constraint hardDriveRequiredMswindowsServer {
				message: "Hard Drive is required";
				body: dependency (MSWindows2012Server [ bIsFactoryInstalledMicrosoft = true ], HardDrive > 0);
				dependency (MSWindows2012R2Server [ bIsFactoryInstalledMicrosoft = true ], HardDrive > 0);
			}
			constraint hardDriveRequiredMswindowsServer1 {
				message: "Hard Drive is required";
				body: dependency (MSWindows2012Essentials [ P12456-291 || P12468-291 || P14349-291 || P22000-291 || P22001-291 || P58617-291 || P58618-291 || P58619-291 ], HardDrive > 0); //PRS Added NPI SKUs for PERT-15787 19 Aug 2019    //PRS Added for ALM: 129678 29 April 2019
				dependency (MSWindows2012Server [ P46155-291 || P46155-B21 ], HardDrive > 0); //SE - For PERT 24669		16-Sep-2021

			}
			constraint MSWindowsServerRule7 {
				message: "This option cannot be selected with 758959-B22 - HPE Legacy FIO Mode Setting";
				body: dependency (ProliantBIOSMode [ 758959-B22 ] > 0, MSWindows2012Server [ 871143-041 || 871143-051 || 871143-061 || 871143-071 || 871143-291 || 871143-B21 || P46155-291 || P46155-B21 //SE - Added for PERT 24669		14-Sep-2021
				//MS for PERT: 14472
				|| P11059-041 || P11059-051 || P11059-061 || P11059-071 || P11059-291 || P11059-B21 ] = 0 and MSWindows2012Essentials [ P11071-291 || P11071-B21 ] = 0 and MSWindows2012Essentials [ 871136-041 || 871136-051 || 871136-061 || 871136-071 ||
				871136-291 || 871136-AD1 || 871136-B22 ] = 0); //PRS Added SKUs for PERT-14555 01 Mar 2019

			}
			constraint ProliantSoftwareMediaKitsRule112 {
				message: "Software not factory installed.";
				body: if thisInst.selected(MSWindows2012Essentials).filter(x => x.id >= "P12457-291" || x.id >= "P12458-291" || x.id >= "P12466-291" || x.id >= "P12467-291" || x.id >= "P50011-291" || x.id >= "P50012-291" || x.id >= "P50014-291" ||
				x.id >= "P50015-291" || x.id >= "P50017-291" || x.id >= "P50018-291" || x.id >= "P50020-291" || x.id >= "P50021-291").count > 0 then false else true;

				//PRS Added P12466-291 & P12467-291 for PERT-14596 19 April 2019		//SE - added NPI softwares for PERT 24824		12-Jan-2022
				//SE - added NPI softwares for PERT 24866		14-Feb-2022

			}
			constraint ProliantSoftwareMediaKitsRule10 {
				message:
				"Needs an active SLES subscription with the same number of sockets. </br>Inherits the virtual guests (physical or unlimited) from the active SLES subscription. </br>Inherits the same level of service from the active SLES subscription.";
				body: if thisInst.selected(ProliantSoftwareMediaKits).filter(x => x.id >= "Q5T84A" || x.id >= "Q5T85A").count > 0 then false else true;
			}
			constraint ProliantSoftwareMediaKitsRule11 {
				message: "SUSE doesn't provide ARM processor on Moonshot platforms support at this time.";
				body: if thisInst.selected(ProliantSoftwareMediaKits).filter(x => x.id >= "Q5T84A" || x.id >= "Q5T85A").count > 0 then false else true;
			}
			constraint ProliantSoftwareMediaKitsRule12 {
				message: "2 socket pair can be stackable.";
				body: if thisInst.selected(ProliantSoftwareMediaKits).filter(x => x.id >= "Q5T84A" || x.id >= "Q5T85A").count > 0 then false else true;
			}
			ifEffective KES_VAL {
				constraint hideOCCProducts {
					message: "";
					body: dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || XL230KG10 || BL460CG10 || BL460CG10OEM || DL360Gen10 || DL360Gen10OEM || DL380Gen10 || DL380Gen10OEM || DL560Gen10 || MicroServerG10 || M510Cartridge || M710xCartridge ||
					Synergy480Gen10 || Synergy480Gen10OEM || Synergy660Gen10 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM || Synergy660Gen10), SmartArrayAdvancePack [ D7S27A ] = 0);
				}
			}
			otherwise {
				constraint hideOCCProducts {
					message: "";
					body: dependency (targetEnv ("ezc", "ipcs") and (XL1x0Node || Apollo4200Gen9 || xl450gen9 || XL230aG9 || XL230KG10 || XL250aG9 || XL260AGen9 || XL270dG9 || XL730fG9Server || XL750fG9 || BL460CG10 || BL460CG10OEM || BL460CG9 ||
					BL460CGEN9OEM || BL660CGen9 || DL120G9 || DL160G9 || DL180G9 || DL20G9 || DL20G9OEM || DL360Gen10 || DL360Gen10OEM || DL360G9 || DL360G9OEM || DL380Gen10 || DL380Gen10OEM || DL380G9 || DL380G9OEM || DL385pGen8 || DL560Gen10 ||
					DL560G9 || DL580G9 || DL60G9 || DL80G9 || ECML110G9 || MicroServerG10 || MicroServerGen8 || ML10Gen9 || ML110Gen9 || ML150Gen9 || ML30Gen9 || ML350Gen9 || M510Cartridge || M710xCartridge || Synergy480Gen10 || Synergy480Gen10OEM ||
					Synergy480Gen9 || Synergy620Gen9 || Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9 || M700pCartridge || M710xCartridge || Synergy12000 || Synergy480Gen10 || Synergy480Gen10OEM || Synergy480Gen9 || Synergy620Gen9 ||
					Synergy660Gen10 || Synergy660Gen9 || Synergy680Gen9 || WS460CG9), SmartArrayAdvancePack [ D7S27A ] = 0);
				}
			}
			constraint smartCacheRequiresCard {
				message: "SmartCache can be ordered if Smart Array Controller P420i, P420, P421, P430, P431, P440ar, P440, P441, P542D, P408i-a, P408e-p, P408i-p, P408e-m, or P416ie-m is present.";
				body: dependency (! ProliantStorageContSASSA || ProliantStorageContSASSA [ 726911-B21 || 749976-B21 || 761873-B21 || 726757-B21 || 726907-B21 || 761878-B21 || 726809-B21 || 787840-B21 || 787841-B21 ], SmartArrayAdvancePack [ D7S26A ||
				D7S27A || D7S27AAE ] = 0); //dependency(ProliantStorageContSASSA=0,SmartArrayAdvancePack[D7S26A || D7S27A || D7S27AAE]=0);

			}
			constraint MSWindowsServernpi_Rule19W {
			//RV 22-Jan-2010 PERT 17895 message: "Server 2016 Datacenter edition and Server 2019 Datacenter edition. Not available for Windows Server 2016 Standard edition neither for Windows Server 2019 Standard edition.";
				message: "Can only be ordered along with Windows Server 2019 Datacenter edition. Not available for Windows Server 2019 Standard edition.";
				//PRS removed Re from the text as per BU request 31 July 2019
				//"Re Server 2016 Datacenter edition and Server 2019 Datacenter edition.  Not available for Windows Server 2016 Standard edition neither for Windows Server 2019 Standard edition..";
				body: if thisInst.selected(DowngradedMedia).filter(x => x.id >= "756692-291" or x.id >= "756692-371" or x.id >= "756692-B21" or x.id >= "P00493-041" or x.id >= "P00493-051" or x.id >= "P00493-061" or x.id >= "P00493-071" or x.id >=
				"P00493-291" or x.id >= "P00493-B21").count > 0 then false else true;
				//	body: if thisInst.selected(DowngradedMedia).count > 0 then false else true;			

			}
			ifEffective SE_PERT_24946 { //SE - Added below warning constraints as per PERT 24946(Tracker ID 1016300)		31-Jan-2022
				constraint MSWindowsServernpi_Rule23 {
					message: "Can only be ordered along with Windows Server 2019/2022 Datacenter edition. Not available for Windows Server 2019/2022 Standard edition.";
					body: if thisInst.selected(DowngradedMedia).filter(x => x.id >= "P11086-041" or x.id >= "P11086-051" or x.id >= "P11086-061" or x.id >= "P11086-071" or x.id >= "P11086-291" or x.id >= "P11086-B21").count > 0 then false else true;
				}
				constraint MSWindowsServernpi_Rule24 {
					message: "Orderable as 1 downgrade SKU per 1 Windows Server 2019/2022  Standard or Datacenter OS license on the order</br>

						- Factory integrated only</br>
						- Versions are important, 2019 /2022 Standard can only get Standard downgrade: 2019/2022 Datacenter can get Datacenter or Standard downgrade.</br>
						- Language has to match </br>
						
						Can only be ordered in conjunction with Windows Server 2019 /2022 Standard or Datacenter.";
					body: if thisInst.selected(DowngradedMedia).filter(x => x.id >= "P11083-041" or x.id >= "P11083-051" or x.id >= "P11083-061" or x.id >= "P11083-071" or x.id >= "P11083-291" or x.id >= "P11083-B21" or x.id >= "P11086-041" or x.id >=
					"P11086-051" or x.id >= "P11086-061" or x.id >= "P11086-071" or x.id >= "P11086-291" or x.id >= "P11086-B21").count > 0 then false else true;
				}
			}

			//SE - For PERT 24669		14-Sep-2021    
			constraint MSWindowsServernpi_Rule26 {
				message: "Can only be ordered along with Windows Server 2022 Datacenter edition. Not available for Windows Server 2022 Standard edition";
				body: if thisInst.selected(DowngradedMedia).filter(x => x.id >= "P45879-041" or x.id >= "P45879-051" or x.id >= "P45879-061" or x.id >= "P45879-071" or x.id >= "P45879-291" or x.id >= "P45879-B21").count > 0 then false else true;
			}
			ifEffective PRS_PERT_26279 {  //PRS Removed P58617-291 P58618-291 P58619-291 for PERT-26279 12-Aug-2022
			constraint MSWindowsServernpi_Rule27 {
				message: "Orderable as 1 downgrade SKU per 1 Windows Server 2022 Standard or Datacenter OS license on the order<br>
						- Factory integrated only<br>
						- Versions are important, 2022 Standard can only get Standard downgrade: 2022 Datacenter can get Datacenter or Standard downgrade.<br>
						- Language has to match <br>
						Can only be ordered in conjunction with Windows Server 2022 Standard or Datacenter.";
				body: if thisInst.selected(DowngradedMedia).filter(x => x.id >= "P45879-041" or x.id >= "P45879-051" or x.id >= "P45879-061" or x.id >= "P45879-071" or x.id >= "P45879-291" or x.id >= "P45879-B21" or x.id >= "P45862-041" or x.id >=
				"P45862-051" or x.id >= "P45862-061" or x.id >= "P45862-071" or x.id >= "P45862-291" or x.id >= "P45862-B21").count > 0 then false else true;
			}	
			}otherwise {
			constraint MSWindowsServernpi_Rule27 {
				message: "Orderable as 1 downgrade SKU per 1 Windows Server 2022 Standard or Datacenter OS license on the order<br>
						- Factory integrated only<br>
						- Versions are important, 2022 Standard can only get Standard downgrade: 2022 Datacenter can get Datacenter or Standard downgrade.<br>
						- Language has to match <br>
						Can only be ordered in conjunction with Windows Server 2022 Standard or Datacenter.";
				body: if thisInst.selected(DowngradedMedia).filter(x => x.id >= "P45879-041" or x.id >= "P45879-051" or x.id >= "P45879-061" or x.id >= "P45879-071" or x.id >= "P45879-291" or x.id >= "P45879-B21" or x.id >= "P45862-041" or x.id >=
				"P45862-051" or x.id >= "P45862-061" or x.id >= "P45862-071" or x.id >= "P45862-291" or x.id >= "P45862-B21" or x.id >= "P58617-291" or x.id >= "P58618-291" or x.id >= "P58619-291").count > 0 then false else true;
			}
			}
			/* SE - For ALM 135541  2-Apr-2020
			constraint MSWindowsServernpi_Rule19W1 {
				message: "Can only be ordered along with Windows Server 2019 Datacenter edition. Not available for Windows Server 2019 Standard edition.";
				body: if thisInst.selected(DowngradedMedia).filter(p => p.id >= "P11083-041" or p.id >= "P11083-051" or p.id >= "P11083-061" or p.id >= "P11083-071" or p.id >= "P11083-291" or p.id >= "P11083-B21").count > 0 then
				thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P11059-041" or p.id >= "P11059-051" or p.id >= "P11059-061" or p.id >= "P11059-071" or p.id >= "P11059-291" or p.id >= "P11059-B21" or p.id >= "P11060-041" or p.id >=
				"P11060-051" or p.id >= "P11060-061" or p.id >= "P11060-071" or p.id >= "P11060-291" or p.id >= "P11060-B21" or p.id >= "P11064-371" or p.id >= "P11064-A21" or p.id >= "P11064-DN1" or p.id >= "P11065-371" or p.id >= "P11065-A21" or
				p.id >= "P11065-DN1" or p.id >= "P11066-371" or p.id >= "P11066-A21" or p.id >= "P11066-AA1" or p.id >= "P11066-AB1" or p.id >= "P11066-DN1").count > 0;
			} */
//SE - For ALM 135541
			constraint MSWindowsServerDowngrade_Rule24_warning {
				message: "Orderable as 1 downgrade SKU per 1 Windows Server 2019 Standard or Datacenter OS license on the order</br>
                          - Factory integrated only</br>
                          -  Versions are important, 2019 Standard can only get Standard downgrade: 2019 Datacenter can get Datacenter or Standard downgrade.</br> 
                          - Language has to match </br>
                          Can only be ordered in conjunction with Windows Server 2019  Standard or Datacenter.";
				body: if thisInst.selected(DowngradedMedia).filter(x => split(x.id, "#").get(0) <= "P11083-041 P11083-051 P11083-061 P11083-071 P11083-291 P11083-B21 P11086-041 P11086-051 P11086-061 P11086-071 P11086-291 P11086-B21").count > 0 then
				false;
			}
			constraint MSWindowsServernpi_Rule19WDC {
				message: "Can only be ordered along with Windows Server 2019 Datacenter edition. Not available for Windows Server 2019 Standard edition.";
				body: if thisInst.selected(DowngradedMedia).filter(p => p.id >= "P11086-041" or p.id >= "P11086-051" or p.id >= "P11086-061" or p.id >= "P11086-071" or p.id >= "P11086-291" or p.id >= "P11086-B21").count > 0 then
				thisInst.selected(MSWindows2012Server).filter(p => p.id >= "P11063-041" or p.id >= "P11063-051" or p.id >= "P11063-061" or p.id >= "P11063-071" or p.id >= "P11063-291" or p.id >= "P11063-B21" or p.id >= "P11067-371" or p.id >=
				"P11067-A21" or p.id >= "P11067-DN1" or p.id >= "P11068-371" or p.id >= "P11068-A21" or p.id >= "P11068-DN1" or p.id >= "P11069-371" or p.id >= "P11069-A21" or p.id >= "P11069-DN1").count > 0;
			}
			constraint MSWindowsServerRule8 {
				message: "Windows Server Base licenses: Min 0 / Max 1";
				body: restriction (MSWindows2012Server [ 755997-201 || 755997-291 || 755997-371 || 755997-A41 || 755997-B21 || 755998-201 || 755998-291 || 755998-371 || 782520-B21 || 782520-371 || 782520-291 || 782520-201 || 755998-B21 || 755996-B21
				|| 755996-371 || 755996-291 || 755996-201 || 871143-B21 || 871143-291 || 871143-071 || 871143-061 || 871147-051 || 871147-041 || 871147-041 || 871147-051 || 871147-061 || 871147-071 || 815868-B21 || 871147-291 || 871147-B21 ||
				871150-041 || 871150-051 || 871150-061 || 871150-071 || 871150-291 || 871150-B21 || 871143-041 || 871143-051 || P45916-291 || P45916-B21 || P46005-291 || P46005-B21 || P46155-291 || P46155-B21 //SE - Added NPI for PERT 24669		14-Sep-2021				
				//MS for PERT: 14472
				|| P11059-041 || P11059-051 || P11059-061 || P11059-071 || P11059-291 || P11059-B21 || P11060-041 || P11060-051 || P11060-061 || P11060-071 || P11060-291 || P11060-B21 || P11063-041 || P11063-051 || P11063-061 || P11063-071 ||
				P11063-291 || P11063-B21 ] <= 1);
			}
			constraint MSWindowsServerNotPreinstall_Rule22W {
			// 22-Jan-2019 PERT 17895 Replced with new message Orderable as 1 downgrade SKU per 1 Windows Server 2016 or 2019 Standard or Datacenter OS license on the order
			//Versions are important, 2016 or 2019 Standard can only get Standard downgrade: 2016 or 2019 Datacenter can get Datacenter or Standard downgrade.
				message: "Orderable as 1 downgrade SKU per 1 Windows Server 2019 Standard or Datacenter OS license on the order
                          - Factory integrated only
                          -  Versions are important, 2019 Standard can only get Standard downgrade: 2019 Datacenter can get Datacenter or Standard downgrade. 
                          - Language has to match 
                          Can only be ordered in conjunction with Windows Server 2019  Standard or Datacenter.";
				body: dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-041 || 871140-041 || P11072-041 ], DowngradedMedia [ 756691-291 || 756691-371 || 756691-A41 || 756691-B21 || 756692-291 || 756692-371 || 756692-B21 || P00492-021
				|| P00492-291 || P00492-B21 || P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-051 || 871140-051 || P11072-051 ], DowngradedMedia [ 756691-291 || 756691-371 || 756691-A41 || 756692-291 || 756692-371 || P00492-021 || P00492-291 || P00492-B21 ||
				P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-061 || 871140-061 || P11072-061 ], DowngradedMedia [ 756691-291 || 756691-371 || 756691-A41 || 756692-291 || 756692-371 || P00492-021 || P00492-291 || P00492-B21 ||
				P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-071 || 871140-061 || P11072-071 ], DowngradedMedia [ 756691-291 || 756691-371 || 756691-A41 || 756692-291 || 756692-371 || P00492-021 || P00492-291 || P00492-B21 ||
				P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-AD1 || 871140-AD1 || P11072-AD1 ], DowngradedMedia [ 756691-291 || 756691-A41 || 756691-B21 || 756692-291 || 756692-B21 || P00492-021 || P00492-291 || P00492-B21 ||
				P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ 871136-B22 || 871140-B22 ], DowngradedMedia [ 756691-291 || 756691-A41 || 756692-291 || P00492-021 || P00492-291 || P00492-B21 || P00493-041 || P00493-051 || P00493-061 ||
				P00493-071 || P00493-291 || P00493-B21 || P11083-041 || P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11072-291 ], DowngradedMedia [ P00492-021 || P00492-291 || P00492-B21 || P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 ||
				P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
				dependency (targetEnv ("oca") && MSWindows2012Essentials [ P11072-B21 ], DowngradedMedia [ P00492-021 || P00492-291 || P00492-B21 || P00493-041 || P00493-051 || P00493-061 || P00493-071 || P00493-291 || P00493-B21 || P11083-041 ||
				P11083-051 || P11083-061 || P11083-071 || P11083-291 || P11083-B21 ] = 0);
			}
			constraint DowngradeNeedsBaseDatacenterOption {
				message: "Can only be ordered along with Windows Server 2016 Datacenter edition and Windows Server 2019 Datacenter edition.<br>
                          Not available for Windows Server 2016 Standard edition neither for Windows Server 2019 Standard edition.";
//"If Downgrade option is selected then Microsoft Windows Server Base must be selected.";
				body:
				if thisInst.selected(DowngradedMedia).filter(y => y.id = "756692-291" || y.id = "756692-371" || y.id = "756692-B21" || y.id = "P00493-041" || y.id = "P00493-051" || y.id = "P00493-061" || y.id = "P00493-071" || y.id = "P00493-291" ||
				y.id = "P00493-B21").count > 0 then thisInst.selected(MSWindows2012Server).filter(y => y.id = "871150-041" || y.id = "871150-051" || y.id = "871150-061" || y.id = "871150-071" || y.id = "871150-291" || y.id = "871150-B21" || y.id =
				"871166-371" || y.id = "871166-A21" || y.id = "871166-DN1" || y.id = "871167-371" || y.id = "871167-A21" || y.id = "871167-DN1" || y.id = "871168-371" || y.id = "871168-A21" || y.id = "871168-DN1" || y.id = "P11063-041" || y.id =
				"P11063-051" || y.id = "P11063-061" || y.id = "P11063-071" || y.id = "P11063-291" || y.id = "P11063-B21" || y.id = "P11067-371" || y.id = "P11067-A21" || y.id = "P11067-DN1" || y.id = "P11068-371" || y.id = "P11068-A21" || y.id =
				"P11068-DN1" || y.id = "P11069-371" || y.id = "P11069-A21" || y.id = "P11069-DN1").count > 0;
			}
			constraint SuseAddOnRule11W {
				message: "SUSE doesn't provide ARM processor on Moonshot platforms support at this time";
				body: if thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(y => y.id >= "M6K34A" || y.id >= "M6K34AAE").count > 0 then false;
			}
			constraint maxquantity {
				message: "Only one SmartCache license can be ordered per server";
				body: restriction (SmartArrayAdvancePack [ D7S26A ] <= 1);
			}
			constraint requiresharddrive {
				message: "HPE Proliant Gen8, Gen9, Gen10 or Gen10 Plus Supported HDD's must be selected.";
				body: if thisInst.selected(SmartArrayAdvancePack).count > 0 then thisInst.selected(ProliantHardDrive).count > 0;
			}
			//SE - Added this info as per PERT 24738		17-Nov-2021
			constraint smartcache_info {
				message: "For use with 1GB, 2GB or 4GB FBWC modules.";
				body: if thisInst.selected(SmartArrayAdvancePack).count > 0 then false;
			}
			constraint SmartCacheRule6Info {
				message: "Update to last ACU version to get HPE SmartCache. ";
				body: if thisInst.selected(SmartArrayAdvancePack).filter(p => p.id >= "D7S26A" or p.id >= "D7S27A" or p.id >= "D7S27AAE").count > 0 then false;
			}
			constraint secure_encription_war {
				message: "This product requires the following controllers to be present in the server configuration: Gen8 Smart Array controllers (PX3X), 
						Gen9 Smart Array (PX4X) and Smart HBA (HX4X) controllers,   Smart Array SR controllers (EXXXx-x & PXXXx-x) on Gen10 and Gen10 Plus 
						and Microchip Gen10 Plus controllers(SRXXX)";
				body: if thisInst.selected(SecureEncryption).filter(p => p.id >= "Q2F26AAE").count > 0 then false else true; //JEG 2017/03/17 PPM 72275

			}
		}
		def rule2CrayClusterStorDataServices (): string[] = {
		//DL325 -> P15535-B21, P18606-B21, P18608-B21
		//DL385 -> P14278-B21, P14279-B21, P14280-B21, P14281-B21
			val numberOfServers = thisConfig.getInstancesOfModel("DL325G10Plus").filter(x => x.id = "P18608-B21").count + thisConfig.getInstancesOfModel("DL325G10Plus").filter(x => x.id = "P18606-B21").count +
			thisConfig.getInstancesOfModel("DL325G10Plus").filter(x => x.id = "P15535-B21").count + thisConfig.getInstancesOfModel("DL385G10Plus").filter(x => x.id = "P14278-B21").count + thisConfig.getInstancesOfModel("DL385G10Plus").filter(x =>
			x.id = "P14279-B21").count + thisConfig.getInstancesOfModel("DL385G10Plus").filter(x => x.id = "P14280-B21").count + thisConfig.getInstancesOfModel("DL385G10Plus").filter(x => x.id = "P14281-B21").count;
			if numberOfServers > 0 then expanderString ("R4X17AA", numberOfServers);
		}
		subsystem CraySoftwareSubsystem { //Cray Sofwtare
			choice CraySystemManagementChoice {
				optional: true;
				targetClass: CraySystemManagement;
				choiceType: multi_select;
			}
			choice CrayClusterSDataServicesChoice {
				optional: true;
				targetClass: CrayClusterSDataServices;
				choiceType: multi_select;
			}
			//GRE Pert 20165
			//			part getCDS: triggerConsequentialSelectionNoRestore {
			//                string consequentialSelectionFunc: "rule2CrayClusterStorDataServices";, boolean allowUserToOverride: true;, int priority: 3;
			//            }
			constraint rule4showValidCDS {
				message: "If the total number of servers for the ClusterStor Data Services is <= 8, (Min = 3), then the following LTU subscriptions are available to select from:
							-Cray CDS Tier1 1-Year Subscription E-LTU [R4X27AAE]
							-Cray CDS Tier1 3-Year Subscription E-LTU [R4X28AAE]
							-Cray CDS Tier1 5-Year Subscription E-LTU [R4X29AAE]
							
							Qty. of LTU subscriptions required = total number of servers for the ClusterStor Data Services configuration.";
				body: dependency (CrayClusterSDataServices [ R4X17AA ] >= 3 and CrayClusterSDataServices [ R4X17AA ] <= 8, CrayClusterSDataServices [ R4X30AAE || R4X31AAE || R4X32AAE || R4X33AAE || R4X34AAE || R4X35AAE ] = 0);
				//dependency(CrayClusterSDataServices[R4X17AA] >= 9 and CrayClusterSDataServices[R4X17AA] <= 20, CrayClusterSDataServices[ R4X27AAE || R4X28AAE || R4X29AAE || R4X33AAE || R4X34AAE || R4X35AAE ] = 0);
				//dependency(CrayClusterSDataServices[R4X17AA] >= 21 , CrayClusterSDataServices[  R4X27AAE || R4X28AAE || R4X29AAE || R4X30AAE || R4X31AAE || R4X32AAE ] = 0);
				//					DL325G10Plus	 DL385G10Plus
				//				R4X27AAE || R4X28AAE || R4X29AAE || R4X30AAE || R4X31AAE || R4X32AAE || R4X33AAE || R4X34AAE || R4X35AAE

			}
			constraint rule5showValidCDS {
				message: "If the total number of servers for the ClusterStor Data Services is >= 9 & <= 20, then the following LTU subscriptions are available to select from:
							
							-Cray CDS Tier2 1-Year Subscription E-LTU [R4X30AAE]
							-Cray CDS Tier2 3-Year Subscription E-LTU [R4X31AAE]
							-Cray CDS Tier2 5-Year Subscription E-LTU [R4X32AAE]
							
							Qty. of LTU subscriptions required = total number of servers for the ClusterStor Data Services configuration.";
				body:
				//dependency(CrayClusterSDataServices[R4X17AA] >= 3 and CrayClusterSDataServices[R4X17AA] <=  8, CrayClusterSDataServices[ R4X30AAE || R4X31AAE || R4X32AAE || R4X33AAE || R4X34AAE || R4X35AAE ] = 0);
				dependency (CrayClusterSDataServices [ R4X17AA ] >= 9 and CrayClusterSDataServices [ R4X17AA ] <= 20, CrayClusterSDataServices [ R4X27AAE || R4X28AAE || R4X29AAE || R4X33AAE || R4X34AAE || R4X35AAE ] = 0);
				//dependency(CrayClusterSDataServices[R4X17AA] >= 21 , CrayClusterSDataServices[  R4X27AAE || R4X28AAE || R4X29AAE || R4X30AAE || R4X31AAE || R4X32AAE ] = 0);

			}
			constraint rule6showValidCDS {
				message: "If the total number of servers for the ClusterStor Data Services is >= 21, then the following LTU subscriptions are available to select from:
							
							-Cray CDS Tier3 1-Year Subscription E-LTU [R4X33AAE]
							-Cray CDS Tier3 3-Year Subscription E-LTU [R4X34AAE]
							-Cray CDS Tier3 5-Year Subscription E-LTU [R4X35AAE]
							
							Qty. of LTU subscriptions required= 1.";
				body:
				//dependency(CrayClusterSDataServices[R4X17AA] >= 3 and CrayClusterSDataServices[R4X17AA] <=  8, CrayClusterSDataServices[ R4X30AAE || R4X31AAE || R4X32AAE || R4X33AAE || R4X34AAE || R4X35AAE ] = 0);
				//dependency(CrayClusterSDataServices[R4X17AA] >= 9 and CrayClusterSDataServices[R4X17AA] <= 20, CrayClusterSDataServices[ R4X27AAE || R4X28AAE || R4X29AAE || R4X33AAE || R4X34AAE || R4X35AAE ] = 0);
				dependency (CrayClusterSDataServices [ R4X17AA ] >= 21, CrayClusterSDataServices [ R4X27AAE || R4X28AAE || R4X29AAE || R4X30AAE || R4X31AAE || R4X32AAE ] = 0);
			}
			constraint CDSnoMix {
				message: "Cannot mix between CDS Subscription E-LTU";
				body: //restriction (CrayClusterSDataServices[R4X27AAE || R4X28AAE || R4X29AAE || R4X30AAE || R4X31AAE || R4X32AAE || R4X33AAE || R4X34AAE || R4X35AAE].noMix);
				selected(CrayClusterSDataServices).filter(x => x.id = R4X27AAE or x.id = R4X28AAE or x.id = R4X29AAE or x.id = R4X30AAE or x.id = R4X31AAE or x.id = R4X32AAE or x.id = R4X33AAE or x.id = R4X34AAE or x.id = R4X35AAE).noMix;
			}
			constraint rule1Slingshot {
				message: "Min = 0 // Max = 1, per server";
				body: restriction (SlingshotSoftware [ R6M77AAE ] < 2);
				restriction (SlingshotSoftware [ R6M78A ] < 2);
			}
			choice CrayLinuxEnvironmentChoice {
				optional: true;
				targetClass: CrayLinuxEnvironment;
				choiceType: multi_select;
			}
			choice CrayProgrammingEnvironmentChoice {
				optional: true;
				targetClass: CrayProgrammingEnvironment;
				choiceType: multi_select;
			}
			choice SlingshotChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: SlingshotSoftware;
			}
		}
		//SE - Added for PERT 24687		14-Oct-2021
		subsystem DeterminedAISubsystem {
			choice DeterminedAIChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: DeterminedAI;
			}
			ifEffective SE_PERT_24824 { //SE - Added warning for PERT 24824		17-Jan-2022
				constraint determined_AI_warning {
					message: "Please contact hpc-ai-software@hpe.com ( mailto:hpc-ai-software@hpe.com ) in order to proceed with the order process.";
					body: if thisInst.selected(DeterminedAI).filter(x => split(x.id, "#").get(0) <= "R8W23AAE R8W26AAE R8W27AAE R9H29AAE R9Y51AAE R9Y52AAE").count > 0 then false;
				}
			}
			//SE - Added product filter to avoid the unsupported SKU's for PERT 25043
			
			ifEffective SE_PERT_25168 { //Added capacity text as a info message as per BU conformation for PERT 25149
				constraint determined_AI_capacity_info {
					message: "If customer plans on using the Open-Source version of Determined AI, then this tracking SKU (R9Q12AAE) is required";
					body: false;  //if thisInst.selected(DeterminedAI).filter(x => split(x.id, "#").get(0) <= "R8W23AAE R8W26AAE R8W27AAE R9H29AAE R9Y51AAE R9Y52AAE").count > 0 then false;
				}
			}
		}
		subsystem alaCarteFESubsystem { // APM 1/27/12//EC excluding ApolloChassis as it was created under Servers instead of enclosures
			constraint checkFECategoryServer {
				message: "Only $a{sServerFEAlaCartes} Factory Express Ala Carte services are available for servers.";
				body:
				//thisInst.alaCarteFESubsystem.selected(SubItemedACFEServices).filterByAttribute(bFEServer, false).count = 0
				if ! thisConfig.getInstancesOfModel("Apollo2000r2x00ChassisG10").isEmpty then true else if ! thisConfig.getInstancesOfModel("XL450X0CHASSISG10").isEmpty then true else if ! thisConfig.getInstancesOfModel("K6000Chassis").isEmpty then
				true else thisInst.alaCarteFESubsystem.selected(SubItemedACFEServices).filterByAttribute(bFEServer, false).count = 0;
			}
		} //subsystem	

	}

	//LAW - class appears orphaned
	//	//GRE creating CloudServers for PPM 67468
	//	class CloudServers extends ProductModelISS {
	//	}

	//GRE creating SynergyStorageModule for PPM 68199	
	class PciASlot extends PciSlot {
		token tPciType: PCI_A;
		int iBusWidth: 16;
		string label: "PCI A";
		string sPciType: "AROC";
	}
	//ALOM card slot
	class PciArocSlot extends PciSlot {
		token tPciType: PCI_AR;
		int iBusWidth: 16;
		string label: "PCI AROC";
		string sPciType: "AROC";
	}
	class PciBrocSlot extends PciSlot {
		token tPciType: PCI_BR;
		int iBusWidth: 16;
		string label: "PCI BROC";
		string sPciType: "BROC";
	}
	//TD OCP slot
	class PciOCPSlot extends PciSlot {
		token tPciType: PCI_OCP;
		int iBusWidth: 16;
		string label: "OCP Slot";
		string sPciType: "OCP";
	}
	//TD don't use
	//	class PciDBSlot extends PciSlot {
	//		token tPciType: PCI_DB;
	//		string label: "PCI Double wide";
	//		
	//		string sPciType: "DB";
	//	}
	class MediaModule extends PciSlot {
		token tPciType: Media_Module;
		string label: "Media Module";
		string sPciType: "Media_Module";
	}
	part mediaModule MediaModule {
		string label: "Media Module";
	}
	// flom for riser
	part pcieAp0x8Slot PciASlot {
		int iBusWidth: 8;
		string label: "Flex LOM";
	}
	//LAW - Slot types
	part pciE1p0x8Slot PciESlot {
		token tPciVersion: 1p0;
		int iBusWidth: 8;
		string sPciVersion: "1p0";
		
	}
	//TD PCIe 2.0 x16 (connector), x16 (link), Full Length, Full Height
	part pciE2p0x16Slot PciESlot { //Happens to match default
		string label: "PCI Express 2P, 0x16";
	}

	// APM 10/16/11 Needed for DL385G7
	part pciE2p0x16HalfLengthLowProfileSlot PciESlot {
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: LP;
		string sLength: "HL";
		string sHeight: "LP";
		string label: "PCI Express 2P 0x16, Half length.";
	}

	//TD  PCIe 2.0 x16 (connector), x16 (link), Half Length, Full Height
	part pciE2p0x16HalfLengthFullHeight PciESlot {
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: FH;
		string sLength: "HL";
		string sHeight: "FH";
		string label: "PCI Express 2P 0x16, Half Length";
	}
	part pciE3p0x16HalfLengthFullHeight PciESlot {
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: FH;
		string sLength: "HL";
		string sHeight: "FH";
		//DR ALM 96748	string label: "PCI Express 3P 0x8, Half Length";

	}
	//SS  PCIe 3.0 x18 (connector), x8 (link), Half Length, Full Height
	part pciE3p0x8HalfLengthFullHeight PciESlot {
		int iBusWidth: 8;
		token tLength: HL;
		token tHeight: FH;
		string sLength: "HL";
		string sHeight: "FH";
		//DR ALM 96748	string label: "PCI Express 3P 0x8, Half Length";

	}
	part pciE2p0x8Slot PciESlot {
		int iBusWidth: 8;
	}
	//TD don't use
	//	part pciEGraphics PciDBSlot {
	//		token tPciType: PCI_DB;
	//		
	//		string sPciType: "DB";
	//	}
	// APM 10/16/11 Needed for DL385G7
	part pciE2p0x8HalfLengthSlot PciESlot {
		int iBusWidth: 8;
		token tLength: HL;
		string sLength: "HL";
		string label: "PCI Express, 2P, 0x8, Half Length";
	}
	part pciE2p0x4Slot PciESlot {
		int iBusWidth: 4;
	}
	part pciE2p0x4HalfLengthSlot PciESlot {
		int iBusWidth: 4;
		token tLength: HL;
		string sLength: "HL";
		string label: "PCI Express 2P, 0x4 Half Length";
	}

	// APM 10/16/11 Needed for DL385G7
	part pciE2p0x8HalfLengthLowProfileSlot PciESlot {
		int iBusWidth: 8;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)		
		string sLength: "HL";
		string sHeight: "LP";

	}

	// GK 11/16/11 Needed for DL380G7
	part pciE2p0x4HalfLengthLowProfileSlot PciESlot {
		int iBusWidth: 4;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)	
		string sLength: "HL";
		string sHeight: "LP";	

	}
	part pciE3p0x16Slot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 16;
		//string label: "PCI x16";
		string label: "PCI Express 3P 0x16, Full Length/Height";
		string sPciVersion: "3p0";
	}
	part pciE3p0x8Slot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 8;
		//string label: "PCI x8";
		string label: "PCI Express 3P 0x8, Full Length/Height";
		string sPciVersion: "3p0";
	}

	//TD PCIe 3.0 x8 x8 half length half height
	part pciE3p0x8hlhhSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 8;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x16, Half Length, Low Profile";
		string sLength: "HL";
		string sHeight: "LP";
		string sPciVersion: "3p0";
	}
	// PCIe 3.0 or Gen3 x16 half length half height
	part pciE3p0x16hhhlSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: HH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x16, Half Length, Half Height";
		string sLength: "HL";
		string sHeight: "HH";
		string sPciVersion: "3p0";
	}

	//SGD PCIe 3.0 x8 full Length full height
	part pciE3p0x8flfhSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 8;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x8, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "3p0";
	}

	//YC PCIe 3.0 x4 full Length full height
	part pciE3p0x4flfhSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 4;
		token tLength: FL;
		token tHeight: FH;
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "3p0";
	}
	part pciE3p0x4hlfhSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 4;
		token tLength: HL;
		token tHeight: FH;
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "3p0";
	}
	part pciE3p0x8hlfhSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 8;
		token tLength: HL;
		token tHeight: FH;
		string label: "PCI Express 3P 0x8, Half Length, Full Height";
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "3p0";
	}
	//SGD PCIe 3.0 x16 full Length full height
	part pciE3p0x16flfhSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 16;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x16, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "3p0";
	}
	part pciE3p0x16flfhSlots PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 16;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x16, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "3p0";
	}
	part pciE3p0x16flfhSlotgrp PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 16;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x16, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "3p0";
	}
	//SGD Gen3 PCIe x16 LP HL
	part pciE3p0x16hlhhSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x16, Half Length, Low Profile";
		string sLength: "HL";
		string sHeight: "LP";
		string sPciVersion: "3p0";
	}
	part pciE3p0x24hlhhSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 24;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x24, Half Length, Low Profile";
		string sLength: "HL";
		string sHeight: "LP";
		string sPciVersion: "3p0";
	}

	//LAW 2/19/15
	part pciE3p0x16fllpSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 16;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x16, Full Length, Low Profile";
		
		string sHeight: "LP";
		string sPciVersion: "3p0";
	}

	//MAE 09/01/2017
	part pciE3p0x8lpSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 8;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x8, Full Length, Low Profile";
		
		string sHeight: "LP";
		string sPciVersion: "3p0";
	}
	part pciE3p0x16hlfhSlot PciESlot {
		token tPciVersion: 3p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 3P 0x16, Half Length, Full Height";
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "3p0";
	}

	//TD new pcie 4.0 slots
	//*********************************************************************
	part pciE4p0x16Slot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 16;
		//string label: "PCI x16";
		string label: "PCI Express 4P 0x16, Full Length/Height";
		string sPciVersion: "4p0";
	}
	part pciE4p0x8Slot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 8;
		//string label: "PCI x8";
		string label: "PCI Express 4P 0x8, Full Length/Height";
		string sPciVersion: "4p0";
	}

	//TD PCIe 4.0 x8 x8 half length half height
	part pciE4p0x8hlhhSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 8;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x16, Half Length, Low Profile";
		string sLength: "HL";
		string sHeight: "LP";
		string sPciVersion: "4p0";
	}
	// PCIe 4.0 or Gen3 x16 half length half height
	part pciE4p0x16hhhlSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: HH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x16, Half Length, Half Height";
		string sLength: "HL";
		string sHeight: "HH";
		string sPciVersion: "4p0";
	}

	//PCIe 4.0 x8 full Length full height
	part pciE4p0x8flfhSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 8;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x8, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "4p0";
	}

	// PCIe 4.0 x4 full Length full height
	part pciE4p0x4flfhSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 4;
		token tLength: FL;
		token tHeight: FH;
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "4p0";
	}
	part pciE4p0x4hlfhSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 4;
		token tLength: HL;
		token tHeight: FH;
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "4p0";
	}
	part pciE4p0x8hlfhSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 8;
		token tLength: HL;
		token tHeight: FH;
		string label: "PCI Express 4P 0x8, Half Length, Full Height";
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "4p0";
	}
	// PCIe 4.0 x16 full Length full height
	part pciE4p0x16flfhSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 16;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x16, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "4p0";
	}
	part pciE4p0x16flfhSlots PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 16;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x16, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "4p0";
	}
	part pciE4p0x16flfhSlotgrp PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 16;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x16, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "4p0";
	}
	// PCIe x16 LP HL
	part pciE4p0x16hlhhSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x16, Half Length, Low Profile";
		string sLength: "HL";
		string sHeight: "LP";
		string sPciVersion: "4p0";
	}
	part pciE4p0x24hlhhSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 24;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x24, Half Length, Low Profile";
		string sLength: "HL";
		string sHeight: "LP";
		string sPciVersion: "4p0";
	}
	part pciE4p0x16fllpSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 16;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x16, Full Length, Low Profile";
		
		string sHeight: "LP";
		string sPciVersion: "4p0";
	}
	part pciE4p0x8lpSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 8;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x8, Full Length, Low Profile";
		
		string sHeight: "LP";
		string sPciVersion: "4p0";
	}
	part pciE4p0x16hlfhSlot PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x16, Half Length, Full Height";
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "4p0";
	}
	part pciE4p0x16hlfhSlotgrp PciESlot {
		token tPciVersion: 4p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 4P 0x16, Half Length, Full Height";
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "4p0";
	}
	//TD new pcie 5.0 slots
	//*********************************************************************
	part pciE5p0x16Slot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 16;
		//string label: "PCI x16";
		string label: "PCI Express 5P 0x16, Full Length/Height";
		string sPciVersion: "5p0";
	}
	part pciE5p0x8Slot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 8;
		//string label: "PCI x8";
		string label: "PCI Express 5P 0x8, Full Length/Height";
		string sPciVersion: "5p0";
	}

	//TD PCIe 5.0 x8 x8 half length half height
	part pciE5p0x8hlhhSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 8;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x16, Half Length, Low Profile";
		string sLength: "HL";
		string sHeight: "LP";
		string sPciVersion: "5p0";
	}
	// PCIe 5.0 or Gen3 x16 half length half height
	part pciE5p0x16hhhlSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: HH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x16, Half Length, Half Height";
		string sLength: "HL";
		string sHeight: "HH";
		string sPciVersion: "5p0";
	}

	//PCIe 5.0 x8 full Length full height
	part pciE5p0x8flfhSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 8;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x8, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "5p0";
	}

	// PCIe 5.0 x4 full Length full height
	part pciE5p0x4flfhSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 4;
		token tLength: FL;
		token tHeight: FH;
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "5p0";
	}
	part pciE5p0x4hlfhSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 4;
		token tLength: HL;
		token tHeight: FH;
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "5p0";
	}
	part pciE5p0x8hlfhSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 8;
		token tLength: HL;
		token tHeight: FH;
		string label: "PCI Express 5P 0x8, Half Length, Full Height";
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "5p0";
	}
	// PCIe 5.0 x16 full Length full height
	part pciE5p0x16flfhSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 16;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x16, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "5p0";
	}
	part pciE5p0x16flfhSlots PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 16;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x16, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "5p0";
	}
	part pciE5p0x16flfhSlotgrp PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 16;
		token tLength: FL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x16, Full Length/Height";
		string sLength: "FL";
		string sHeight: "FH";
		string sPciVersion: "5p0";
	}
	// PCIe x16 LP HL
	part pciE5p0x16hlhhSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x16, Half Length, Low Profile";
		string sLength: "HL";
		string sHeight: "LP";
		string sPciVersion: "5p0";
	}
	part pciE5p0x24hlhhSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 24;
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x24, Half Length, Low Profile";
		string sLength: "HL";
		string sHeight: "LP";
		string sPciVersion: "5p0";
	}
	part pciE5p0x16fllpSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 16;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x16, Full Length, Low Profile";
		
		string sHeight: "LP";
		string sPciVersion: "5p0";
	}
	part pciE5p0x8lpSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 8;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x8, Full Length, Low Profile";
		
		string sHeight: "LP";
		string sPciVersion: "5p0";
	}
	part pciE5p0x16hlfhSlot PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x16, Half Length, Full Height";
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "5p0";
	}
	part pciE5p0x16hlfhSlotgrp PciESlot {
		token tPciVersion: 5p0;
		int iBusWidth: 16;
		token tLength: HL;
		token tHeight: FH; //(FH = Full Height, LP = Low Profile)
		string label: "PCI Express 5P 0x16, Half Length, Full Height";
		string sLength: "HL";
		string sHeight: "FH";
		string sPciVersion: "5p0";
	}
	part pciXSlot PciXSlot {
		string label: "PCI X";
	}

	// APM 10/16/11 Needed for DL385G7
	part pciXHalfLengthLowProfileSlot PciESlot {
		token tLength: HL;
		token tHeight: LP; //(FH = Full Height, LP = Low Profile)	
		string sLength: "HL";
		string sHeight: "LP";	

	}

	//M2 enable adapter
	part m2Adapter PciSlot {
		string label: "M.2 Adpater";
	}
	// SS - Added Aroc slot type - 7/23/2014
	part pciAROCSlot PciArocSlot {
		string label: "Aroc";
	}

	//TD OCP Slot
	part pciOCPSlot PciOCPSlot {
		string label: "OCP NIC 3.0";
	}
	//TD BROC slot
	part pciBROCSlot PciBrocSlot {
		string label: "BROC";
	}

	//ALOM card slot
	part pciASlot PciASlot {
		string label: "Flex LOM";
	}
	part pciESlot PciESlot {
		string label: "Networking PCIe";
	}
	class EmbeddedPciCard extends Card { //change back to Card
		boolean bContainsBattery: false;
	}
	class NetworkAdapterPci extends PciCard {
		boolean combineUnderServer: true;
		boolean bIsFlexLom: false;
		string nAType: ""; //Network adapter type, can be pcie or ocp3
		int iNumPorts: 1;
		int iNumMultifunctionPorts: 0;
		boolean bQLogicInfiniband: false;
		boolean bVoltaireInfiniband: false;
		string[] scmCategories: "NETWORKADAPTER", "NETWORKADAPTERS";
		string mainStreamcustomStreamType: "NIC"; //shd 9/10/21
		
		//BOM Product View
		string productViewCategory: "NIC";
				
		string sNetworkCapacity: "unset";
		token tPciCardType: network; //int promotionLevel: 1;
		//MWT 20150227 removing.  (as this will cause order failure due to placing FIO as standalone) int acePromotionLevel: 1;
		string networkAdapterUpgradeRule: "";
		int iMaxNetworkUpgrades: 2;
		subsystem pciUpgradeSubsystem {
			locationArray networkAdapterUpgrade {
				rows: iMaxNetworkUpgrades;
				columns: 1;
				fillerClasses: FibreChannelCable;
				def staticProductMax (x: FibreChannelCable) = if(x.id < thisInst.getValidUpgrades () || thisInst.getValidUpgrades () = "") then -1 else 0;
			}
			constraint checkForValidNetworkAdapterUpgrades {
				message: "Network Adapter Upgrade is not compatible with this $a{id} Network Adapter.";
				body:
				{
					val validUpgradeProducts = if networkAdapterUpgradeRule = "4" then "455883-B21 455886-B21 455889-B21 487649-B21 487652-B21 487655-B21 487658-B21" else if networkAdapterUpgradeRule = "6" then
					"455883-B21 487649-B21 487652-B21 487655-B21 487658-B21" else if networkAdapterUpgradeRule = "7" then "455883-B21 487649-B21 487652-B21 487655-B21" else if networkAdapterUpgradeRule = "8" then
					"455883-B21 487649-B21 487652-B21 487655-B21 487658-B21 AP818A AP819A AP820A AP784A AP785A" else "";
					validUpgradeProducts = "" or (for(networkAdapterUpgrade.contents) x => x.id < validUpgradeProducts); //for(pciUpgradeSubsystem.networkAdapterUpgrade.contents) x => x.id < thisInst.validUpgrades;

				}
			}
		} //LAW - QC2062
		def getValidUpgrades (): string = if networkAdapterUpgradeRule = "4" then "455883-B21 455886-B21 455889-B21 487649-B21 487652-B21 487655-B21 487658-B21" else if networkAdapterUpgradeRule = "6" then
		"455883-B21 487649-B21 487652-B21 487655-B21 487658-B21" else if networkAdapterUpgradeRule = "7" then "455883-B21 487649-B21 487652-B21 487655-B21" else if networkAdapterUpgradeRule = "8" then
		"455883-B21 487649-B21 487652-B21 487655-B21 487658-B21 AP818A AP819A AP820A AP784A AP785A" else "";
	}
	//4		string validUpgrades:"4- 455883-B21 455886-B21 455889-B21 487649-B21 487652-B21 487655-B21 487658-B21";
	//6		string validUpgrades:"6- 455883-B21 487649-B21 487652-B21 487655-B21 487658-B21";
	//7		string validUpgrades:"7- 455883-B21 487649-B21 487652-B21 487655-B21";
	//8		string validUpgrades:"8- 455883-B21 487649-B21 487652-B21 487655-B21 487658-B21 AP818A AP819A AP820A AP784A AP785A";
	class FlexLOMCard extends NetworkAdapterPci {
		string sNetworkCapacity: "unset";
		token tPciType: PCI_A;
		string sFlexLomType: "554FLB";
		boolean requiresSoftwareC2B: true;
		boolean bIsFlexLom: true;
		string sPciType: "AROC";
	}
	class NetworkingPci extends NetworkAdapterPci {
		boolean combineUnderServer: true;
	}
	product R2A75A NetworkingPci {
		string source: "MANUAL"; //TD prevent menu import from removing these since these are usually not on base menus

	}
	//JQD for Sotrage Offload
	class StorageOffLoadPci extends NetworkAdapterPci{
		boolean combineUnderServer: true;
	}

	//TD OCP card
	class NetworkingOcpCard extends NetworkAdapterPci {
		boolean combineUnderServer: true;
		token tPciType: PCI_OCP;
		string sPciType: "OCP";
		string mainStreamcustomStreamType: ""; //shd 9/10/21		

	}
	class NetworkingOcpCardSS extends NetworkAdapterPci {
		boolean combineUnderServer: true;
		token tPciType: PCI_OCP;
		string sPciType: "OCP";
		string mainStreamcustomStreamType: ""; //shd 9/10/21		

	}
	class NetworkingFlex extends FlexLOMCard {
		string mainStreamcustomStreamType: ""; //shd 9/10/21

	}
	class PciFPGACard extends NetworkAdapterPci {
		string sC2bProductIdToLink: "";
		string mainStreamcustomStreamType: ""; //shd 9/10/21 

	}
	product P44743-001 PciFPGACard {
		boolean isProductClass: false;
		def overrideC2BDiffFlag: boolean = true;
		string c2bDiffFlagOverride: "Exclude";
		boolean forceToIncludeInC2BHdwSection: true;
		string sC2bProductIdToLink: "R7Q08A";
	}

	//PGA 02/08/13 Added Networking for X1530
	class StorageControllerPci extends PciCard {
		string[] scmCategories: "SMARTARRAYRAIDCONTROLLER", "NETWORKING";
		
		//BOM Product View
		string productViewCategory: "CONTROLLER";
				
		boolean bContainsBattery: false;
		boolean bRequiresSAStoSAS: false;
		boolean bSupportsPSeriesBattery: false;
		string sSupportsBackedCacheUpgrade: "false";
		int sequenceNumber: 1480;
		int childSequenceNumber: 480;
		int numPorts: 0;
		subsystem upgradesSubsystem {
		//SE - Removed for ALM 142827		25-Sep-2021			
		//			locationArray cacheUpgradeSlot {
		//				fillerClasses: ControllerCacheUpgrade;
		//			}
			locationArray batterySlot {
				fillerClasses: ControllerCacheBattery;
			}
		}
	}
	class HostBusAdaptor extends StorageControllerPci {
		token tHBAType: SAS;
	}
	class CardSlotCompatibility {
	}
	class DlPlusCableKit extends ProliantMiniSasCable { //ALM133538
		int iTmodePortsConsumed: 0;
	}
//	product P55467-B21 DlPlusCableKit{
//		int iTmodePortsConsumed: 1;
//	}
//	product P55860-B21 DlPlusCableKit{
//		int iTmodePortsConsumed: 1;
//	}
//	product P58900-B21 DlPlusCableKit{
//		int iTmodePortsConsumed: 1;
//	}
	//SE - For PERT 19059    03-Jun-2020
	class UpgradePlusCableKit extends ProliantMiniSasCable {
	}
	//NL added for PERT 26370  04-Nov-2022
	class RiserCableKit extends ProliantMiniSasCable {
	}
	class DlPlusRiserAccesoriesKit extends RootProductClass { //AB_PERT_20266

	}
	class DlPlusPowerAccesoriesKit extends RootProductClass { //AB_PERT_20266

	}
	class GeneralPciCardSlotCompatibility extends CardSlotCompatibility {
		subsystem functionsSubsystem {
			def compatible (card: Card, slot: Slot) = card.tCardType = slot.tSlotType and (if card.tLength = full then slot.tLength = full else true) and (card.tHeight = slot.tHeight);
		}
	}
	class RAIDLevelSettings extends RootProductClass {
		boolean bCustom: false;
		int iRaidLevel: 0;
		string ControllerRAID: "";
		int iDrivesRequired: 1; //string[] scmCategories: "RAIDLEVELSETTINGS", "RAID", "RAIDLEVELSETTINGSSUB";
		int sequenceNumber: 1600;
		int childSequenceNumber: 800;
		
		//BOM Product View
		string productViewCategory: "FLAG";
				
		//Attribute project
		string sRaidLevel: "";
		subsystem triggers {
			part triggerRaidCISettings ConfigAgentTrigger {
				string agentClass: "CISettingsAgent";
				part[] agentTiming: finishInstall;
			}
		}
	}

	//JHA 2015-11-06 PPM 67209 NPI 
	class RaidSettingsML30 extends RootProductClass {
		string[] scmCategories: "RAIDSETTINGS";
	}
	class ComplexConfiguration extends RootProductClass {
		boolean bCustom: false;
		int iRaidLevel: 0;
		int iDrivesRequired: 1; //string[] scmCategories: "COMPLEXCONFIGURATION", "COMPLEXCONFIGURATIONSUB";
		int sequenceNumber: 1700;
		int childSequenceNumber: 1400;
		//boolean i_drive_customer_intent_section_choices: true; KS_ALM_106832 fixed on 18/08/2017
		subsystem triggers {
			part triggerRaidCISettings ConfigAgentTrigger {
				string agentClass: "CISettingsAgent";
				part[] agentTiming: finishInstall;
			}
		}
	}
	class HDDExpansionModule extends RootProductClass {
		int sequenceNumber: 250;
		int childSequenceNumber: 390;
	}
	class ExpansionBoard extends RootProductClass {
		int sequenceNumber: 6000;
		int childSequenceNumber: 290;
	}
	class PciRiser extends IoCard {
		boolean bCardIsRiser: true;
		int iPdc_and_bundle_priority: 80;
		int sequenceNumber: 4500;
		int childSequenceNumber: 450;
		
		//BOM Product View
		string productViewCategory: "RISER";

		//attribute from attribute project
		string sRiserCardType: ""; //Primary, Secondary, Tertiary, Secon-Tertiary
		int iNumSlots: 1;
		string sSlotSpec: "";
		string sMp2Included: ""; //Yes, No
		string iMp2SlotQty: ""; //0,1,2
		string sMp2SlotSpec: "";
		string sSlimSASInc: ""; //Yes, No
		string iSlimSASQty: ""; //0,1,2,4

	}
	class ControllerUpgrade extends RootProductClass { //string[] scmCategories: "CONTROLLERUPGRADE";
		productCategories: PowerSupplyCat;
		boolean bContainsBattery: false;
		boolean bContainsPSeriesBattery: false;
		boolean bSupportsPSeriesBattery: false;
		int iRaidLevelSupported: 0;
		int sequenceNumber: 4600;
		int childSequenceNumber: 460;
	}
	class ControllerCacheBattery extends ControllerUpgrade { //string[] scmCategories: "BATTERYUPGRADES", "BATTERYUPGRADEFORCACHE", "P712MSATACONTROLLER";

	}
	class ControllerCacheUpgrade extends ControllerUpgrade {
		string sBackedCacheStorage: "false"; //string[] scmCategories: "UPGRADE";

	}
	class SAP410iControllerCacheUpgrade extends ControllerCacheUpgrade { //string[] scmCategories: "SAP410ICACHEUPGRADES", "STORAGECONTROLLER-SAS-SMARTARRAY-UPGRADE", "STORAGECONTROLLER-SAS-SMARTARRAY-UPGRADEOPTION", "UPGRADE";
		boolean overrideIntegrationOption: true; //LAW 5/31/12
		ifEffective KES_VAL {
			def overrideIntegrationOptionAgentFunc (): string = "";
		}
		otherwise {
		/**
			 * @author LAW
			 * @date 2012-05-31
			 * @about ALM#2863 - We can only have 1 factory integrated upgrade 
			 * @modified
			 */
			def serverWithMax1CTORule (a: Model): boolean = {
				ancestor(DL360G7) != null || ancestor(DL380G7) != null || ancestor(DL385G7) != null || ancestor(DL580G7) != null || ancestor(DL585G7) != null; //GK 3/25/13 QC68070			

			}

			//PGA 05/09/14 PPM 61811 The following was added to fix diffs
			def serverWithBTOCacheUpgrade (a: Model): boolean = {
				(ancestor(BL280CG6) != null && ((thisInst.id >= "534562-B21") || (thisInst.id >= "534916-B21"))) || ancestor(DL160G6) != null || ancestor(DL180G6) != null || ancestor(DL320G6) != null || ancestor(DL120G7) != null || ancestor(DL165G7)
				!= null || ancestor(ML330G6) != null || ancestor(ML110G7) != null || (ancestor(ML350G6) != null && ((thisInst.id >= "462968-B21") || (thisInst.id >= "534108-B21")));
			}

			//This indirection was created to support ACE Filler Product Agent which needs to be able to calculate same info on choice items instead of instances
			//This agent will look for the same function with a "B" tagged onto the end and will pass the target ancestor as a parameter 
			def overrideIntegrationOptionAgentFunc (): string = {
				overrideIntegrationOptionAgentFuncB (ancestor(Model));
			}
			def overrideIntegrationOptionAgentFuncB (a: Model): string = {
				if(thisInst.serverWithMax1CTORule (a)) // && ancestor(ServerModel).selected(SAP410iControllerCacheUpgrade).count > 1)
				then (if(a.selected(SAP410iControllerCacheUpgrade).count <= 1) then "0D1" else (
				//if the server hase a product in a bundle (perf pak - where bundleRelation has been set to "CHILD")
				if(a.selected(SAP410iControllerCacheUpgrade).filter(bundleRelation = "CHILD").count > 0)
				//then the cache outside of the bundle (perf pak) is BTO
				then (if thisInst.bundleRelation = "CHILD" then "0D1" else "BTO") //if I have multiple products only the first one is CTO
				else (if a.selected(SAP410iControllerCacheUpgrade).get(0) = thisInst then "0D1" else "BTO"))) //PGA 05/09/14 PPM 61811 The following was added to fix diffs	
				else if(thisInst.serverWithBTOCacheUpgrade (a)) then "BTO" else "0D1";
			}
		}
	}
	class SAP420iControllerCacheUpgrade extends ControllerCacheUpgrade { //string[] scmCategories: "UPGRADE";
		boolean overrideIntegrationOption: true; //GK 5/13/13 QC69455
		//This indirection was created to support ACE Filler Product Agent which needs to be able to calculate same info on choice items instead of instances
		//This agent will look for the same function with a "B" tagged onto the end and will pass the target ancestor as a parameter 
		def overrideIntegrationOptionAgentFunc (): string = {
			if(ancestor(CSHanaProduct) != null) then "0D1" // JCN 2017-06-30 - Nesting on battery lost on breakout nodes
			//else if (ancestor(Apollo2000r2x00ChassisG10) = null) then "BTO" // JQD - If the battery is selected in the Apollo 2000's nodes then the baterry should be BTO
			else if(ancestor(DLGen11Server) != null) then ""
			else if(ancestor(Model) = null) then "BT0" else overrideIntegrationOptionAgentFuncB (ancestor(Model));
		}
		def overrideIntegrationOptionAgentFuncB (a: Model): string = {
			if(a.id >= 669257-B21 or a.id >= 669256-B21 or a.id >= "867055-B21" or a.id >= "867056-B21") // Added for QC 80865 - AS Add Apollo 2000 XL170r and XL190r g10 JQD
			then "BTO" else (if(a.selected(SAP420iControllerCacheUpgrade).count <= 1) then "0D1" else (
			//if the server hase a product in a bundle (perf pak - where bundleRelation has been set to "CHILD")
			if(a.selected(SAP420iControllerCacheUpgrade).filter(bundleRelation = "CHILD").count > 0)
			//then the cache outside of the bundle (perf pak) is BTO
			then (if thisInst.bundleRelation = "CHILD" then "0D1" else "BTO") //if I have multiple products only the first one is CTO
			else (if a.selected(SAP420iControllerCacheUpgrade).get(0) = thisInst then "0D1" else "BTO")));
		}
	} //SGD 01/14/2014
	class SAP830iControllerCacheUpgrade extends ControllerCacheUpgrade {
	}
	class MediaOptions extends RootProductClass {
		int sequenceNumber: 10000;
		int childSequenceNumber: 10000;
	}
	class UsbMedia extends MediaOptions { //string[] scmCategories: "USB"; //conflict with UsbKeyboardKit 

	}
	class iLOManagementHardware extends MediaOptions { //string[] scmCategories: "USB"; //conflict with UsbKeyboardKit 

	}
	class SDCardMedia extends MediaOptions {
		string[] scmCategories: "SDCARD", "SDOPTIONS";
	}
	class PerformanceKits extends RootProductClass {
		int sequenceNumber: 12000;
		int childSequenceNumber: 12000;
	}
	class SecurityHardware extends RootProductClass { //string[] scmCategories: "SECURITYHARDWARE","TPMMODULE", "SECURITYBEZEL";
		productCategories: SecurityHardwareCat;
		int sequenceNumber: 14000;
		int childSequenceNumber: 14000;
		
		//BOM Product View
		string productViewCategory: "HARDWARE";
	}
	//TD creating specific classes since intrusion kit is now in C2B
	class SecurityIntrusionKit extends SecurityHardware {
	}
	class SecurityBezelKit extends SecurityHardware {
	}
	class DeliveryLogistics extends Services {
		string[] scmCategories: "DELIVERYLOGISTICSERVICES", "Delivery Logistic Services";
		boolean bProvidesDeskDelivery: false;
		boolean bRequiresDeskDelivery: false;
		int sequenceNumber: 991200;
		int childSequenceNumber: 991200; //add by Larry 
		int select_quantity: 0;
		string source: "MANUAL"; //TD 5-22-2018 prevent menu import from removing these since these are usually not on base menus skips setting end date in import

	}
	class Tier1BasicDelivery extends DeliveryLogistics {
		string[] scmCategories: "TIER1-BASICDELIVERY", "Tier 1 - Basic Delivery";
		int sequenceNumber: 991200;
		string tierDSSize: "";
		int childSequenceNumber: 991200;
		// JCN - this actually breaks all Tier 1 LS quoting 2 for all.	

		//TD 7-10-2018 DO NOT enable promotionLevel on this class. This has side effects on causing extra tier1 services to quote.
		//The proper fix for ALM 116768 was to add the logistics services to the datafile tables for the storeonce platform. The reason this was incorrectly quoting as a subitem
		//was because the bom agent returned null for the platform on how to quote it and then labeled it incorrectly as a cto product. This is remedied by adding an entry for the platform
		//telling it how to quote which in this case is BTO
		//I checked in the update adding a BTO entry for the storeonce3500 platform (Search StoreOnce3500 and supportedOnInt table)
		//any time it quotes as a subitem make the entry in the supportedOn tables for that platform.
		//int promotionLevel: 1; //SUG_ALM_116768 

		// VM  Since we do have the fork process today reverting this change to resolve the  quoting structure issue  for many products.
		//Also in local Regression there was a major sequence change for Tier1 Logistics services which will cause sub item UNB error for across all the platforms 05-July-2018
		def showInBomForParentConfigInst (ci: Root): boolean = { //Show in BOM if parent is a Rack
			val ancRack = ancestor(ci, RackModel);
			ancRack = null //If parent is not a rack, then only quote if not in a Rack
			|| ancRack.doNotQuote = 'true' // rack is not quoted
			|| ! ancRack.isProductClass // rack is not a real product
			|| ancRack = ci;
		}

		//		def showInBomForParentConfigInst (ci: Root): boolean = { //Show in BOM if parent is a Rack
		//			ancestor(ci, RackModel) = ci //If parent is not a rack, then only quote if not in a Rack
		//			|| ancestor(ci, RackModel) = null;
		//		}

	}
	class Tier2ValueAddServices extends DeliveryLogistics {
		string[] scmCategories: "TIER2-VALUEADDSERVICES", "Tier 2 - Value Add Services";
		int sequenceNumber: 999210;
		int childSequenceNumber: 999210;
		string ServiceTypeInfo;
	}
	class Tier3ValueAddServices extends DeliveryLogistics {
		string[] scmCategories: "TIER3-VALUEADDSERVICES", "Tier 3 - Value Add Services - Flexible Quotation";
		int sequenceNumber: 999920;
		int childSequenceNumber: 999920;
	}
	/*
	* @author Ixchel Ramirez
	* @about Adding Tier 4 needed for Arista Logistic Services
	*  
	*/
	class Tier4SpecificHourDelivery extends DeliveryLogistics {
		string[] scmCategories: "TIER4-SPECIFICHOURDELIVERYSERVICE", "Tier 4 - Specific Hour Delivery Service";
		int sequenceNumber: 999920;
		int childSequenceNumber: 999920;
	}
	class UtilityReadyBlade extends Services {
		string[] scmCategories: "UTILITYREADYBLADE(URI)";
	}
	class UtilityReadyBladeEnablement extends Services {
	}
	class AbstractProduct extends RootNonProductClass {
	}
	class HPPartition extends AbstractProduct {
		token cloneBehavior: newSubconfigs;
		boolean deleteGroupMembers: true;
		boolean allowCopyPaste: false;
		string dynamicSectionLabel: "";
		string partitionLabel: "";
		boolean showChildModelsInOCA: true;
		subsystem adHocSubsystem {
			choice adHocChoice {
				targetClass: AdHocItem;
				choiceType: multi_select;
				title: "Ad-Hoc";
			}
		}
		boolean supportsTechCare: true;
	}
	class HPPartitionConfig extends RootNonProductClass {
	}
	class ServerSpecificOptions extends RootProductClass {
	}
	product AB469A RackConversionAndMountingKit {
		int iNumHalfEiaUnits: 2;
		boolean overrideIntegrationOption: true;
		def overrideIntegrationOptionAgentFunc (): string = {
			overrideIntegrationOptionAgentFuncB (ancestor(RackModel));
		}
		def overrideIntegrationOptionAgentFuncB (a: RackModel): string = {
			if(thisConfig.getInstancesOfModel("RackModel").count > 0) then "0D1" else "BTO";
		}
	}
	/**
     * fixed Ticket 295043
     * author Fairy
     * status fixed
     * 
     */
	product AM227A RackConversionAndMountingKit {

	/*
     * if the product has no promotionLevel, use the default method.
     *  private void defaultPromotionMethod(ITreeNode treeNode,List<TreeNode> topLevelTreeNodeList);
     *  if the product has promotionLevel, use this method
     *  private void promteByPromotionLevel(ITreeNode treeNode,List<TreeNode> resultList);
     *  If the product has promotionLevel and has been promoted to top level and none-racked, it shouldn't get 0D1 option.
     *  private void removeIntegrationOptionForPromotedProducts(List<TreeNode> topLevelTreeNodeList,List<TreeNode> promotionLevelNodes); 
     */
//		int promotionLevel: 1; //Remove 0D1 if the product is selected.
	/**
         * override integrate in option
         */
		boolean overrideIntegrationOption: true;

		/* 
	     *  //This agent will look for the same function with a "B" tagged onto the end and will pass the target ancestor as a parameter 
	     *  def overrideIntegrationOptionAgentFunc (): string = {
		 *	    overrideIntegrationOptionAgentFuncB (ancestor(Model));
		 *  }
	     */
		def overrideIntegrationOptionAgentFunc (): string = {

		/**
			 *  Drew ,sorry,i fount that it can't work ,so i comment cout the code.
			 *  if you want to use the code commented out ,
			 *  it will lead to the result that installing to rack in factory or installing to rack in Field will have the same effect.
			 *  and It can’t show that “AM227A 0D1’ and I think the reason for this new problem lies in the logic of judgment.
			 */
//			val myAncestorRack = ancestor(Rack); 
		//			if (myAncestorRack != null) then "0D1" else "B01"; // it can't work ,so i comment cout the code.
			overrideIntegrationOptionAgentFuncB (ancestor(RackOnSite));
		}
		def overrideIntegrationOptionAgentFuncB (a: RackOnSite): string = {
		//			if(a != null) then "0D1" else "B01";

		//			if ((thisInst.selected(RackOnSite).filter(x => x.id >= "rackOnSite42u" or x.id >= "rackOnSite42u1200").count) > 0  ) then "B01" else "0D1";
			val rackfabric = ancestor(TenKG2SeriesRack);
			//			if(a != null) then "0D1"
			//			else if(ancestor(RackOnSite) != null) then "B01";
			if(a != null or rackfabric = null) then "B01" else "0D1";
		}
	}
	class OSChoiceItemFlag extends ChoiceItemFlag {
		string choiceSort: "";
	}
	product OS_HPUX OSChoiceItemFlag {
		string choiceSort: "A1";
	}
	product OS_OpenVMS OSChoiceItemFlag {
		string choiceSort: "A2";
	}
	class RX2800Networking extends NetworkAdapterPci {

	//string[] scmCategories:"Networking";
		productCategories: RX2800NetworkingCat;
		int iNumSfpTranceivers: 0;
		string sValidTranceivers: "";
		string mainStreamcustomStreamType: ""; //shd 9/10/21
		def expanderString (o: string, i: int): string[] = callout("Expander", o, i);
		//def defaultTransceiver(): string[] = expanderString("AT139A",2);
		def defaultTransceiver (): string[] = if(iNumSfpTranceivers > 0) then expanderString ("AT139A", 2) else "";
		subsystem transceiverSubsystem {
			locationArray transSlots {
				rows: iNumSfpTranceivers;
				columns: 1;
				fillerClasses: RX2800I2Transceivers;
				def staticProductMax (x: RootProductClass) = {
					val sid = split(x.id, "#").get(0);
					if(sid < thisInst.sValidTranceivers || thisInst.sValidTranceivers = "") then -1 else 0;
				}
			}
			part defaultTransceiver: triggerInternalDefaultsOca {
				string[] modelDefaultsFunc: "defaultTransceiver";
			}
			constraint set_AT139A_AT140A_Droplist {
				message: "the max of this product AT139A/AT140A is 2."; //and the max of AT141A is 1.
				body: restriction (RX2800I2Transceivers [ AT139A ] <= 2);
				restriction (RX2800I2Transceivers [ AT140A ] <= 2);
				restriction (RX2800I2Transceivers [ AT141A ] <= 2); //as long as RX2800I2Transceivers class selected, the AT141A droplist will be max 8;

			}
			constraint superdome2WarningMessage {
				message: "No factory integrated OS boot support. Factory integrated vpars are not supported";
				body:
				true;
			}
		}
		subsystem supportSelectionsSubsystem {
			choice flexCombinationChoice {
				targetClass: CombinationFlexibleServices;
			}
			choice flexHWChoice {
				targetClass: StandaloneHWFlexibleServices;
			}
			choice flexSWChoice {
				targetClass: StandaloneSWFlexibleServices;
			}
			choice flexInstallChoice {
				targetClass: InstallationFlexibleServices;
			}
			choice fixedCombinationChoice {
				targetClass: CombinationFixedServices;
			}
			choice fixedHWChoice {
				targetClass: StandaloneHWFixedServices;
			}
			choice fixedSWChoice {
				targetClass: StandaloneSWFixedServices;
			}
			choice fixedInstallChoice {
				targetClass: InstallationHWFixedServices;
			}
			choice flexCombinationOCAChoice {
				optional: true;
				targetClass: CombinationFlexibleServicesOCA;
				choiceType: single_select;
			}
			choice flexInstallOCAChoice {
				optional: true;
				targetClass: InstallationFlexibleServicesOCA;
				choiceType: single_select;
			}
			choice educationflexibleselectionOCAChoice {
				targetClass: EducationFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice proactiveflexibleselectionOCAChoice {
				targetClass: ProactiveSelectFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice pereventflexibleselectionOCAChoice {
				targetClass: PerEventFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice educationflexibleselectionChoice {
				targetClass: EducationFlexibleServices;
				choiceType: multi_select;
			}
			choice proactiveflexibleselectionChoice {
				targetClass: ProactiveSelectFlexibleServices;
				choiceType: multi_select;
			}
			choice personalizedSupportFlexibleServicesChoice {
				targetClass: PersonalizedSupportFlexibleServices;
				choiceType: multi_select;
			}
			choice personalSupportAdditionalDaysFlexibleServicesChoice {
				targetClass: PersonalSupportAdditionalDaysFlexibleServices;
				choiceType: multi_select;
			}
			choice pereventflexibleselectionChoice {
				targetClass: PerEventFlexibleServices;
				choiceType: multi_select;
			}
			choice ConsultingServicesOCAChoice {
				targetClass: ConsultingFlexibleServices;
				choiceType: multi_select;
			}
			choice ConsultingFixedServicesOCAChoice {
				targetClass: ConsultingFixedServices;
				choiceType: multi_select;
			}
			choice CustomerSpecificCombinationFlexibleChoice {
				targetClass: CustomerSpecificCombinationFlexibleServices;
				choiceType: multi_select;
			}
			/*Proactive Select Services*/
			choice proactivefixedselectionChoice {
				targetClass: ProactiveSelectFixedServices;
				choiceType: multi_select;
			}
			/* add by lawrence at 2011-11-14 */
			/*Per-Event Services Fixed*/
			choice pereventfixedselectionChoice {
				targetClass: PerEventFixedServices;
				choiceType: multi_select;
			}
			/*Education Services Fixed*/
			choice educationfixedselectionChoice {
				targetClass: EducationFixedServices;
				choiceType: multi_select;
			}
			//CEZ 2014-10-24 [NPI 64037] Start
			choice onsiteAnalysisFlexibleServicesChoice {
				targetClass: OnsiteAnalysisFlexibleServices;
				choiceType: multi_select;
			}
			choice onsiteAnalysisAdditionalDayFlexibleServicesChoice {
				targetClass: OnsiteAnalysisAdditionalDayFlexibleServices;
				choiceType: multi_select;
			}
			choice onsiteAnalysisFixedServicesChoice {
				targetClass: OnsiteAnalysisFixedServices;
				choiceType: multi_select;
			}
			choice onsiteAnalysisAdditionalDayFixedServicesChoice {
				targetClass: OnsiteAnalysisAdditionalDayFixedServices;
				choiceType: multi_select;
			}
		}
	}
	product AT111A RX2800Networking {
		int iNumSfpTranceivers: 2;
		boolean configurable: true; //LAW for OCA overview
		boolean passThru: false; //TD whether interconnect is passthru or not
		string shortLabel: "CN1100E PCIe";
		string sValidTranceivers: "AT139A AT140A AT141A";
		//def set_Transceeivers_Default_By_NetWork : string[]= expanderString("AT139A",2);
		subsystem transceiverSubsystem {
			constraint superdome2WarningMessage {
				message: "No factory integrated OS boot support. Factory integrated vpars are not supported";
				body:
				count(thisConfig.getInstancesOfModel("SD2Enclosure")) = 0 || thisInst.selected(AT139A).count = 2;
			}
		}
	}
	product AT094A RX2800Networking {
		int iNumSfpTranceivers: 4;
		boolean configurable: true; //LAW for OCA overview
		boolean passThru: false; //TD whether interconnect is passthru or not
		string shortLabel: "PCIe 2p Adapter";
		string sValidTranceivers: "AT139A AT140A AT141A";
		//def set_Transceeivers_Default_By_NetWork : string[]= expanderString("AT139A",2);

	}
	class RX2800I2SFFHARDDRIVES extends RootProductClass {
		productCategories: RX2800I2SFFHARDDRIVESCat;
		string[] scmCategories: "SFFHARDDRIVES";
		//TD these are needed for c2b
		string sDriveRPM: "7.2K";
		string tDriveType: "";
		string tDriveFormFactor: "";
		double dHardDriveSizeGB: 0.0;
		boolean combineUnderServer: true;
		string mainStreamcustomStreamType: "HDD";
	}
	product P04558-B21 RX2800I2SFFHARDDRIVES {
		string mainStreamcustomStreamType: "SSD";
	}
	product P04562-B21 RX2800I2SFFHARDDRIVES {
		string mainStreamcustomStreamType: "SSD";
	}
	product B9F51B RX2800I2SFFHARDDRIVES {
		string mainStreamcustomStreamType: "SSD";
	}
	product B9F52B RX2800I2SFFHARDDRIVES {
		string mainStreamcustomStreamType: "SSD";
	}
	class RX2800I2CONTROLLERS extends PciCard {
		productCategories: RX2800NetworkingCat;
		string[] scmCategories: "CONTROLLERS for IntegrityServers";
		subsystem supportSelectionsSubsystem {
			choice flexCombinationChoice {
				targetClass: CombinationFlexibleServices;
			}
			choice flexHWChoice {
				targetClass: StandaloneHWFlexibleServices;
			}
			choice flexSWChoice {
				targetClass: StandaloneSWFlexibleServices;
			}
			choice flexInstallChoice {
				targetClass: InstallationFlexibleServices;
			}
			choice fixedCombinationChoice {
				targetClass: CombinationFixedServices;
			}
			choice fixedHWChoice {
				targetClass: StandaloneHWFixedServices;
			}
			choice fixedSWChoice {
				targetClass: StandaloneSWFixedServices;
			}
			choice fixedInstallChoice {
				targetClass: InstallationHWFixedServices;
			}
			choice flexCombinationOCAChoice {
				optional: true;
				targetClass: CombinationFlexibleServicesOCA;
				choiceType: single_select;
			}
			choice flexInstallOCAChoice {
				optional: true;
				targetClass: InstallationFlexibleServicesOCA;
				choiceType: single_select;
			}
			choice educationflexibleselectionOCAChoice {
				targetClass: EducationFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice proactiveflexibleselectionOCAChoice {
				targetClass: ProactiveSelectFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice pereventflexibleselectionOCAChoice {
				targetClass: PerEventFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice educationflexibleselectionChoice {
				targetClass: EducationFlexibleServices;
				choiceType: multi_select;
			}
			choice proactiveflexibleselectionChoice {
				targetClass: ProactiveSelectFlexibleServices;
				choiceType: multi_select;
			}
			choice personalizedSupportFlexibleServicesChoice {
				targetClass: PersonalizedSupportFlexibleServices;
				choiceType: multi_select;
			}
			choice personalSupportAdditionalDaysFlexibleServicesChoice {
				targetClass: PersonalSupportAdditionalDaysFlexibleServices;
				choiceType: multi_select;
			}
			choice pereventflexibleselectionChoice {
				targetClass: PerEventFlexibleServices;
				choiceType: multi_select;
			}
			choice ConsultingServicesOCAChoice {
				targetClass: ConsultingFlexibleServices;
				choiceType: multi_select;
			}
			choice ConsultingFixedServicesOCAChoice {
				targetClass: ConsultingFixedServices;
				choiceType: multi_select;
			}
			choice CustomerSpecificCombinationFlexibleChoice {
				targetClass: CustomerSpecificCombinationFlexibleServices;
				choiceType: multi_select;
			}
			/*Proactive Select Services*/
			choice proactivefixedselectionChoice {
				targetClass: ProactiveSelectFixedServices;
				choiceType: multi_select;
			}
			/* add by lawrence at 2011-11-14 */
			/*Per-Event Services Fixed*/
			choice pereventfixedselectionChoice {
				targetClass: PerEventFixedServices;
				choiceType: multi_select;
			}
			/*Education Services Fixed*/
			choice educationfixedselectionChoice {
				targetClass: EducationFixedServices;
				choiceType: multi_select;
			}
			//CEZ 2014-10-24 [NPI 64037] Start
			choice onsiteAnalysisFlexibleServicesChoice {
				targetClass: OnsiteAnalysisFlexibleServices;
				choiceType: multi_select;
			}
			choice onsiteAnalysisAdditionalDayFlexibleServicesChoice {
				targetClass: OnsiteAnalysisAdditionalDayFlexibleServices;
				choiceType: multi_select;
			}
			choice onsiteAnalysisFixedServicesChoice {
				targetClass: OnsiteAnalysisFixedServices;
				choiceType: multi_select;
			}
			choice onsiteAnalysisAdditionalDayFixedServicesChoice {
				targetClass: OnsiteAnalysisAdditionalDayFixedServices;
				choiceType: multi_select;
			}
		}
	}
	class RX2800I2Transceivers extends RootProductClass {
		string[] scmCategories: "Transceivers";
	}
	class IntelProClass extends RootProductClass {
		productCategories: IntelProClassCat;
		string scmCategories: "INTEL";
		token tQuoteType: BTO;
	}

	//shd 9/10/21
	product P26966-B21 NetworkingPci {
		string mainStreamcustomStreamType: "";
	}
	product P26969-B21 NetworkingFlex {
		string mainStreamcustomStreamType: "";
	}
	product P37687-B21 NetworkingPci {
		string mainStreamcustomStreamType: "";
	}
	product P37690-B21 NetworkingPci {
		string mainStreamcustomStreamType: "";
	}
	product P41852-B21 NetworkingPci {
		string mainStreamcustomStreamType: "";
	}
	product P07843-B21 NetworkingPci {
		string mainStreamcustomStreamType: "";
	}
	product R6Q80A NetworkAdapterPci {
		string mainStreamcustomStreamType: "";
	}
	product Q0F09A NetworkAdapterPci {
		string mainStreamcustomStreamType: "";
	}
	product Q0F26A NetworkAdapterPci {
		string mainStreamcustomStreamType: "";
	}
	product 629135-B21 ProliantInfiniband {
		string mainStreamcustomStreamType: "NIC";
	}
	product 700751-B21 NetworkingFlex {
		string mainStreamcustomStreamType: "NIC";
	}
	product 700759-B21 NetworkingFlex {
		string mainStreamcustomStreamType: "NIC";
	}
	class CSTrackingSKU extends RootProductClass {
		string source: "MANUAL"; //TD 5-22-2018 prevent menu import from removing these since these are usually not on base menus skips setting end date in import
		string[] defaultList: "";
		string[] supportFE: "";
		string[] supportFECS500DP: "";
		boolean valid_For_Toms_check_B: false;
		string lineItemImportMsg: "**WARNING** Converged Systems Solutions are generally too complex for BOM Import. Carefully examine the results, and if unsatisfactory consider rebuilding the solution directly in OCA.";
		def expanderString (o: string, i: int): string[] = callout("Expander", o, i);
		def defaultFEServices (): string[] = defaultList;
		def supportFEF (): string[] = {
			val quorumServerQty = thisConfig.getInstancesOfModel("CSQuorumServerChoiceItemFlag").count;
			val networkSwitchQty = thisConfig.getInstancesOfModel("CSSwitchChoiceItemFlag").count;
			val totalQty = (networkSwitchQty + quorumServerQty) - 0;
			if(totalQty > 0) then expanderString (supportFE, totalQty) else "";
		}
		def supportFECS500ScaleDP (): string[] = {
			val cs500Qty = (thisConfig.getInstancesOfModel("cs500scaleupModelAppliance") + thisConfig.getInstancesOfModel("cs500scaleoutWizard") + thisConfig.getInstancesOfModel("cs500scaleoutAddDP")).count;
			if(cs500Qty > 0) then expanderString (supportFECS500DP, 1) else "";
		}
		boolean i_drive_customer_intent_section_choices: true;

		//LAW TEST-
		boolean overrideIntegrationOption: true;
		def overrideIntegrationOptionAgentFunc (): string = {
			if thisInst.selected(FEserviceH8A03A1).count > 0 then "0D1" else "";
		}
		subsystem alaCarteFESubsystem {
			choice H8A03A1choice {
				targetClass: FEserviceH8A03A1;
				choiceType: multi_select;
				title: "HP Factory Express Complex Custom Service ";
			}
			choice H8A03A1Singlechoice {
				targetClass: FEserviceSingleH8A03A1;
				choiceType: single_select;
				title: "HP Factory Express Complex Custom Service ";
			}
			part addDefaultsTrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "defaultFEServices";
			}
			part addDefaultsFETrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "supportFEF";
			}
			part addDefaultsFECS500Trigger: triggerInternalDefaults {
				string modelDefaultsFunc: "supportFECS500ScaleDP";
			}
		}
		subsystem cascadelakeSubsystem {
			choice flexTrackingSkuServices {
				choiceType: multi_select;
				targetClass: ServiceTrackingSKU;
			}
			choice flexNOServiceguardIntegrationDummy {
				targetClass: NOServiceguardIntegrationDummy;
			}
			choice flexServiceguardIntegrationDummy {
				targetClass: ServiceguardIntegrationDummy;
			}
			choice flexRapidDeploymentStandard {
				targetClass: RapidDeploymentStandardDummy;
			}
			choice flexRapidDeploymentBestShore {
				targetClass: RapidDeploymentBestShoreDummy;
			}
		}
		subsystem supportSelectionsSubsystem {
			choice flexCombinationChoice {
				targetClass: CombinationFlexibleServices;
			}
			choice flexInstallChoice {
				targetClass: InstallationFlexibleServices;
			}
			choice flexCombinationOCAChoice {
				optional: true;
				targetClass: CombinationFlexibleServicesOCA;
				choiceType: single_select;
			}
			choice flexInstallOCAChoice {
				optional: true;
				targetClass: InstallationFlexibleServicesOCA;
				choiceType: single_select;
			}
			choice educationflexibleselectionOCAChoice {
				targetClass: EducationFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice proactiveflexibleselectionOCAChoice {
				targetClass: ProactiveSelectFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice pereventflexibleselectionOCAChoice {
				targetClass: PerEventFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice educationflexibleselectionChoice {
				targetClass: EducationFlexibleServices;
				choiceType: multi_select;
			}
			choice proactiveflexibleselectionChoice {
				targetClass: ProactiveSelectFlexibleServices;
				choiceType: multi_select;
			}
			choice personalizedSupportFlexibleServicesChoice {
				targetClass: PersonalizedSupportFlexibleServices;
				choiceType: multi_select;
			}
			choice personalSupportAdditionalDaysFlexibleServicesChoice {
				targetClass: PersonalSupportAdditionalDaysFlexibleServices;
				choiceType: multi_select;
			}
			choice pereventflexibleselectionChoice {
				targetClass: PerEventFlexibleServices;
				choiceType: multi_select;
			}
			choice ConsultingServicesOCAChoice {
				targetClass: ConsultingFlexibleServices;
				choiceType: multi_select;
			}
			choice ConsultingFixedServicesOCAChoice {
				targetClass: ConsultingFixedServices;
				choiceType: multi_select;
			}
			choice CustomerSpecificCombinationFlexibleChoice {
				targetClass: CustomerSpecificCombinationFlexibleServices;
				choiceType: multi_select;
			}

			//CEZ 2014-10-24 [NPI 64037] Start
			choice onsiteAnalysisFlexibleServicesChoice {
				targetClass: OnsiteAnalysisFlexibleServices;
				choiceType: multi_select;
			}
			choice onsiteAnalysisAdditionalDayFlexibleServicesChoice {
				targetClass: OnsiteAnalysisAdditionalDayFlexibleServices;
				choiceType: multi_select;
			}
			locationArray supportCoordinatorHome {
				fillerClasses: SupportCoordinator;
				columns: 1;
				rows: 1;
			}

			//CEZ 2014-01-06 [NPI 60806]
			def RHELCount (): int = {
				thisInst.selected(RedHatEnterpriseServer).count + thisInst.selected(RedHatLinuxAddOns).count + thisInst.selected(RedHatEnterpriseVirtualization).count;
			}

			//CEZ 2014-01-06 [NPI 60806]
			def RHELCountByDuration (duration: int): int = {
				thisInst.selected(RedHatEnterpriseServer).filterByAttribute(iSupportDuration, duration).count + thisInst.selected(RedHatLinuxAddOns).filterByAttribute(iSupportDuration, duration).count +
				thisInst.selected(RedHatEnterpriseVirtualization).filterByAttribute(iSupportDuration, duration).count;
			}

			//CEZ 2014-01-06 [NPI 60806]
			def flexComboSWSupportCountByDuration (duration: int): int = {
				thisInst.selected(CombinationFlexibleServices).filterByAttribute(iDuration, duration).count + thisInst.selected(StandaloneSWFlexibleServices).filterByAttribute(iDuration, duration).count;
			}

			//CEZ 2014-01-06 [NPI 60806]
			//CEZ 2015-01-29  Modified to handle case where there is RHEL but its duration is not set correctly (not set to 1, 3, 4, or 5).
			constraint RHELFlexSupportDurationWarning {
			//message:  "Make sure the duration of the Red Hat license SKU is consistent with the duration of the Care Pack Service. For example, if purchasing a 3-year Care Pack, make sure the Red Hat selected also includes a 3-year license.";
				message: "Make sure the duration of the Red Hat license SKU is consistent with the duration of the Support Services. For example, if purchasing a 3-year Support Service, make sure the Red Hat selected also includes a 3-year license."; //FR 4-April-16 [PPM 68613]-  TS Care Pack Rebranding
				body:
				{
					val RHEL1 = RHELCountByDuration (1); //CEZ 2015-01-29
					val RHEL3 = RHELCountByDuration (3); //CEZ 2015-01-29
					val RHEL4 = RHELCountByDuration (4); //CEZ 2015-01-29
					val RHEL5 = RHELCountByDuration (5); //CEZ 2015-01-29
					thisConfig.getProperty("services") = "fixedServicesType" || (RHEL1 + RHEL3 + RHEL4 + RHEL5 = 0) //CEZ 2015-01-29  RHELCount() = 0
					|| (RHEL1 > 0 && flexComboSWSupportCountByDuration (1) > 0) //CEZ 2015-01-29 (RHELCountByDuration(1) > 0 && flexComboSWSupportCountByDuration(1) > 0)
					|| (RHEL3 > 0 && flexComboSWSupportCountByDuration (3) > 0) //CEZ 2015-01-29 (RHELCountByDuration(3) > 0 && flexComboSWSupportCountByDuration(3) > 0)
					|| (RHEL4 > 0 && flexComboSWSupportCountByDuration (4) > 0) //CEZ 2015-01-29 (RHELCountByDuration(4) > 0 && flexComboSWSupportCountByDuration(4) > 0)
					|| (RHEL5 > 0 && flexComboSWSupportCountByDuration (5) > 0) //CEZ 2015-01-29 (RHELCountByDuration(5) > 0 && flexComboSWSupportCountByDuration(5) > 0)
;
				}
			}

			//CEZ 2014-01-03 [NPI 60806]
			constraint RHELFlexSupport4YearWarning {
			//message:  "No 4-year Care Pack Service is available for the RHEL product (either bundled or Care Pack). Please select any other valid 1-year, 3-year, or 5-year service that is consistent with the duration of the Red Hat license.";
				message: "No 4-year Support Service is available for the RHEL product (either bundled or Support Services). Please select any other valid 1-year, 3-year, or 5-year service that is consistent with the duration of the Red Hat license."; //FR 4-April-16 [PPM 68613]-  TS Care Pack Rebranding
				body:
				thisConfig.getProperty("services") = "fixedServicesType" || RHELCount () = 0 || flexComboSWSupportCountByDuration (4) = 0;
			}

			//CEZ 2014-01-03 [NPI 60806]
			// Always show this message if RHEL is configured and support is fixed.
			constraint RHELFixedSupportDurationMessage {
			//message:  "1) No 4-year Service is available for the Red Hat product (either bundled or Care Pack). Please make sure to select a valid 1-year or 3-year or 5-year Care Pack Service, such as Proactive Care Service. 2) Make sure the duration of the Red Hat license SKU is consistent with the duration of the Care Pack Service. For example, if purchasing a 3-year Care Pack, make sure the Red Hat selected also includes a 3-year license.";
				message:
				"1) No 4-year Service is available for the Red Hat product (either bundled or Support Services). Please make sure to select a valid 1-year or 3-year or 5-year Support Service, such as Proactive Care Service. 2) Make sure the duration of the Red Hat license SKU is consistent with the duration of the Support Services. For example, if purchasing a 3-year Support Service, make sure the Red Hat selected also includes a 3-year license."; //FR 4-April-16 [PPM 68613]-  TS Care Pack Rebranding
				body:
				thisConfig.getProperty("services") = "flexibleServicesType" || RHELCount () = 0;
			}

			// APM 10/13/14 PPM 63963
			def SLESCount (): int = {
				thisInst.selected(NovellSUSELinuxEnterpriseServer).count;
			}

			// APM 10/13/14 PPM 63963
			def SLESCountByDuration (duration: int): int = {
				thisInst.selected(NovellSUSELinuxEnterpriseServer).filterByAttribute(iSupportDuration, duration).count;
			}

			// APM 10/13/14 PPM 63963 //FR PPM 76135 Remove SUSE bundled services rule
			// Modeled after the equivalent RHEL rule except that I have changed the flexComboSWSupportCountByDuration count to be greater than the SLES count (rather than greater than 0)
			//			constraint SLESFlexSupportDurationWarning {
			//			//message:  "Make sure the duration of the SuSe license SKU is consistent with the duration of the Care Pack Service. For example, if purchasing a 3-year Care Pack, make sure the SLES selected also includes a 3-year license.";
			//				message: "Make sure the duration of the SuSe license SKU is consistent with the duration of the Support Services. For example, if purchasing a 3-year Support Service, make sure the SLES selected also includes a 3-year license."; //FR 4-April-16 [PPM 68613]-  TS Care Pack Rebranding
			//				body:
			//				thisConfig.getProperty("services") = "fixedServicesType" || SLESCount () = 0 || (SLESCountByDuration (1) > 0 && flexComboSWSupportCountByDuration (1) >= SLESCountByDuration (1)) || (SLESCountByDuration (3) > 0 &&
			//				flexComboSWSupportCountByDuration (3) >= SLESCountByDuration (3)) || (SLESCountByDuration (4) > 0 && flexComboSWSupportCountByDuration (4) >= SLESCountByDuration (4)) || (SLESCountByDuration (5) > 0 &&
			//				flexComboSWSupportCountByDuration (5) >= SLESCountByDuration (5));
			//			}

			// APM 10/13/14 PPM 63963//FR PPM 76135 Remove SUSE bundled services rule
			//			constraint SLESFlexSupport4n5YearWarning {
			//			//message:  "No 4 or 5 year Care Pack Service is available for the SuSe product (either bundled or Care Pack). Please select any other valid 1-year, 3-year service that is consistent with the duration of the SLES license.";
			//				message: "No 4 or 5 year Support Service is available for the SuSe product (either bundled or Support Services). Please select any other valid 1-year, 3-year service that is consistent with the duration of the SLES license."; //FR 4-April-16 [PPM 68613]-  TS Care Pack Rebranding
			//				body:
			//				thisConfig.getProperty("services") = "fixedServicesType" || SLESCount () = 0 || flexComboSWSupportCountByDuration (4) = 0 && flexComboSWSupportCountByDuration (5) = 0;
			//			}

			// APM 10/13/14 PPM 63963 //FR PPM 76135 Remove SUSE bundled services rule
			// Always show this message if SuSe is configured and support is fixed.
			//			constraint SuSeFixedSupportDurationMessage {
			//			//message:  "1) No 4-year or 5-year Service is available for the SuSe product (either bundled or Care Pack). Please make sure to select a valid 1-year or 3-year Care Pack Service, such as Proactive Care Service. 2) Make sure the duration of the SuSe license SKU is consistent with the duration of the Care Pack Service. For example, if purchasing a 3-year Care Pack, make sure the SuSe selected also includes a 3-year license.";
			//				message:
			//				"1) No 4-year or 5-year Service is available for the SuSe product (either bundled or Support Services). Please make sure to select a valid 1-year or 3-year Support Services, such as Proactive Care Service. 2) Make sure the duration of the SuSe license SKU is consistent with the duration of the Support Services. For example, if purchasing a 3-year Support Service, make sure the SuSe selected also includes a 3-year license."; //FR 4-April-16 [PPM 68613]-  TS Care Pack Rebranding
			//				body:
			//				thisConfig.getProperty("services") = "flexibleServicesType" || SLESCount () = 0;
			//			}

		}
		boolean supportsTechCare: true;
	}
	class ServiceTrackingSKU extends RootProductClass {
		string source: "MANUAL"; //TD 5-22-2018 prevent menu import from removing these since these are usually not on base menus skips setting end date in import
		string[] defaultList: "";
		string[] supportFE: "";
		string[] supportFECS500DP: "";
		boolean valid_For_Toms_check_B: false;
		boolean isServicePromoted: true;
		string lineItemImportMsg: "**WARNING** Converged Systems Solutions are generally too complex for BOM Import. Carefully examine the results, and if unsatisfactory consider rebuilding the solution directly in OCA.";
		boolean i_drive_customer_intent_section_choices: true;
		int promotionLevel: -1;
		//LAW TEST-
		boolean overrideIntegrationOption: true;
		subsystem supportSelectionsSubsystem {
			choice flexCombinationChoice {
				targetClass: CombinationFlexibleServices;
			}
			choice flexInstallChoice {
				targetClass: InstallationFlexibleServices;
			}
			choice flexCombinationOCAChoice {
				optional: true;
				targetClass: CombinationFlexibleServicesOCA;
				choiceType: single_select;
			}
			choice flexInstallOCAChoice {
				optional: true;
				targetClass: InstallationFlexibleServicesOCA;
				choiceType: single_select;
			}
			choice educationflexibleselectionOCAChoice {
				targetClass: EducationFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice proactiveflexibleselectionOCAChoice {
				targetClass: ProactiveSelectFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice pereventflexibleselectionOCAChoice {
				targetClass: PerEventFlexibleServicesOCA;
				choiceType: multi_select;
			}
			choice educationflexibleselectionChoice {
				targetClass: EducationFlexibleServices;
				choiceType: multi_select;
			}
			choice proactiveflexibleselectionChoice {
				targetClass: ProactiveSelectFlexibleServices;
				choiceType: multi_select;
			}
			choice personalizedSupportFlexibleServicesChoice {
				targetClass: PersonalizedSupportFlexibleServices;
				choiceType: multi_select;
			}
			choice personalSupportAdditionalDaysFlexibleServicesChoice {
				targetClass: PersonalSupportAdditionalDaysFlexibleServices;
				choiceType: multi_select;
			}
			choice pereventflexibleselectionChoice {
				targetClass: PerEventFlexibleServices;
				choiceType: multi_select;
			}
			choice ConsultingServicesOCAChoice {
				targetClass: ConsultingFlexibleServices;
				choiceType: multi_select;
			}
			choice ConsultingFixedServicesOCAChoice {
				targetClass: ConsultingFixedServices;
				choiceType: multi_select;
			}
			choice CustomerSpecificCombinationFlexibleChoice {
				targetClass: CustomerSpecificCombinationFlexibleServices;
				choiceType: multi_select;
			}

			//CEZ 2014-10-24 [NPI 64037] Start
			choice onsiteAnalysisFlexibleServicesChoice {
				targetClass: OnsiteAnalysisFlexibleServices;
				choiceType: multi_select;
			}
			choice onsiteAnalysisAdditionalDayFlexibleServicesChoice {
				targetClass: OnsiteAnalysisAdditionalDayFlexibleServices;
				choiceType: multi_select;
			}
			locationArray supportCoordinatorHome {
				fillerClasses: SupportCoordinator;
				columns: 1;
				rows: 1;
			}

			//CEZ 2014-01-06 [NPI 60806]
			def flexComboSWSupportCountByDuration (duration: int): int = {
				thisInst.selected(CombinationFlexibleServices).filterByAttribute(iDuration, duration).count + thisInst.selected(StandaloneSWFlexibleServices).filterByAttribute(iDuration, duration).count;
			}
		}
	}
	class RapidDeploymentStandardDummy extends RootNonProductClass {
	}
	product DummyRapidDeploymentStandard RapidDeploymentStandardDummy {
		description: "HPE Rapid Deployment - Standard Dummy";
	}
	class RapidDeploymentBestShoreDummy extends RootNonProductClass {
	}
	product DummyRapidDeploymentBestShore RapidDeploymentBestShoreDummy {
		description: "HPE Rapid Deployment - Best Shore Dummy";
	}
	class NOServiceguardIntegrationDummy extends RootNonProductClass {
	}
	product DummyNOServiceguardIntegration NOServiceguardIntegrationDummy {
		description: "No HPE Serviceguard Integration Dummy";
	}
	class ServiceguardIntegrationDummy extends RootNonProductClass {
	}
	product DummyServiceguardIntegration ServiceguardIntegrationDummy {
		description: "HPE Serviceguard Integration Dummy";
	}
	//CRAY & SGI
	class SgiProductOption extends RootProductClass {
	}
	class SgiCable extends SgiProductOption {
		//BOM Product View
		string productViewCategory: "CABLES";
	}
	class SgiEthernet1to10GbCable extends SgiCable {
	}
	class SgiIceManifoldKit extends SgiProductOption {
		//BOM Product View
		string productViewCategory: "RACKOPT";
	}
	class SgiIceFacilitiesAdapter extends SgiProductOption {
		string targetRegion;
	}
	class ServerTypeChoiceItem extends ChoiceItemFlag {
		int nodeCapacity: 1;
		boolean isTAA: false;
		string altProductId: "";
		int pciSlots: 1;
	}
	
	class ServerBundleItem extends ChoiceItemFlag {
		string modelId: "";
		string[] optionProducts: "";
	}
	
	class ProcessorQtyChoiceItem extends ChoiceItemFlag {
	}
	class MemoryQtyChoiceItem extends ChoiceItemFlag {
		int memoryQty: 0;
	}
	class PciQtyChoiceItem extends ChoiceItemFlag {
	}
	class DriveQtyChoiceItem extends ChoiceItemFlag {
	}
	class GraphicsQtyChoiceItem extends ChoiceItemFlag {
	}
	class OCPCardQtyChoiceItem extends ChoiceItemFlag {
	}
	class IceXaSolnQuestion extends SgiProductOption {
		boolean isProductClass: false;
		int sequence;
	}
	class GpuBoard extends SgiProductOption {
		productCategories: PciCardCat;
		string mainStreamcustomStreamType: "Graphics"; //shd 7/20/20
		int iWattage: 0;
		double dGPUMemory: 0.;
		token tPciCardType: graphics;
		token tPciType: PCI_E;
		int iBusWidth: 4;
		token tHeight: LP;
		token tLength: HL;
		def slotsCompatibileForThisCardAgentFunc (slots: Set< PciSlot >): Set< PciSlot > = filter(slots, slot => slot.cardIsCompatible (thisInst));
		def cardSlottingPriorityAgentFunc (slots: Set< PciSlot >): int = count(slotsCompatibileForThisCardAgentFunc (slots));
		def cardIsCompatibleWithSlotExplicit (slot: PciSlot): boolean = true;
		string sPciType: "PCI_E";
	}
	class GpuBlank extends SgiProductOption {
	}
	class TestDevelopmentFlag extends ChoiceItemFlag {
	}
	class BladeTypeChoiceItem extends ChoiceItemFlag {
	}
	class HpcmTypeChoiceItem extends ChoiceItemFlag {
	}
	class SoftwareScopeChoiceItem extends ChoiceItemFlag {
	}
	class PerformanceSuiteChoiceItem extends ChoiceItemFlag {
	}
	class PbsProChoiceItem extends ChoiceItemFlag {
	}
	class CustomTrimChoiceItem extends ChoiceItemFlag {
	}
	class RacksPerRowChoiceItem extends ChoiceItemFlag {
	}
	class IceXaWaterCoolIO extends IceXaSolnQuestion {
		int sequence: 6;
	}
	part cduRackGroupType GenericGroupType {
		boolean isConfigInstanceGroup: true;
		boolean isSolutionConfigGroup: true;
	}
	part dRackGroupType GenericGroupType {
		boolean isConfigInstanceGroup: true;
		boolean isSolutionConfigGroup: true;
	}
	part sgiBladeGroupType GenericGroupType {
		boolean isConfigInstanceGroup: false;
		boolean isSolutionConfigGroup: false;
	}
	part sgiEnclosureGroupType GenericGroupType {
		boolean isConfigInstanceGroup: false;
		boolean isSolutionConfigGroup: false;
	}
	part sgiServerGroupType GenericGroupType {
		boolean isConfigInstanceGroup: false;
		boolean isSolutionConfigGroup: false;
	}
	class SlingshotOpticalModule extends RootProductClass {
	}
	class NoSmartStorageBattery extends ControllerCacheUpgrade {
	}
}