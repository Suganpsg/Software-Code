
package com.hp.ngc.uiframework.tool.oca;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutionException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.sql.DataSource;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang3.concurrent.BackgroundInitializer;
import org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.perf4j.StopWatch;
import org.perf4j.log4j.Log4JStopWatch;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.client.RestTemplate;

import com.alibaba.fastjson.JSONObject;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.internal.StringMap;
import com.google.gson.reflect.TypeToken;
import com.hp.corona.db.config.database.ConfigDao;
import com.hp.corona.db.config.database.ConfigDaoImpl;
import com.hp.corona.db.config.database.vo.AssetVO;
import com.hp.corona.db.config.database.vo.ConfigVO;
import com.hp.ngc.dao.siteadmin.jdbc.SiteAttributeDao;
import com.hp.ngc.domain.Currency;
import com.hp.ngc.domain.PriceDescriptor;
import com.hp.ngc.domain.siteadmin.SiteAttribute;
import com.hp.ngc.domain.user.User;
import com.hp.ngc.domain.user.UserType;
import com.hp.ngc.engine.api.IConfiguration;
import com.hp.ngc.engine.api.IKnowledgeBase;
import com.hp.ngc.engine.api.IPreferences;
import com.hp.ngc.engine.api.ISession;
import com.hp.ngc.engine.api.ISubConfiguration;
import com.hp.ngc.engine.api.KBManager;
import com.hp.ngc.engine.api.PreferencesFactory;
import com.hp.ngc.engine.api.SessionFactory;
import com.hp.ngc.engine.api.bean.IKbInfo;
import com.hp.ngc.engine.api_impl.ConfigurationImpl;
import com.hp.ngc.engine.api_impl.IPreferencesInternal;
import com.hp.ngc.engine.api_impl.ConfigurationImpl.ConfigurationType;
import com.hp.ngc.engine.api_impl.KnowledgeBaseImpl;
import com.hp.ngc.engine.api_impl.SessionImpl;
import com.hp.ngc.engine.api_impl.SubConfigurationImpl;
import com.hp.ngc.engine.api_impl.SubConfigurationImpl.SubConfigurationType;
import com.hp.ngc.engine.api_impl.component.TreeNode;
import com.hp.ngc.engine.exceptions.EngineException;
import com.hp.ngc.engine.productFilter.utility.ITomsInterface;
import com.hp.ngc.importer.CombinedItem;
import com.hp.ngc.importer.ConfigItem;
import com.hp.ngc.importer.ILineItemConfigurationCreator;
import com.hp.ngc.kb.modelInstance.ConfigurationInstance;
import com.hp.ngc.kb.modelInstance.ModelInstance;
import com.hp.ngc.kb.modelStore.NgcClass;
import com.hp.ngc.manager.UserManager;
import com.hp.ngc.maui.model.Configuration;
import com.hp.ngc.maui.model.Configuration.CompletenessState;
import com.hp.ngc.maui.model.Configuration.ShareState;
import com.hp.ngc.maui.model.Configuration.VisibilityState;
import com.hp.ngc.maui.model.ConfigurationPreference;
import com.hp.ngc.maui.model.item.AbstractVirtualLineItem;
import com.hp.ngc.maui.model.item.AccessoryRootItem;
import com.hp.ngc.maui.model.item.BundleRootItem;
import com.hp.ngc.maui.model.item.SubConfigRootItem;
import com.hp.ngc.maui.service.common.AbstractServiceResponse.ResponseStatus;
import com.hp.ngc.maui.service.exchange.exporter.ExporterRequest;
import com.hp.ngc.maui.service.exchange.exporter.ExporterResponse;
import com.hp.ngc.maui.service.exchange.exporter.IExporter;
import com.hp.ngc.maui.service.exchange.exporter.IExporter.ExportType;
import com.hp.ngc.maui.service.exchange.exporter.impl.ExportDataProvider;
import com.hp.ngc.maui.service.exchange.exporter.impl.ExporterFacade;
import com.hp.ngc.maui.service.persistence.IPersistenceService;
import com.hp.ngc.maui.service.persistence.request.DeleteConfigurationRequest;
import com.hp.ngc.maui.service.persistence.request.OpenConfigurationRequest;
import com.hp.ngc.maui.service.persistence.request.SaveConfigurationRequest;
import com.hp.ngc.maui.service.persistence.response.DeleteConfigurationResponse;
import com.hp.ngc.maui.service.persistence.response.OpenConfigurationResponse;
import com.hp.ngc.maui.service.persistence.response.SaveConfigurationResponse;
import com.hp.ngc.plugins.builtin.agents.views.ProductCatalog;
import com.hp.ngc.plugins.builtin.preferences.Preferences;
import com.hp.ngc.service.clickcheckservice.ClicResponse;
import com.hp.ngc.uiframework.DialogButton;
import com.hp.ngc.uiframework.ICallback;
import com.hp.ngc.uiframework.IPage;
import com.hp.ngc.uiframework.IUser;
import com.hp.ngc.uiframework.MauiResponse;
import com.hp.ngc.uiframework.MauiResponse.ActionCode;
import com.hp.ngc.uiframework.MauiResponse.MauiAction;
import com.hp.ngc.uiframework.MauiResponse.MauiFailure;
import com.hp.ngc.uiframework.SessionObj;
import com.hp.ngc.uiframework.UIFramework;
import com.hp.ngc.uiframework.Window;
import com.hp.ngc.uiframework.authentication.ILoginContext;
import com.hp.ngc.uiframework.bean.APIConfigurationFactory;
import com.hp.ngc.uiframework.bean.StatefulAPIConfiguration;
import com.hp.ngc.uiframework.bean.StatefulAPIConfiguration.ConfigSelection;
import com.hp.ngc.uiframework.data.DataServices;
import com.hp.ngc.uiframework.tool.oca.expertbom.ExpertBOMProduct;
import com.hp.ngc.uiframework.tool.oca.expertbom.OCAExpertBOMUtility;
import com.hp.ngc.uiframework.tool.oca.model.view.OverviewNode;
import com.hp.ngc.uiframework.tool.oca.modules.cosolidate.offerring.delegation.ConfigDelegationService;
import com.hp.ngc.uiframework.tool.oca.modules.cosolidate.offerring.search.CoronaSearchService;
import com.hp.ngc.uiframework.tool.oca.modules.cosolidate.offerring.search.OCASearchConfigVO;
import com.hp.ngc.uiframework.tool.oca.modules.cosolidate.offerring.search.SolrSearchService;
import com.hp.ngc.uiframework.tool.oca.modules.customerAccount.CustomerAccountManager;
import com.hp.ngc.uiframework.tool.oca.modules.localization.ILocalization;
import com.hp.ngc.uiframework.tool.oca.modules.localization.Localization;
import com.hp.ngc.uiframework.tool.oca.modules.mdm.CustomerSearchResponse;
import com.hp.ngc.uiframework.tool.oca.modules.mdm.CustomerSearchResults;
import com.hp.ngc.uiframework.tool.oca.modules.mdm.CustomerValidatorResponse;
import com.hp.ngc.uiframework.tool.oca.modules.mdm.CustomerValidatorResponse.ValidateMessage;
import com.hp.ngc.uiframework.tool.oca.modules.mdm.GoiClient;
import com.hp.ngc.uiframework.tool.oca.modules.mdm.MdmClient;
import com.hp.ngc.uiframework.tool.oca.modules.mdm.OcaOrganization;
import com.hp.ngc.uiframework.tool.oca.modules.mdm.Opportunity;
import com.hp.ngc.uiframework.tool.oca.modules.sweetspots.PromoteSweetServices;
import com.hp.ngc.uiframework.tool.oca.modules.sweetspots.SweetSpotsConfig;
import com.hp.ngc.uiframework.tool.oca.modules.uag.bean.OCAConfigOperation;
import com.hp.ngc.uiframework.tool.oca.modules.uag.bean.OCANewWorkgroup;
import com.hp.ngc.uiframework.tool.oca.modules.uag.bean.OCARecommendationAlertMessages;
import com.hp.ngc.uiframework.tool.oca.modules.uag.bean.OCAUser;
import com.hp.ngc.uiframework.tool.oca.modules.uag.manager.OCADashBoardManager;
import com.hp.ngc.uiframework.tool.oca.modules.uag.manager.OCANewWorkgroupManager;
import com.hp.ngc.uiframework.tool.oca.modules.uag.manager.OCAUserManager;
import com.hp.ngc.uiframework.tool.oca.pages.ConfigWorkgroupMigration;
import com.hp.ngc.uiframework.tool.oca.pages.CrossBUMaintenancePage;
import com.hp.ngc.uiframework.tool.oca.pages.CustomerAccountMaintenancePage;
import com.hp.ngc.uiframework.tool.oca.pages.DashboardMaintenancePage;
import com.hp.ngc.uiframework.tool.oca.pages.HomePage;
import com.hp.ngc.uiframework.tool.oca.pages.ImportBomPage;
import com.hp.ngc.uiframework.tool.oca.pages.ImportHpcPage;
import com.hp.ngc.uiframework.tool.oca.pages.ImportJsonPage;
import com.hp.ngc.uiframework.tool.oca.pages.ImportOcaPage;
import com.hp.ngc.uiframework.tool.oca.pages.ImportSizerPage;
import com.hp.ngc.uiframework.tool.oca.pages.MainPage;
import com.hp.ngc.uiframework.tool.oca.pages.NewConfigPage;
import com.hp.ngc.uiframework.tool.oca.pages.NimblePage;
import com.hp.ngc.uiframework.tool.oca.pages.OCAAbstractPage;
import com.hp.ngc.uiframework.tool.oca.pages.PartnerBRTypeServicesPage;
import com.hp.ngc.uiframework.tool.oca.pages.PerformanceTestMaintenancePage;
import com.hp.ngc.uiframework.tool.oca.pages.RecommendationAndAlertsPage;
import com.hp.ngc.uiframework.tool.oca.pages.RunPerformanceTestingPage;
import com.hp.ngc.uiframework.tool.oca.pages.SupportLinksPage;
import com.hp.ngc.uiframework.tool.oca.pages.TSServicesPage;
import com.hp.ngc.uiframework.tool.oca.service.emdm.EmdmJerseyClient;
import com.hp.ngc.uiframework.tool.oca.service.emdmh.CoronaEMDMHServiceDao;
import com.hp.ngc.uiframework.tool.oca.service.emdmh.CustomerDetailsVO;
import com.hp.ngc.uiframework.tool.oca.service.emdmh.EMDMHService;
import com.hp.ngc.uiframework.tool.oca.service.pricing.PriceService;
import com.hp.ngc.uiframework.tool.oca.utilities.ConfigurationConvertor;
import com.hp.ngc.uiframework.tool.oca.utilities.IconUtility;
import com.hp.ngc.uiframework.tool.oca.utilities.KbUtils;
import com.hp.ngc.uiframework.tool.oca.utilities.OCAActionUtils;
import com.hp.ngc.uiframework.tool.oca.utilities.OCALeadTimeHelper;
import com.hp.ngc.uiframework.tool.oca.utilities.OCAStringUtilities;
import com.hp.ngc.uiframework.tool.oca.utilities.OCAUtilities;
import com.hp.ngc.uiframework.tool.oca.utilities.ServiceUtilities;
import com.hp.ngc.uiframework.tool.oca.widgets.CurrentBuildingWidget;
import com.hp.ngc.uiframework.tool.utilities.ConfigUtilities;
import com.hp.ngc.uiframework.tool.utilities.TestUISerializer;
import com.hp.ngc.uiframework.utilities.LoggerUtils;
import com.hp.ngc.uiframework.utilities.SpringApplicationContext;
import com.hp.ngc.uiframework.utilities.SpringPropertiesUtil;
import com.hp.ngc.uiframework.utilities.StringUtils;
import com.hp.ngc.uiframework.widgets.utilities.WidgetUtilities;
import com.hp.ngc.util.UtilityConfigMethods;
import com.sun.jersey.api.client.ClientResponse;

/**
 * Create a session for OCA user to cache some required information.
 * @Title: OCASession.java
 * @author Ervin Wang
 */
public class OCASession extends SessionObj {
	private int rowIndex = 0;
	OCASession session = null;
	private boolean enableAccCatalog = true;
	private boolean enableSWCatalog = true;
	private static Map<String, Object> filterMap = null;
	public ConcurrentHashMap<String,byte[]> exportDataMap = new ConcurrentHashMap<String, byte[]>();
	
	/**
     * cache clic check data
     * Map<"ucid", HashMap<"Item SubItem Number", HashMap<"LineItemStatus", List<ClicResponse>>>>
    */
    private  Map<String, HashMap<String, HashMap<String, List<ClicResponse>>>> clicCheckData = new HashMap<String, HashMap<String, HashMap<String, List<ClicResponse>>>>();
    

	private String clickStatus;
	private Date clickRunDate;
	private boolean displayClicWarning = true;
	private boolean isCountryChanged = false;
	private boolean isGreenLakeChanged = false;
	private boolean isClicCheckAfterBomToggle = false;
	private boolean clicCheckDone = false;
	private boolean doClicCheckExpertBOM = false;
	private static final String SUFFIX_OF_LAST_SELECTED_WORKGROUP = "LAST_SELECTED_WORKGROUP";
	
    /**
     * serialVersionUID
     */
    private static final long serialVersionUID = 1L;

    /**
     * Main Page class name
     */
    public static final String MAIN_PAGE_CLASS = "com.hp.ngc.uiframework.tool.oca.pages.MainPage";

    /**
     * my library page class name
     */
    public static final String MY_LIBRARY_PAGE_CLASS = "com.hp.ngc.uiframework.tool.oca.pages.ManageMylibraryPage";

    /**
    * my library page class name
    */
   public static final String RECOMMENDATION_ALERTS_PAGE_CLASS = "com.hp.ngc.uiframework.tool.oca.widgets.RecommendationAlertsWidget";
    /**
     * fixed string : "logicContextParameterOpenUserPreference"
     */
    public static final String LOGIN_CONTEXT_PARAMTER_OPEN_USER_PREFERENCE = "logicContextParameterOpenUserPreference";
    
    /**
     * My dashboard maintenance page class name
     */
    public static final String MY_DASHBOARD_MAINTENANCE_PAGE_CLASS = "com.hp.ngc.uiframework.tool.oca.pages.DashboardMaintenancePage";

    /**
     * OCA asset name : OCA
     */
    private static final String OCA_ASSET_NAME = "OCA";

    /**
     * temporary UCID: "TempUCID"
     */
    private static final String TEMP_UCID = "TempUCID";

    /**
     * temporary Flag for ShowExtended US13166
     */
//    private static final String OCA_EXT_PRODUCT_FEATURE = "OCA_EXTENDED_PRODUCT_FEATURE";


    /**
     * HTTP result code : 200, OK
     */
    private static final int HTTP_RESULT_OK = 200;

    /**
     * HTTP result code : 408, Read time out.
     */
    private static final int HTTP_RESULT_TIME_OUT = 408;

    /**
     * HTTP result code : 500, some internal error happened.
     */
    private static final int HTTP_RESULT_INTERNAL_ERROR = 500;

    /**
     * HTTP result code : 503, service unavailable.
     */
    private static final int HTTP_RESULT_SERVICE_ERROR = 503;

    /**
     * the max length of KB version name: 100.
     */
    private static final int KB_VERSION_MAX_LENGTH = 100;

    /**
     * pattern matching string for numeric format
     */
    private static final Pattern NUM_PATTERN = Pattern.compile("\\d*");

    /**
     * configuration expired days: 730.
     */
    private static final int CONFIG_EXPIRED_DAYS = 730;
    
    // For storing the details of user's browser
	private static String user_Browser=null;
	private static  String user_OS=null;

    /**
     * Logger
     */
    private final transient Logger logger = Logger.getLogger(OCASession.class);

    /**
     * cache power data
     */
    private transient Map<String, JsonObject>  powerData = new HashMap<String, JsonObject>();
    /**
     * validation info for power
     */
    private transient JsonObject validatedInfo = new JsonObject();
    /**
     * engine catalog
     */
    private transient ProductCatalog engineCatalog;
    private transient ProductCatalog softwareCatalog;//LAW SWCAT
    private transient ProductCatalog accessoryCatalog;//LAW AccCAT
    
    //LAW R23 - Add helper
    private NgcClass toolsHelper;
    
    protected static final Logger auditLogger = Logger.getLogger("Audit"); 
    /**
     * statefulAPI Configuration for current configuration
     */
    private StatefulAPIConfiguration statefulConfig;
    /**
     * solution sub-configuration for current configuration
     */
    private ISubConfiguration solutionSubConfig;
    /**
     * domain/tool configuration for current configuration
     */
    private Configuration toolConfig = null;
    /**
     * engine session id
     */
    private String engineSessionId = getEngineSession().getId();
    /**
     * count of configuration
     */
    private int configCount = 1;
    /**
     * TODO cache unknown info for power widget
     */
    private Map<String, Map<String, Integer>> productsConfigured = new HashMap<String, Map<String, Integer>>();
    /**
     * power advisor nodes
     */
    private int powerAdvisorNodes = -1;
    /**
     * persistent service
     */
    private IPersistenceService persistentService = null;
    /**
     * the last saved one(include new version)
     */
    private Configuration currentBuildingConfig;
    /**
     * to be showed in home page under the currentBuilding(all sub-configurations)
     * recent top 11 configurations
     */
    private Set<Configuration> topElevenConfigList = new LinkedHashSet<Configuration>();
    /**
     * recent top 10 configurations which will be showed in the configuration configuration in home page and header
     */
    private ApplicationContext ocaApplicationContext = getTool().getToolSpringApplicationContext();
    /**
     * OCA WorkGroup manager
     */
    private OCANewWorkgroupManager ocaWorkgroupManager = (OCANewWorkgroupManager) ocaApplicationContext
            .getBean("OCANewWorkgroupManager");
    /**
     * SiteAtrributeDao
     */
    private SiteAttributeDao siteAttributeDAO = (SiteAttributeDao) ocaApplicationContext
            .getBean("siteAttributeDao");
    /**
     * Customer Account Manager
     */
    private CustomerAccountManager customerAccountManager = (CustomerAccountManager)ocaApplicationContext
            .getBean("customerAccountManager");
    /**
     * User Manager
     */
    UserManager userManager = (UserManager) SpringApplicationContext.getBean("UserManager");
    
    private PromoteSweetServices referenceBuildService = (PromoteSweetServices) getTool()
            .getToolSpringApplicationContext().getBean("promotesweetservices");
    
    private OCADashBoardManager ocaDashBoardManager = (OCADashBoardManager) getTool()
			.getToolSpringApplicationContext().getBean("OCADashBoardManager");
    
    private SolrSearchService solrService = (SolrSearchService) getTool().getToolSpringApplicationContext()
            .getBean("solrSearchService");
    
    /**
     * store the UCID to persistent engine configId
     */
    private Map<String, String> ucidToEngineConfigId = new HashMap<String, String>();

    /**
     * cache a mapping from sub-configuration id to UCID.
     */
    private Map<String, String> subConfigIdToUcid = new HashMap<String, String>();
    /**
     * cache a mapping from standalone sub-configuration id to UCID.
     */
    private Map<String, String> standaloneSubConfigIdToUcid = new HashMap<String, String>();

    /**
     * OCA localization
     */
    private ILocalization localization;

    /**
     * Saved Solution SubConfiguration Items, used for BOM diff
     */
    private List<ConfigItem> savedSolutionSubConfigItems;
    
    private List<ConfigItem> clicCheckSubConfigItems;

    /**
     * open current config with delegation mode
     */
    private boolean openDeleagtedConfig = false;
    
    private boolean isEMRSolution = false;    
    
    private boolean isGLSCConfig = false;
    
    //EMR
    private boolean isSwitchErrorFlag = false;
    
    private boolean isRecentConfigVisible = false;
    
    private boolean isShowExtendedFlagEnabled = false;
    
    private  List<Map<String, String>> customerAccountList;
    
    private static final Type PARAMETER_TYPE = new TypeToken<Map<String, Object>>(){}.getType();
    
    //Added for User Story 12877:Config Delegation
    private String configDlgStatus = null;
    
    private static final long CODE_GOI_FAILURE = -1l;
    private static final long CODE_GOI_SUCCESS = 0l;
    private static final long CODE_MDM_FAILURE = -1l;
    private static final long CODE_EMDMH_FAILURE = -1l;
    
    private boolean expertBOMtoggled = false;
    
    private Map<String,Map<String,ExpertBOMProduct>> expertBOMProductMap = new HashMap<String,Map<String,ExpertBOMProduct>>();
    
    private Map<String,SweetSpotsConfig> referenceBuildUcidMap = new HashMap<String, SweetSpotsConfig>();
    
    private String serialNumber;
    
    private boolean configLoadedFromOcaFile = false;
    
    private String anchorNodeId;
    private String alternateAnchorNodeId;
    
    private JsonObject referenceBuildInfo;
    
    private boolean expertBomDirty = false;
    
    private String adHocMessage;
    
    public boolean isExpertBomDirty() {
		return expertBomDirty;
	}

	public void setExpertBomDirty(boolean expertBomDirty) {
		this.expertBomDirty = expertBomDirty;
	}

    private EMDMHService emdmhService =null;
    
    private CoronaEMDMHServiceDao coronaEMDMHService =null; 

    
    public String getAnchorNodeId() {
		return anchorNodeId;
	}

	public void setAnchorNodeId(String anchorNodeId) {
		this.anchorNodeId = anchorNodeId;
	}

	public String getAlternateAnchorNodeId() {
		return alternateAnchorNodeId;
	}

	public void setAlternateAnchorNodeId(String alternateAnchorNodeId) {
		this.alternateAnchorNodeId = alternateAnchorNodeId;
	}

	public JsonObject getReferenceBuildInfo() {
		return referenceBuildInfo;
	}
	
	public void setReferenceBuildInfo(JsonObject referenceBuildInfo) {
		this.referenceBuildInfo = referenceBuildInfo;
	}

	public boolean isConfigLoadedFromOcaFile() {
		return configLoadedFromOcaFile;
	}

	public void setConfigLoadedFromOcaFile(boolean configLoadedFromOcaFile) {
		this.configLoadedFromOcaFile = configLoadedFromOcaFile;
	}

	public boolean isExpertBOMtoggled() {
		return expertBOMtoggled;
	}

	public void setExpertBOMtoggled(boolean expertBOMtoggled) {
		this.expertBOMtoggled = expertBOMtoggled;
	}

	public String getConfigDlgStatus() {
		return configDlgStatus;
	}

	public void setConfigDlgStatus(String configDlgStatus) {
		this.configDlgStatus = configDlgStatus;
	}

	public boolean isRecentConfigVisible() {
		return isRecentConfigVisible;
	}

	public void setRecentConfigVisible(boolean isRecentConfigVisible) {
		this.isRecentConfigVisible = isRecentConfigVisible;
	}
	

	public static String getUser_Browser() {
		return user_Browser;
	}

	public  void setUser_Browser(String user_Browser) {
		this.user_Browser = user_Browser;
	}

	public static String getUser_OS() {
		return user_OS;
	}

	public  void setUser_OS(String user_OS) {
		this.user_OS = user_OS;
	}

	/**
     * Create OCA session
     * @param parentTool OCA
     * @throws EngineException if exception happened
     */
    public OCASession(OCA parentTool) throws EngineException {
        this(null, parentTool, null);
    }

    /**
     * Create a new OCA session
     * @param user current user
     * @param tool OCA
     * @param httpContents HTTP parameters
     * @throws EngineException if user is null or reset user info failed or open config failed for WNGQ.
     */
    public OCASession(IUser user, OCA tool, Map<String, Map<String, String>> httpContents) throws EngineException {
    

    	super(user, tool.getFramework(), tool);

        Log4JStopWatch watch = new Log4JStopWatch("OCASession");
        System.out.println("Java version: " + System.getProperty("java.version"));

        // Ervin: Temporary code for JDK 1.7 validation
        String jversion = System.getProperty("java.version");
        LoggerUtils.debug(logger, "Java version is " + jversion);
        if (null != jversion && !jversion.startsWith("1.8")) {
            throw new EngineException("Please switch to Java 1.7, currently the Java version is " + jversion);
        }

        if (null == user) {
            LoggerUtils.error(logger, "OCASession.OCASession The user object is empty, can not initialize OCASession.");
            throw new EngineException("The user object is empty, can not initialize OCASession.");
        }
        setHttpContents(httpContents);

        // reset user
        resetUser(user);
        // remove the current configuration (and create a new configuration)
        clearEngineConfigurations();
        
        //Set TOMS filter state
        setTomsFilterState();

        // load config for NGQ user
        //Prasad Move this to getInitialPage Method
        //preLoadConfig4NGQ();
        
        //initialize customer account list so that it is available for different pages like new config page, save config page etc
        initializeCustomerAccountList();
        
        //initialize workgroup list so that it is available for different pages like new config page, save config page etc
        initializeWorkGroupList(user);
        
        // for localization
        String documentCode = ((OCAUser) user).getDocumentLanguageCode();
        // For unauthorized user
        documentCode = StringUtils.isNullOrEmpty(documentCode) ? "en_US" : documentCode;
        localization = new Localization(ocaApplicationContext, documentCode);
        // Session startup, set the RecentConfigVisiblity User settings value
        boolean isRecentConfigVisible = ((OCAUser) user).isConfigRecentConfigVis();
        setRecentConfigVisible(isRecentConfigVisible);

        populateBrowserInfo();
        populateOSInfo();

        LoggerUtils.info(logger, "OCASession.initialization: ", "Session: " + this.getId() + " User: " + user.getName()
                + ", took " + watch.getElapsedTime() + "ms");
    }
    
    private void initializeWorkGroupList(IUser user) {
    	Log4JStopWatch watch = new Log4JStopWatch("initializeWorkGroupList");
    	OCAUser ocaUser = (OCAUser)user;
    	ocaWorkgroupManager.getWorkgroups(ocaUser);
    	//ocaWorkgroupManager.setWorkgroupList();
    	LoggerUtils.info(logger, "OCASession.initializeWorkGroupList:" 
                + ", took " + watch.getElapsedTime() + "ms");
	}

	private void initializeCustomerAccountList(){
    	try {
    		Log4JStopWatch watch = new Log4JStopWatch("initializeCustomerAccountList");
            customerAccountList = ocaWorkgroupManager.getCustomerAccountList(this);
            LoggerUtils.info(logger, "OCASession.initializeCustomerAccountList:" 
                    + ", took " + watch.getElapsedTime() + "ms");
        } catch (EngineException e) {
        	LoggerUtils.error(logger, "OCASession.initializeCustomerAccountList", "Exception happended: ", e);
        }
    }

	private void setTomsFilterState() {
    	KnowledgeBaseImpl kb = (KnowledgeBaseImpl) getUIFramework().getKb();
    	if(kb.getFilters() == null) return;
		if(this.getHttpParameter("tomsenabled") != null && this.getHttpParameter("tomsenabled").equals("false")){
	    	kb.getFilters().disableFilterObject("TOMS");
	    	kb.getFilters().disableFilterObject("tenant_filter");
	    	kb.getFilters().disableFilterObject("productChildFilter");
		}else{
	    	kb.getFilters().enableFilterObject("TOMS");			
	    	kb.getFilters().enableFilterObject("tenant_filter");			
	    	kb.getFilters().enableFilterObject("productChildFilter");			
		}
	}

	public int getConfigCount() {
        return configCount;
    }

    public Map<String, JsonObject> getPowerData() {
        return powerData;
    }

    public void setPowerData(Map<String, JsonObject> powerData) {
        this.powerData = powerData;
    }

    public Map<String, Map<String, Integer>> getProductsConfigured() {
        return productsConfigured;
    }

    public void setProductsConfigured(Map<String, Map<String, Integer>> productsConfigured) {
        this.productsConfigured = productsConfigured;
    }

    public int getPowerAdvisorNodes() {
        return powerAdvisorNodes;
    }

    public void setPowerAdvisorNodes(int powerAdvisorNodes) {
        this.powerAdvisorNodes = powerAdvisorNodes;
    }

    public JsonObject getValidatedInfo() {
        return validatedInfo;
    }

    public void setValidatedInfo(JsonObject validatedInfo) {
        this.validatedInfo = validatedInfo;
    }

    public Configuration getCurrentBuildingConfig() {
        return currentBuildingConfig;
    }

    public void setCurrentBuildingConfig(Configuration currentBuildingConfig) {
        this.currentBuildingConfig = currentBuildingConfig;
    }

    public Set<Configuration> getTopElevenConfigList() {
        return topElevenConfigList;
    }

    public void setTopElevenConfigList(Set<Configuration> topElevenConfigList) {
        this.topElevenConfigList = topElevenConfigList;
    }

    public StatefulAPIConfiguration getStatefulAPIConfiguration() {
        return statefulConfig;
    };

    public Configuration getToolConfig() {
        return toolConfig;
    }

    public Map<String, String> getUcidToEngineConfigId() {
        return ucidToEngineConfigId;
    }

    public void setUcidToEngineConfigId(Map<String, String> ucidToEngineConfigId) {
        this.ucidToEngineConfigId = ucidToEngineConfigId;
    }

    public Map<String, String> getStandaloneSubConfigIdToUcid() {
        return standaloneSubConfigIdToUcid;
    }

    public void setStandaloneSubConfigIdToUcid(Map<String, String> standaloneSubConfigIdToUcid) {
        this.standaloneSubConfigIdToUcid = standaloneSubConfigIdToUcid;
    }

    public Map<String, String> getSubConfigIdToUcid() {
        return subConfigIdToUcid;
    }

    public void setSubConfigIdToUcid(Map<String, String> subConfigIdToUcid) {
        this.subConfigIdToUcid = subConfigIdToUcid;
    }

    public boolean isOpenDeleagtedConfig() {
        return openDeleagtedConfig;
    }

    public void setOpenDeleagtedConfig(boolean openDeleagtedConfig) {
        this.openDeleagtedConfig = openDeleagtedConfig;
    }
    
    public boolean isEMRSolution() {
		boolean emrSolution = false;
		if(statefulConfig != null) {
			ConfigurationImpl engineConfg = (ConfigurationImpl)statefulConfig.getEngineConfig();
			try {
				if(UtilityConfigMethods.isEmrSolution(engineConfg)) {
					emrSolution = true;
				}
			} catch (EngineException e) {
			}
		}
		
		return emrSolution;
	}

	public void setEMRSolution(boolean isEMRSolution) {
		this.isEMRSolution = isEMRSolution;
	}
	
    public boolean isGLSCConfig() {
		return isGLSCConfig;
	}

	public void setGLSCConfig(boolean isGLSCConfig) {
		this.isGLSCConfig = isGLSCConfig;
	}

	public boolean isSwitchErrorFlag() {
		return isSwitchErrorFlag;
	}

	public void setSwitchErrorFlag(boolean isSwitchErrorFlag) {
		this.isSwitchErrorFlag = isSwitchErrorFlag;
	}

	/**
     * please use this method to get Localization instance in OCA
     * @return
     */
    public ILocalization getLocalization() {
        return localization;
    }

    public ExpertBOMProduct getExpertBOMProduct(String country,String productNumber) {
    	Map<String,ExpertBOMProduct> productMap = expertBOMProductMap.get(country);
    	if(productMap != null) {
    		return productMap.get(productNumber);
    	}
    	
    	return null;
    }
    
    public void addExpertBOMProduct(String country,ExpertBOMProduct product) {
    	Map<String,ExpertBOMProduct> productMap = expertBOMProductMap.get(country);
    	if(productMap == null) {
    		productMap = new HashMap<String, ExpertBOMProduct>();
    		expertBOMProductMap.put(country, productMap);
    	}
    	
    	productMap.put(product.getProductNumber(), product);
    }
    
    /**
     * get user's currency type
     * @param currencyCode currency code
     * @return Currency
     */
    public Currency getCurrency(String currencyCode) {
        Currency currency = OCAUserManager.getCurrencyMapping(currencyCode);
        return currency;
    }

    @Override
    public OCAUser getUser() {

        return (OCAUser) user;
    }

    @Override
    public void destroy() throws EngineException {

        LoggerUtils.info(logger, "OCASession.destroy ", "Close session: " + this.getId() + " User: " + user.getName());
        getWindows().clear();
        this.statefulConfig = null;
        this.user = null;
        this.solutionSubConfig = null;
        this.toolConfig = null;
        this.powerData = null;
        this.validatedInfo = null;
        this.statefulConfig = null;
        this.toolsHelper = null; //LAW R23
        this.productsConfigured = null;
        this.persistentService = null;
        this.currentBuildingConfig = null;
        this.topElevenConfigList = null;
        this.ocaApplicationContext = null;
        this.ocaWorkgroupManager = null;
        this.ucidToEngineConfigId = null;
        this.subConfigIdToUcid = null;
        this.standaloneSubConfigIdToUcid = null;
        this.localization = null;
        this.cacheOpenConfiguration = null;
        this.accessoryCatalog = null;
        this.softwareCatalog = null;
        this.engineCatalog = null;
        if (null != engineSessionId) {
            try {
                ConfigUtilities.removeEngineSession(SessionFactory.getSessionById(engineSessionId));
            } catch (Exception e) {
                LoggerUtils.error(logger, "OCASession.destroy(): ", "failed to destroy SessionObj", e);
                throw new EngineException("failed to destroy SessionObj", e);
            }
        }
        this.engineSessionId = null;
        
        if(expertBOMProductMap != null) {
        	for(String country : expertBOMProductMap.keySet()) {
        		expertBOMProductMap.get(country).clear();
        	}
        	expertBOMProductMap.clear();
        }
        
        referenceBuildUcidMap.clear();
        this.clicCheckData.clear();
    }

    public void addReferenceBuildUcid(String ucid,SweetSpotsConfig rbConfig) {
    	referenceBuildUcidMap.put(ucid, rbConfig);
    }
    
    public SweetSpotsConfig getReferenceBuildConfig(String ucid) {
    	SweetSpotsConfig rbConfig = referenceBuildUcidMap.get(ucid);
    	if(rbConfig == null) {
    		PromoteSweetServices pteSweetSportServices = (PromoteSweetServices) getTool()
                .getToolSpringApplicationContext().getBean("promotesweetservices");
    		rbConfig = pteSweetSportServices.getReferenceBuildConfigInfo(ucid);
    	}
    	return  rbConfig;
    }
    
    @Override
    public JsonObject getInitializationParameter() {
        JsonObject initializationParameter = new JsonObject();

        // get session timeout plug-in related parameters
        boolean timeOut = Integer.parseInt(SpringPropertiesUtil.getProperty("session.timeout.reminder.flag")) == 1;

        JsonObject timeoutJson = new JsonObject();
        if (timeOut) {
            // get session timeout valid time
            int validTime = 0;
            Map<String, Object> context = this.getLoginContext();
            if (null == context) {
                context = new HashMap<String, Object>();
            }
            String expire = (String) context.get(ILoginContext.LOGIN_CONTEXT_PARAMTER_EXPIRE);

            if (StringUtils.isNullOrEmpty(expire)) {
                validTime = Integer.parseInt(SpringPropertiesUtil.getProperty("session.timeout.valid.time"));
            } else {
                validTime = Integer.parseInt(expire);
            }

            // get session timeout reminder time
            int reminderTime = Integer.parseInt(SpringPropertiesUtil.getProperty("session.timeout.reminder.time"));

            timeoutJson.addProperty("validTime", validTime);
            timeoutJson.addProperty("reminderTime", reminderTime);
        }
        timeoutJson.addProperty("useSessionTimeoutReminder", timeOut);
        initializationParameter.add("timeout", timeoutJson);

        initializationParameter.add("userJson", TestUISerializer.getJsonElement(user));

        // get user related parameters
        initializationParameter.addProperty("isWNGQUser", ((OCAUser) user).isWNGQUser());
        initializationParameter.addProperty("OCASessionId", this.getId());

        //for localization
        initializationParameter.addProperty("languageCode", localization.getName());

        this.setShowExtendedFlagEnabled(hasExtendedFeature());
        return initializationParameter;
    }

    @Override
    public MauiResponse handleEvent(String event, Map<String, Object> parameters) throws EngineException {
        OCAStringUtilities.cleanHtmlAndScript(parameters);
        return super.handleEvent(event, parameters);
    }

    @Override
    public String getInitialPage(String defaultInitialPage) throws EngineException {
        String resultPage = null;
        Map<String, String> parameters = this.getHttpParameters();
//        for (Map.Entry<String,String> entry : parameters.entrySet()){
//            LoggerUtils.info(logger,"get intial page parameters "+"httpKey = " + entry.getKey() +
//                             ", httpValue = " + entry.getValue());
//        }
        OCAUser unauthorizedUser = (OCAUser) this.user;
        
        //Prasad - EDIT config from NGQ via PRP
        String dispatchAction = parameters.get("DispatchAction");
        if(StringUtils.isNullOrEmpty(dispatchAction)) {
        	dispatchAction = (String)this.loginContext.get("DispatchAction");
        }
        String sourceApplication = parameters.get("SourceApplication");
        if(StringUtils.isNullOrEmpty(sourceApplication)) {
        	sourceApplication = (String)this.loginContext.get("SourceApplication");
        }
        	
        LoggerUtils.info(logger,"OCASession.getInitialPage  DispatchAction : " + dispatchAction + " SourceApplication : " + sourceApplication);
        
        if (unauthorizedUser.isUnauthorizedUser()) {
            resultPage = this.getTool().getToolOptions().getSimpleOptionString("no_access_page",
                    "com.hp.ngc.uiframework.tool.oca.pages.NoAccessPage");
        }//prp to ngq to oca punchout check whether it is landing on to homepage or not
        else if (StringUtils.isEqual(sourceApplication, "WNGQ")
                && StringUtils.isEqual(dispatchAction, "NEW_CONFIG")&& (StringUtils.isEqual(parameters.get("isExternal"), "true"))&& parameters.get("tokenId")!=null) {
            resultPage = this.getTool().getToolOptions().getSimpleOptionString("wngq_home_page",
                    "com.hp.ngc.uiframework.tool.oca.pages.HomePage");
       
        }else if (StringUtils.isEqual(sourceApplication, "WNGQ")
                && StringUtils.isEqual(dispatchAction, "NEW_CONFIG")) {
            resultPage = this.getTool().getToolOptions().getSimpleOptionString("wngq_home_page",
                   "com.hp.ngc.uiframework.tool.oca.pages.HomePage");
        	

        }else if ((StringUtils.isEqual(sourceApplication, "WNGQ") || StringUtils.isEqual(sourceApplication, "ESP"))
                && (StringUtils.isEqual(dispatchAction, "UPDATE_CONFIG"))) {
        	//Prasad - EDIT config from NGQ via PRP
        	preLoadConfig();
            resultPage = this.getTool().getToolOptions().getSimpleOptionString("wngq_open_config_page",
                    "com.hp.ngc.uiframework.tool.oca.pages.MainPage");

        } else if (StringUtils.isEqual(sourceApplication, "WNGQ")
                && (StringUtils.isEqual(dispatchAction, "LANDING_PAGE"))) {
            resultPage = this.getTool().getToolOptions().getSimpleOptionString("landing_page",
                    "com.hp.ngc.uiframework.tool.oca.pages.LandingPage");
         
        } else if (!StringUtils.isNullOrEmpty(parameters.get("bomimport"))||Boolean.parseBoolean(parameters.get("selectBomFile"))) {
            resultPage = this.getTool().getToolOptions().getSimpleOptionString("import_bom_page",
                    "com.hp.ngc.uiframework.tool.oca.pages.ImportBomPage");
        } else if (!StringUtils.isNullOrEmpty(parameters.get("hpcimport"))||Boolean.parseBoolean(parameters.get("selectHpcFile"))) {
            resultPage = this.getTool().getToolOptions().getSimpleOptionString("import_hpc_page",
                    "com.hp.ngc.uiframework.tool.oca.pages.ImportHpcPage");
        } else if(StringUtils.isEqual(parameters.get("SourceApplication"), "PARTNER_BY_PASS")) {
        	if(((OCAUser)this.user).getBypassLoginStatus() == 0) {
        		resultPage="com.hp.ngc.uiframework.tool.oca.pages.HomePage";
        	}else {
        		resultPage = "com.hp.ngc.uiframework.tool.oca.pages.NoAccessPage";
        	}
        }else {
            resultPage = this.getTool().getToolOptions().getSimpleOptionString("initial_page",
                    "com.hp.ngc.uiframework.tool.oca.pages.HomePage");
        }
        
        LoggerUtils.info(logger,"OCASession.getInitialPage " + resultPage);
        
        return resultPage;
    }

    /**
     * Create a new configuration.
     * @return StatefulAPIConfiguration
     * @throws EngineException if exception happened
     */
    public StatefulAPIConfiguration getNewStatefulAPIConfiguration() throws EngineException {

        IKnowledgeBase kb = getUIFramework().getKb();
        String role = KBManager.getRoleForLoadedKB(kb.getId());
        Date targetDate = null;
        OCAUser ocaUser = (OCAUser) user;
        String engineRegion = "";
        String engineCountryCode = "";
        String documentLanguageCode = "";
        String enginePrefXML = "";

        try {
            if (ocaUser.getTargetDate() != null) {
                targetDate = ocaUser.getTargetDate();
            } else {
                targetDate = new Date();

                //Now check for KB compileTargetDate, If it is in future then take that
//                if (kb.getCompiledTargetDate().after(targetDate)) {
//                    targetDate = kb.getCompiledTargetDate();
//                }
            }

            engineRegion = ocaUser.getEngineRegion();
            engineCountryCode = ocaUser.getEngineCountryCode();
            documentLanguageCode = ocaUser.getDocumentLanguageCode();
            enginePrefXML = ((OCAUser) user).getEnginePrefXML();

        } catch (Exception e) {
            // EMP: FOR DEVELOPMENT
            LoggerUtils.error(logger, "OCASession.createConfiguration()", "method.invoke exception", e);
            targetDate = new Date();
            engineCountryCode = "US";
            engineRegion = "NA";
            documentLanguageCode = "en_US";
            enginePrefXML = ConfigUtilities.getDefaultPreferencesXmlString("en_US", "noServicesType",
                    "noServicesReasonCode_TS1", "singlePhase210V");
        }

        // add HPE tenant code for separation
        IPreferences prefs = null;
        try {
            prefs = PreferencesFactory.createPreferences(enginePrefXML, role, targetDate);
            prefs.setTenant(OCAStringUtilities.TENANT_CODE_HPE);
        } catch (Exception e) {
            LoggerUtils.error(logger, "OCASession.createConfiguration()", "method.invoke exception", e);
        }

        // modified by Frank original method is ConfigUtilities.createNewConfigurationStateful
        // but create an additional ISubconfiguration
        APIConfigurationFactory apiConfigurationFactory = this.ocaApplicationContext.getBean("apiConfigurationFactory",
                APIConfigurationFactory.class);
        // set engine displayLanguage = en_US
        documentLanguageCode = "en_US";
        if (prefs != null) {
        	return apiConfigurationFactory.createStatefulConfiguration("oca", engineRegion, engineCountryCode, role,
                    documentLanguageCode, null, targetDate, "OCA Config " + configCount++, prefs, getEngineSession(),
                    false, null);
        } else {
        	return apiConfigurationFactory.createStatefulConfiguration("oca", engineRegion, engineCountryCode, role,
                    documentLanguageCode, null, targetDate, "OCA Config " + configCount++, enginePrefXML,
                    getEngineSession(), false, null);
        }
    }

    /**
     * new configuration submit
     * TODO where used? oca_common.js
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse show_config_page(Map<String, Object> params, Window window) throws Exception {

        String methodName = "OCASession.show_config_page()";
        String name = (String) params.get("name");
        String workgroupId = (String) params.get("account_id");
        String opportunity = (String) params.get("opportunity");
        boolean create = params.containsKey("create") && (Boolean) params.get("create");

        if (StringUtils.isNullOrEmpty(name)) {
            LoggerUtils.error(logger, methodName, "Configuration name is empty, can not creat new configuration.");
            throw new IllegalArgumentException("Configuration name is empty, can not creat new configuration.");
        }

        // remove the current configuration (and create a new configuration)
        clearEngineConfigurations();
        
        referenceBuildUcidMap.clear();

        statefulConfig = getNewStatefulAPIConfiguration();
        solutionSubConfig = statefulConfig.getEngineConfig().createSolutionConfiguration(1);
        toolsHelper = ((SubConfigurationImpl) solutionSubConfig).getKb().getToolsHelperClass("oca"); //LAW R23
        setToolConfigAndEngineConfig(statefulConfig.getEngineConfig());
        if (create) {
            this.statefulConfig.setName(name);
        }

        solutionSubConfig.setName(statefulConfig.getName());
        toolConfig.setWorkgroupId(workgroupId);
        toolConfig.setOpportunityId(opportunity);
        toolConfig.setConfigName(name);

        IKbInfo kbInfoForKB = KBManager.getKbInfoForKB(window.getSessionObj().getUIFramework().getKb());
        String kbVersion = kbInfoForKB.getId();
        if (kbVersion != null && kbVersion.length() > KB_VERSION_MAX_LENGTH) {
            toolConfig.setKbVersion(kbVersion.substring(0, KB_VERSION_MAX_LENGTH));
        } else {
            toolConfig.setKbVersion(kbVersion);
        }

        boolean result = ocaWorkgroupManager.validateOperationForConfiguration((OCAUser) getUser(), toolConfig,
                OCAConfigOperation.NewConfiguration);
        if (!result) {
            LoggerUtils.error(logger, methodName, "method.invoke exception", "this operation is invalid request.");
            throw new EngineException("this operation is invalid request.");
        }

        // reset customer account to refresh engine catalog for private SKUs.
        // 6/6/2016 Ervin: R5 we decouple globaDUNS and workgroup id, so set customer id (globalDUNS) as null;
        solutionSubConfig.getConfiguration().getPreferences().setPreference(Preferences.CUSTOMER_ID, null);
        solutionSubConfig.getConfiguration().getPreferences().setPreference(Preferences.SHOW_EXTENDED_PRODUCT, "true");
        solutionSubConfig.getConfiguration().getPreferences().setPreference(Preferences.CUSTOMER_OFFERINGS, "");
        try {
            engineCatalog = UtilityConfigMethods.getOCAProductCatalog(solutionSubConfig);
            accessoryCatalog = UtilityConfigMethods.getOCAAccessoryCatalog(solutionSubConfig,false);
            softwareCatalog = UtilityConfigMethods.getOCASoftwareCatalog(solutionSubConfig,false);
        } catch (EngineException e) {
            LoggerUtils.error(logger, methodName, " error occur while getOCAProductCatalog:", e);
            throw e;
        }
        statefulConfig.setDomainConfiguration(toolConfig);

        IPage mainPage = createMainPage(window);

        Map<String, String> lastSelectWorkgroup = new HashMap<String, String>();
        lastSelectWorkgroup.put(((OCAUser) user).getUserId() + "lastSelectAccount", StringUtils.compress(workgroupId));
        MauiAction writeCookieAction = Window.actionWriteCookie(lastSelectWorkgroup);
        MauiResponse response = new MauiResponse(window.actionLoadPage(mainPage));
        response.addAction(writeCookieAction);
        return response;
    }

    /**
     * Create blank configuration used in New configuration Flow
     * @param workgroupId E.g, "999999999"
     * @throws EngineException if exception happened
     */
    public void createNewSolutionConfig(String workgroupId) throws EngineException {
    	Log4JStopWatch watch = new Log4JStopWatch("createNewSolutionConfig");
        //change by Frank
        clearEngineConfigurations();
        statefulConfig = getNewStatefulAPIConfiguration();
        if (statefulConfig != null) {
            if (statefulConfig.getName().contains(".")) {
                statefulConfig.setName(FilenameUtils.removeExtension(statefulConfig.getName()));
            }
            solutionSubConfig = statefulConfig.getEngineConfig().createSolutionConfiguration(1);
            toolsHelper = ((SubConfigurationImpl) solutionSubConfig).getKb().getToolsHelperClass("oca"); //LAW R23
            OCAUtilities.setEmrSolution(isEMRSolution, (ConfigurationImpl)statefulConfig.getEngineConfig());
            // Set Configuration
            ((ConfigurationImpl)statefulConfig.getEngineConfig()).setGreenLakeSimpleCustom(isGLSCConfig);
            setToolConfigAndEngineConfig(statefulConfig.getEngineConfig());
        }

        setCurrentBuildingConfig(new Configuration("Session Configuration", ""));
        IKbInfo kbInfoForKB = KBManager.getKbInfoForKB(getUIFramework().getKb());
        String kbVersion = kbInfoForKB.getId();
        if (kbVersion != null && kbVersion.length() > KB_VERSION_MAX_LENGTH) {
            toolConfig.setKbVersion(kbVersion.substring(0, KB_VERSION_MAX_LENGTH));
        } else {
            toolConfig.setKbVersion(kbVersion);
        }

        if (workgroupId != null) {
            //CR186166
            toolConfig.setWorkgroupId(workgroupId);
            // 6/6/2016 Ervin: decouple globalDuns and workgroupId, so no need to refresh catalog now.
            // solutionSubConfig.getConfiguration().getPreferences().setPreference(Preferences.CUSTOMER_ID, workgroupId);
            initiateEngineCatalog(solutionSubConfig.getConfiguration());
            if(enableAccCatalog)initiateAccessoryCatalog(solutionSubConfig.getConfiguration());
            if(enableSWCatalog)initiateSoftwareCatalog(solutionSubConfig.getConfiguration());
        }
        LoggerUtils.info(logger, "OCASession.createNewSolutionConfig:" 
                + ", took " + watch.getElapsedTime() + "ms");
    }

    /**
     * Initialize EngineCatalog
     * @throws EngineException if create OCa product catalog failed.
     */
    public void initiateEngineCatalog() throws EngineException {
       initiateEngineCatalog(solutionSubConfig.getConfiguration());
    }

    public void initiateAccessoryCatalog() throws EngineException {

        // initialize Catalog, first close if its already there then create new one
        // There is no API to update preferences/Account/CustomerId to Catalog
        // so have to use create new catalog when Account details have changed for now.
        //TODO need API to refresh catalog based on account details
        if (accessoryCatalog != null) {
        	accessoryCatalog.close();
        }
        accessoryCatalog = UtilityConfigMethods.createOCAAccessoryCatalog(solutionSubConfig);
//        engineCatalog = accessoryCatalog;
    }
    
    public void initiateSoftwareCatalog() throws EngineException {

        // initialize Catalog, first close if its already there then create new one
        // There is no API to update preferences/Account/CustomerId to Catalog
        // so have to use create new catalog when Account details have changed for now.
        //TODO need API to refresh catalog based on account details
        if (softwareCatalog != null) {
        	softwareCatalog.close();
        }
        softwareCatalog = UtilityConfigMethods.createOCASoftwareCatalog(solutionSubConfig);
    }
    
    /**
     * open one configuration from recent list.
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse show_recent_config(Map<String, Object> params, Window window) throws Exception {

        String id = (String) params.get("ucid");

        //open current configuration in engine session
        String toolConfigUcid = this.toolConfig != null ? this.toolConfig.getUcid() : null;
        if (toolConfigUcid != null && toolConfigUcid.equals(id)) {
            IPage mainPage = createMainPage(window);
            MauiResponse response = new MauiResponse(window.actionLoadPage(mainPage));
            return response;

        // if the id equals TempUCID, shows that you have no recently configs,
        // and the currentlyBuilding is new Config button
        } else if ("New Configuration".equals(id)) {
            return this.new_config(params, window);

        } else {
            Map<String, Object> parameters = new HashMap<String, Object>();
            parameters.put("search_ucid", id);
            return this.open_config_by_ucid(parameters, window);
        }
    }

    /**
     * Forward to load home page
     * @param params parameters
     * @param window current window
     * @return MauiResponse response
     * @throws Exception engine Exception
     */
    public MauiResponse show_home_page(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("show_home_page");
        MauiAction action = window.actionLoadPage(new HomePage(window));
        LoggerUtils.debug(logger, "OCASession.show_home_page: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }

    /**
     * Forward to load new configuration page
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse new_config(Map<String, Object> params, Window window) throws Exception {
    	Log4JStopWatch watch = new Log4JStopWatch("new_config");
        MauiAction action = window.actionLoadPage(new NewConfigPage(window, statefulConfig, params));
//		List<String> scripts = Arrays.asList(getToolFolder() + "/oca/create_config-ci-all-min.js");
//		List<String> css = Arrays.asList(getToolFolder() + "/oca/create_confign-ci-all-min.css");
//        action.setScripts(scripts);
//        action.setCss(css);
        this.displayClicWarning = true;
        this.clickStatus = "No Run";
        this.clicCheckDone=false;
        this.clickRunDate = new Date();
        LoggerUtils.debug(logger, "OCASession.new_config: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }
    /**
     * Forward to load BOM-Import page
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse import_bom(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("import_bom");
        MauiAction action = window.actionLoadPage(new ImportBomPage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.import_bom: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }
    
    public MauiResponse import_bom_sizer(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("import_sizerbom");
        MauiAction action = window.actionLoadPage(new ImportSizerPage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.import_sizerbom: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    } //Harsha

    public MauiResponse nimble_page(Map<String, Object> params, Window window) throws Exception {
    	OCASession session = (OCASession) window.getSessionObj();
    	session.clear();
        Log4JStopWatch watch = new Log4JStopWatch("nimble_page");
    	MauiAction action = window.actionLoadPage(new NimblePage(window, statefulConfig, params));
    	LoggerUtils.debug(logger, "OCASession.nimble_page: ", watch.getElapsedTime() + "ms");
    	return new MauiResponse(action);
     } 
    
    public MauiResponse import_json(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("import_json");
        MauiAction action = window.actionLoadPage(new ImportJsonPage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.import_json: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }
    
    private String clear() {
		serialNumber="";
		return serialNumber;
	}

    public MauiResponse go_back_nimble_page(Map<String, Object> params, Window window) throws Exception {
    	Log4JStopWatch watch = new Log4JStopWatch("go_back_nimble_page");
    	OCASession session = (OCASession) window.getSessionObj();
    	params.put("serialNumber", session.getSerialNumber());
    	MauiAction action = window.actionLoadPage(new NimblePage(window, statefulConfig, params));
    	LoggerUtils.debug(logger, "OCASession.go_back_nimble_page: ", watch.getElapsedTime() + "ms");
    	return new MauiResponse(action);
    }  
    
	public String getSerialNumber() {
		return serialNumber;
	}

	public void setSerialNumber(String serialNumber) {
		this.serialNumber = serialNumber;
	} 
    
    public MauiResponse maintain_tsservices(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("import_bom");
        MauiAction action = window.actionLoadPage(new TSServicesPage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.import_bom: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }
    
    public MauiResponse maintain_partner_br_type_page(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("import_bom");
        MauiAction action = window.actionLoadPage(new PartnerBRTypeServicesPage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.import_bom: ", watch.getElapsedTime() + "ms");  
        return new MauiResponse(action);
    }
    
    public MauiResponse cross_bu_indetifier_maintenance(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("import_bom");
        MauiAction action = window.actionLoadPage(new CrossBUMaintenancePage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.import_bom: ", watch.getElapsedTime() + "ms");  
        return new MauiResponse(action);
    }
    
    

    /**
     * used to get the extended products list.
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unused")
	public List<String> getExtendedProducts() throws Exception {
  		//user = session.getUser();
    	 Map<String,Boolean> map = new HashMap<String, Boolean>();
         ITomsInterface itoms = null;
         List<IKnowledgeBase> kbList = KBManager.getLoadedKBs();
     	KnowledgeBaseImpl kb = (KnowledgeBaseImpl) kbList.get(0);
     	if(filterMap == null) {
         if (kb != null &&
               kb.getFilters() != null &&
               kb.getFilters().getFilterObject() != null &&
               kb.getFilters().getFilterObject().size() > 0 &&
               kb.getFilters().getFilterObject().containsKey("TOMS")) {

               Map<String,Object>filterMap = kb.getFilters().getFilterObject();
               itoms = (ITomsInterface)filterMap.get("TOMS");
         } 
     	}
               if (itoms == null)
               return null;
         
         map = itoms.getTomsAceValidation().getRecommendedMap();
         if(map!=null){
         Map<String, Object> extendedPrdts= new HashMap<String, Object>();
         for(Entry<String, Boolean> e : map.entrySet()) {
             String key = e.getKey();
             Boolean value = e.getValue();
             if(value.equals(false)){
            	 extendedPrdts.put(key, value);
             }
         }
         List<String> extProducts = new ArrayList<String>(extendedPrdts.keySet());
 		return extProducts;
         }else{
         List<String> extProducts = new ArrayList<String>();
        return extProducts;
         }
 	}
    
    /**
     * used to download the extended SKU products.
     * @param params
     * @param window
     * @return
     * @throws Exception
     */
    @SuppressWarnings({ "resource", "unchecked" })
	public MauiResponse downloadExtendedSKU(Map<String, Object> params, Window window) throws Exception{
		 XSSFWorkbook workBook = new XSSFWorkbook();
		 ExportType exportType = (ExportType) Enum.valueOf(ExportType.class, (String) params.get("exportType"));
		 ByteArrayOutputStream out = null;
		 String finalfileName = "Extended SKU";
		 String newfileName = finalfileName.replaceAll("[^a-zA-Z0-9.-]", "_");
		 //List<PartnerBRTypeServices> partnerBRTypeServicesList = getExtendedProducts();
		 List<String> extenProducts = new ArrayList<String>();
		 extenProducts = (List<String>) getExtendedProducts();
		 workBook = createExtendedProductsSheet(workBook, extenProducts);
		 out = new ByteArrayOutputStream();
		 workBook.write(out);

		 return Window.actionDownload(out.toByteArray(),
				 exportType.getContentType(),newfileName+".xlsx", null);
	}
	
	private XSSFWorkbook createExtendedProductsSheet(XSSFWorkbook workBook,
			List<String> extenProducts) {
		XSSFSheet spreadsheet = workBook.createSheet("Extended products");
		rowIndex = 0;
		Row row = spreadsheet.createRow(rowIndex++);
		CellStyle style = getTableHeaderStyle(spreadsheet);
		CellStyle cellstyle = getStyle(spreadsheet);
		XSSFCell cellTableHeader = (XSSFCell) row.createCell(0);
		spreadsheet.setColumnWidth(0, 5000);
		cellTableHeader.setCellValue("Product Number");
		cellTableHeader.setCellStyle(style);
		
		if(extenProducts != null){
			for (String extendedProduct : extenProducts) {
	
				Row adviceRow = spreadsheet.createRow((short) rowIndex++);
				Cell extendedProductCell = adviceRow.createCell(0);
	
				extendedProductCell.setCellValue(extendedProduct);
				extendedProductCell.setCellStyle(cellstyle);
			}
		}
		return workBook;
	}

	public static CellStyle getTableHeaderStyle(XSSFSheet spreadsheet) {

		Font font = (spreadsheet).getWorkbook().createFont();
		font.setFontHeightInPoints((short) 11);
		font.setFontName("Calibri");
		font.setBoldweight(Font.BOLDWEIGHT_BOLD);

		CellStyle style = (spreadsheet).getWorkbook().createCellStyle();
		style.setAlignment(CellStyle.ALIGN_LEFT);
		style.setWrapText(true);
		style.setFillForegroundColor(IndexedColors.WHITE.getIndex());
		style.setFont(font);

		return style;
	}
	
	public static CellStyle getStyle(XSSFSheet spreadsheet) {

		Font font = (spreadsheet).getWorkbook().createFont();
		font.setFontHeightInPoints((short) 11);
		font.setFontName("Calibri");

		CellStyle style = (spreadsheet).getWorkbook().createCellStyle();
		style.setWrapText(true);
		style.setFont(font);

		return style;
	}
    
    public MauiResponse maintain_customer_account(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("customer_account_maintenance");
        MauiAction action = window.actionLoadPage(new CustomerAccountMaintenancePage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.maintain_customer_account: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }

    public MauiResponse maintain_performance_test(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("performance_test_maintenance");
        MauiAction action = window.actionLoadPage(new PerformanceTestMaintenancePage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.maintain_performance_test: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }
    
    public MauiResponse Run_Performance_TestingPage(Map<String, Object> params, Window window) throws Exception {  
        Log4JStopWatch watch = new Log4JStopWatch("Run_Performance_TestingPage");
        MauiAction action = window.actionLoadPage(new RunPerformanceTestingPage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.Run_Performance_TestingPage: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }

    /**
     * Forward to load BOM-Import page
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse import_hpc(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("import_hpc");
        MauiAction action = window.actionLoadPage(new ImportHpcPage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.import_hpc: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }
    
    public MauiResponse import_oca(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("import_oca");
        MauiAction action = window.actionLoadPage(new ImportOcaPage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.import_oca: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }


    /**
     * Forward to load Manage-My-library page
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse manage_MylibraryPage(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("manage_MylibraryPage");

        Map<String, Object> parameters = new HashMap<String, Object>();
        parameters.put("engineConfig", statefulConfig);
        parameters.put("solutionSubConfig", solutionSubConfig);
        parameters.put("engineCatalog", engineCatalog);
        parameters.put("softwareCatalog", softwareCatalog);
        parameters.put("accessoryCatalog", accessoryCatalog);
        parameters.put("user", getUser());
        parameters.put("Current_Page", params.get("Current_Page"));
		parameters.put("No_Of_Records", params.get("No_Of_Records"));

        IPage mylibraryPage = window.createPage(MY_LIBRARY_PAGE_CLASS, parameters);
        MauiAction action = window.actionLoadPage(mylibraryPage);

        LoggerUtils.debug(logger, "OCASession.manage_MylibraryPage: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(action);
    }
    /**
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse recommendation_AlertsPage(Map<String, Object> params, Window window) throws Exception {
        Log4JStopWatch watch = new Log4JStopWatch("recommendation_AlertsPage");

        Map<String, Object> parameters = new HashMap<String, Object>();
        parameters.put("engineConfig", statefulConfig);
        parameters.put("solutionSubConfig", solutionSubConfig);
        parameters.put("engineCatalog", engineCatalog);
        parameters.put("softwareCatalog", softwareCatalog);
        parameters.put("accessoryCatalog", accessoryCatalog);
        parameters.put("user", getUser());
        parameters.put("Current_Page", params.get("Current_Page"));

        Window dialogWindow = window.getSessionObj().createWindow(window, true);
        LoggerUtils.debug(logger, "OCASession.recommendation_AlertsPage: ", watch.getElapsedTime() + "ms");
        return new MauiResponse(dialogWindow.actionDisplayAsDialog(new RecommendationAndAlertsPage(dialogWindow)));
    }


    /**
     * Navigate back to last view
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse navigate_back(Map<String, Object> params, Window window) throws Exception {
        return new MauiResponse(window.navigateBack());
    }

    /**
     * Load Support page
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse load_support_page(Map<String, Object> params, Window window) throws Exception {
        Window dialogWindow = window.getSessionObj().createWindow(window, true);
        return new MauiResponse(dialogWindow.actionDisplayAsDialog(new SupportLinksPage(dialogWindow)));
    }

    /**
     * load configuration from Corona and reset engine configuration
     * @param params
     * @return
     * @throws EngineException
     */
    public Map<String, Object> loadConfig(Map<String, Object> params,boolean iscache) throws EngineException {
        String methodName = "OCASession.loadConfig: ";
        String xml = "";
       
        Map<String, Object> result = new HashMap<String, Object>();
        boolean isSuccess = true;
        String msg = "";
        OpenConfigurationResponse resp = null;
        
        // Commented this to avoid un-necessary CaronaSearchService call
       /*
        CoronaSearchService css = (CoronaSearchService) getTool().getToolSpringApplicationContext()
       			.getBean("coronaSearchService");
       	if (css.isConfigExpired(params.get("search_ucid").toString(), CONFIG_EXPIRED_DAYS)) {
       		css.activateOutdatedConfig(params.get("search_ucid").toString(), getUser());
       	} 
       	*/
        
        try {
            // open from CORONA
        	if(iscache)
        	{
        		resp = cacheOpenConfiguration.get((String) params.get("search_ucid"));
//        		cacheOpenConfiguration.remove((String) params.get("search_ucid"))	;
        	}
        	else
            {
        		resp = getOpenResponseStatusByUcid(params);
            }
            Configuration domainConfig = null;
            if (resp != null && resp.getStatus() == ResponseStatus.SUCCESS) {
                // update currentBuildingConfig and
                domainConfig = resp.getConfigurationList().get(0);
                currentBuildingConfig = domainConfig;
                //xml = UtilityConfigMethods.decompressString(domainConfig.getConfigEngineClob());
                //System.out.println(xml);
                // add by Hao-Jie for C2B issue
//                if (xml.indexOf("<?xml") > 0) {
//                	xml = xml.substring(xml.indexOf("<"),
//                			xml.indexOf("<?xml"));
//				} else {
//				}
                // clear engineConfig in Engine Session
                clearEngineConfigurations();
                OCANewWorkgroup workGroup = ocaWorkgroupManager.getWorkgroup(domainConfig.getWorkgroupId());
                LoggerUtils.info(logger, "OCASession domain work group id", domainConfig.getWorkgroupId());
                if(workGroup != null) {
                	String refernceAccountId = workGroup.getRefPartnerId();
                	OCAUtilities.setPartnerBrandedServiceEligibility((OCAUser) getUser(), refernceAccountId, (KnowledgeBaseImpl)getUIFramework().getKb());
                }
                // get engineConfig
                IConfiguration engineConfig = getEngineConfigByUcid(params, resp, ConfigurationType.SOLUTION);
                
                updateProductLifeCyclePreference(engineConfig);
                
                IPreferences preference = engineConfig.getPreferences();
                String isBTO = preference.getPreference(Preferences.BTO);
                params.put("isBTO", isBTO);
				// Reset customer id(globalDUNS number) to refresh engine catalog for private SKUs.
				engineConfig.getPreferences().setPreference(Preferences.CUSTOMER_ID, domainConfig.getGlobalDuns());
				if(domainConfig.getGlobalDuns() != null)
				{
				engineConfig.getPreferences().setPreference(Preferences.SHOW_EXTENDED_PRODUCT, ((Boolean)customerAccountManager.isShowExtended(domainConfig.getGlobalDuns().toString())).toString());
				engineConfig.getPreferences().setPreference(Preferences.CUSTOMER_OFFERINGS, (customerAccountManager.getProductFilterByCustomerId(domainConfig.getGlobalDuns())));
				}
				else if(isShowExtendedFlagEnabled && domainConfig.getGlobalDuns() == null)
				{
					 engineConfig.getPreferences().setPreference(Preferences.SHOW_EXTENDED_PRODUCT, "false");
				}
				else
				{
					engineConfig.getPreferences().setPreference(Preferences.SHOW_EXTENDED_PRODUCT, "true");
				}
				String currCd = domainConfig.getConfigurationPreference().getPriceDescriptor().getCurrencyCode();
				if (StringUtils.isNullOrEmpty(currCd)) {
				    //CR251731: Cannot open some of configurations.
				    PriceDescriptor upd = getUser().getPriceDescriptorPref();
				    PriceDescriptor cpd = domainConfig.getConfigurationPreference().getPriceDescriptor();
				    //for PriceDescriptor
				    cpd.setCurrencyCode(upd.getCurrencyCode());
				    cpd.setPriceGeo(upd.getPriceGeo());
				    cpd.setPriceGeoName(upd.getPriceGeoName());
				    cpd.setPriceDescriptorDisplayText(upd.getPriceDescriptorDisplayText());
				    cpd.setPriceListType(upd.getPriceListType());
				    currCd = cpd.getCurrencyCode();
				    //end CR251731
				}

				domainConfig.getConfigurationPreference().getPriceDescriptor().setCurrency(getCurrency(currCd));
				// Sync domainConfig, engineConfig, statefulAPIConfig and solutionSubConfig and engine catalog
				resetConfiguration(engineConfig, domainConfig, getUser());
				checkP24CS(engineConfig);
				// update PLC dates for Adhoc items - start
				SubConfigurationImpl subConfigImpl = ((ConfigurationImpl) engineConfig).getSolutionSubconfiguration();
				
				//set line items values for controller refresh
				subConfigImpl.setOriginalHpeOrderNumber(((ConfigurationImpl) engineConfig).getPreferences().getPreference(Preferences.ORIGINAL_HPE_ORDER_NUMBER));
				subConfigImpl.setOriginalItemEntryNumber(((ConfigurationImpl) engineConfig).getPreferences().getPreference(Preferences.ORIGINAL_ITEM_ENTRY_NUMBER));
								
				boolean isS4PlcEnabled = UtilityConfigMethods.isS4PlcEnabled(subConfigImpl.getKb(), subConfigImpl.getConfiguration().getCountryCode());
				String country = engineConfig.getPreferences().getPreference(Preferences.COUNTRY);
				OCAUtilities.updateAdhocPlcDates(engineConfig, country, isS4PlcEnabled);
				// update PLC dates for Adhoc items - end
				Set<ISubConfiguration> subConfigurations = ((ConfigurationImpl)engineConfig).getSubConfigurations(SubConfigurationType.CONFIGURABLE);
				for(ISubConfiguration s : subConfigurations){
					String serialNum = ((SubConfigurationImpl)s).getSerialNumber();
					if(serialNum!=null){
						List<AssetVO> assets = getPersistentService().searchAssetBySerialNumber(serialNum);
						if(assets!=null && assets.size()>0) {
							AssetVO assetVO = assets.get(0); //CORONA API returns always one asset
							if(assetVO!=null && 
									assetVO.getStatus().equals("Shipped") && 
									(subConfigurations.size()>1 && assetVO.getParentAssetId()==null) || subConfigurations.size()==1){    
			                    ((ConfigurationImpl)engineConfig).getSolutionSubconfiguration().setSupportSKU(assetVO.getHpeSupportSKU());
			                    ((ConfigurationImpl)engineConfig).getSolutionSubconfiguration().setSupportEndDate(assetVO.getSupportEndDate());
			                    String componentSkuHPE = assetVO.getComponentSkuHPE();
			                    if(componentSkuHPE!=null) {
			                    	String[] split = componentSkuHPE.split(",");
			                    	String parentBaseProduct = split[0];
			                    	//get ED date parentBaseProduct & set in solution sub configuration
			                    	String edDate = getProductEDDateFromToms(parentBaseProduct, assetVO.getCountryISO());
			                    	((ConfigurationImpl)engineConfig).getSolutionSubconfiguration().setParentEdDate(edDate);
			                    }
			                }
						}
					}
				}
				
		        // Added by Jessie, get the current solution configuration item when open a configuration
	            List<ConfigItem> items = UtilityConfigMethods.getSavedLineItemView(domainConfig.getConfigEngineClob(), solutionSubConfig, true).getConfigItems();
	            this.setSavedSolutionConfigItems(items);
                /*
				 * Clear engine CLOB after restore engine configuration. Sometimes the engineClob XML is too large
				 * and should not be in session.
				 */
				domainConfig.setConfigEngineClob(null);
				domainConfig.setConfigPreferenceClob(null);
				String referenceBuildConfigs = domainConfig.getRefereceBuildUsageConfigs();
				
				referenceBuildInfo = referenceBuildService.isUCIDExits(domainConfig.getUcid());
				
				Integer count = referenceBuildService.getReferenceDisableCatalog(referenceBuildConfigs);
				
				if(count > 0){
					domainConfig.setDisableCatalog(true);
				}
				
				domainConfig.setCostOptimized(ConfigUtilities.isConfigurationCostOptimized((ConfigurationImpl)engineConfig));
	            
            } else {
                isSuccess = false;
                msg = getText("os.error.noConfigFound", params.get("search_ucid"));
            }
        } catch (Exception e) {
        	e.printStackTrace();
            isSuccess = false;
            msg = getText("os.error");
            LoggerUtils.error(logger, methodName, e.getMessage());
        }

//        // Added by Jessie, get the current solution configuration item when open a configuration
//        if (isSuccess) {
//            List<ConfigItem> items = UtilityConfigMethods.getSavedLineItemView(xml, solutionSubConfig).getConfigItems();
//            this.setSavedSolutionConfigItems(items);
//        }
        
        result.put("isSuccess", isSuccess);
        result.put("msg", msg);
        OCAUser user = getUser();
        if (user.isESPUser()) {
        	return result; // updateConfigCache hits corona db again, we already have the config data so return for ESP punchout
        }
        updateConfigCache();
        return result;
    }
    
    private String getProductEDDateFromToms(String productNumber, String countryCode){
        final KnowledgeBaseImpl kb = (KnowledgeBaseImpl) getTool().getFramework().getKb();
        String edDate = null;
		try {
			String[] plcDates = KbUtils.plcCheck(productNumber, countryCode, null, kb);
			if(plcDates!=null && plcDates.length>=4) {
	    		edDate = plcDates[3];
	    	}
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return edDate;
	}

    private void updateProductLifeCyclePreference(IConfiguration configuration) throws EngineException {
    	IPreferences preference = configuration.getPreferences();
    	String originalProductLifeCycle = preference.getPreference(IPreferences.PRODUCT_LIFECYCLE);
    	String productLifeCycle = originalProductLifeCycle;
    	if(productLifeCycle == null) {
    		productLifeCycle = "Active";
        }
    	
        if(!productLifeCycle.contains("Active")) {
        	if("Any".equals(productLifeCycle)) {
        		productLifeCycle = "Active, Obsolete, Discontinued, Pre-Release";
        	}else {
        		productLifeCycle = "Active, " + productLifeCycle;
        	}
        }
        
        if(productLifeCycle != originalProductLifeCycle) {
        	preference.setPreference(IPreferences.PRODUCT_LIFECYCLE,productLifeCycle);
        }
    }
    
    private void checkP24CS(IConfiguration engineConfig) throws EngineException{
        SubConfigurationImpl subConfig = ((ConfigurationImpl) engineConfig).getSolutionSubconfiguration();
        ModelInstance supportCoordinator = ServiceUtilities.initSupportCoordinator(subConfig);
        if(supportCoordinator == null){
            return;
        }
        String p24CS = supportCoordinator.getAttributeStringValue("globalP24CS");
        if(StringUtils.isNullOrEmpty(p24CS)){
            return;
        }
        boolean isP24CSDeleted = true;
        for(ModelInstance mi:subConfig.getInstancesNested()){
            if(mi.getName().equals(p24CS)){
                isP24CSDeleted = false;
                break;
            }
        }
        if(isP24CSDeleted){
            // reset new environment
            ServiceUtilities.changeServiceSelection(supportCoordinator, null, this,
                    "newEnvironment",true);
            // reset first device
            ServiceUtilities.changeServiceSelection(supportCoordinator, null, this,
                    "firstDevice",true);
            // reset additional device
            ServiceUtilities.changeServiceSelection(supportCoordinator, null, this,
                    "additionalDevice",true);

            UtilityConfigMethods.setAttribute(supportCoordinator,"globalP24CS","");
            UtilityConfigMethods.setAttribute(supportCoordinator,"user_modify",false);
        }
    }

    public Map<String, Object> loadConfigByUcid(String ucid) throws EngineException {

           Map<String, Object> resultMap = new HashMap<String, Object>();
           boolean flag = true;
           String msg = null;
           Map<String, Object> paramMap = new HashMap<String, Object>();

           try {
               paramMap.put("search_ucid", ucid);
               Map<String, Object> tempMap = loadConfig(paramMap,false);
               flag = (Boolean) tempMap.get("isSuccess");
               msg = (String) tempMap.get("msg");

           } catch (Exception e) {
               e.printStackTrace();
               LoggerUtils.error(logger, "OCASession.loadConfigByUcid()", "Exception happened ." + e);
               flag = false;
               msg = getText("addon.openconfig", ucid);
           }

           resultMap.put("flag", flag);
           resultMap.put("msg", msg);
           resultMap.put("isBTO", (String) paramMap.get("isBTO"));
           return resultMap;

       }
    
    /**
     * This method is added in order to pass NGQ parameters while loading config so that workgroup check can be avoided for EDIT config mode from NGQ 
     * New method added in order to pass Map containing below keys :
     * search_ucid key to hold UCID
     * "DISPATCH_ACTION" key to hold dispatch action data coming from NGQ
     * "IsWNGUser" key to hold Y or N 
     * @param paramMap
     * @return
     * @throws EngineException
     */
    
    public Map<String, Object> loadConfigByUcid(Map<String, Object> paramMap) throws EngineException {

        Map<String, Object> resultMap = new HashMap<String, Object>();
        boolean flag = true;
        String msg = null;
        
        String ucid = null;
        try {
            
            Map<String, Object> tempMap = loadConfig(paramMap,false);
            flag = (Boolean) tempMap.get("isSuccess");
            msg = (String) tempMap.get("msg");
            
            if(paramMap != null && !paramMap.isEmpty()){
            	ucid = (String)paramMap.get("search_ucid");
            }
            

        } catch (Exception e) {
            e.printStackTrace();
            LoggerUtils.error(logger, "OCASession.loadConfigByUcid()", "Exception happened ." + e);
            flag = false;
            msg = getText("addon.openconfig", ucid);
        }

        resultMap.put("flag", flag);
        resultMap.put("msg", msg);
        resultMap.put("isBTO", (String) paramMap.get("isBTO"));
        return resultMap;

    }

    /**
     * Open one Configuration by UCID, and forward to OCA main page.
     * @param params
     * @param window currant window
     * @return forward to main page
     * @throws Exception
     */
    public MauiResponse open_config_by_ucid(Map<String, Object> params, Window window) throws EngineException {
        MauiResponse mauiResponse = null;
        String ucid = (String) params.get("search_ucid");
        IPage mainPage;
        //open current configuration in engine session
        String toolConfigUcid = this.toolConfig != null ? this.toolConfig.getUcid() : null;
        if (toolConfigUcid != null && toolConfigUcid.equals(ucid)) {
            mainPage = createMainPage(window);
            MauiResponse response = new MauiResponse(window.actionLoadPage(mainPage));
            return response;
        }
        
        mauiResponse = checkConfigExpired(ucid, window);
        if (null != mauiResponse) {
            return mauiResponse;
        }         
        Map<String, Object> resultMap = null;
        if(cacheOpenConfiguration.get(ucid) != null){
//        	IConfiguration engineObj = cachedEngineConfig.get(ucid);
//        	Configuration domainObj = cachedDomainConfig.get(ucid);
//        	 //resultMap = loadConfigfromCache(params, domainObj, engineObj);
        	resultMap = loadConfig(params,true);
        }
        else {
        	resultMap = loadConfig(params,false);
        }
        boolean isSuccess = (Boolean) resultMap.get("isSuccess");
        String msg = (String) resultMap.get("msg");
        String isBTO = (String)params.get("isBTO");

        if (isSuccess) {
            // show main page
        	this.setExpertBOMtoggled(false);
            mainPage = createMainPage(window, isBTO);
            MauiAction mAction = window.actionLoadPage(mainPage);
            mauiResponse = new MauiResponse(mAction);
            writeCookieForRecentConfig(mauiResponse.getActions().get(0));
            
            writeCookieForCurrentBuildingAfterOpen(mauiResponse);

        } else {
            // Any error happend, here will notify user that some error happened.
            List<DialogButton> buttons = Arrays.asList(new DialogButton("OK", getText("OK"), getText("OK"),
                new ICallback() {
                @Override
                public MauiResponse call(Map<String, Object> params) throws EngineException {
                    return Window.responseSimple(ActionCode.NO_ACTION);
                }
            }));
            mauiResponse = new MauiResponse(window.actionShowDialog(getText("alert"), msg, buttons));
        }

        return mauiResponse;
    }

    /**
     * filter existed config if configuration already exists in top11ConfigList or has same configId,
     * push configuration to top11ConfigList
     * referenced by CurrentBuildingWidget & OCASession
     * @param configuration domain configuration
     */
    public void filterTop11ConfigList(Configuration configuration) {
        try {
            String ucid = configuration.getUcid();
            String configId = ucid.split("-")[0];
            String tempUcid = null;
            String tempConfigId = null;
            if (topElevenConfigList != null && !topElevenConfigList.isEmpty()) {
                for (Configuration config : topElevenConfigList) {
                    tempUcid = config.getUcid();
                    tempConfigId = tempUcid.split("-")[0];
                    if (ucid.equals(tempUcid) || configId.equals(tempConfigId)) {
                        topElevenConfigList.remove(config);
                        break;
                    }
                }
                topElevenConfigList.add(configuration);
            }
        } catch (Throwable e) {
            LoggerUtils.error(logger, "OCASession.filterTop11ConfigList()", "Exception: " + e);
        }
    }

    /**
     * To delete one configuration by UCID
     * At present, OCA does not support deleting functionality.
     * TODO  complete this part if necessary.
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    @Deprecated
    public MauiResponse delete_config_by_config_id(Map<String, Object> params, Window window) throws Exception {
        String alertMessage = null;
        MauiResponse mauiResponse = new MauiResponse(window.actionLoadPage(new HomePage(window)));
        OCAUser user = (OCAUser) getUser();
        String ucid = (String) params.get("delete_ucid");

        OpenConfigurationRequest request = createOpenConfigurationRequest(ucid);
        OpenConfigurationResponse response = getPersistentService().openConfiguration(request);
        Configuration configuration = null;

        // add check for response status
        if (response.getStatus() == ResponseStatus.SUCCESS) {
            configuration = response.getConfigurationList().get(0);
        }

        if (ocaWorkgroupManager.validateOperationForConfiguration(user, configuration,
                OCAConfigOperation.DeleteConfiguration)) {

            DeleteConfigurationRequest deleteRequest = new DeleteConfigurationRequest();
            DeleteConfigurationResponse response2 = getPersistentService().deleteConfiguration(deleteRequest);
            JsonObject res = new JsonObject();
            if (response2.getStatus() == ResponseStatus.SUCCESS) {
                res.addProperty("deleteFlag", true);
            }

            // add by Frank research the recent configurations from CORONA
            for (Configuration config : topElevenConfigList) {
                // if to delete config's UCID is among the topElevenConfigList in OcaSession,we should refresh the
                // recentConfig
                if (ucid != null && ucid.equals(config.getUcid())) {
                    break;
                }
            }
            mauiResponse = Window.responseForGetServerData(res);
        } else {
            alertMessage = "No permission to delete this configuration.";
            MauiFailure mf = new MauiFailure();
            mf.setMessage(alertMessage);
            mauiResponse.setFailureObject(mf);
        }
        return mauiResponse;
    }

    /**
     * Call persistentService.openConfiguration() to get OpenConfigurationResponse by UCID
     * @param params parameters E.g., {"search_ucid": "123456789-01"}
     * @return OpenConfigurationResponse
     * @throws EngineException if open specified configuration failed
     */
    public OpenConfigurationResponse getOpenResponseStatusByUcid(Map<String, Object> params) throws EngineException {

        String ucid = (String) params.get("search_ucid");
        LoggerUtils.info(logger, "OCASession search_ucid", ucid);
        OpenConfigurationResponse response = null;
        try {
            OpenConfigurationRequest request = createOpenConfigurationRequest(ucid);
            response = getPersistentService().openConfiguration(request);
        } catch (EngineException e) {
            LoggerUtils.error(logger, "OCASession.getOpenResponseStatusByUcid()", "method.invoke exception", e);
            return null;
        }
        //LoggerUtils.info(logger, "OCASession response", response);
        return response;
    }

    /**
     * clear configurations in engine session and ucid to configurationImplId map
     */
    public void clearEngineConfigurations() {

        if (this.getEngineSession().getConfigurations() != null) {
            for (IConfiguration engineConfig1 : this.getEngineSession().getConfigurations().values()) {
                engineConfig1.removeFromSession();
            }
        }
        // need to clear configurations from session also

         //TODO need to clear UCID in session for OCA Exception page 
        
        
        if (this.statefulConfig != null) {
            this.statefulConfig = null;
        }
        if (this.solutionSubConfig != null) {
            this.solutionSubConfig = null;
        }
        if (this.toolConfig != null) {
            this.toolConfig = null;
        }
        if (this.engineCatalog != null) {
            this.engineCatalog = null;
        }
        if (this.softwareCatalog != null) {
            this.softwareCatalog = null;
        }
        //updated by srk
        if (this.accessoryCatalog != null) {
            this.accessoryCatalog = null;
        }

        if (ucidToEngineConfigId != null) {
            ucidToEngineConfigId.clear();
        }
        if (subConfigIdToUcid != null) {
            subConfigIdToUcid.clear();
        }
        if (standaloneSubConfigIdToUcid != null) {
            subConfigIdToUcid.clear();
        }
        if(this.configDlgStatus != null) {
        	this.configDlgStatus=null;
        }
        
        if (this.clicCheckData != null) {
        	this.clicCheckData.clear();
        	//this.clicCheckData.remove("TempUCID"); // remove tempUCID clic data from session
        }
        
        if (this.savedSolutionSubConfigItems != null) {
        	this.savedSolutionSubConfigItems = null;
        }
        if (this.clicCheckSubConfigItems != null) {
        	this.clicCheckSubConfigItems = null;
        }
        this.setClicCheckAfterBomToggle(false);
        setExpertBOMtoggled(false);
        setConfigLoadedFromOcaFile(false);
        
        referenceBuildInfo = null;
        expertBomDirty = false;
        setSwitchErrorFlag(false);
    }

    /**
     * Get ConfigSession by UCID
     * @param ucid example: 123456789-01
     * @return engine session
     * @throws EngineException if exception happened
     */
    public ISession getConfigSessionByUcid(String ucid) throws EngineException {

        ISession newSession = SessionFactory.createSession();
        OpenConfigurationRequest request = createOpenConfigurationRequest(ucid);
        OpenConfigurationResponse response = getPersistentService().openConfiguration(request);

        String engineClob = null;
        boolean isGreenLakeSimpleCustom = false;
        // add check for response status
        if (response.getStatus() == ResponseStatus.SUCCESS) {
            // for user access control check
            Configuration domainConfig = response.getConfigurationList().get(0);
            engineClob = domainConfig.getConfigEngineClob();
            isGreenLakeSimpleCustom = "Y".equalsIgnoreCase(domainConfig.getGreenLakeSimpleCustomFlag()) ? true:false; 
        }
        
        String defaultTarget = ((IPreferencesInternal)ConfigUtilities.getPerference(getUser())).getKb().getDefaultTarget();
        
        //newSession.loadConfiguration(engineClob, ConfigUtilities.getPerference(getUser()),defaultTarget,null, null, null, null, "",false,isGreenLakeSimpleCustom);
        newSession.loadConfiguration(defaultTarget,ConfigUtilities.getPerference(getUser()),engineClob,null, null, null, null, "",false,isGreenLakeSimpleCustom);

        return newSession;
    }

    /**
     * Gets Engine CLOB from CIDS by UCID into the current engine session.
     * This method is used for OCA KB Support where need to make a copy of already saved Config
     *
     * @param ucid UCID
     * @return Domain configuration
     * @throws Exception if exception happened
     */
    public Configuration getEngineClobByUcid(String ucid) throws Exception {

        OpenConfigurationRequest request = createOpenConfigurationRequest(ucid);
        OpenConfigurationResponse response = getPersistentService().openConfiguration(request);
        Configuration coronaConfig = null;

        //add check for response status
        if (response.getStatus() == ResponseStatus.SUCCESS) {
            // for user access control check
            coronaConfig = response.getConfigurationList().get(0);
        }
        return coronaConfig;
    }

    public Configuration loadConfigByUCID(String ucid) throws Exception {
        CoronaSearchService css = (CoronaSearchService) getTool().getToolSpringApplicationContext()
                .getBean("coronaSearchService");
        if (css.isConfigExpired(ucid, CONFIG_EXPIRED_DAYS)) {
            css.activateOutdatedConfig(ucid, getUser());
        }
        return getEngineClobByUcid(ucid);
    }

    /**
     * Loads a configuration from CIDS by UCID into the current engine session.
     *
     * @param ucid UCID
     * @param isNested true/false
     * @return engine configuration
     * @throws Exception if exception happened
     */
    public IConfiguration loadConfigByUcid(String ucid, boolean isNested) throws Exception {
        CoronaSearchService css = (CoronaSearchService) getTool().getToolSpringApplicationContext()
                .getBean("coronaSearchService");
        if (css.isConfigExpired(ucid, CONFIG_EXPIRED_DAYS)) {
            css.activateOutdatedConfig(ucid, getUser());
        }
        Configuration coronaConfig = getEngineClobByUcid(ucid);
        IConfiguration engineConfig = restoreEngineConfiguration(coronaConfig, ucid, null,
                ConfigurationType.PERSISTENT, (SessionImpl) this.getEngineSession(), isNested);
        return engineConfig;
    }

    /**
     * Get solution configuration (ISubConfiguration)
     * @return ISubConfiguration
     */
    public ISubConfiguration getSolutionConfig() {
        return solutionSubConfig;
    }

    /**
     * Get engine product catalog (ProductCatalog)
     * @return engineCatalog
     */
    public ProductCatalog getEngineCatalog() {
        return engineCatalog;
    }

    /**
     * Get software product catalog (ProductCatalog)
     * @return softwareCatalog
     */
    public ProductCatalog getSoftwareCatalog() {
        return softwareCatalog;
    }
    
    public ProductCatalog getAccessoryCatalog() {
        return accessoryCatalog;
    }
    /**
     * Get saved solution configuration items
     * @return
     */
    public List<ConfigItem> getSavedSolutionConfigItems() {
        return savedSolutionSubConfigItems;
    }

    /**
     * Set saved solution configuration items
     * @param savedSolutionSubConfigItems
     */
    public void setSavedSolutionConfigItems(List<ConfigItem> savedSolutionSubConfigItems) {
        this.savedSolutionSubConfigItems = savedSolutionSubConfigItems;
    }

    /**
     * restore EngineConfiguration
     * @param config domain configuration
     * @param ucid UCID
     * @param openParams unneeded
     * @param configurationType ConfigurationType
     * @param useEngineSession engine session
     * @param isNested true/false
     * @return engine configuration
     * @throws Exception if exception happened
     */
    public IConfiguration restoreEngineConfiguration(Configuration config, String ucid, Map<String, Object> openParams,
            ConfigurationImpl.ConfigurationType configurationType, SessionImpl useEngineSession, boolean isNested)
            throws Exception {

        String methodName = "OCASession.restoreEngineConfiguration";
        OCAUser ocaUser = (OCAUser) user;
        IConfiguration restoreEngineConfiguration = null;
        Map<String, String> justAddUcidToEngineConfigId = new HashMap<String, String>();
        SessionImpl engineSession = (SessionImpl) this.getEngineSession();
        IPersistenceService pService = getPersistentService();

        if (null == config || null == config.getEngineConfigId()) {
            // FIXME
            LoggerUtils.error(logger, methodName,
                    "There is no engineConfigId in this config, can not restore this engine config.");
            throw new EngineException("There is no engineConfigId in this config, can not restore this engine config.");
        }
        String restoreEngineId = ucidToEngineConfigId.get(ucid);
        IConfiguration engineConfig = useEngineSession.getConfiguration(config.getEngineConfigId());
        if (engineConfig != null && config.getEngineConfigId().equalsIgnoreCase(restoreEngineId)) {
            restoreEngineConfiguration = engineConfig;         
        } else {
            List<String> referencedConfigs = new ArrayList<String>();
            Map<String, String> configVersions = new HashMap<String, String>();
            boolean flag = false;

            if (config.getNestedUcid() != null && !config.getNestedUcid().isEmpty()) {
                Set<String> nestedUcids = new HashSet<String>();
                for (String nestedUcid : config.getNestedUcid()) {
                    if (!nestedUcid.isEmpty() && !TEMP_UCID.equals(nestedUcid)) {
                        nestedUcids.add(nestedUcid);
                        nestedUcids.addAll(pService.getChildrenUcids(nestedUcid, OCAStringUtilities.TENANT_CODE_HPE));
                    }
                }
                for (String nestedUcid1 : nestedUcids) {
                    String nestedConfigId = "";
                    String nestedVersionId = nestedUcid1.substring(nestedUcid1.indexOf("-") + 1, nestedUcid1.length());
                    flag = true;
                    if (ucidToEngineConfigId.containsKey(nestedUcid1)
                            && useEngineSession.getConfiguration(ucidToEngineConfigId.get(nestedUcid1)) != null) {
                        ConfigurationImpl nestedConfigurationImpl = (ConfigurationImpl) useEngineSession
                                .getConfiguration(ucidToEngineConfigId.get(nestedUcid1));
                        referencedConfigs
                                .add(OCAUtilities.getEngineClob(nestedConfigurationImpl, ocaUser.getId(), true));
//                        referencedConfigs.add(nestedConfigurationImpl.save(ocaUser.getId()));
                        nestedConfigId = nestedConfigurationImpl.getId();
                    } else {
                        OpenConfigurationResponse nestedResponse = null;
                        OpenConfigurationRequest request = createOpenConfigurationRequest(nestedUcid1);
                        request.setHeaderOnly(true);
                        request.setExcludeBOM(true);
                        request.setIncludeNestedConfigs(false);
                        request.setIncludeClob(false);
                        nestedResponse = pService.openConfiguration(request);
                        //TODO fRANK get configurationImpl's ID from corona to put into ucidToEngineConfigId
                        //wait for corona side
                        //if useEngineSession = currentEngineSession

                        Configuration configuration = null;
                        if (nestedResponse.getStatus() == ResponseStatus.SUCCESS) {
                            configuration = nestedResponse.getConfigurationList().get(0);
                        }
                        if (configuration != null) {

                            if (useEngineSession.equals(engineSession) && isNested) {
                                ucidToEngineConfigId.put(nestedUcid1, configuration.getEngineConfigId());
                                justAddUcidToEngineConfigId.put(nestedUcid1, configuration.getEngineConfigId());
                            }
                            nestedConfigId = configuration.getEngineConfigId();
                        }

                        String nestedConfigClob = pService.getConfigurationClobByUcid(nestedUcid1,
                                OCAStringUtilities.TENANT_CODE_HPE);
                        referencedConfigs.add(nestedConfigClob);
                    }

                    configVersions.put(nestedConfigId, nestedVersionId);
                }
            }

            if (!flag) {
                referencedConfigs = null;
                configVersions = null;
            }

            String versionId = ucid.substring(ucid.indexOf("-") + 1, ucid.length());
            
            setKBDisplayLanguage((OCAUser)user);//set engine display language = en_US
            // FIXME nullpointerException (ConfigurationSegmentImport.java:1634)
            IPreferences pre = ConfigUtilities.getPerference((OCAUser) user);
            revertDisplayLanguage((OCAUser)user);//set engine display language = en_US
            pre.setTenant(OCAStringUtilities.TENANT_CODE_HPE);
            
            if (engineConfig != null ) {
            	useEngineSession.removeConfig((ConfigurationImpl)engineConfig);
            }
            boolean isGreenLakeSimpleCustom = "Y".equalsIgnoreCase(config.getGreenLakeSimpleCustomFlag()) ? true:false;
            
            restoreEngineConfiguration = useEngineSession.loadConfiguration("oca",
            		pre, config.getConfigEngineClob(), versionId,
                    configurationType, referencedConfigs, configVersions, config.getCompletenessState().toString(),false,isGreenLakeSimpleCustom);
            

            // if use current engine session in ocaSession added it in to the ucidtoengineConfigIdMap
            if (useEngineSession.equals(engineSession) && isNested && (ucid != null && restoreEngineConfiguration != null)) {
                ucidToEngineConfigId.put(ucid, restoreEngineConfiguration.getId());
                justAddUcidToEngineConfigId.put(ucid, restoreEngineConfiguration.getId());
                addEntryFromJustAddedUcidToEngineConfigId(justAddUcidToEngineConfigId, engineSession);
                
            }
            if((ucid != null && restoreEngineConfiguration != null) && IconUtility.isIconContainerSolution(((ConfigurationImpl)restoreEngineConfiguration).getSolutionSubconfiguration())) {
            	((ConfigurationImpl)restoreEngineConfiguration).setIconSolution(true);
            }
            
            //LAW GREENLAKE
            if(restoreEngineConfiguration instanceof ConfigurationImpl) {
            	if(config.getGreenLake().equalsIgnoreCase("YES") || config.getGreenLake().equalsIgnoreCase("Y")) {
            		((ConfigurationImpl) restoreEngineConfiguration).setIsGreenLake(true);
            	} else {
            		((ConfigurationImpl) restoreEngineConfiguration).setIsGreenLake(false);
            	}
            }
        }
        return restoreEngineConfiguration;
    }

    
	private void revertDisplayLanguage(OCAUser user) {
		String enginePrefXML = user.getEnginePrefXML();
		StringBuilder builder = new StringBuilder(enginePrefXML);
		String temp = "<xb:preference name=\"display_language\" value=\"en_US\"/>";
		int index = builder.lastIndexOf(temp);
		if (index != -1) {
			builder.delete(index, index+temp.length());
			user.setEnginePrefXML(builder.toString());
		}
	}

	private void setKBDisplayLanguage(OCAUser user) {
		String enginePrefXML = user.getEnginePrefXML();
		Pattern compile = Pattern.compile("<xb:preference name=\"display_language\" value=\"\\w*\"/>");
		Matcher matcher = compile.matcher(enginePrefXML);
		if (matcher.find()) {
			StringBuilder stringBuilder = new StringBuilder(enginePrefXML);
			String group = matcher.group();
			int index = stringBuilder.indexOf(group) + group.length();
			stringBuilder.insert(index, "<xb:preference name=\"display_language\" value=\"en_US\"/>");
			user.setEnginePrefXML(stringBuilder.toString());
		}
	}

	/**
     * Get sub-configuration id by UCID
     * @author Frank
     * @param ucid UCID
     * @return sub config id
     */
    public String getSubConfigIdByUcid(String ucid) {
        String subConfigId = null;
        String engineConfigId = ucidToEngineConfigId.get(ucid);
        SessionImpl engineSession = (SessionImpl) getEngineSession();
        if (engineConfigId != null) {
            ConfigurationImpl persistentConfig = (ConfigurationImpl) engineSession.getConfiguration(engineConfigId);
            if (persistentConfig != null) {
                if (ConfigurationType.SOLUTION.equals(persistentConfig.getConfigurationType())) {
                    subConfigId = persistentConfig.getSolutionSubconfiguration().getId();
                } else if (ConfigurationType.PERSISTENT.equals(persistentConfig.getConfigurationType())) {
                    subConfigId = persistentConfig.getPrimarySubconfiguration().getId();
                }
            }
        }
        return subConfigId;
    }

    /**
     * Navigates the GUI to a particular place based on the path parameter.
     *
     * Currently, path should be of the form:
     * subConfig[<id>]/main_page/rhs/level1tiles_widget/<category>/detail_tabs/<section>
     * where <id> is the id of a sub-configuration within the current solution configuration,
     * <category> is 'hw', 'sw', 'svc' or 'ci'
     * and <section> is a valid section id for the given sub-configuration.
     *
     * In all cases, the method currently does a page re-load (even if the specified
     * section is currently in the detail tabs widget).
     *
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse navigate_to(Map<String, Object> params, Window window) throws Exception {

        String methodName = "OCASession.navigate_to()";
        String path = (String) params.get("path");
        String ci2SvcFlag = (String) params.get("ci2SvcFlag");
        String rackFlag = (String) params.get("rackFlag");

        // get the sub-config part, and the rest
        String subConfigSetting = WidgetUtilities.getPathFirstPart(path);
        String rest = WidgetUtilities.getPathRest(path);

        // extract the sub-config id
        String prefix = "subConfig[";
        int pos1 = subConfigSetting.indexOf(prefix);
        if (pos1 == -1) {
            LoggerUtils.error(logger, methodName,
                    "navigate_to expects subConfig[<subConfigId>] at the start of the path: " + path);
            throw new EngineException("navigate_to expects subConfig[<subConfigId>] at the start of the path: " + path);
        }
        int pos2 = subConfigSetting.indexOf(']', prefix.length());
        if (pos2 == -1) {
            LoggerUtils.error(logger, methodName, "Missing ] in navigate_to path: " + path);
            throw new EngineException("Missing ] in navigate_to path: " + path);
        }
        String subConfigId = subConfigSetting.substring(prefix.length(), pos2);

        if (StringUtils.isNullOrEmpty(subConfigId)) {
            LoggerUtils.error(logger, methodName, "navigate_to needs non-empty subConfigId parameter");
            throw new EngineException("navigate_to needs non-empty subConfigId parameter");
        }

        // look up the sub-config
        ISubConfiguration subConfig = null;

        if ("root".equals(subConfigId)) {
            subConfig = solutionSubConfig;
        } else if ("current".equals(subConfigId)) {
            subConfig = solutionSubConfig;
        } else {
            subConfig = statefulConfig.getEngineConfig().getSubConfiguration(subConfigId);
        }

        if (subConfig == null) {
            LoggerUtils.error(logger, methodName, "Cannot find sub-configuration with id " + subConfigId);
            throw new EngineException("Cannot find sub-configuration with id " + subConfigId);
        }

        ModelInstance instance = null;

        if (!"root".equals(subConfigId) && !"current".equals(subConfigId)) {
            // pick the first instance of the sub-config
            Set<ConfigurationInstance> instances = ((ConfigurationImpl) statefulConfig.getEngineConfig())
                    .getInstancesOfConfig(subConfigId);
            if (instances == null || instances.size() == 0) {
                LoggerUtils.error(logger, methodName, "Unexpected: cannot find instance of given sub-configuration: "
                        + subConfigId);
                throw new EngineException("Unexpected: cannot find instance of given sub-configuration:" + subConfigId);
            }
            instance = instances.iterator().next();
        }

        String pageSetting = WidgetUtilities.getPathFirstPart(rest);
        rest = WidgetUtilities.getPathRest(rest);

        if (!"main_page".equals(pageSetting)) {
            LoggerUtils.error(logger, methodName, "naviage_to currently only supports main_page as the page setting: "
                    + pageSetting);
            throw new EngineException("naviage_to currently only supports main_page as the page setting: "
                    + pageSetting);
        }

        // create main page if not already being shown
        IPage currentPage = window.getCurrentPage();
        IPage mainPage = null;
        if (currentPage.getClass().getName().equals(MAIN_PAGE_CLASS)) {
            mainPage = currentPage;
        } else {
            mainPage = createMainPage(window);
            window.clearAndAddPage(mainPage);
        }

        if (!"current".equals(subConfigId)) {
            statefulConfig.setSelection(instance == null ? new ConfigSelection() : new ConfigSelection(instance));
        }

        ((MainPage) mainPage).setCi2SvcFlag(ci2SvcFlag);
        ((MainPage) mainPage).setRackFlag(rackFlag);
        mainPage.navigateTo(rest);
        MauiAction action;
        if ("current".equals(subConfigId)) {
            action = window.actionUpdateCurrentPage();
        } else {
            action = window.actionLoadCurrentPage();
        }
        return new MauiResponse(action);
    }
    
    public MauiResponse validate_oppId(Map<String, Object> params, Window window) throws EngineException {
        String methodName = "OCASession.validate_oppId(): ";
        JsonObject obj = new JsonObject();
        boolean flag = true;
        String errorMsg = "";

        try {
            Map<String, Object> result = validateOppId(params);
            obj.add("dataObj", mapToJsonUtil(result));
        } catch (Throwable e) {
            // we also catch RuntimeException
            LoggerUtils.error(logger, methodName, "method.invoke exception: ", e);
            flag = false;
            errorMsg = getText("exception");
            obj.addProperty("errorMsg", errorMsg);
        }

        obj.addProperty("result", flag);
        return Window.responseForGetServerData(obj);
    }

    /**
     * Validate opportunity id, to call GOI web service to get the corresponding customer information.
     * @param params {"opptyID": "OPE-123456789"}
     * @return Map<String, Object>
     * @throws Exception
     */
    private Map<String, Object> validateOppId(Map<String, Object> params) throws Exception {
        String methodName = "OCASession.validateOppId(): ";
        coronaEMDMHService = (CoronaEMDMHServiceDao)getTool().getToolSpringApplicationContext().getBean("coronaEMDMHService");
        emdmhService  = (EMDMHService)getTool().getToolSpringApplicationContext().getBean("emdmhService");
        Map<String, Object> results = new HashMap<String, Object>();

        String oppId = (String) params.get("opptyID");
        // boolean fromNewConfigPage = (Boolean) params.get("isFromNewConfigPage");
        // boolean isSaveRootConfig = (Boolean) params.get("isSaveRootConfig");
        long resultCode = 0;
        String msg = "";

        //US 14067-eMDM start
	boolean isEMDMServiceEnable = this.isAttributeEnabledInDB("OCA_EMDM_ENABLED");
		
	//US 14067-eMDM end
        
        // step1: call GOI to validate oppId
        Map<String, Object> resultGOI = callGOI(oppId);
        resultCode = (Long) resultGOI.get("code");
        Opportunity opportunity = (Opportunity) resultGOI.get("opportunity");
        LoggerUtils.info(logger, methodName, "Opportunity form GOI: " + opportunity);
        
        // call attribute value for greenLake
        String greenLakeValues = siteAttributeDAO.getAttributeValue("hpeSolution");
        opportunity.setGreenLakeValues(greenLakeValues);
        
        // step2: call MDM to get corresponding organization for this oppId
        if (resultCode == CODE_GOI_SUCCESS && !StringUtils.isNullOrEmpty(opportunity.getBusinessRelationshipId())) {
        	 Map<String, Object> result = null;
        	 if("Y".equalsIgnoreCase(getToolConfig().getGreenLakeSimpleCustomFlag()) && 
                 	!OCAUtilities.glscAllowNonGlOppid() &&
                 	(opportunity.getHpeSolution().isEmpty() || 
                 	!(greenLakeValues.contains(opportunity.getHpeSolution()) || opportunity.getHpeSolution().toLowerCase().contains("greenlake"))) ){
                     results.put("resultCode", CODE_MDM_FAILURE);
                     msg = opportunity.getOpportunityId()+" "+getText("ocw.glsc.error") ;
                     results.put("resultMessage", msg);
                     return results;
                 }
        	 if(isEMDMServiceEnable &&  UtilityConfigMethods.isEmdmhPartyIdEnabled((KnowledgeBaseImpl) getUIFramework().getKb(),((ConfigurationImpl)solutionSubConfig.getConfiguration()).getCountryCode()) && !StringUtils.isNullOrEmpty(opportunity.getPartyId())){
        	if(params.get("isEmdmhService")!=null && (Boolean)params.get("isEmdmhService"))
        	{
        		result=callEMDMH(opportunity);
        	}else{
        		result = coronaEMDMHService.getCustomerDetails(opportunity.getPartyId());
        	}
        	results.put("entityDetails", result.get("results"));
        	}else{
            	//legecy ws to pass Bussiness Relationship Id and get Gloabl DUNS
        		result = callMDM(opportunity);
            } 
            OcaOrganization org = (OcaOrganization) result.get("organization");
            LoggerUtils.info(logger, methodName, "OcaOrganization form MDM: " + org);
            long code = (Long) result.get("code");
            if (code == CODE_MDM_FAILURE) {
                resultCode = code;
                msg = (String) result.get("msg");
            } else {
                if (org != null) {
                    results.put("organization", org);
                    msg = (String) result.get("msg");
                }
            }
        } else {
            msg = (String) resultGOI.get("msg");
        }

        results.put("resultCode", resultCode);
        results.put("resultMessage", msg);
        results.put("opportunity", opportunity);
        return results;
    }

    /**
     * validate opportunity id by GOI
     * @param oppId
     * @return
     * @throws Exception
     */
    private Map<String, Object> callGOI(String oppId) throws Exception {
        String methodName = "OCASession.callGOI(): ";
        Map<String, Object> result = new HashMap<String, Object>();

        GoiClient client = (GoiClient) getTool().getToolSpringApplicationContext().getBean("goiClient");
        client.setGoiURL(SpringPropertiesUtil.getProperty("goi.ws.url"));
        client.setGoiUser(SpringPropertiesUtil.getProperty("goi.ws.user"));
        client.setGoiPassword(SpringPropertiesUtil.getProperty("goi.ws.pwd"));
        Opportunity opportunity = null;
        String msg = "";
        long code = 0l;

        try {
            opportunity = client.getOpportunityData(oppId);
        } catch (Throwable e) {
            // special handle for GOI, catch RuntimeException
            LoggerUtils.error(logger, methodName, "method.invoke exception: ", e);
            opportunity = new Opportunity();
            opportunity.getStatusMessage().setCode(CODE_GOI_FAILURE);
        }

        code = opportunity.getStatusMessage().getCode();

        if (code == CODE_GOI_SUCCESS) {
            msg = "successful";
        } else if (code == CODE_GOI_FAILURE) {
            msg = getText("ocw.goi.error");
        } else {
            msg = getText("ocw.oppId.invalid");
        }

        result.put("code", code);
        result.put("msg", msg);
        result.put("opportunity", opportunity);
        return result;
    }

    /**
     * Use business relationship id to search the Organization from MDM
     * @param opportunity
     * @return
     * @throws Exception
     */
    private Map<String, Object> callMDM(Opportunity opportunity) throws Exception {
        String methodName = "OCASession.callMDM(): ";
        Map<String, Object> result = new HashMap<String, Object>();

        MdmClient client = (MdmClient) getTool().getToolSpringApplicationContext().getBean("mdmClient");
        client.setSalesAccountURL(SpringPropertiesUtil.getProperty("mdm.ws.salesAccount.url"));
        client.setMdmUser(SpringPropertiesUtil.getProperty("mdm.ws.user"));
        client.setMdmPassword(SpringPropertiesUtil.getProperty("mdm.ws.pwd"));
        OcaOrganization org = null;
        long code = 0l;
        String msg = getText("ocw.oppId.valid",opportunity.getOpportunityId());
        try {
            org = client.getGlobalDunsFromMDMWS(opportunity.getBusinessRelationshipId());
        } catch (Exception e) {
            LoggerUtils.error(logger, methodName, "Exception: ", e);
            code = CODE_MDM_FAILURE;
            msg = getText("ocw.mdm.error");
        }

        result.put("code", code);
        result.put("msg", msg);
        result.put("organization", org);
        return result;
    }
    
    /**
     * US 14067-eMDM changes
     * Use PartyId to search the Organization from eMDM
     * @param opportunity
     * @return
     * @throws Exception
     */
    private Map<String, Object> callEMDM(Opportunity opportunity) throws Exception {
    	String methodName = "OCASession.callEMDM(): ";
    	Map<String, Object> result = new HashMap<String, Object>();

    	String username = SpringPropertiesUtil.getProperty("emdm.ws.partylookup.user");
    	String password = SpringPropertiesUtil.getProperty("emdm.ws.partylookup.pwd");
    	String url = SpringPropertiesUtil.getProperty("emdm.ws.partylookup.url");
    	long code = 0l;
    	String msg = getText("ocw.oppId.valid",opportunity.getOpportunityId());
    	/*int connectionTimeoutSeconds = 60;//seconds
    	RestTemplate restTemplate = new RestTemplate(OCAUtilities.setConnectionTimeout(connectionTimeoutSeconds));*/
    	RestTemplate restTemplate = new RestTemplate();
    	HttpHeaders headers = new HttpHeaders();
    	headers.add("Accept", MediaType.APPLICATION_JSON.toString());
    	headers.add("Content-Type", MediaType.APPLICATION_JSON.toString());
    	JsonObject jObj= new JsonObject();
    	jObj.addProperty("USERNAME", username);
    	jObj.addProperty("PASSWORD", password);
    	jObj.addProperty("partyID", opportunity.getPartyId());

    	HttpEntity<String> request = new HttpEntity<String>(jObj.toString(),headers);
    	OcaOrganization org = new OcaOrganization();

    	try {
    		ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, request, String.class);
    		Gson gson = new Gson();
    		JsonElement element = gson.fromJson (response.getBody(), JsonElement.class);
    		JsonObject jsonObj = element.getAsJsonObject();
    		if(jsonObj.has("status") && StringUtils.isEqual(jsonObj.get("status").getAsString(), "SUCCESS")){
    			if(jsonObj.has("party") && jsonObj.get("party")!= JsonNull.INSTANCE){
    				JsonElement element1 = jsonObj.getAsJsonArray("party").get(0);
    				if(element1.getAsJsonObject().has("dunsID")){
    					org.setGlobalDunsNumber(element1.getAsJsonObject().get("dunsID").getAsString());
    				}
    				if(element1.getAsJsonObject().has("organizationName")){
    					org.setOrganizationName(element1.getAsJsonObject().get("organizationName").getAsString());
    				}
    			}
    		}else{
    			code = CODE_MDM_FAILURE;
    			msg = jsonObj.get("message").getAsString();
    		}
    	} catch (Exception e) {
    		LoggerUtils.error(logger, methodName, "Exception: ", e);
    		code = CODE_MDM_FAILURE;
    		msg = getText("ocw.mdm.error");
    	}
    	result.put("code", code);
    	result.put("msg", msg);
    	result.put("organization", org);
    	return result;
    }
    private Map<String, Object> callEMDMH(Opportunity opportunity) throws Exception {
    	String methodName = "OppIdCustomerWorkgroupWidget.callEMDMH(): ";
    	Map<String, Object> result = new HashMap<String, Object>();

    	long code = 0l;
    	String msg = getText("ocw.oppId.valid",opportunity.getOpportunityId());


    	try {
    		result=emdmhService.getEntityDetailsfromEMDMH(opportunity.getPartyId());
    	} catch (Exception e) {
    		code = CODE_EMDMH_FAILURE;
    		msg = getText("ocw.mdm.error");
    	}
    	result.put("code", code);
    	result.put("msg", msg);
    	return result;
    }
    
    /**
     * util method - convert Map to JsonObject List<?> should be enhancement
     *
     * @param map
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    private JsonObject mapToJsonUtil(Map<String, Object> map) throws Exception {
        JsonObject jsonObj = new JsonObject();
        if (map == null || map.size() == 0) {
            return jsonObj;
        }

        Set<String> keys = map.keySet();
        Iterator<String> it = keys.iterator();
        String key = "";
        Object obj = null;
        while (it.hasNext()) {
            key = it.next();
            obj = map.get(key);
            if (obj == null) {
                continue;
            }
            if (obj instanceof String || obj instanceof Boolean || obj instanceof Long) {
                jsonObj.addProperty(key, obj.toString());
            } else if (obj instanceof Map) {
                jsonObj.add(key, mapToJsonUtil((Map<String, Object>) obj));
            } else if (obj instanceof List) {
                List<?> tempObj = (List<?>) obj;
                if (tempObj.size() > 0 && tempObj.get(0) instanceof OCANewWorkgroup) {
                    jsonObj.add(key, OCANewWorkgroupManager.convertToJsonArray((List<OCANewWorkgroup>) tempObj));
                } else {
                    jsonObj.add(key, TestUISerializer.getJsonElement(tempObj));
                }
            } else {
                jsonObj.add(key, TestUISerializer.getJsonElement(obj));
            }
        }

        jsonObj.addProperty("isGLSCConfig", ((ConfigurationImpl)solutionSubConfig.getConfiguration()).isGreenLakeSimpleCustom());
        return jsonObj;
    }

    /**
     *  validate whether opportunity id is valid
     * @param params parameters
     * @param window current window
     * @return MauiResponse<br>
     * <pre>
     * {
     * opportunity:{
     *  opportunityId:
     *  opportunityName:
     *  opportunityDescription:
     *  mdcpOrgId:
     *  mdcpOtherPartyId:
     *  businessRelationshipId:
     *  statusMessage:
     * },
     *  account:{
     *  reload:
     *  resultStatus:
     *  resultMessage:
     *  selectedAccountNum:
     *  accountList:
     * },
     *  resultMessage:
     *  resultCode:
     * }</pre>
     * @throws Exception if exception happened
     */
    public MauiResponse validate_oppId(Map<String, Object> params) throws Exception {
        String opportunityId = (String) params.get("opportunity_id");
        
        if(opportunityId == null){
        	opportunityId = (String) params.get("opptyID");
        }
        
        Boolean isNewConfigPage = null != params.get("isNewConfigPage") && (Boolean) params.get("isNewConfigPage");
        Boolean isRoot = null != params.get("isRoot") ? (Boolean) params.get("isRoot") : false;
        
        JsonObject obj = validateOppId(opportunityId, isNewConfigPage, isRoot);
        
        return Window.responseForGetServerData(obj);
    }

    /**
     * validate opportunity id and return the related information.
     * <pre>
     * Sample of the result.
     * {
     * opportunity:{
     *  opportunityId:
     *  opportunityName:
     *  opportunityDescription:
     *  mdcpOrgId:
     *  mdcpOtherPartyId:
     *  businessRelationshipId:
     *  statusMessage:
     * },
     *  account:{
     *  reload:
     *  resultStatus:
     *  resultMessage:
     *  selectedAccountNum:
     *  accountList:
     * },
     *  resultMessage:
     *  resultCode:
     * }</pre>
     * @param opportunityId E.g. "OPP-0001505613"
     * @param fromNewConfigPage true if this request is from new config page.
     * @param isSaveRootConfig true if save root config
     * @return JsonObject
     * @throws EngineException 
     * @throws BeansException 
     */
    public JsonObject validateOppId(String opportunityId, boolean fromNewConfigPage, boolean isSaveRootConfig) throws BeansException, EngineException {
        JsonObject respJson = new JsonObject();
        long resultCode = 0;
        String resultMessage = "";
        coronaEMDMHService = (CoronaEMDMHServiceDao)getTool().getToolSpringApplicationContext().getBean("coronaEMDMHService");

        // Call GOI web service
        GoiClient goiClient = (GoiClient) ocaApplicationContext.getBean("goiClient");
        goiClient.setGoiURL(SpringPropertiesUtil.getProperty("goi.ws.url"));
        goiClient.setGoiUser(SpringPropertiesUtil.getProperty("goi.ws.user"));
        goiClient.setGoiPassword(SpringPropertiesUtil.getProperty("goi.ws.pwd"));
        Opportunity opportunity = null;
        try {
            opportunity = goiClient.getOpportunityData(opportunityId);
            
         // call attribute value for greenLake
            String greenLakeValues = siteAttributeDAO.getAttributeValue("hpeSolution");
            opportunity.setGreenLakeValues(greenLakeValues);
        } catch (Exception e) {
            // call GOI web service failed
            LoggerUtils.error(logger, "OCASession.validateOppId()", "Exception: GoiClient.getOpportunityData()", e);
            opportunity = new Opportunity();
            if (opportunity.getStatusMessage() != null) {
                opportunity.getStatusMessage().setCode(-1);
            }
        }

        resultCode = opportunity.getStatusMessage().getCode();

        // invalid opportunity id
        if (resultCode != 0 && resultCode != -1) {
            resultMessage = getText("ocw.oppId.invalid");

            // call GOI web service failed
        } else if (resultCode == -1) {
            resultMessage = getText("ocw.goi.error");

        // Call MDM web-service
        } else if (resultCode == 0) {
            String businessRelationShipId = opportunity.getBusinessRelationshipId();
            OcaOrganization org = null;
            if (!StringUtils.isNullOrEmpty(businessRelationShipId)) {
            	//US 14067-eMDM start
            	boolean isEMDMServiceEnable = this.isAttributeEnabledInDB("OCA_EMDM_ENABLED");
            	 Map<String, Object> result = null;
            	if(isEMDMServiceEnable &&UtilityConfigMethods.isEmdmhPartyIdEnabled((KnowledgeBaseImpl) getUIFramework().getKb(),((ConfigurationImpl)solutionSubConfig.getConfiguration()).getCountryCode()) && !StringUtils.isNullOrEmpty(opportunity.getPartyId())){
            		try {
            			result = coronaEMDMHService.getCustomerDetails(opportunity.getPartyId());
                    	if((Long) result.get("code")==CODE_MDM_FAILURE){
                    		result=callEMDMH(opportunity);
                    	}
                    	if((Long) result.get("code")==CODE_MDM_FAILURE){
                    		result=callEMDM(opportunity);
                    	}
            			respJson.add("entityDetails",TestUISerializer.getJsonElement(result.get("results")));
            			org = (OcaOrganization) result.get("organization");
            		} catch (Exception e) {
            			// call MDM web service failed
            			LoggerUtils.error(logger, "OCASession.validateOppId()",
            					"Exception: MdmClient.getGlobalDunsFromMDMWS() ", e);
            			if (opportunity.getStatusMessage() != null) {
            				opportunity.getStatusMessage().setCode(-1);
            				resultCode = -1;
            				resultMessage = getText("ocw.mdm.error");
            			}
            		}
            	}//US 14067-eMDM end
            	else{
            		MdmClient mdmClient = (MdmClient) ocaApplicationContext.getBean("mdmClient");
            		mdmClient.setSalesAccountURL(SpringPropertiesUtil.getProperty("mdm.ws.salesAccount.url"));
            		mdmClient.setMdmUser(SpringPropertiesUtil.getProperty("mdm.ws.user"));
            		mdmClient.setMdmPassword(SpringPropertiesUtil.getProperty("mdm.ws.pwd"));
            		try {
            			org = mdmClient.getGlobalDunsFromMDMWS(businessRelationShipId);
            		} catch (Exception e) {
            			// call MDM web service failed
            			LoggerUtils.error(logger, "OCASession.validateOppId()",
            					"Exception: MdmClient.getGlobalDunsFromMDMWS() ", e);
            			if (opportunity.getStatusMessage() != null) {
            				opportunity.getStatusMessage().setCode(-1);
            				resultCode = -1;
            				resultMessage = getText("ocw.mdm.error");
            			}
            		}
            	}
            }
            if (org != null) {
                respJson.add("organization", TestUISerializer.getJsonElement(org));
            }
        }

        respJson.addProperty("resultCode", resultCode);
        respJson.addProperty("resultMessage", resultMessage);
        respJson.add("opportunity", TestUISerializer.getJsonElement(opportunity));
        return respJson;
    }

    /**
     * search customer account from MDM web-service
     * @param params parameters
     * @param window current window
     * @return search result
     */
    public MauiResponse search_customer_from_mdm(Map<String, Object> params, Window window) {
        String url = SpringPropertiesUtil.getProperty("mdm.ws.customerLookup.url");
        String username = SpringPropertiesUtil.getProperty("mdm.ws.customerLookup.user");
        String pwd = SpringPropertiesUtil.getProperty("mdm.ws.customerLookup.pwd");
        int timeout = Integer.parseInt(SpringPropertiesUtil.getProperty("mdm.ws.customerLookup.timeout"));

        //200: OK. 408: Read time out. 500: some internal error happened. 503: service unavailable
        int code = HTTP_RESULT_OK;
        String message = "";
        JsonObject jsonObj = new JsonObject();
        JsonObject dataObj = new JsonObject();
        JsonArray jsonArr = new JsonArray();
        JsonObject temp = null;

        MdmClient client = (MdmClient) ocaApplicationContext.getBean("mdmClient");
        client.setCustomerLookupURL(url);
        client.setMdmUser(username);
        client.setMdmPassword(pwd);
        client.setMdmTimeout(timeout);
        CustomerSearchResponse resp = null;

        boolean isBlankOthers = StringUtils.isNullOrEmpty(params.get("company_name") + "")
                && StringUtils.isNullOrEmpty(params.get("street_1") + "")
                && StringUtils.isNullOrEmpty(params.get("city") + "")
                && StringUtils.isNullOrEmpty(params.get("zip_code") + "")
                && StringUtils.isNullOrEmpty(params.get("country") + "");

        boolean isBlankCustomerID = StringUtils.isNullOrEmpty(params.get("customer_id") + "");
        boolean isBlankMDCPid = StringUtils.isNullOrEmpty(params.get("org_id") + "");

        if (!isBlankCustomerID && (!isBlankOthers || !isBlankMDCPid)) {
            code = HTTP_RESULT_SERVICE_ERROR;
            message = this.getText("sam.msg1");
        } else if (!isBlankMDCPid && (!isBlankOthers || !isBlankCustomerID)) {
            code = HTTP_RESULT_SERVICE_ERROR;
            message = this.getText("sam.msg2");
        } else if (!isBlankMDCPid && !(NUM_PATTERN.matcher(params.get("org_id") + "").matches())) {
            code = HTTP_RESULT_SERVICE_ERROR;
            message = this.getText("sam.msg3");
        } else {
            try {
                resp = client.getCustomerFromMDMWS(params);
                if (resp.getInternalResponseCode().equals(CustomerSearchResponse.REPSONSE_SUCCESS_CODE)) {
                    for (CustomerSearchResults result : resp.getSearchResults()) {
                        temp = new JsonObject();
                        temp.addProperty("customerId", result.getCustomerId());
                        temp.addProperty("businessRelationshipId", result.getBusinessRelationshipId());
                        temp.addProperty("orgId", result.getOrganizationId());
                        temp.addProperty("otherPartySiteId", result.getOtherPartySiteInstanceId());
                        temp.addProperty("companyName", result.getOrganizationExtendName());
                        temp.addProperty("street1", result.getStreet1LongName());
                        temp.addProperty("street2", result.getStreet2LongName());
                        temp.addProperty("city", result.getCityLongName());
                        temp.addProperty("zipCode", result.getPostalCodeName());
                        temp.addProperty("province", result.getPostalExtensionName());
                        temp.addProperty("country", result.getCountryCode());
                        temp.addProperty("globalDunsNum", result.getOrganizationDunsNumber());
                        temp.addProperty("globalDunsName", result.getOrganizationExtendName());
                        jsonArr.add(temp);
                    }
                    message = "success";
                } else {
                    code = HTTP_RESULT_SERVICE_ERROR;
                    message = this.getText("sam.msg4");
                }

            } catch (Exception e) {
                LoggerUtils.error(logger, "OCASession.search_customer_from_mdm()", "Exception happends :" + e);
                code = HTTP_RESULT_INTERNAL_ERROR;
                if (e.getMessage() != null && e.getMessage().indexOf("timed out") != -1) {
                    code = HTTP_RESULT_TIME_OUT;
                }
                message = this.getText("sam.msg5");
            }
        }

        dataObj.add("aaData", jsonArr);
        jsonObj.addProperty("code", code);
        jsonObj.addProperty("message", message);
        jsonObj.add("data", dataObj);
        return Window.responseForGetServerData(jsonObj);
    }

    public MauiResponse search_customer_from_emdm(Map<String, Object> params,Window window) throws Exception {
        String url = SpringPropertiesUtil.getProperty("emdm.ws.customersearch.url");
        String username = SpringPropertiesUtil.getProperty("emdm.ws.customersearch.user");
        String pwd = SpringPropertiesUtil.getProperty("emdm.ws.customersearch.pwd");
        int timeout = Integer.parseInt(SpringPropertiesUtil.getProperty("mdm.ws.customerLookup.timeout"));

        //200: OK. 408: Read time out. 500: some internal error happened. 503: service unavailable
        int code = HTTP_RESULT_OK;
        String message = "";
        JsonObject jsonObj = new JsonObject();
        JsonObject dataObj = new JsonObject();
        JsonArray jsonArr = new JsonArray();
        JsonObject temp = null;
        // EmdmClient client = (EmdmClient) ocaApplicationContext.getBean("emdmClient");
        EmdmJerseyClient emdmJerseyClient = EmdmJerseyClient.getInstance();
        /*client.setCustomerLookupURL(url);
        client.setEmdmUser(username);
        client.setEmdmPassword(pwd);
        client.setEmdmTimeout(timeout);*/
        CustomerSearchResponse resp = null;

        boolean isBlankOthers = StringUtils.isNullOrEmpty(params.get("company_name") + "")
                && StringUtils.isNullOrEmpty(params.get("street_1") + "")
                && StringUtils.isNullOrEmpty(params.get("city") + "")
                && StringUtils.isNullOrEmpty(params.get("zip_code") + "")
                && StringUtils.isNullOrEmpty(params.get("country") + "");

        boolean isBlankCustomerID = StringUtils.isNullOrEmpty(params.get("customer_id") + "");
        boolean isBlankMDCPid = StringUtils.isNullOrEmpty(params.get("org_id") + "");

        if (!isBlankCustomerID && (!isBlankOthers || !isBlankMDCPid)) {
            code = HTTP_RESULT_SERVICE_ERROR;
            message = this.getText("sam.msg1");
        } else if (!isBlankMDCPid && (!isBlankOthers || !isBlankCustomerID)) {
            code = HTTP_RESULT_SERVICE_ERROR;
            message = this.getText("sam.msg2");
        } else if (!isBlankMDCPid && !(NUM_PATTERN.matcher(params.get("org_id") + "").matches())) {
            code = HTTP_RESULT_SERVICE_ERROR;
            message = this.getText("sam.msg3");
        } else {
            try {

            	resp=emdmJerseyClient.getCustomerFromEMDMWS(params);
            	LoggerUtils.info(logger, "OCASession.search_customer_from_emdm", " Received Response : " + resp);
                if (resp.getInternalResponseCode().equals(CustomerSearchResponse.REPSONSE_SUCCESS_CODE)) {
                    for (CustomerSearchResults result : resp.getSearchResults()) {
                        temp = new JsonObject();
                        temp.addProperty("partyId", result.getPartyId());
                        temp.addProperty("orgId", result.getOrganizationId());
                        temp.addProperty("otherPartySiteId", result.getOtherPartySiteInstanceId());
                        temp.addProperty("companyName", result.getOrganizationExtendName());
                        temp.addProperty("street1", result.getStreet1LongName());
                        temp.addProperty("street2", result.getStreet2LongName());
                        temp.addProperty("city", result.getCityLongName());
                        temp.addProperty("zipCode", result.getPostalCodeName());
                        temp.addProperty("province", result.getPostalExtensionName());
                        temp.addProperty("country", result.getCountryCode());
                        temp.addProperty("globalDunsNum", result.getOrganizationDunsNumber());
                        temp.addProperty("globalDunsName", result.getOrganizationExtendName());
                        jsonArr.add(temp);
                    }
                    message = "success";
                } else {
                    code = HTTP_RESULT_SERVICE_ERROR;
                    message = this.getText("sam.msg4");
                }

            } catch (Exception e) {
                LoggerUtils.error(logger, "OCASession.search_customer_from_emdm()", "Exception happends :" + e);
                code = HTTP_RESULT_INTERNAL_ERROR;
                if (e.getMessage() != null && e.getMessage().indexOf("timed out") != -1) {
                    code = HTTP_RESULT_TIME_OUT;
                }
                message = this.getText("sam.msg5");
                e.printStackTrace();            }
        }

        dataObj.add("aaData", jsonArr);
		jsonObj.addProperty("code", code);
        jsonObj.addProperty("message", message);
        jsonObj.add("data", dataObj);
        return Window.responseForGetServerData(jsonObj);
    }
    /**
     * Call web-service to generate the customer ID
     * @param params parameters
     * @param window current window
     * @return generated customer ID
     * @throws EngineException if error happened
     */
    public MauiResponse create_customerId_by_mdm(Map<String, Object> params, Window window) throws EngineException {
        String url = SpringPropertiesUtil.getProperty("mdm.ws.orderReadyCustomer.url");
        String username = SpringPropertiesUtil.getProperty("mdm.ws.orderReadyCustomer.user");
        String pwd = SpringPropertiesUtil.getProperty("mdm.ws.orderReadyCustomer.pwd");
        int timeout = Integer.parseInt(SpringPropertiesUtil.getProperty("mdm.ws.orderReadyCustomer.timeout"));
        int code = HTTP_RESULT_OK;
        StringBuilder message = new StringBuilder();

        MdmClient client = (MdmClient) ocaApplicationContext.getBean("mdmClient");
        client.setOrderReadycustomerURL(url);
        client.setMdmUser(username);
        client.setMdmPassword(pwd);
        client.setMdmTimeout(timeout);

        JsonObject jsonObj = new JsonObject();
        JsonObject dataObj = new JsonObject();

        StopWatch stopWatchTotal = new Log4JStopWatch();

        try {
            CustomerValidatorResponse resp = client.createCustomerIdByMDMWS(params);
            stopWatchTotal.stop("createCustomerIdByMDMWS.end");
            if (resp.getErrors() != null) {
                code = HTTP_RESULT_SERVICE_ERROR;
                List<ValidateMessage> errorMsgList = resp.getErrors();
                for (ValidateMessage error : errorMsgList) {
                    message.append(error.getDescription()).append("<br/>");
                }
            } else {
                dataObj.addProperty("customer_id", resp.getBusinessLocatorNr());
                if (resp.getMessages() != null) {
                    List<ValidateMessage> msgList = resp.getMessages();
                    for (ValidateMessage msg : msgList) {
                        message.append(msg.getDescription()).append("<br/>");
                    }
                }
            }
        } catch (Exception e) {
            stopWatchTotal.stop("createCustomerIdByMDMWS.end");
            e.printStackTrace();
            LoggerUtils.error(logger, "OCASession.create_customerId_by_mdm()", "Exception happends :" + e);
            code = HTTP_RESULT_INTERNAL_ERROR;
            if (e.getMessage() != null && e.getMessage().indexOf("timed out") != -1) {
                code = HTTP_RESULT_TIME_OUT;
            }
            message.append(e.toString());
        }

        jsonObj.addProperty("code", code);
        jsonObj.addProperty("message", message.toString());
        jsonObj.add("data", dataObj);
        return Window.responseForGetServerData(jsonObj);
    }

    /**
     * Initialize EngineCatalog
     * @throws EngineException if create OCa product catalog failed.
     */
    private void initiateEngineCatalog(IConfiguration engineConfig) throws EngineException {

        // initialize Catalog, first close if its already there then create new one
        // There is no API to update preferences/Account/CustomerId to Catalog
        // so have to use create new catalog when Account details have changed for now.
        //TODO need API to refresh catalog based on account details
        if (engineCatalog != null) {
            engineCatalog.close();
        }

        ISubConfiguration solutionSubConfig = ((ConfigurationImpl) engineConfig).getSolutionSubconfiguration();
        engineCatalog = UtilityConfigMethods.createOCAProductCatalog(solutionSubConfig);
       
        if(isGLSCConfig) {
        	TreeNode adHocNode = engineCatalog.findFirstMatchingNode("id", "adHocCategory");
        	if(adHocNode != null) {
        		adHocNode.getParent().getSubNodes().remove(adHocNode);
        	}
        }
    }

    /** //LAW AccCAT
     * Initialize AcessoryCatalog
     * @throws EngineException if create OCa product catalog failed.
     */
    public void initiateAccessoryCatalog(IConfiguration engineConfig) throws EngineException {

        // initialize Catalog, first close if its already there then create new one
        // There is no API to update preferences/Account/CustomerId to Catalog
        // so have to use create new catalog when Account details have changed for now.
        //TODO need API to refresh catalog based on account details
        if (accessoryCatalog != null) {
        	accessoryCatalog.close();
        }
        
        ISubConfiguration solutionSubConfig = ((ConfigurationImpl) engineConfig).getSolutionSubconfiguration();
        accessoryCatalog = UtilityConfigMethods.createOCAAccessoryCatalog(solutionSubConfig);
    }
    
    /** //LAW SWCAT
     * Initialize SoftwareCatalog
     * @throws EngineException if create OCa product catalog failed.
     */
    private void initiateSoftwareCatalog(IConfiguration engineConfig) throws EngineException {

        // initialize Catalog, first close if its already there then create new one
        // There is no API to update preferences/Account/CustomerId to Catalog
        // so have to use create new catalog when Account details have changed for now.
        //TODO need API to refresh catalog based on account details
        if (softwareCatalog != null) {
        	softwareCatalog.close();
        }

        ISubConfiguration solutionSubConfig = ((ConfigurationImpl) engineConfig).getSolutionSubconfiguration();
        softwareCatalog = UtilityConfigMethods.createOCASoftwareCatalog(solutionSubConfig);
    }
    
    /**
     * set ToolConfig And EngineConfig of OCASession
     * @param engineConfig Engine configuration
     * @throws EngineException if error happened
     */
    private void setToolConfigAndEngineConfig(IConfiguration engineConfig) throws EngineException {

        String methodName = "OCASesssion.setToolConfigAndEngineConfig()";
        if (null == engineConfig) {
            LoggerUtils.error(logger, methodName, "the paramter engineConfig is empty.");
            throw new IllegalArgumentException("the paramter engineConfig is empty.");
        }

        Configuration domainConfig = ConfigurationConvertor.createDomainConfiguration(engineConfig,
                (OCAUser) this.user, OCA_ASSET_NAME);
        if (null == domainConfig) {
            LoggerUtils.error(logger, methodName, "tool Configuration is empty.");
            throw new IllegalArgumentException("tool Configuration is empty.");
        }
        PriceDescriptor pd = domainConfig.getConfigurationPreference().getPriceDescriptor();
        pd.setCurrency(getCurrency(pd.getCurrencyCode()));
        // add by Frank add a default account in the toolConfig
        domainConfig.setWorkgroupId(OCANewWorkgroupManager.HPE_INTERNAL);
        this.toolConfig = domainConfig;
        if (null != this.statefulConfig) {
            this.statefulConfig.setUcid(domainConfig.getUcid());
            this.statefulConfig.setDomainConfiguration(domainConfig);
            // TODO need to re-factor
            this.toolConfig.setConfigName(this.statefulConfig.getName());
        }
    }

    /**
     * reset user
     * @param user OCA user
     * @throws EngineException
     */
    private void resetUser(IUser user) {
        this.user = user;
    }

    /**
     * create main page instance
     * @param window current window
     * @return main page
     * @throws EngineException if error happened
     */
    private IPage createMainPage(Window window) throws EngineException {
        Map<String, Object> parameters = new HashMap<String, Object>();
        parameters.put("engineConfig", statefulConfig);
        parameters.put("solutionSubConfig", solutionSubConfig);
        parameters.put("engineCatalog", engineCatalog);
        parameters.put("softwareCatalog", softwareCatalog);
        parameters.put("accessoryCatalog", accessoryCatalog); // added by srk
        parameters.put("user", getUser());
        // a temporary parameter to work around a bug in calculating status
        parameters.put("calc_engine_status", getHttpParameter("calc_engine_status"));
        OCAUtilities.setUserPreferencesInParams(parameters, getUser());
        return window.createPage(MAIN_PAGE_CLASS, parameters);
    }

    private IPage createMainPage(Window window, String isBTO) throws EngineException {
        Map<String, Object> parameters = new HashMap<String, Object>();
        parameters.put("engineConfig", statefulConfig);
        parameters.put("solutionSubConfig", solutionSubConfig);
        parameters.put("engineCatalog", engineCatalog);
        parameters.put("softwareCatalog", softwareCatalog);
        parameters.put("accessoryCatalog", accessoryCatalog);
        parameters.put("user", getUser());
        if(isBTO != null)parameters.put("btoFlag", Boolean.parseBoolean(isBTO));
        // a temporary parameter to work around a bug in calculating status
        parameters.put("calc_engine_status", getHttpParameter("calc_engine_status"));
        OCAUtilities.setUserPreferencesInParams(parameters, getUser());
        return window.createPage(MAIN_PAGE_CLASS, parameters);
    }

    /**
     * Get engineConfig(IConfiguration) instance from OpenConfigurationResponse
     * @param params parameters
     * @param response OpenConfigurationResponse
     * @param configurationType ConfigurationImpl.ConfigurationType.SOLUTION
     * @return engine configuration
     * @throws Exception if error happend
     */
    private IConfiguration getEngineConfigByUcid(Map<String, Object> params, OpenConfigurationResponse response,
            ConfigurationImpl.ConfigurationType configurationType) throws Exception {

        IConfiguration engineConfig = null;
        OCAUser user = (OCAUser) getUser();
        String ucid = (String) params.get("search_ucid");
        String mode = (String) params.get("mode");
        
        //Raji - Start Need to allow NGQ users to edit config
        String dispatchAction = (String)params.get("DispatchAction");
        
        
        boolean isWNGQUserInEditConfig = false;
        
        if(params.get("isWNGQUser") != null && ((Boolean)params.get("isWNGQUser") && dispatchAction != null && dispatchAction.equalsIgnoreCase("UPDATE_CONFIG") )){
        	isWNGQUserInEditConfig = true;
        }
        //end 
        
        
        boolean isDelegationMode = StringUtils.isEqual(mode,"delegation");
        //Added for User Story 12877 : Config Delegation
        String dlgConfigStatus = (String) params.get("dlgConfigStatus");
        if(dlgConfigStatus != null){
        	setConfigDlgStatus(dlgConfigStatus);
        }
        
        
        setOpenDeleagtedConfig(isDelegationMode);

        boolean success = !response.isFailureOrNoMatchesFoundOrNotAuthorized();

        OCAConfigOperation op = OCAConfigOperation.OpenConfiguration;
        if (isDelegationMode) {
            op = OCAConfigOperation.OpenDelegatedConfig;
        }
        success = success && ocaWorkgroupManager.validateOperationForConfiguration(user,
                response.getConfigurationList().get(0), op);
        
        //As user is NGQ user and opened config in EDIT mode, need to allow edit irrespective of workgroup they belong
        if(!success && isWNGQUserInEditConfig){
        	
        	success = isWNGQUserInEditConfig;
        	LoggerUtils.info(logger, "As user is NGQ user coming in EDIT mode for a config, allowing user to edit config ");
        }
        
      //check whether given config delegated
        if(!success && user.isSA()){
        	//check whether given config is delegated
        	success = OCAUtilities.isConfigDelegatedToSA(this, response.getConfigurationList().get(0).getUcid());        	
        }

        if (success) {
            Configuration config = response.getConfigurationList().get(0);
            
            //TODO OCA Exception page - Need to set UCID into session
            

            // if this configuration is quoted or the request is from WNGQ,
            // we should update the Completeness State and Visibility State.
            List<?> list = OCAUtilities.getQuoteList(ucid);
            boolean isQuoted = null != list && 0 != list.size();
            boolean isIncorrectState = config.getCompletenessState() == CompletenessState.WorkInProgress
                    &&  config.getVisibilityState() != VisibilityState.Published;
            if (user.isWNGQUser() || (isIncorrectState && isQuoted)) {
                if (!CompletenessState.Complete.equals(config.getCompletenessState())) {
                    config.setCompletenessState(CompletenessState.CIInProgress);
                }
                config.setVisibilityState(VisibilityState.Published);

                boolean needCreateAssetConfigMap = false;
                if (!(user.getTransactionId().equals(config.getTransactionId()) && ucid.equals(config.getUcid()))) {
                    config.setTransactionId(user.getTransactionId());
                    //config.setModifiedPersonId(user.getUserId()); //Modified person shouldn't be updated, as it is just load config action
                    needCreateAssetConfigMap = true;
                }
               
                if(config.isExpertBomEnabled()) {
                	 engineConfig = restoreEngineConfiguration(config, ucid, null, configurationType,(SessionImpl) this.getEngineSession(), true);
                	 OCAUtilities.syncAllConfiguration(config, engineConfig, ((ConfigurationImpl)engineConfig).getSolutionSubconfiguration(), this);
                }
                
                SaveConfigurationRequest request = new SaveConfigurationRequest();
                request.setAssetName(OCAStringUtilities.TOOL_NAME);
                request.setTenantCode(OCAStringUtilities.TENANT_CODE_HPE);
                request.getDomainConfigurations().add(config);
                request.setNeedCreateAssetConfigMap(needCreateAssetConfigMap);
                request.setUser(user);
                SaveConfigurationResponse update = getPersistentService().saveConfiguration(request);
                
                //As config has been saved now, Get last modified time from database and set in Config object in order to avoid Error while saving current config
                CoronaSearchService css = (CoronaSearchService) getTool().getToolSpringApplicationContext().getBean(
                        "coronaSearchService");
                java.util.Date lastSaveDate = css.getlatestUpdateTime(ucid);
                
                config.setModifiedTimestamp(lastSaveDate);
                try {
	                // get products from SOLR - SOLR will be faster than corona call
	                List<String> ucids = new ArrayList<String>();
	                ucids.add(config.getUcid());
	                List<OCASearchConfigVO> searchConfigList = solrService.getConfig(ucids);
	                List<OCASearchConfigVO> updateConfigList = new ArrayList<OCASearchConfigVO>(); 
	                if (searchConfigList !=null && !searchConfigList.isEmpty()) {
	                	OCASearchConfigVO ocaConfig = searchConfigList.get(0);
	                	ocaConfig.setCompleteStatus(config.getCompletenessState().toString());
	                	//ocaConfig.setLastModifiedPersonId(config.getModifiedPersonId());  //Modified person shouldn't be updated, as it is just load config action
	                	ocaConfig.setLastModifiedTimestamp(config.getModifiedTimestamp());
	                	String productList = ocaConfig.getProductList();
	        			if (!StringUtils.isNullOrEmpty(productList)) {
	        				// remove brackets
	        				if (productList.contains("[") && productList.contains("]")) {
	        					productList = productList.replace("[", "");
	        					productList = productList.replace("]", "");
	        				}
	        				ocaConfig.setProductList(productList);
	        			}
	                	updateConfigList.add(ocaConfig);
		                // update SOLR
	                	solrService.updateMultipleConfig(updateConfigList, false); 
	                }
                } catch (Exception e) {
                	LoggerUtils.error(logger, "OCASession.updateSolr Completion status failed", "Exception: " + e);
				}
                // save failure
                if (update.isFailureOrNoMatchesFoundOrNotAuthorized()) {
                    throw new EngineException("Save Configuration to Corona failed. Error: "  + update.getMessage());
                }
            }

            // US-13675 - added by anand
          //  config.setClickStatus(this.getClickStatus());
           // config.setClickRunDate(this.getClickRunDate());
            
            //add by Frank   make the persistent state be same as completenessState
            config.setPersistentCompletenessState(config.getCompletenessState());
            config.setWorkgroupName(ocaWorkgroupManager.getOCAWorkgroupName(config.getWorkgroupId()));

            if(engineConfig == null) {
            	engineConfig = restoreEngineConfiguration(config, ucid, null, configurationType, (SessionImpl) this.getEngineSession(), true);
            }
            
            ((ConfigurationImpl)engineConfig).setGreenLakeSimpleCustom("Y".equalsIgnoreCase(config.getGreenLakeSimpleCustomFlag()) ? true:false);
            setGLSCConfig("Y".equalsIgnoreCase(config.getGreenLakeSimpleCustomFlag()) ? true:false);
        }

        return engineConfig;
    }

    /**
     * Reset configuration Objects
     * Sync domainConfig, engineConfig, statefulAPIConfig and solutionSubConfig and initial engine catalog
     * @param user OCA user
     * @param engineConfig engine configuration
     * @param domainConfig domain configuration
     * @throws Exception if error happened
     */
    public void resetConfiguration(IConfiguration engineConfig, Configuration domainConfig, User user)
            throws Exception {

    	domainConfig.setExpertBomEnabled(((ConfigurationImpl)engineConfig).isExpertBomEnabled());
    	domainConfig.setActiveBomDownstream(((ConfigurationImpl)engineConfig).getActiveBomDownStream());
        StatefulAPIConfiguration statefulAPIConfig = new StatefulAPIConfiguration(engineConfig, domainConfig);
        statefulAPIConfig.setName(domainConfig.getConfigName());
        statefulAPIConfig.setUcid(domainConfig.getUcid());
        domainConfig.getConfigurationPreference().setConfigType(engineConfig.getTargetEnvironment());
        // Comments the statement, cause it makes Config Preference overridden by User Preference when open
        // configuration 2015-9-15
        // domainConfig.setConfigurationPreference(ConfigurationConvertor.createConfigPreference(engineConfig,
        // (OCAUser) user));

        this.statefulConfig = statefulAPIConfig;
        this.toolConfig = domainConfig;
   
        this.solutionSubConfig = ((ConfigurationImpl) engineConfig).getSolutionSubconfiguration();
        toolsHelper = ((SubConfigurationImpl) solutionSubConfig).getKb().getToolsHelperClass("oca"); //LAW R23
        initiateEngineCatalog(engineConfig);
        if(enableAccCatalog)initiateAccessoryCatalog(engineConfig); //LAW AcCAT
        if(enableSWCatalog)initiateSoftwareCatalog(engineConfig); //LAW SWCAT
    }

    /**
     * @author Frank
     * @param justAddUcidToEngineConfigId Map(key:UCID, value:engine configuration ID)
     * @param engineSession engine session
     */
    private void addEntryFromJustAddedUcidToEngineConfigId(Map<String, String> justAddUcidToEngineConfigId,
            SessionImpl engineSession) {

        for (Entry<String, String> entry : justAddUcidToEngineConfigId.entrySet()) {
            String ucid = entry.getKey();
            String engineConfigId = justAddUcidToEngineConfigId.get(ucid);
            ConfigurationImpl persistentConfig = (ConfigurationImpl) engineSession.getConfiguration(engineConfigId);

            if (null != persistentConfig
                    && ConfigurationType.PERSISTENT.equals(persistentConfig.getConfigurationType())) {
                ISubConfiguration persistentSubConfig = persistentConfig.getPrimarySubconfiguration();
                if (persistentSubConfig != null) {
                    subConfigIdToUcid.put(persistentSubConfig.getId(), ucid);
                }
            }
        }
    }

    /**
     * create a new request object for opening one configuration
     * @param ucid UCID
     * @return OpenConfigurationRequest
     */
    public OpenConfigurationRequest createOpenConfigurationRequest(String ucid) {
        OpenConfigurationRequest request = new OpenConfigurationRequest();
        request.setUser((User) user);
        request.setUcid(ucid);
        request.setAssetName(OCAStringUtilities.TOOL_NAME);
        request.setTenantCode(OCAStringUtilities.TENANT_CODE_HPE);
        request.setOriginatingAsset(OCAStringUtilities.TOOL_NAME);
        return request;
    }

    /**
     * write cookie for the most recently opened configs Do we need to filter the source APP?
     * @param action one MauiAction
     */
    private void writeCookieForRecentConfig(MauiAction action) {
        JsonObject cookieJson = new JsonObject();

        try {
            // step1: get config info
            String ucid = currentBuildingConfig.getUcid();
            OCAUser user = (OCAUser) getUser();
            cookieJson.addProperty("id", ucid);
            cookieJson.addProperty("name", currentBuildingConfig.getConfigName());
            cookieJson.addProperty("creator", currentBuildingConfig.getCreationPersonId());
            cookieJson.addProperty("lastModifiedDate", currentBuildingConfig.getModifiedTimestamp().getTime());

            // step2: update action
            String cookieKey = user.getUserId() + "_RECENT_OPENED_CONFIG";
            String cookieVal = cookieJson.toString();
            OCAActionUtils.writeCookieForOpenConfigBeforeFunction(action, cookieKey, cookieVal);

            // step3: add the opened config into top11ConfigList
            // filterTop11ConfigList(currentBuildingConfig);
        } catch (EngineException e) {
            LoggerUtils.error(logger, "OCASession.writeCookieForRecentConfig()", "Exception: " + e);
        }
    }
    
    private void writeCookieForCurrentBuildingAfterOpen(MauiResponse response) throws EngineException {
    	boolean needWriteCookie = !((OCAUser)user).isWNGQUser();
        if(!needWriteCookie) {
        	return ;
        }

        if(needWriteCookie){
            String currBuildingInfo = "";
            String key = getUser().getUserId() + CurrentBuildingWidget.SUFFIX_OF_CURRENT_BUILDING;
            Map<String, String> cMap = new HashMap<String, String>(2);
            
            PriceService priceService = (PriceService) getTool().getToolSpringApplicationContext().getBean("priceService");
            
            currBuildingInfo = CurrentBuildingWidget.generateCurrentBuildingJson(this, currentBuildingConfig, (SubConfigurationImpl)solutionSubConfig, priceService).toString();
            cMap.put(key, currBuildingInfo);
            MauiAction action = Window.actionWriteCookie(cMap);
            response.addAction(action);
        }
    }

    /**
     * Get persistent service from application context.
     * @return PersistentService
     */
    public IPersistenceService getPersistentService() {
        if (null == persistentService) {
        	persistentService = (IPersistenceService) SpringApplicationContext.getBean("persistenceService");
        }
        return persistentService;
    }

    private String getText(String key, Object... args) {
        return getLocalization().getOCAText(key, args);
    }

    private MauiResponse doActivateAndContinue(String id) throws EngineException {
        CoronaSearchService css = (CoronaSearchService) getTool().getToolSpringApplicationContext().getBean(
                "coronaSearchService");
        if (StringUtils.isNullOrEmpty(id)) {
            return Window.responseSimple(ActionCode.NO_ACTION);
        }
        String ucid = id.replace("Confirm_", "");
        css.activateOutdatedConfig(ucid, getUser());
        Map<String, Object> openParams = new HashMap<String, Object>();
        openParams.put("search_ucid", ucid);
        MauiResponse mauiResponse = open_config_by_ucid(openParams, getWindow(getCurrentWindowId()));
        mauiResponse.addAction(Window.actionSimple(ActionCode.NO_ACTION));
        return mauiResponse;
    }

    private MauiResponse checkConfigExpired(String ucid, Window window) throws EngineException {

        // check last modified time
        CoronaSearchService css = (CoronaSearchService) getTool().getToolSpringApplicationContext().getBean(
                "coronaSearchService");
        if (css.isConfigExpired(ucid, CONFIG_EXPIRED_DAYS)) {
            List<DialogButton> buttons = Arrays.asList(
                new DialogButton("Confirm_" + ucid, getText("confirm"), getText("confirm"), new ICallback() {
                    @Override
                    public MauiResponse call(Map<String, Object> params) throws EngineException {
                        String id = (String) params.get("id");
                        return doActivateAndContinue(id);
                    }
                }), new DialogButton("Cancel", getText("cancel"), getText("cancel"), new ICallback() {
                    @Override
                    public MauiResponse call(Map<String, Object> params) throws EngineException {
                        return Window.responseSimple(ActionCode.NO_ACTION);
                    }
                })
            );
            return new MauiResponse(window.actionShowDialog(getText("alert"),
                    getText("os.warn.outofdate", CONFIG_EXPIRED_DAYS), buttons));
        }
        return null;
    }

    private void preLoadConfig() throws EngineException {
        // for WNGQ/ESP
        if (null != user && (((OCAUser) user).isWNGQUser() || ((OCAUser) user).isESPUser())) {
            Map<String, String> parameters = this.getHttpParameters();
            String Referer = this.getHttpHeader("Referer")!=null?this.getHttpHeader("Referer"):"";
            String referer = StringEscapeUtils.unescapeHtml(Referer);
            List<NameValuePair> qparams = URLEncodedUtils.parse(referer, Charset.forName("UTF-8"));
           // Map<String, String> newparameters = null;
            for (NameValuePair pair : qparams) {
                parameters.put(pair.getName(), pair.getValue());
            }
            for (Map.Entry<String,String> entry : parameters.entrySet()){
            	
                LoggerUtils.info(logger,"Refer Key = " + entry.getKey() +
                                 ", Refer Value = " + entry.getValue());
            }
            String wngqConfigId = parameters.get("ConfigurationId");
            LoggerUtils.info(logger, "OCASession", wngqConfigId);
            for (Map.Entry<String,String> entry : parameters.entrySet()){
                LoggerUtils.info(logger,"wngqcongididparameters "+"Key = " + entry.getKey() +
                                 ", Value = " + entry.getValue());
            }
            
            //Prasad - EDIT config from NGQ via PRP 
            String dispachAction = parameters.get("DispatchAction");
            
            if(StringUtils.isNullOrEmpty(wngqConfigId)) {
            	wngqConfigId = (String)this.loginContext.get("ConfigurationId");
            }
            if(StringUtils.isNullOrEmpty(dispachAction)) {
            	dispachAction = (String)this.loginContext.get("DispatchAction");
            }
            if (StringUtils.isEqual(dispachAction, "UPDATE_CONFIG") && !StringUtils.isNullOrEmpty(wngqConfigId)) {
                try {
                	//Raji Modified - if it is EDIT mode for a config from NGQ, need to allow edit mode for all configs and for all NGQ users 
                	Map<String, Object> paramMap = new HashMap<String, Object>();

                    paramMap.put("search_ucid", wngqConfigId);
                    paramMap.put("DispatchAction", dispachAction);
                                       
                    paramMap.put("isWNGQUser",((OCAUser) user).isWNGQUser());

                    loadConfigByUcid(paramMap);
                    
                    //end Raji
                    
                } catch (Exception e) {
                    LoggerUtils.error(logger, "OCASession", "Open config failed", e);
                    throw new EngineException("Open config failed", e);
                }
            }
        }
    }

    /**
     * determines whether to expose sizer integration capability
     * @return true/false
     */
    public boolean enableSizerIntegration() {
        return true;
    }

    /**
     * determines whether to expose the Solution Wizard, and which products it should be triggered on;
     * the value should be |-delimited list of product numbers -- the wizard will be offered if the selected
     * product is one of them
     * @return "true" or "false"
     */
    public String enableSolutionWizard() {
        return getHttpParameter("solutionwizard");
    }
    
    
    public MauiResponse export_to_SBWorWastonConfiguration(Map<String, Object> params, Window window)
			throws EngineException {
		String methodName = "OCASession.export_to_SBWorWastonConfiguration: ";
		Log4JStopWatch stopWatch = new Log4JStopWatch(methodName, auditLogger);
		
		ClientResponse response =null;
		
		final boolean IS_ONLINE = (null != SpringPropertiesUtil.getProperty("online")
				&& SpringPropertiesUtil.getProperty("online").equalsIgnoreCase("false")) ? false : true;
		try {

			String assetName = "OCA";

			ExporterRequest exporterRequest = new ExporterRequest();
			
			SubConfigurationImpl subConfig = ((ConfigurationImpl) this.statefulConfig.getEngineConfig()).getSolutionSubconfiguration();
		 	
		 	String c2bData = OCAUtilities.getC2BAgentClassAndRun(subConfig.getConfiguration(),(KnowledgeBaseImpl) subConfig.getConfiguration().getKB());

		 	if(!c2bData.isEmpty()){
		 		statefulConfig.getDomainConfiguration().setRequiresC2B(true);
		 	}else{
		 		statefulConfig.getDomainConfiguration().setRequiresC2B(false);
		 	}
		 	
			ExportType exportType = (ExportType) Enum.valueOf(ExportType.class, (String) params.get("exportType"));

			exporterRequest.setUser((User) user);
			System.out.println("statefulConfig : subconfig - sdd "+statefulConfig.getDomainConfiguration().getSubConfigurations().size());
			exporterRequest.setConfiguration(statefulConfig);
			exporterRequest.setAssertName(assetName);
			exporterRequest.setEngineSession(getEngineSession());
			exporterRequest.setSynConfigurationRequired(true);
			exporterRequest.setOnline(IS_ONLINE);
			exporterRequest.setExportType(exportType);
			
			if (assetName == null || assetName.trim().length() == 0) {
				exporterRequest.setAssertName("OCA");
			}
			if (((User) user).getType() == UserType.PublicUser && ("WQSDD".equals(exportType.getExportType()) || "WQSDD_SINGLE_BUNDLE".equals(exportType.getExportType()))) {
				exporterRequest.setRepriceRequired(false);
			} else {
				exporterRequest.setRepriceRequired(true);
			}

			IExporter exporterFacade = (ExporterFacade) SpringApplicationContext.getBean("exporterFacade");
			
			addTopLevelNodeSubConfigIds(exporterRequest,window);
			
			ExporterResponse exporterResponse = exporterFacade.export(exporterRequest);
			String fileName = "";

			if (null == statefulConfig.getDomainConfiguration()
					|| statefulConfig.getDomainConfiguration().getSubConfigurations().size() == 0) {
				fileName = "Untitled";
			} else {
				fileName = this.getStatefulAPIConfiguration().getDomainConfiguration().getConfigName()+ "_" + this.getStatefulAPIConfiguration().getDomainConfiguration().getUcid();
			}
			//replacing special characters and space with underscore		
			//fileName = fileName.replaceAll("[^a-zA-Z0-9.-]", "_");
			fileName = fileName.replaceAll("[\\s]", "_");
			
			stopWatch.stop("ConfigurationServiceFlexFacade.exportConfiguration." + exportType);

			if(params.get("exportall")!=null && "WQSDD_SINGLE_BUNDLE".equals((String)params.get("exportType"))){
				fileName = fileName+"_singlebundle";
			}
			
			refreshNonConfigLineItem(window);
			
			fileName= fileName+ exportType.getExtension();
			byte[] pdfBinary = exporterResponse.getContent();

			if(params.get("exportall")!=null){
				prepareExportDataMap(fileName,pdfBinary);
				System.out.println("end of sdd export : "+fileName+" - "+pdfBinary.length);
				return null;
			}
			
			JsonObject obj = new JsonObject();
			obj.addProperty("file_content", Base64.encodeBase64String(exporterResponse.getContent()));
			obj.addProperty("filename", fileName );
			obj.addProperty("content_type", exportType.getContentType());
			
			
            OCAUser user = getUser();
            boolean isPartner = user.getPartner() != null && !"".equals(user.getPartner().getAccountId());
            
            // CRID : 351640- Need to decouple .sdd, .xml and .oca exports from saving into Corona.
            
            /*response = OCAUtilities.uploadFileToCorona(pdfBinary, fileName, isPartner);
			
			int responseCode = response.getClientResponseStatus().getStatusCode();
			if (responseCode == 200) {
				String url = response.getEntity(String.class);
				obj.addProperty("name", fileName);
				obj.addProperty("url", url);
				obj.addProperty("result", "success");11
				obj.addProperty("clicCheck",user.isClicCheck() && this.isDisplayClicWarning()); // US-13675 - added by anand

				// set URL to tool configuration
				List<String> urlList = new ArrayList<String>();
				urlList.add(url);
				statefulConfig.getDomainConfiguration().setIncludeCiFlag("Y");
				statefulConfig.getDomainConfiguration().setAttachmentURL(urlList);
			} else {
				obj.addProperty("result", "error");
				obj.addProperty("message", "Faild to connect corona attachment web service.");
			}*/

			return Window.actionDownload(pdfBinary, exportType.getContentType(),
					fileName, null);
			
			//return Window.responseForGetServerData(obj);
			
		} catch (Exception e) {
			LoggerUtils.error(logger, "export_configuration", e);
//			throw new EngineException("Export configuration error", e);
			JsonObject errObj = new JsonObject();
			errObj.addProperty("result", "error");
			errObj.addProperty("message", "OCA Cannot support SDD creation for this configuration");
			return Window.responseForGetServerData(errObj);
		} finally {
			if (stopWatch != null) {
				stopWatch.stop(methodName + ".incomplete");
			}
			if (response != null) {
				response.close();
			}
		}
	}

    private void addTopLevelNodeSubConfigIds(ExporterRequest exporterRequest,Window window) {
    	MainPage mainPage = (MainPage)window.getCurrentPage();
		ExportType exportType = exporterRequest.getExportType();
		List<OverviewNode>  topLevelNodes = mainPage.getOverviewWidget().getTopLevelNodes();
		SubConfigurationImpl subConfig = ((ConfigurationImpl) this.statefulConfig.getEngineConfig()).getSolutionSubconfiguration();
		
		if(topLevelNodes != null && topLevelNodes.size() > 0) {
			for(OverviewNode node : topLevelNodes) {
				if(exportType == ExportType.WQSDD_SINGLE_BUNDLE) {
					if(subConfig.getConfiguration().isIconSolution()) {
						//For single bundle SDD Export ignore icons
						for(OverviewNode childNode : node.getChildren()) {
							if(childNode.isGroupNode()) {
								for(OverviewNode groupChild : childNode.getChildren()) {
									exporterRequest.addTopLevelSubConfigId(groupChild.getSubconfiguration().getId());
								}
							}else {
								exporterRequest.addTopLevelSubConfigId(childNode.getSubconfiguration().getId());
							}
						}
					}else {
						if(node.isGroupNode()) {
							for(OverviewNode groupChild : node.getChildren()) {
								exporterRequest.addTopLevelSubConfigId(groupChild.getSubconfiguration().getId());
							}
						}else {
							exporterRequest.addTopLevelSubConfigId(node.getSubconfiguration().getId());
						}
					}
				}else {
					if(node.isGroupNode()) {
						for(OverviewNode groupChild : node.getChildren()) {
							exporterRequest.addTopLevelSubConfigId(groupChild.getSubconfiguration().getId());
						}
					} else {
						exporterRequest.addTopLevelSubConfigId(node.getSubconfiguration().getId());
					}
				}
			}
		}
    }
    
    // method added here to check the export functionality - Mahesh Guntreddi
    public MauiResponse export_configuration(Map<String, Object> params, Window window) throws EngineException {
    	
    	String methodName = "OCASession.export_to_eclipse_single_multiple_bundle(): ";
		Log4JStopWatch stopWatch = new Log4JStopWatch(methodName, auditLogger);
		ClientResponse response =null;
    	final boolean  IS_ONLINE = (null != SpringPropertiesUtil
    			.getProperty("online") && SpringPropertiesUtil
    			.getProperty("online").equalsIgnoreCase("false")) ? false : true;
		try {
			boolean occContent = this.getUserOptionBooleanInherit("withOCCContent", false);
		 	String assetName = occContent?"SCEPP":"OCA";
		 	
		 	ExporterRequest exporterRequest = new ExporterRequest();
		 	
		 	SubConfigurationImpl subConfig = ((ConfigurationImpl) this.statefulConfig.getEngineConfig()).getSolutionSubconfiguration();
		 	
		 	String c2bData = OCAUtilities.getC2BAgentClassAndRun(subConfig.getConfiguration(),(KnowledgeBaseImpl) subConfig.getConfiguration().getKB());
		 	
		 	ExportType exportType = (ExportType)Enum.valueOf(ExportType.class, (String)params.get("exportType"));
		 	
		 	if(!c2bData.isEmpty()){
		 		statefulConfig.getDomainConfiguration().setRequiresC2B(true);
		 	}else{
		 		statefulConfig.getDomainConfiguration().setRequiresC2B(false);
		 	}

			//Code for checking multiple bundle support
		 	if (params.get("exportType").equals("SMART_QUOTE_XML") && !IconUtility.isIconContainerSolution((SubConfigurationImpl)solutionSubConfig)) {
		 		if (!ExportDataProvider.configSupportsMultiBundle((ConfigurationImpl) statefulConfig.getEngineConfig())) {
		 			JsonObject errObj = new JsonObject();
		 			errObj.addProperty("result", "notsupported");
		 			errObj.addProperty("message", "Multi Bundle XML export is not available when Complex configurations (ex: 3PAR, Synergy) are in the solution or Services are attached at the solution level.");
		 			return Window.responseForGetServerData(errObj);
		 		}
			}	
		 	exporterRequest.setUser((User) user);
			exporterRequest.setConfiguration(statefulConfig);
		 	exporterRequest.setAssertName(assetName);
		 	exporterRequest.setEngineSession(getEngineSession());
		 	exporterRequest.setSynConfigurationRequired(true);
		 	exporterRequest.setOnline(IS_ONLINE);
		 	exporterRequest.setExportType(exportType);
			if(assetName == null || assetName.trim().length() ==0){
				exporterRequest.setAssertName("OCA");
			}
			if(((User)user).getType() == UserType.PublicUser && "WQSDD".equals(exportType.getExportType())){
				exporterRequest.setRepriceRequired(false);
			}else{
				exporterRequest.setRepriceRequired(true);
			}

			exporterRequest.setClicStatusFlag(getUser().isBomClicStatus());
			exporterRequest.setClicCheckData(((OCASession) window.getSessionObj()).getClicCheckData());
			addTopLevelNodeSubConfigIds(exporterRequest, window);
			
			IExporter exporterFacade = (ExporterFacade) SpringApplicationContext.getBean("exporterFacade");
			UserManager userManager = (UserManager) SpringApplicationContext.getBean("UserManager");
		    ExporterResponse exporterResponse = exporterFacade.export(exporterRequest);
		    String fileName ="";

			if(null== statefulConfig.getDomainConfiguration() || statefulConfig.getDomainConfiguration().getSubConfigurations().size() == 0) {
				fileName= "Untitled";
			} else {
				fileName = this.getStatefulAPIConfiguration().getDomainConfiguration().getConfigName() + "_" + this.getStatefulAPIConfiguration().getDomainConfiguration().getUcid();
			}
			stopWatch.stop("ConfigurationServiceFlexFacade.exportConfiguration." + exportType);
			
			//replacing special characters and space with underscore		
			//fileName = fileName.replaceAll("[^a-zA-Z0-9.-]", "_");
			fileName = fileName.replaceAll("[\\s]", "_");


			/*if(params.get("exportall")!=null && "SMART_QUOTE_XML".equals((String)params.get("exportType"))){
				fileName = fileName+"_multibundle";
			}*/
			
			refreshNonConfigLineItem(window);

			fileName= fileName + exportType.getExtension();
			byte[] xmlBinary = exporterResponse.getContent();

			if(params.get("exportall")!=null){
				prepareExportDataMap(fileName,xmlBinary);
				System.out.println("end of xml export :"+fileName+ "--"+xmlBinary.length);
				return null;
			}
			
			JsonObject obj = new JsonObject();
			obj.addProperty("file_content", Base64.encodeBase64String(exporterResponse.getContent()));
			obj.addProperty("filename", fileName );
			obj.addProperty("content_type", exportType.getContentType());
			
			OCAUser user = getUser();
			boolean isPartner = user.getPartner() != null && !"".equals(user.getPartner().getAccountId());
			// CRID : 351640- Need to decouple .sdd, .xml and .oca exports from saving into Corona.
			
			/*response = OCAUtilities.uploadFileToCorona(xmlBinary, fileName, isPartner);
			
			int responseCode = response.getClientResponseStatus().getStatusCode();
			if (responseCode == 200) {
				String url = response.getEntity(String.class);
				obj.addProperty("name", fileName);
				obj.addProperty("url", url);
				obj.addProperty("result", "success");
				obj.addProperty("clicCheck",user.isClicCheck() && this.isDisplayClicWarning()); // US-13675 - added by anand
				
				// set URL to tool configuration
				List<String> urlList = new ArrayList<String>();
				urlList.add(url);
				statefulConfig.getDomainConfiguration().setIncludeCiFlag("Y");
				statefulConfig.getDomainConfiguration().setAttachmentURL(urlList);
			} else {
				obj.addProperty("result", "error");
				obj.addProperty("message", "Faild to connect corona attachment web service.");
			}*/

			return Window.actionDownload(xmlBinary, exportType.getContentType(),
					fileName, null);
			
			//return Window.responseForGetServerData(obj);				
		} catch (Exception e) {
			LoggerUtils.error(logger, "export_configuration", e);
			JsonObject errObj = new JsonObject();
			errObj.addProperty("result", "error");
			errObj.addProperty("message", "OCA Cannot support XML creation for this configuration");
			return Window.responseForGetServerData(errObj);
			//throw new EngineException("Export configuration error", e);
		}finally{
			if (stopWatch != null) {
				stopWatch.stop(methodName + ".incomplete");
			}
		}
	}
    
    
    //ROHIT UPDATE STARTS
    
    public MauiResponse export_customer_facing_docs(Map<String, Object> params, Window window) throws EngineException {
    	String methodName = "OCASession.export_customer_facing_docs(): ";
		Log4JStopWatch stopWatch = new Log4JStopWatch(methodName, auditLogger);
		
		SubConfigurationImpl subConfig;
    	
		subConfig = ((ConfigurationImpl) statefulConfig.getEngineConfig()).getSolutionSubconfiguration();
		
    	final boolean  IS_ONLINE = (null != SpringPropertiesUtil
    			.getProperty("online") && SpringPropertiesUtil
    			.getProperty("online").equalsIgnoreCase("false")) ? false : true;
		try {
			boolean occContent = this.getUserOptionBooleanInherit("withOCCContent", false);
		 	String assetName = occContent?"SCEPP":"OCA";
		 	
		 	ExporterRequest exporterRequest = new ExporterRequest();
		 	
		 	//SubConfigurationImpl subConfig = ((ConfigurationImpl) this.statefulConfig.getEngineConfig()).getSolutionSubconfiguration();
		 	
		 	//String c2bData = OCAUtilities.getC2BAgentClassAndRun(subConfig.getConfiguration(),(KnowledgeBaseImpl) subConfig.getConfiguration().getKB());
		 	
		 	String exportFileType = (String)params.get("exportType");
			
			StringMap k = (StringMap) params.get("exportDetails");
	    	
		 	String fileType = (String)k.get("fileType");
	    	boolean summary = (boolean)k.get("showSummaryPage");
	    	boolean productTypeOverview = (boolean)k.get("productTypeOverview");
	    	boolean groupByProductType = (boolean)k.get("groupByProductType");
	    	boolean showPricing = (boolean)k.get("showPricing");
	    	boolean hideFactoryIntegratedOptions = (boolean)k.get("hideFactoryIntegratedOptions");
	    	boolean showConfigName = (boolean)k.get("configName");
	    	boolean showParentNode = (boolean)k.get("parentNodeName");
			
			if("pdf".equals(fileType)) {
				exportFileType = exportFileType+"_PDF";
	    	}else {
	    		exportFileType = exportFileType+"_XLS";
	    	}
		 	
		 	ExportType exportType = (ExportType)Enum.valueOf(ExportType.class, exportFileType);
		 	
		 	boolean exportExpertBom = subConfig.getConfiguration().isExpertBomEnabled() && "ExpertBOM".equals(subConfig.getConfiguration().getActiveBomDownStream());
			if(exportExpertBom) {
	            	exporterRequest.setExportExpertBom(true);
	            	ConfigurationImpl configImpl = subConfig.getConfiguration();
	            	ConfigurationPreference cp = statefulConfig.getDomainConfiguration().getConfigurationPreference();
	            	SubConfigRootItem rootItem = OCAExpertBOMUtility.convertExpoertBomToSubConfigRootItem(configImpl.getExpertBomRootNode(), configImpl.getSolutionSubconfiguration(),null, OCAUtilities.getClicDataPerUCID(session));
	            	DataServices dataSerices = (DataServices)SpringApplicationContext.getBean("dataServices");
					dataSerices.getPriceForBom(rootItem, cp, false, false);
					exporterRequest.setExpertBomRootItem(rootItem);
	            }
		 	
//		 	if(!c2bData.isEmpty()){
//		 		statefulConfig.getDomainConfiguration().setRequiresC2B(true);
//		 	}else{
//		 		statefulConfig.getDomainConfiguration().setRequiresC2B(false);
//		 	}

			//Code for checking multiple bundle support
//		 	if (params.get("exportType").equals("SMART_QUOTE_XML") && !IconUtility.isIconContainerSolution((SubConfigurationImpl)solutionSubConfig)) {
//		 		if (!ExportDataProvider.configSupportsMultiBundle((ConfigurationImpl) statefulConfig.getEngineConfig())) {
//		 			JsonObject errObj = new JsonObject();
//		 			errObj.addProperty("result", "notsupported");
//		 			errObj.addProperty("message", "Multi Bundle XML export is not available when Complex configurations (ex: 3PAR, Synergy) are in the solution or Services are attached at the solution level.");
//		 			return Window.responseForGetServerData(errObj);
//		 		}
//			}
		 	exporterRequest.setToolFolder(getToolFolder());
	    	exporterRequest.setUser((User) user);
			exporterRequest.setConfiguration(statefulConfig);
		 	exporterRequest.setAssertName(assetName);
		 	exporterRequest.setEngineSession(getEngineSession());
		 	exporterRequest.setSynConfigurationRequired(true);
		 	exporterRequest.setOnline(IS_ONLINE);
		 	exporterRequest.setExportType(exportType);
		 	
		 	exporterRequest.setConfigName(showConfigName); //check this
		 	exporterRequest.setParentNodeName(showParentNode);
			exporterRequest.setSummaryPage(summary);
			exporterRequest.setProductTypeOverview(productTypeOverview);
			exporterRequest.setGroupByProductType(groupByProductType);
			exporterRequest.setHideFactoryIntegratedOptions(hideFactoryIntegratedOptions);
			exporterRequest.setShowPrice(showPricing);
		 	
			if(assetName == null || assetName.trim().length() ==0){
				exporterRequest.setAssertName("OCA");
			}
			
//			if(((User)user).getType() == UserType.PublicUser && "WQSDD".equals(exportType.getExportType())){
//				exporterRequest.setRepriceRequired(false);
//			}else{
//				exporterRequest.setRepriceRequired(true);
//			}

			addTopLevelNodeSubConfigIds(exporterRequest, window);
			
			IExporter exporterFacade = (ExporterFacade) SpringApplicationContext.getBean("exporterFacade");
			//UserManager userManager = (UserManager) SpringApplicationContext.getBean("UserManager");
		    ExporterResponse exporterResponse = exporterFacade.export(exporterRequest);
		    
		    String fileName ="";

			if(null== statefulConfig.getDomainConfiguration() || statefulConfig.getDomainConfiguration().getSubConfigurations().size() == 0) {
				fileName= "Untitled";
			} else {
				fileName = this.getStatefulAPIConfiguration().getDomainConfiguration().getConfigName() + "_" + this.getStatefulAPIConfiguration().getDomainConfiguration().getUcid()+"_CF";
			}
			stopWatch.stop("ConfigurationServiceFlexFacade.exportConfiguration." + exportType);
			
			//replacing special characters and space with underscore		
			//fileName = fileName.replaceAll("[^a-zA-Z0-9.-]", "_");
			fileName = fileName.replaceAll("[\\s]", "_");

			refreshNonConfigLineItem(window);

			fileName= fileName + exportType.getExtension();

			return Window.actionDownload(exporterResponse.getContent(), exportType.getContentType(),
					fileName, null);
			
		} catch (Exception e) {
			LoggerUtils.error(logger, "export_configuration", e);
			JsonObject errObj = new JsonObject();
			errObj.addProperty("result", "error");
			errObj.addProperty("message", "OCA Cannot support XML creation for this configuration");
			return Window.responseForGetServerData(errObj);
			//throw new EngineException("Export configuration error", e);
		}finally{
			if (stopWatch != null) {
				stopWatch.stop(methodName + ".incomplete");
			}
		}
	}
    
    //ROHIT UPDATE ENDS


    
	private void refreshNonConfigLineItem(Window window) {

		if (window.getCurrentPage() instanceof OCAAbstractPage) {

			if (!statefulConfig.getDomainConfiguration().getLineItems().isEmpty()) {

				int lineItemId = 0;
				for (AbstractVirtualLineItem<?> lineItem : statefulConfig.getDomainConfiguration().getLineItems()) {

					if (lineItem instanceof AccessoryRootItem || lineItem instanceof BundleRootItem) {

						lineItemId = lineItem.refreshSubLineItemID(lineItemId);
					}
				}

			}
		}
	}
	/**
	 * for save to local function
	 * @param params
	 * @param window
	 * @return
	 * @throws Exception
	 */
	public MauiResponse load_save_config_window(Map<String, Object> params, Window window) throws Exception{
		User user = (User)getUser();
		Configuration domainConfiguration = this.statefulConfig.getDomainConfiguration();
		
		JsonObject respJson = new JsonObject();
		respJson.addProperty("ConfigurationFileId", domainConfiguration.getUcid());
		respJson.addProperty("QuoteCreatedBy", user.getEmail());
		respJson.addProperty("ConfigurationFileName", domainConfiguration.getConfigName());
		respJson.addProperty("CustomerCompanyName", domainConfiguration.getCustomerCompanyName());
		respJson.addProperty("Share", user.getType() == UserType.PublicUser || domainConfiguration.getConfigurationPreference().getShareState() == ShareState.Shared ? true: false);
		respJson.addProperty("UserType", user.getType().toString());

		return Window.responseForGetServerData(respJson);
	}
	
	
	public MauiResponse save_config_to_local(Map<String, Object> params, Window window) throws EngineException, UnsupportedEncodingException{
		
		 	
    	
		StatefulAPIConfiguration config = this.statefulConfig;
		String methodName = "OCASession.save_config_to_local()";
		Log4JStopWatch stopWatch = new Log4JStopWatch(methodName, auditLogger);
		String configFileName = (String)params.get("config_name");
		String configFileNameWithExtn = configFileName + "_"+config.getDomainConfiguration().getUcid()+".oca";
		
		config.getDomainConfiguration().setConfigName(configFileName);
		boolean restricted = false;		
		if(params.get("exportall")==null){
			String customer = (String)params.get("customer");
			String opptyID = (String)params.get("opptyID");
			String workgroup = (String)params.get("workgroup");
			if(params.get("s_wrapper_restricted") != null){
				restricted = (boolean)params.get("s_wrapper_restricted");
			}
			config.getDomainConfiguration().setCustomerCompanyName(customer);
			config.getDomainConfiguration().setOpportunityId(opptyID);
			config.getDomainConfiguration().setWorkgroupId(workgroup);
			
		}
		
		//replacing special characters and space with underscore		
		//configFileNameWithExtn = configFileNameWithExtn.replaceAll("[^a-zA-Z0-9.-]", "_");
		configFileNameWithExtn = configFileNameWithExtn.replaceAll("[\\s]", "_");


		final boolean  IS_ONLINE = (null != SpringPropertiesUtil.getProperty("online") && 
				"false".equalsIgnoreCase(SpringPropertiesUtil.getProperty("online"))) ? false : true;
		IExporter exporterFacade = (ExporterFacade) SpringApplicationContext.getBean("exporterFacade");
		ExporterResponse exportResponse = null;
		ExporterRequest exporterRequest = new ExporterRequest();
		
		boolean occContent = this.getUserOptionBooleanInherit("withOCCContent", false);
		if(occContent){
			exporterRequest.setAssertName("SCEPP");
		}else{
			exporterRequest.setAssertName("OCA");
		}

		exporterRequest.setConfiguration(config);
		exporterRequest.setEngineSession(getEngineSession());
		exporterRequest.setExportType(ExportType.HPC_XML);
		exporterRequest.setOnline(IS_ONLINE);
		exporterRequest.setRepriceRequired(true);
		exporterRequest.setSynConfigurationRequired(true);
		exporterRequest.setUser((User)user);
		
		ClientResponse response = null;
		try {
			//exportResponse = exporterFacade.export(exporterRequest);
			exportResponse = OCAUtilities.export4SaveToLocal(exporterRequest, restricted);
			JsonObject obj = new JsonObject();
			obj.addProperty("file_content", Base64.encodeBase64String(exportResponse.getContent()));
			obj.addProperty("filename", configFileNameWithExtn);
			obj.addProperty("content_type", exporterRequest.getExportType().getExportType());
			
			byte[] pdfBinary = exportResponse.getContent();
			
			if(params.get("exportall")!=null){
				prepareExportDataMap(configFileNameWithExtn, pdfBinary);
				System.out.println("save_config_to_local : .oca download ended.."+configFileNameWithExtn+" - "+pdfBinary.length);
				return null;
			}
			
            OCAUser user = getUser();
            boolean isPartner = user.isPartnerUser();
            //CRID : 351640- Need to decouple .sdd, .xml and .oca exports from saving into Corona.
            
			/*response = OCAUtilities.uploadFileToCorona(pdfBinary, configFileNameWithExtn, isPartner);
			
			int responseCode = response.getClientResponseStatus().getStatusCode();
			if (responseCode == 200) {
				String url = response.getEntity(String.class);
				obj.addProperty("name", configFileNameWithExtn);
				obj.addProperty("url", url);
				obj.addProperty("result", "success");
				obj.addProperty("clicCheck",user.isClicCheck() && this.isDisplayClicWarning()); // US-13675 - added by anand
				
				// set URL to tool configuration
				List<String> urlList = new ArrayList<String>();
				urlList.add(url);
				statefulConfig.getDomainConfiguration().setIncludeCiFlag("Y");
				statefulConfig.getDomainConfiguration().setAttachmentURL(urlList);
			} else {
				obj.addProperty("result", "error");
				obj.addProperty("message", "Faild to connect corona attachment web service.");
			}*/
            
            return Window.actionDownload(pdfBinary, exporterRequest.getExportType().getContentType(),
            		configFileNameWithExtn, null);

		//	return Window.responseForGetServerData(obj);
		} catch (Exception e) {
			LoggerUtils.error(logger, methodName, e.getMessage());
			throw new EngineException("Export configuration error", e);
		} finally {
			if (stopWatch != null) {
				stopWatch.stop(methodName + ".incomplete");
			}
			if (response != null) {
				response.close();
			}
		}
	}
	
	//Called from MauiFramework Exception handling feature and this method need to return details on the error like UCID which are tool specific	
	public  Map<String,String> getErrorData() {
				
		StatefulAPIConfiguration config = this.statefulConfig;
		if(config != null && config.getDomainConfiguration() != null && config.getDomainConfiguration().getUcid() != null){
			 Map<String,String> errorMap = new HashMap<String,String>();
			 errorMap.put("UCID", config.getDomainConfiguration().getUcid());
			 return errorMap;
		}
		 return null;			
	}
	
	
	/**
     * Forward to load Dashboard Maintenance  page
     * @param params parameters
     * @param window current window
     * @return MauiResponse
     * @throws Exception if exception happened
     */
    public MauiResponse dashboard_MaintenancePage(Map<String, Object> params, Window window) throws Exception {  
        Log4JStopWatch watch = new Log4JStopWatch("dashboard_MaintenancePage");
        MauiAction action = window.actionLoadPage(new DashboardMaintenancePage(window, statefulConfig, params));
        LoggerUtils.debug(logger, "OCASession.import_bom: ", watch.getElapsedTime() + "ms");
        
        return new MauiResponse(action);
    }
    
	public List<Map<String, String>> getCustomerAccountList() {
		return customerAccountList;
	}

	public void setCustomerAccountList(List<Map<String, String>> customerAccountList) {
		this.customerAccountList = customerAccountList;
	}
	public void setsearchconfigset(IConfiguration config)
	{
		try{
			setToolConfigAndEngineConfig(config);
		}
		catch(Exception ex)
		{
			
		}
	}
	
	public boolean hasExtendedFeature() {
		/*SiteAttribute siteprofile=siteAttributeDAO.getSiteProfileByName(OCA_EXT_PRODUCT_FEATURE);
		return Boolean.valueOf(siteprofile.getSiteProfileValue());	
		*/
		return false;
		}
		//US 12973 MultiIcon 
		//To Enable create icon feature for users
		public boolean isCreateIconEnabled(String userRole) {
			SiteAttribute siteprofile = siteAttributeDAO.getSiteProfileByName(userRole);
			String iconEnabled = null;
			if (siteprofile != null) {
				iconEnabled = siteprofile.getSiteProfileValue();
			}
			return Boolean.valueOf(iconEnabled);	
		}
		
		/**
		 * If attribute OCA_ICON_ENABLED is not defined in DB treat it as Icon solution enabled. 
		 * To disable icon solution explicitly set attribute OCA_ICON_ENABLED to false
		 * @return
		 */
		public boolean isIconSeperationEnabled() {
			SiteAttribute siteprofile = siteAttributeDAO.getSiteProfileByName("OCA_ICON_ENABLED");
			String iconEnabled = "true";
			
			if(siteprofile != null) {
				iconEnabled = siteprofile.getSiteProfileValue();
			}
			
			return Boolean.valueOf(iconEnabled);
		}
		
		public boolean isESPSizerPunchoutEnabled() {
			SiteAttribute siteprofile = siteAttributeDAO.getSiteProfileByName("ESP_PUNCHOUT_ENABLED");
			String esppunchOutEnabled = "false";
			
			if(siteprofile != null) {
				esppunchOutEnabled = siteprofile.getSiteProfileValue();
			}
			return Boolean.valueOf(esppunchOutEnabled);
		}
		
		public boolean isIconFeaturesEnabled(String featureName) {
			SiteAttribute siteprofile = siteAttributeDAO.getSiteProfileByName(featureName);
			String iconFeature = "false";
			if(siteprofile != null) {
				iconFeature = siteprofile.getSiteProfileValue();
			}
			return Boolean.valueOf(iconFeature);
		}

		public boolean isShowExtendedFlagEnabled() {
			return isShowExtendedFlagEnabled;
		}

		public void setShowExtendedFlagEnabled(boolean isShowExtendedFlagEnabled) {
			this.isShowExtendedFlagEnabled = isShowExtendedFlagEnabled;
		}
		
		public MauiResponse log_kibana(Map<String, Object> params, Window window) throws Exception {
			JSONObject jsonObject = new JSONObject(params);
	    	jsonObject = jsonObject.getJSONObject("log");
	    	OCAUser userObj = getUser();
	    	jsonObject.put("showprice", userObj.isHidePrice());
	    	jsonObject.put("plcdate", userObj.isShowPLCDates());
	    	jsonObject.put("shipmentleadtime", userObj.isShowLeadTime());
	    	jsonObject.put("userid", userObj.getUserId());
	    	if(toolConfig != null){
	    		jsonObject.put("workgroup", toolConfig.getWorkgroupName());
	    		jsonObject.put("ucid", toolConfig.getUcid());
	    		jsonObject.put("OriginatingAsset", toolConfig.getOriginatingAsset());//oca or ngq  
	    		jsonObject.put("kbversion", toolConfig.getKbVersion());
	    		jsonObject.put("region", toolConfig.getRegion());
	    		jsonObject.put("country", toolConfig.getLeadCountryCode());
	    	}
	    	try{
    			boolean iconSolutionEnabled = isIconSeperationEnabled();
    	        
    	        if(iconSolutionEnabled && !IconUtility.isIconContainerSolution((SubConfigurationImpl)solutionSubConfig)) {
    	        	jsonObject.put("solution", "Single");
    	        } else {
    	        	jsonObject.put("solution", "Icon"); 
    	        }

    		}catch(Exception ex)
    		{
    			jsonObject.put("solution", ""); 
    		} 
	    	jsonObject.put("ipAddress", this.getHttpIP());
	    	jsonObject.put("sessionid", this.getId());
	    	jsonObject.put("instance", System.getProperty("instanceName"));
	    	
	    	jsonObject.put("OS", getUser_OS());
	    	jsonObject.put("Browser", getUser_Browser());
	    	LoggerUtils.setKibana(jsonObject);
			JsonObject respJson = new JsonObject();
			respJson.addProperty("Result", "Success");
			
	    	return Window.responseForGetServerData(respJson);
	    }
		
		private void populateBrowserInfo() {
			// TODO Auto-generated method stub
			 String user_Agent = this.getHttpHeader("User-Agent") == null ? "chrome" : this.getHttpHeader("User-Agent").toLowerCase();
			 String browser=null;
			   if (user_Agent.contains("msie"))
		        {
		            String substring=user_Agent.substring(user_Agent.indexOf("msie")).split(";")[0];
		            browser=substring.split(" ")[0].replace("msie", "ie")+"-"+substring.split(" ")[1];
		        } else if (user_Agent.contains("safari") && user_Agent.contains("version"))
		        {
		            browser=(user_Agent.substring(user_Agent.indexOf("safari")).split(" ")[0]).split("/")[0]+"-"+(user_Agent.substring(user_Agent.indexOf("version")).split(" ")[0]).split("/")[1];
		        } else if ( user_Agent.contains("opr") || user_Agent.contains("opera"))
		        {
		            if(user_Agent.contains("opera"))
		                browser=(user_Agent.substring(user_Agent.indexOf("opera")).split(" ")[0]).split("/")[0]+"-"+(user_Agent.substring(user_Agent.indexOf("version")).split(" ")[0]).split("/")[1];
		            else if(user_Agent.contains("opr"))
		                browser=((user_Agent.substring(user_Agent.indexOf("opr")).split(" ")[0]).replace("/", "-")).replace("opr", "opera");
		        } else if (user_Agent.contains("chrome"))
		        {
		            browser=(user_Agent.substring(user_Agent.indexOf("chrome")).split(" ")[0]).replace("/", "-");
		        } else if ((user_Agent.indexOf("mozilla/7.0") > -1) || (user_Agent.indexOf("netscape6") != -1)  || (user_Agent.indexOf("mozilla/4.7") != -1) || (user_Agent.indexOf("mozilla/4.78") != -1) || (user_Agent.indexOf("mozilla/4.08") != -1) || (user_Agent.indexOf("mozilla/3") != -1) )
		        {
		            //browser=(user_Agent.substring(user_Agent.indexOf("MSIE")).split(" ")[0]).replace("/", "-");
		            browser = "netscape-?";

		        } else if (user_Agent.contains("firefox"))
		        {
		            browser=(user_Agent.substring(user_Agent.indexOf("firefox")).split(" ")[0]).replace("/", "-");
		        } else if(user_Agent.contains("rv"))
		        {
		            browser="internet Explorer-" + user_Agent.substring(user_Agent.indexOf("rv") + 3, user_Agent.indexOf(")"));
		        } else
		        {
		            browser = "UnKnown, More-Info: "+user_Agent;
		        }
			   char ch=(char) ((browser.charAt(0))-32);
			   browser=ch+browser.substring(1);
			   setUser_Browser(browser);
			   return;
		}

		private void populateOSInfo() {
			// TODO Auto-generated method stub
			String user_Agent = this.getHttpHeader("User-Agent") == null ? "windows" : this.getHttpHeader("User-Agent").toLowerCase();
			String os=null;
			if (user_Agent.indexOf("windows") >= 0 )
	         {
	             os = "Windows";
	         } else if(user_Agent.indexOf("mac") >= 0)
	         {
	             os = "Mac";
	         } else if(user_Agent.indexOf("x11") >= 0)
	         {
	             os = "Unix";
	         } else if(user_Agent.indexOf("android") >= 0)
	         {
	             os = "Android";
	         } else if(user_Agent.indexOf("iphone") >= 0)
	         {
	             os = "IPhone";
	         }else{
	             os = "UnKnown, More-Info: "+user_Agent;
	         }
			setUser_OS(os);
			return;
		}

		public String getToolFolder() {
			
			if (isAvailableInConfigKb()) {
				final String kbWidgetSource = UIFramework.getFrameworkOptions().getSimpleOptionString("kbWidgetSource", null);
				if (kbWidgetSource != null) {
					return "resources/tools";
				} else {
					return ((KnowledgeBaseImpl) getTool().getFramework().getKb()).getZipExtractionBaseFolder()
								+ "/kb_widgets";
				}
			} else {
				return this.getTool().getToolFolder();
			}
		}
		
		public boolean isAvailableInConfigKb() {		
			KnowledgeBaseImpl config_kb = (KnowledgeBaseImpl) getTool().getFramework().getKb();

			return config_kb.getAgentLoader().getPluginAgentFromCache(getClass().getName()) != null;
		}
		
		public MauiResponse loadMenuAssets(Map<String, Object> params, Window window) throws Exception {
			MauiAction action = new MauiAction();
			ArrayList<String> css = new ArrayList<String>();
	        ArrayList<String> scripts = new ArrayList<String>();
	        css.add(getToolFolder() + "/oca/common/widgets/kb/menu_widget/css/menu_widget.css");
	        css.add(getToolFolder() + "/oca/common/widgets/messages/css/messages.css");
	        scripts.add(getToolFolder() + "/oca/common/widgets/kb/menu_widget/js/menu_widget.js");
	        scripts.add(getToolFolder() + "/common/widgets/choice_point/js/counter.js");
	        scripts.add(getToolFolder() + "/common/widgets/message_list/js/message_list.js");
	        scripts.add(getToolFolder() + "/oca/common/widgets/messages/js/messages.js");
	        List<String> htmls = Arrays.asList(getToolFolder() + "/oca/common/widgets/kb/menu_widget/html/menu_widget.html",
	                getToolFolder() + "/oca/common/widgets/kb/menu_widget/html/menu_widget_section.html", getToolFolder()
	                        + "/oca/common/widgets/kb/menu_widget/html/menu_widget_choice.html", getToolFolder()
	                        + "/oca/common/widgets/kb/menu_widget/html/menu_widget_item.html", getToolFolder()
	                        + "/oca/common/widgets/kb/menu_widget/html/menu_widget_item_detail.html", getToolFolder()
	                        + "/oca/common/widgets/kb/menu_widget/html/menu_widget_adhoc_section.html", getToolFolder()
	                        + "/oca/common/widgets/kb/menu_widget/html/menu_widget_adhoc_item.html", getToolFolder()
	                        + "/oca/common/widgets/kb/menu_widget/html/menu_widget_nav.html", getToolFolder()
	                        + "/common/widgets/message_list/html/message_list_table.html", getToolFolder()
	                        + "/common/widgets/message_list/html/message_list_list.html", getToolFolder()
	                        + "/common/widgets/message_list/html/message_list_ul.html", getToolFolder()
	                        + "/common/widgets/message_list/html/message_list_message.html",
	                getToolFolder() + "/oca/common/widgets/kb/menu_widget/html/counter.html");	
		   	JsonObject pageData = new JsonObject();
		   	pageData.add("css", new Gson().toJsonTree(css));
		   	pageData.add("scripts", new Gson().toJsonTree(scripts));
		   	pageData.add("htmls", new Gson().toJsonTree(htmls));
			action.setPageData(pageData);
	    	MauiResponse response = new MauiResponse();
	    	action.setCode(ActionCode.NO_ACTION);
	    	response.addAction(action);	
			return response ;
	    }
		
		public MauiResponse isConfigSupportsMultiBundle(Map<String, Object> params, Window window) throws Exception{

			JsonObject errObj = new JsonObject();
				if (!ExportDataProvider.configSupportsMultiBundle((ConfigurationImpl) statefulConfig.getEngineConfig()) && !((ConfigurationImpl) statefulConfig.getEngineConfig()).isIconSolution()) {
		 			
		 			errObj.addProperty("result", false);
		 			errObj.addProperty("message", "Multi Bundle XML export is not available when Complex configurations (ex: 3PAR, Synergy) are in the solution or Services are attached at the solution level.");
		 			return Window.responseForGetServerData(errObj);
		 		}else{
		 			errObj.addProperty("result", true);
		 		}	
		 		return Window.responseForGetServerData(errObj);
		}
		
//		public MauiResponse load_Newconfig_Assets(Map<String, Object> params, Window window) throws Exception {
//			MauiAction action = new MauiAction();
//			
////			List<String> css = Arrays.asList(getToolFolder() + "/oca/create_confign-ci-all-min.css");
////			
////			List<String> scripts = Arrays.asList(getToolFolder() + "/oca/create_config-ci-all-min.js");
//
//	        List<String> htmls = Arrays.asList(getToolFolder() + "/oca/pages/new_config_page/html/new_config_page.html",
//	        		getToolFolder() + "/oca/common/widgets/configuration_delegation/html/eo_tabs.html");	
//		   	JsonObject pageData = new JsonObject();
//		   	pageData.add("css", new Gson().toJsonTree(css));
//		   	pageData.add("scripts", new Gson().toJsonTree(scripts));
//		   	pageData.add("htmls", new Gson().toJsonTree(htmls));
//			action.setPageData(pageData);
//	    	MauiResponse response = new MauiResponse();
//	    	action.setCode(ActionCode.NO_ACTION);
//	    	response.addAction(action);	
//			return response ;
//	    }		
		 
		private Map<String,OpenConfigurationResponse> cacheOpenConfiguration = new ConcurrentHashMap<String,OpenConfigurationResponse>(); 
		
		
		public void cache_ucid() {
			asyncUpdateConfigurationsCache updateConfigCache = new asyncUpdateConfigurationsCache(this);
			updateConfigCache.start();
		 }
		
		public void loadConfigCache(Map<String, Object> params) throws EngineException {
	        try {	        	
	            OpenConfigurationResponse resp = getOpenResponseStatusByUcid(params);
	            if (resp != null && resp.getStatus() == ResponseStatus.SUCCESS && cacheOpenConfiguration != null) {
	            	
	                cacheOpenConfiguration.put((String) params.get("search_ucid"), resp);
	            }
	        } catch (Exception e) {
	        	e.printStackTrace();
	        }
	    }
		
		 //Currently NOT being used, Don't use it
		 @Deprecated
		 public Map<String, Object> loadConfigfromCache(Map<String, Object> params,Configuration domainConfig,IConfiguration engineObj ) throws EngineException {
	        String methodName = "OCASession.loadConfig: ";
	        String xml = "";
	        Map<String, Object> result = new HashMap<String, Object>();
	        boolean isSuccess = true;
	        String msg = "";
	        try {
                currentBuildingConfig = domainConfig;
                xml = UtilityConfigMethods.decompressString(domainConfig.getConfigEngineClob());
                if (xml.indexOf("<?xml") > 0) {
                	xml = xml.substring(xml.indexOf("<"),
                			xml.indexOf("<?xml"));
				} else {
				}
                clearEngineConfigurations();
                OCANewWorkgroup workGroup = ocaWorkgroupManager.getWorkgroup(domainConfig.getWorkgroupId());
                if(workGroup != null) {
                	String refernceAccountId = workGroup.getRefPartnerId();
                	OCAUtilities.setPartnerBrandedServiceEligibility((OCAUser) getUser(), refernceAccountId, (KnowledgeBaseImpl)getUIFramework().getKb());
                }
                IConfiguration engineConfig = engineObj;
                IPreferences preference = engineConfig.getPreferences();
                String isBTO = preference.getPreference(Preferences.BTO);
                params.put("isBTO", isBTO);
                if (engineConfig != null) {
                   engineConfig.getPreferences().setPreference(Preferences.CUSTOMER_ID, domainConfig.getGlobalDuns());
                    if(domainConfig.getGlobalDuns() != null)
                    {
                    engineConfig.getPreferences().setPreference(Preferences.SHOW_EXTENDED_PRODUCT, ((Boolean)customerAccountManager.isShowExtended(domainConfig.getGlobalDuns().toString())).toString());
                    engineConfig.getPreferences().setPreference(Preferences.CUSTOMER_OFFERINGS, (customerAccountManager.getProductFilterByCustomerId(domainConfig.getGlobalDuns())));
                    }
                    else if(isShowExtendedFlagEnabled && domainConfig.getGlobalDuns() == null)
                    {
                    	 engineConfig.getPreferences().setPreference(Preferences.SHOW_EXTENDED_PRODUCT, "false");
                    }
                    else
                    {
                    	engineConfig.getPreferences().setPreference(Preferences.SHOW_EXTENDED_PRODUCT, "true");
                    }
                    String currCd = domainConfig.getConfigurationPreference().getPriceDescriptor().getCurrencyCode();
                    if (StringUtils.isNullOrEmpty(currCd)) {
                        PriceDescriptor upd = getUser().getPriceDescriptorPref();
                        PriceDescriptor cpd = domainConfig.getConfigurationPreference().getPriceDescriptor();
                        cpd.setCurrencyCode(upd.getCurrencyCode());
                        cpd.setPriceGeo(upd.getPriceGeo());
                        cpd.setPriceGeoName(upd.getPriceGeoName());
                        cpd.setPriceDescriptorDisplayText(upd.getPriceDescriptorDisplayText());
                        cpd.setPriceListType(upd.getPriceListType());
                        currCd = cpd.getCurrencyCode();
                    }

                    domainConfig.getConfigurationPreference().getPriceDescriptor().setCurrency(getCurrency(currCd));
                    resetConfiguration(engineConfig, domainConfig, getUser());
                    checkP24CS(engineConfig);
                }

	           
	        } catch (Exception e) {
	        	e.printStackTrace();
	            isSuccess = false;
	            msg = getText("os.error");
	            LoggerUtils.error(logger, methodName, e.getMessage());
	        }
	        if (isSuccess) {
	            List<ConfigItem> items = UtilityConfigMethods.getSavedLineItemView(xml, solutionSubConfig, false).getConfigItems();
	            this.setSavedSolutionConfigItems(items);
	        }

	        result.put("isSuccess", isSuccess);
	        result.put("msg", msg);
	        return result;
		 }
		 
	public void updateConfigCache() {
		final Map<String, Object> parameters = new HashMap<String, Object>();
		if (this.toolConfig != null && this.toolConfig.getUcid() != null) {
			parameters.put("search_ucid", this.toolConfig.getUcid());
			new Thread(new Runnable() {
				public void run() {
					try {
						loadConfigCache(parameters);
						//System.out.println("Done Caching");
					} catch (EngineException e) {
						e.printStackTrace();
					}
				}
			}).start();
		} else {
			return;
		}
	}
	public void updateConfigCache(String ucid) {
		final Map<String, Object> parameters = new HashMap<String, Object>();
		if (ucid != null) {
			parameters.put("search_ucid", ucid);
			new Thread(new Runnable() {
				public void run() {
					try {
						loadConfigCache(parameters);
						//System.out.println("Done Caching");
					} catch (EngineException e) {
						e.printStackTrace();
					}
				}
			}).start();
		} else {
			return;
		}
	}
		 
		 /**
	     * POC for Hibris API Product hierarchy invocation.
	     * @param params parameters
	     * @param window current window
	     * @return MauiResponse
	     * @throws Exception if exception happened
	     */
	    public MauiResponse fetch_product_hirerchy(Map<String, Object> params, Window window) throws Exception {
	    	NewConfigPage newconfig = new NewConfigPage(window, statefulConfig, params);
	    	MauiResponse data = newconfig.add_model_to_config(params);
	        return data;
	    };
	    
	    //US13742- ExportAll starts here
	    public MauiResponse export_c2b_check(Map<String, Object> params, Window window) throws EngineException, UnsupportedEncodingException{
	    	JsonObject obj = new JsonObject();
	    	String state = (String)params.get("state");
	    	boolean undirtyFlag = (Boolean)params.get("undirtyFlag");
	    	boolean isC2BXmlflag = (Boolean)params.get("isC2BXmlflag");
	    	
	    	if(state.equals("WorkInProgress") && undirtyFlag && isC2BXmlflag ||
	    			state.equals("WorkInProgress") && !undirtyFlag && isC2BXmlflag){
	    		
	    		if(state.equals("WorkInProgress") && isC2BXmlflag){
		    		obj.addProperty("moveToComplete", true);
		    		obj.addProperty("message", (String)params.get("saveAsCIorCPmessage"));
		    		
		    	}else{
		    		obj.addProperty("moveToComplete", true);
		    		obj.addProperty("message", (String)params.get("saveMessage"));
		    	}
	    		obj.addProperty("result", "error");
	    		return Window.responseForGetServerData(obj);
	    		
	    	}else if ((state.equals("Complete") || state.equals("CIInProgress")) && undirtyFlag || undirtyFlag) {
	    		obj.addProperty("result", "error");
	    		obj.addProperty("message", (String)params.get("unsavedMessage"));
	    		return Window.responseForGetServerData(obj);
	    	}else{
	    		obj.addProperty("result", "success");
	    	}
	    	
	    	return Window.responseForGetServerData(obj);
	    }
	    
	    public MauiResponse exportAllservice(Map<String, Object> params, Window window) throws EngineException, UnsupportedEncodingException, ExecutionException {
	    	
	    	clearExportDataMap();
	    	
	    	JsonObject obj = new JsonObject();
	    	
        	String exports = (String)params.get("validExports");
        	SubConfigurationImpl solutionSubConfig = ((ConfigurationImpl) statefulConfig.getEngineConfig()).getSolutionSubconfiguration();
        	boolean isIcon = IconUtility.isIconContainerSolution(solutionSubConfig);
        	if(exports.contains("generate_ExportToSpecialPricingSingle_document")){
        			 final Map<String, Object> params1=new HashMap<String, Object>();
        			 params1.put("exportType", "ECLIPSE_XML");
        			 params1.put("exportall", true);
        			 export_configuration(params1, window);
			  }
			 if(exports.contains("generate_ExportToSpecialPricingDouble_document")){
				 if(isIcon || ExportDataProvider.configSupportsMultiBundle((ConfigurationImpl) statefulConfig.getEngineConfig()))
				 {			
					 final Map<String, Object> params1=new HashMap<String, Object>();
				     params1.put("exportType", "SMART_QUOTE_XML");
				     params1.put("exportall", true);
				     export_configuration(params1, window);
				 }	
	    	  }
        	
        	if(exports.contains("generate_sbwOrWaston_document")){
        		
        		    final Map<String, Object> params1=new HashMap<String, Object>();
				    params1.put("exportType", "WQSDD");
				    params1.put("exportall", true);
				    export_to_SBWorWastonConfiguration(params1, window);
						    	
			  }
			  
			 if(exports.contains("generate_sbwOrWastonSindleBundle_document")){
			
				 	final Map<String, Object> params1=new HashMap<String, Object>();
					params1.put("exportType", "WQSDD_SINGLE_BUNDLE");
					params1.put("exportall", true);
					export_to_SBWorWastonConfiguration(params1, window);
					    
	    	  }
			 
		//	 if(exports.contains("generate_current_bom_xml")){
			                boolean isBomShowGLSCcolumns= (boolean)params.get("isBomShowGLSCcolumns");
					    	Type type = new TypeToken<Map<String, Object>>(){}.getType();
				        	String userPref = this.getUser().getUserPrefs();
				        	String numPref = this.getUser().getPaNumberPref();
				        	Gson gson = new Gson();
				        	Map<String, Object> userPrefs= gson.fromJson(userPref, type);
				        	Map<String, Object> params1=new HashMap<String, Object>();
							 	 params1.put("exportall", true);
								 params1.put("exportType", "OCA_BOM_EXCEL");
								 params1.put("widget_id", "toolbar");
								 params1.put("newId", "current");
								 params1.put("showprice", Boolean.parseBoolean(numPref));
								 params1.put("showLead", userPrefs.get("showLeadTime"));
								 params1.put("showNumericSLT", userPrefs.get("showNumericSLT"));
								 params1.put("productType", userPrefs.get("productType"));
								 params1.put("productLine", userPrefs.get("productLine"));
								 params1.put("configName", userPrefs.get("configName"));
								 params1.put("solutionID", userPrefs.get("solutionId"));
								 params1.put("supportFor", userPrefs.get("supportFor"));
								 params1.put("showPLCdate", userPrefs.get("showPLCDates"));
								 params1.put("showObsoletedate", userPrefs.get("showObsoleteDate")); //US-13743
								 params1.put("showLineId", userPrefs.get("showLineId"));
								 params1.put("instanceName", userPrefs.get("instance_name"));
								 params1.put("parentNodeName", userPrefs.get("parentNodeName"));
								 params1.put("configName", userPrefs.get("configName"));
								 params1.put("attributeName", userPrefs.get("attribute"));
								 params1.put("iconId",isIcon);
								 params1.put("iconName",isIcon);
								 params1.put("supportBy",userPrefs.get("supportBy"));
								 params1.put("installedBy",userPrefs.get("installedBy"));
								 params1.put("hpePreferred",userPrefs.get("HPEPreferred"));
								 params1.put("bestAvailability",userPrefs.get("bestAvailability"));
								 params1.put("isBomShowGLSCcolumns", isBomShowGLSCcolumns);
								
					    		oca_export_bom(params1);
			// 				}	
		    	
		    	params.put("config_name", this.getStatefulAPIConfiguration().getDomainConfiguration().getConfigName());
		    	
		    	save_config_to_local(params, window);
					
	    	obj.addProperty("result", "success");
	    	
	    	return Window.responseForGetServerData(obj);
	    	
	    }
	    
		public MauiResponse oca_export_bom(Map<String, Object> params) throws EngineException {
	    	return oca_export_bom(params, statefulConfig);
	    }
		
        public MauiResponse unformattedExcelExport(Map<String, Object> params, Window window) throws EngineException{
	    	
	    	System.out.println("unformattedExcelExport : started "+(String) params.get("exportType"));
	    	SubConfigurationImpl subConfig;
			subConfig = ((ConfigurationImpl) statefulConfig.getEngineConfig()).getSolutionSubconfiguration();
			final boolean isOnline = (null == SpringPropertiesUtil.getProperty("online")
					|| SpringPropertiesUtil.getProperty("online").equalsIgnoreCase("true"));
			boolean showCost = params.get("showCost")!= null ? (Boolean) params.get("showCost") : false;
			boolean isBomShowGLSCcolumns = params.get("isBomShowGLSCcolumns")!= null ? (Boolean) params.get("isBomShowGLSCcolumns") : false;
            boolean isBomShowNumericSLT = params.get("isBomShowNumericSLT") != null ? (Boolean) params.get("isBomShowNumericSLT") : false;
			Map<String, Object> totalLead = new HashMap<String, Object>();
			
			try {
				ExporterRequest exporterRequest = new ExporterRequest();
				ExportType exportType = (ExportType) Enum.valueOf(ExportType.class, (String) params.get("exportType"));
				
				ConfigurationPreference configurationPreference = null;
				JsonObject totalLeadTimeObj = new JsonObject();
				if (statefulConfig.getEngineConfig() != null && statefulConfig.getDomainConfiguration() != null) {
					configurationPreference = statefulConfig.getDomainConfiguration().getConfigurationPreference();

					Map<String,List<String>> bomMaterialMap = new HashMap<String, List<String>>();
					OCALeadTimeHelper.addKBBOMMaterials(subConfig,bomMaterialMap,configurationPreference,true);
					DataServices dataServices = this.getTool().getToolSpringApplicationContext().getBean("dataServices", DataServices.class);
					totalLeadTimeObj = (JsonObject)dataServices.getLeadTimeColorCodes(bomMaterialMap,configurationPreference, getUser().getType().toString());
					
					if(showCost && OCAUtilities.isShowCostEnabled() && OCAUtilities.isExportCostToExcelEnabled()){						
							Map<String, BigDecimal> costForMaterialsKBBOM = dataServices.getCost(OCAUtilities.getLineItemProductsFromBOM(subConfig, null, configurationPreference,
									false), configurationPreference, 
									this.getUser());
							exporterRequest.setCostForKBBOM(costForMaterialsKBBOM);								
					}
				}
				
				//Add for Show Lead Time
				Gson gson = new Gson();
				String result = gson.toJson(totalLeadTimeObj);
				if(result != null){
					totalLead = gson.fromJson(result, PARAMETER_TYPE);
				}
				exporterRequest.setUser(this.getUser());
				exporterRequest.setConfiguration(statefulConfig);
				exporterRequest.setAssertName("OCA");
				exporterRequest.setEngineSession(this.getEngineSession());
				exporterRequest.setSynConfigurationRequired(true);
				exporterRequest.setOnline(isOnline);
				exporterRequest.setExportType(exportType);
				exporterRequest.setLeadTimeValuesKBBOM(totalLead);
				exporterRequest.setShowCost(showCost && OCAUtilities.isShowCostEnabled() && OCAUtilities.isExportCostToExcelEnabled());
				exporterRequest.setShowbomGLSCcolumns(isBomShowGLSCcolumns && (subConfig.getConfiguration()).isGreenLakeSimpleCustom() && OCAUtilities.isValidRoleToShowGLSCcolumns(getUser().getOcaUserRole().name()));
                exporterRequest.setShowNumericLeadTime(isBomShowNumericSLT && OCAUtilities.isValidRoleForNumericSLT(getUser().getOcaUserRole(), subConfig.getKb()));
				
				/**
				 * Here oca won't renew the price from ezprs.
				 * true: the price will renew from ezprs.
				 * false: the price get from corona.
				 * Chunk ~~
				 */
				exporterRequest.setRepriceRequired(false);
				

				IExporter exporterFacade = (ExporterFacade) SpringApplicationContext.getBean("exporterFacade");
				ExporterResponse exporterResponse = exporterFacade.export(exporterRequest);
				String  ucid = statefulConfig.getUcid();
				String finalfileName = subConfig.getName();
				if(statefulConfig != null && statefulConfig.getDomainConfiguration()!= null &&
						statefulConfig.getDomainConfiguration().getConfigName() != null){
					finalfileName = statefulConfig.getDomainConfiguration().getConfigName();
				}
		
				finalfileName = finalfileName+"_"+ucid+"_unformatted";
				String newfileName = finalfileName.replaceAll("[\\s]", "_");
				
				return Window.actionDownload(exporterResponse.getContent(), exportType.getContentType(), newfileName
							+ exportType.getExtension(), null);
				
			} catch (Exception e) {
				LoggerUtils.error(logger, "OCASession.unformattedExcelExport: ", e.getMessage());
				throw new EngineException("Export configuration error", e);
			}
        }
	    
	    public MauiResponse generateZip(Map<String, Object> params, Window window) throws EngineException{
	    	
	    	String fileName ="";
	    	if(null== statefulConfig.getDomainConfiguration() || statefulConfig.getDomainConfiguration().getSubConfigurations().size() == 0) {
				fileName= "Untitled";
			} else {
				fileName = this.getStatefulAPIConfiguration().getDomainConfiguration().getConfigName() + "_" + this.getStatefulAPIConfiguration().getDomainConfiguration().getUcid();
			}
	    	
	    	fileName = fileName.replaceAll("[\\s]", "_");
	    	
	    	String newFileName = OCAStringUtilities.encodeUploadFileName(fileName+".zip");
	    	
	    	byte[] bytes = null;
			try {
				
				bytes = listBytesToZip(exportDataMap);
				
			} catch (IOException e) {
				
				throw new EngineException("Export configuration error", e);
				
			}finally{
				clearExportDataMap();
			}
			return Window.actionDownload(bytes, "application/zip", newFileName, null);
	    }
	    
	    private void clearExportDataMap() {
	    	if(exportDataMap!=null && !exportDataMap.isEmpty()){
				exportDataMap.clear();
			}
		}

		//US13742- ExportAll ends here
	    
	    public MauiResponse config_workgroup_migration(Map<String, Object> params, Window window) throws Exception {
	        Log4JStopWatch watch = new Log4JStopWatch("config_workgroup_migration");
	        MauiAction action = window.actionLoadPage(new ConfigWorkgroupMigration(window, statefulConfig, params));
	        LoggerUtils.debug(logger, "OCASession.config_workgroup_migration: ", watch.getElapsedTime() + "ms");
	        return new MauiResponse(action);
	    }
	    
	    
	    public MauiResponse oca_export_bom(Map<String, Object> params,StatefulAPIConfiguration statefulConfig) throws EngineException{
	    	
	    	System.out.println("oca_export_bom : started "+(String) params.get("exportType"));
			
	    	SubConfigurationImpl subConfig;
	    	
			subConfig = ((ConfigurationImpl) statefulConfig.getEngineConfig()).getSolutionSubconfiguration();
			boolean isNimbleUpgrade = false;
	        ConfigurationImpl configuration = subConfig.getConfiguration();
			String isNimbleUpgradeConfig = configuration.getPreferences().getPreference(Preferences.IS_NIMBLE_UPGRADE_CONFIG);
			if(org.apache.commons.lang.StringUtils.isNotBlank(isNimbleUpgradeConfig) && org.apache.commons.lang.StringUtils.equals("true", isNimbleUpgradeConfig)){
				isNimbleUpgrade = true;
			}
			final boolean isOnline = (null == SpringPropertiesUtil.getProperty("online")
					|| SpringPropertiesUtil.getProperty("online").equalsIgnoreCase("true"));
			//Map<String, Object> totalLead = new HashMap<String, Object>();
			Connection con = null;
			Map<String, Object> totalLeadExpertBOM = new HashMap<String, Object>();//phani
	        Map<String, Object> totalLeadKBBOM = new HashMap<String, Object>();
			try {
				ExporterRequest exporterRequest = new ExporterRequest();
				String newId = (String)params.get("newId");
				ExportType exportType = (ExportType) Enum.valueOf(ExportType.class, (String) params.get("exportType"));
				boolean showprice = params.get("showprice")!= null ? (Boolean) params.get("showprice") : false;
				boolean showCost = params.get("showCost")!= null ? (Boolean) params.get("showCost") : false;
				
				DataSource datasource = (DataSource) this.getTool().getToolSpringApplicationContext().getBean("corona");
				JdbcTemplate jdbctemplate = new JdbcTemplate(datasource);
				con = jdbctemplate.getDataSource().getConnection();
				
				ConfigDao configDao = new ConfigDaoImpl();
				if(params.get("configId") != null){
					String configId = (String) params.get("configId");
					ConfigVO configVO = configDao.readConfig(con, configId , "OCA", "HPE");
					exporterRequest.setConfigVo(configVO);
				}
				
				// Add for CR280635
				boolean productType = params.get("productType")!= null ? (Boolean) params.get("productType") : false;
				boolean productLine = params.get("productLine")!= null ? (Boolean) params.get("productLine") : false;
				boolean configName = params.get("configName")!= null ? (Boolean) params.get("configName") : false;
				boolean instanceName = params.get("instanceName")!= null ? (Boolean) params.get("instanceName") : false;
				boolean solutionID = params.get("solutionID") != null ? (Boolean) params.get("solutionID") : false;
				boolean showLead = params.get("showLead") != null ? (Boolean) params.get("showLead") : false;//manish
				boolean showNumericSLT = params.get("showNumericSLT") != null ? (Boolean) params.get("showNumericSLT") : false;
				boolean supportFor = params.get("supportFor")!= null ? (Boolean) params.get("supportFor") : false;
				boolean supportBy = params.get("supportBy")!= null ? (Boolean) params.get("supportBy") : false;
				boolean installedBy = params.get("installedBy")!= null ? (Boolean) params.get("installedBy") : false;
				boolean showPLCDate = params.get("showPLCdate")!= null ? (Boolean) params.get("showPLCdate") : false;
				boolean showObsoleteDate = params.get("showObsoletedate")!= null ? (Boolean) params.get("showObsoletedate") : false;//US-13743
				boolean parentNodeName = params.get("parentNodeName")!= null ? (Boolean) params.get("parentNodeName") : false;
				boolean attributeName = params.get("attributeName")!= null ? (Boolean) params.get("attributeName") : false;
				// US 12973 MultiIcon
	        	boolean iconId=params.get("iconId")!= null ? (Boolean) params.get("iconId") : false;
	        	boolean iconName=params.get("iconName")!= null ? (Boolean) params.get("iconName") : false;
	        	// US 12973 MultiIcon ends
				// end changes for CR280635
	        	
	        	boolean clicStatusFlag=params.get("clicStatusFlag")!= null ? (Boolean) params.get("clicStatusFlag") : false;
	        	if(!clicStatusFlag){
	        		clicStatusFlag=getUser().isBomClicStatus();
	        	}
	        	boolean bestAvailability = params.get("bestAvailability")!= null ? (Boolean) params.get("bestAvailability") : false;
	            boolean hpePreferred = params.get("hpePreferred")!= null ? (Boolean) params.get("hpePreferred") : false;
	            
				//Add for IM24353101
				boolean showLineId = params.get("showLineId")!= null ? (Boolean) params.get("showLineId"):false;
				//end of IM24353101
				boolean exportAll = params.get("exportall")!= null ? (Boolean) params.get("exportall"):false;
				boolean exportExpertBom = subConfig.getConfiguration().isExpertBomEnabled() && "ExpertBOM".equals(subConfig.getConfiguration().getActiveBomDownStream());
				ConfigurationPreference configurationPreference = null;
				//JsonObject totalLeadTimeObj = new JsonObject();
				JsonObject totalLeadTimeObjExpertBOM = new JsonObject();//phani
				JsonObject totalLeadTimeObjKBBOM = new JsonObject();
				if (statefulConfig.getEngineConfig() != null && statefulConfig.getDomainConfiguration() != null) {
					configurationPreference = statefulConfig.getDomainConfiguration().getConfigurationPreference();

					//Map<String,List<String>> bomMaterialMap = new HashMap<String, List<String>>();
					//OCALeadTimeHelper.addKBBOMMaterials(subConfig,bomMaterialMap,configurationPreference,true);
					Map<String,List<String>> expertBomMaterialMap = new HashMap<String, List<String>>();
					Map<String,List<String>> kbBomMaterialMap = new HashMap<String, List<String>>();
					DataServices dataServices = this.getTool().getToolSpringApplicationContext().getBean("dataServices", DataServices.class);
					//totalLeadTimeObj = (JsonObject)dataServices.getLeadTimeColorCodes(bomMaterialMap,configurationPreference, getUser().getType().toString());
				
					if(exportExpertBom) {
						
						OCAExpertBOMUtility.addExpertBOMMaterials(((ConfigurationImpl)statefulConfig.getEngineConfig()).getExpertBomRootNode(), 
								expertBomMaterialMap,
								this.statefulConfig.getDomainConfiguration().getConfigurationPreference(),
								true);
						totalLeadTimeObjExpertBOM = (JsonObject)dataServices.getLeadTimeColorCodes(expertBomMaterialMap,configurationPreference, getUser().getType().toString());
						
						OCALeadTimeHelper.addKBBOMMaterials(subConfig,
								kbBomMaterialMap,
								configurationPreference,
								true);
						totalLeadTimeObjKBBOM = (JsonObject)dataServices.getLeadTimeColorCodes(kbBomMaterialMap,configurationPreference, getUser().getType().toString());
						//Add for Show Lead Time
						Gson gsonExpertBOM = new Gson();
						Gson gsonKBBOM = new Gson();
						String resultExpertBOM = gsonExpertBOM.toJson(totalLeadTimeObjExpertBOM);
						String resultKBBOM = gsonKBBOM.toJson(totalLeadTimeObjKBBOM);
						if(resultExpertBOM != null){
							totalLeadExpertBOM = gsonExpertBOM.fromJson(resultExpertBOM, PARAMETER_TYPE);
						}
						if(resultKBBOM != null){
							totalLeadKBBOM = gsonKBBOM.fromJson(resultKBBOM, PARAMETER_TYPE);
						}
						exporterRequest.setLeadTimeValuesExpertBOM(totalLeadExpertBOM);
						exporterRequest.setLeadTimeValuesKBBOM(totalLeadKBBOM);
						KnowledgeBaseImpl kb = (KnowledgeBaseImpl) subConfig.getKnowledgeBase();
						ILineItemConfigurationCreator creator = (ILineItemConfigurationCreator) kb.getAgentLoader().instantiateNgcPluginClass(
						        "com.hp.ngc.plugins.agents.importer.LineItemConfigurationCreatorDev");
						List<CombinedItem> combinedItemList = OCAExpertBOMUtility.getCombinedBomDiffItems(subConfig, creator);
						exporterRequest.setCombinedItemList(combinedItemList);
					
					}else{
						OCALeadTimeHelper.addKBBOMMaterials(subConfig,
								kbBomMaterialMap,
								configurationPreference,
								true);
						totalLeadTimeObjKBBOM = (JsonObject)dataServices.getLeadTimeColorCodes(kbBomMaterialMap,configurationPreference, getUser().getType().toString());
						//Add for Show Lead Time
						Gson gsonKBBOM = new Gson();
						String resultKBBOM = gsonKBBOM.toJson(totalLeadTimeObjKBBOM);
						if(resultKBBOM != null){
							totalLeadKBBOM = gsonKBBOM.fromJson(resultKBBOM, PARAMETER_TYPE);
						}
						exporterRequest.setLeadTimeValuesKBBOM(totalLeadKBBOM);
					
					}
					
					if(showCost && OCAUtilities.isShowCostEnabled()){
						if(exportExpertBom){
						final Map<String, BigDecimal> costForMaterialsExpertBOM = dataServices.getCost(OCAUtilities.getLineItemProductsFromBOM(subConfig, ((ConfigurationImpl)statefulConfig.getEngineConfig()).getExpertBomRootNode(), 
								configurationPreference, exportExpertBom), configurationPreference, 
								this.getUser());
						exporterRequest.setCostForExpertBOM(costForMaterialsExpertBOM);
						// KB BOM For Cost
						Map<String, BigDecimal> costForMaterialsKBBOM = dataServices.getCost(OCAUtilities.getLineItemProductsFromBOM(subConfig, null, configurationPreference,
								exportExpertBom), configurationPreference, 
								this.getUser());
						exporterRequest.setCostForKBBOM(costForMaterialsKBBOM);
						}else{
							Map<String, BigDecimal> costForMaterialsKBBOM = dataServices.getCost(OCAUtilities.getLineItemProductsFromBOM(subConfig, null, configurationPreference,
									exportExpertBom), configurationPreference, 
									this.getUser());
							exporterRequest.setCostForKBBOM(costForMaterialsKBBOM);
						}					
					}
				}
				
//				//Add for Show Lead Time
//				Gson gson = new Gson();
//				String result = gson.toJson(totalLeadTimeObj);
//				if(result != null){
//					totalLead = gson.fromJson(result, PARAMETER_TYPE);
//				}
				boolean isBomShowGLSCcolumns= params.get("isBomShowGLSCcolumns")!= null ? (Boolean) params.get("isBomShowGLSCcolumns") : false;
				exporterRequest.setShowbomGLSCcolumns(isBomShowGLSCcolumns && (subConfig.getConfiguration()).isGreenLakeSimpleCustom() && OCAUtilities.isValidRoleToShowGLSCcolumns(getUser().getOcaUserRole().name()));
				exporterRequest.setExportAll(exportAll);
				exporterRequest.setUser(this.getUser());
				exporterRequest.setConfiguration(statefulConfig);
				exporterRequest.setAssertName("OCA");
				exporterRequest.setEngineSession(this.getEngineSession());
				exporterRequest.setSynConfigurationRequired(true);
				exporterRequest.setOnline(isOnline);
				exporterRequest.setExportType(exportType);
				exporterRequest.setShowLineId(showLineId);
				//exporterRequest.setLeadTimeValuesKBBOM(totalLead);
				exporterRequest.setParentNodeName(parentNodeName);
				exporterRequest.setattribute(attributeName);
				exporterRequest.setIconID(iconId);
				exporterRequest.setIconName(iconName);
				exporterRequest.setShowCost(showCost && OCAUtilities.isShowCostEnabled());
				if(newId != null) {
					exporterRequest.setExportBom(newId);
				}
				if(newId != null && newId.equalsIgnoreCase("save"))
				{
					
					exporterRequest.setExportSavedBom(this.getSavedSolutionConfigItems());
				}
					
				/**
				 * Here oca won't renew the price from ezprs.
				 * true: the price will renew from ezprs.
				 * false: the price get from corona.
				 * Chunk ~~
				 */
				exporterRequest.setRepriceRequired(false);
				exporterRequest.setShowPrice(showprice);
				exporterRequest.setClicStatusFlag(clicStatusFlag);
				exporterRequest.setClicCheckData(getClicCheckData());

				// Add for CR280635
				exporterRequest.setProductType(productType);
				exporterRequest.setProductLine(productLine);
				exporterRequest.setConfigName(configName);
				exporterRequest.setInstanceName(instanceName);
				exporterRequest.setSolutionID(solutionID);
				exporterRequest.setShowLeadTime(showLead);
				boolean isBomShowNumericSLT = params.get("isBomShowNumericSLT") != null ? (Boolean) params.get("isBomShowNumericSLT") : false;
                exporterRequest.setShowNumericLeadTime(OCAUtilities.isValidRoleForNumericSLT(getUser().getOcaUserRole(), subConfig.getKb()) && (showNumericSLT || isBomShowNumericSLT));
				exporterRequest.setSupportFor(supportFor);
				exporterRequest.setSupportBy(supportBy);
				exporterRequest.setInstalledBy(installedBy);
				exporterRequest.setShowPLCDate(showPLCDate);
				exporterRequest.setShowObsoleteDate(showObsoleteDate); //US-13743				
				exporterRequest.setBestAvailability(bestAvailability);
	            exporterRequest.setHpePreferred(hpePreferred);
	            exporterRequest.setNimbleUpgradeConfig(isNimbleUpgrade);
				 if(exportExpertBom) {
		            	exporterRequest.setExportExpertBom(true);
		            	ConfigurationImpl configImpl = subConfig.getConfiguration();
		            	ConfigurationPreference cp = statefulConfig.getDomainConfiguration().getConfigurationPreference();
		            	SubConfigRootItem rootItem = OCAExpertBOMUtility.convertExpoertBomToSubConfigRootItem(configImpl.getExpertBomRootNode(), configImpl.getSolutionSubconfiguration(),null, OCAUtilities.getClicDataPerUCID(session));
		            	DataServices dataSerices = (DataServices)SpringApplicationContext.getBean("dataServices");
						dataSerices.getPriceForBom(rootItem, cp, false, false);
						exporterRequest.setExpertBomRootItem(rootItem);
		            }
				 if(getUser().isAdminOrSupport()) {
					 exporterRequest.setShowComplexityLevelName(true);
				 }else {
					 exporterRequest.setShowComplexityLevelName(false);
				 }
				// end changes for CR280635

				IExporter exporterFacade = (ExporterFacade) SpringApplicationContext.getBean("exporterFacade");
				ShareState shareState = statefulConfig.getDomainConfiguration().getShareState();
				ExporterResponse exporterResponse = exporterFacade.export(exporterRequest);
				String  ucid = statefulConfig.getUcid();
				String fileName = subConfig.getName();
				//Added to change the filename as per business request
				String finalfileName = subConfig.getName();
				if(statefulConfig != null && statefulConfig.getDomainConfiguration()!= null &&
						statefulConfig.getDomainConfiguration().getConfigName() != null){
					finalfileName = statefulConfig.getDomainConfiguration().getConfigName();
				}
				if(newId != null && newId.equalsIgnoreCase("save"))
				{
					finalfileName = finalfileName+"_"+ucid+"_Saved_BOM";
				}
				else {
					finalfileName = finalfileName+"_"+ucid;
				}
				//String newfileName = finalfileName.replaceAll("[^a-zA-Z0-9.-]", "_");
				String newfileName = finalfileName.replaceAll("[\\s]", "_");
				
				if(params.get("exportall")!=null){
					prepareExportDataMap(newfileName+exportType.getExtension(),exporterResponse.getContent());
					System.out.println("oca_export_bom ended :"+newfileName+" - "+exporterResponse.getContent().length);
					return null;
				}else{
					return Window.actionDownload(exporterResponse.getContent(), exportType.getContentType(), newfileName
							+ exportType.getExtension(), null);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
				throw new EngineException("Export configuration error", e);
			}
			finally
			{
				try{
					if(con != null)
					{
						con.close();
					}
				}
				catch(Exception ex)
				{
					
				}
			}

		
	    }
	    
	    
	    private void prepareExportDataMap(String fileName, byte[] fileContent) {
	    	exportDataMap.put(fileName, fileContent);
		}

		
	    //US13742- ExportAll ends here
	    //US13742- ExportAll starts here
	    private byte[] listBytesToZip(Map<String, byte[]> mapReporte) throws IOException {
		    ByteArrayOutputStream baos = new ByteArrayOutputStream();
		    ZipOutputStream zos = new ZipOutputStream(baos);
		    for (Entry<String, byte[]> reporte : mapReporte.entrySet()) {
		        ZipEntry entry = new ZipEntry(reporte.getKey());
		        entry.setSize(reporte.getValue().length);
		        zos.putNextEntry(entry);
		        
		        System.out.println("entry : "+reporte.getKey()+" reporte :"+reporte.getValue().length);
		        
		        zos.write(reporte.getValue());
		    }
		    zos.closeEntry();
		    zos.close();
		    return baos.toByteArray();
		}
	    
	    public boolean isClicCheckDone() {
			return clicCheckDone;
		}

		public void setClicCheckDone(boolean clicCheckDone) {
			this.clicCheckDone = clicCheckDone;
		}

		public String getClickStatus() {
			return clickStatus;
		}

		public void setClickStatus(String clickStatus) {
			this.clickStatus = clickStatus;
		}

		public Date getClickRunDate() {
			return clickRunDate;
		}

		public void setClickRunDate(Date clickRunDate) {
			this.clickRunDate = clickRunDate;
		}

		public boolean isDisplayClicWarning() {
			return displayClicWarning;
		}

		public void setDisplayClicWarning(boolean displayClicWarning) {
			this.displayClicWarning = displayClicWarning;
		}
		
		/**
		 * If attribute name is not defined in DB, it will return false.
		 * if it is defined in DB then it will return DB value. 
		 * @return boolean
		 */
		public boolean isAttributeEnabledInDB(String name) {
			SiteAttribute siteprofile = siteAttributeDAO.getSiteProfileByName(name);
			String isEnabled = null;
			if (siteprofile != null) {
				isEnabled = siteprofile.getSiteProfileValue();
			}
			return Boolean.valueOf(isEnabled);	
		}
		
		//LAW R23
		public NgcClass getToolsHelper() throws EngineException{
	        return toolsHelper;
	    }
		
		class asyncUpdateConfigurationsCache extends BackgroundInitializer<Object>
		{
			OCASession session;
			asyncUpdateConfigurationsCache(OCASession session)
			{
				this.session = session;
			}
			@Override
			protected Object initialize() throws Exception {
				try{
					 Set<Configuration> topElevenconfigList = session.getTopElevenConfigList();
					 Map<String, Object> parameters = new HashMap<String, Object>();
					 MultiBackgroundInitializer multi = new MultiBackgroundInitializer();
					 for(Configuration config : topElevenconfigList){
						 if (cacheOpenConfiguration.get(config.getUcid()) == null)
						 {
							parameters.put("search_ucid", config.getUcid());
							asyncCacheConfiguration asyc = new asyncCacheConfiguration(config.getUcid());
							multi.addInitializer(config.getUcid(), asyc);
						 }
					 }
					 //start all the thread
					 multi.start();
					 //wait for all the threads to finish caching
					 multi.get();
					 //now cleanup cacheOpenConfiguration if it has more than 11 and it is NOT there in session.getTopElevenConfigList()
					 if (cacheOpenConfiguration != null && cacheOpenConfiguration.size() > 11)
					 {
						 Set<String> cachedSet = new HashSet<String>(cacheOpenConfiguration.keySet());
						 Set<String> topElevenSet = new HashSet<String>();
						 for(Configuration config : topElevenconfigList){
							 topElevenSet.add(config.getUcid());
						 }
						 //Now remove those that in top 11, result set is candidate for evictions.
						 cachedSet.removeAll(topElevenSet);
						 //Now clean the cachedSet from cacheOpenConfiguration
						 for (String key : cachedSet) {
							    cacheOpenConfiguration.remove(key);
							}
					 }
				}
				catch(Exception e){
						 e.printStackTrace();
				 }
				return session;
			}
		}

		class asyncCacheConfiguration extends BackgroundInitializer<Object>
		{
			String ucid;
			Map<String, Object> parameters = new HashMap<String, Object>();
			
			asyncCacheConfiguration(String ucid)
			{
				this.ucid= ucid;
			}
			@Override
			protected Object initialize() throws Exception {
        		try {
    				parameters.put("search_ucid", ucid);
        			loadConfigCache(parameters);
				} catch (Exception e) {
					e.printStackTrace();
				}
				return ucid;	        	     	            		
			}
			
		}

		public boolean checkConfigurationType(String ucid){
			
			boolean result = getPersistentService().getIconMappingResult(ucid);
			
			return result;
		}
	    public MauiResponse isSerp(Map<String, Object> params, Window window) throws EngineException{
	    	JsonObject res = new JsonObject();
	    	ConfigurationImpl configuration = (ConfigurationImpl) solutionSubConfig.getConfiguration();
			res.addProperty("serp", UtilityConfigMethods.isEmdmhPartyIdEnabled((KnowledgeBaseImpl) getUIFramework().getKb(),configuration.getCountryCode()));
			return Window.responseForGetServerData(res);
	    }
	    
	    public MauiResponse received_delegation_count(Map<String, Object> params, Window window)throws EngineException {
	    	JsonObject responseObj = new  JsonObject();
	    	ConfigDelegationService configDelegationService = (ConfigDelegationService) getTool().getToolSpringApplicationContext().getBean("ConfigDelegationService");
	    	 int fetchDlgConfigReceivedCount = configDelegationService.fetchDlgConfigReceivedCount((OCAUser)user);
	    	 responseObj.addProperty("receivedDlgCount", fetchDlgConfigReceivedCount);
	    	 if(user != null) {
	    		 ((OCAUser)user).setReceivedDlgCount(fetchDlgConfigReceivedCount);
	    	 }
	    	return Window.responseForGetServerData(responseObj);
	    }

	 // US-15452 - Customer Facing Export - Start
		 public MauiResponse oca_customer_facing_export(Map<String, Object> params,Window window) throws EngineException{

				    	SubConfigurationImpl subConfig;
				    	
						subConfig = ((ConfigurationImpl) statefulConfig.getEngineConfig()).getSolutionSubconfiguration();
						
						final boolean isOnline = (null == SpringPropertiesUtil.getProperty("online")
								|| SpringPropertiesUtil.getProperty("online").equalsIgnoreCase("true"));
						Map<String, Object> totalLead = new HashMap<String, Object>();
						Connection con = null;
						try {
							ExporterRequest exporterRequest = new ExporterRequest();
							String newId = (String)params.get("newId");
							ExportType exportType = (ExportType) Enum.valueOf(ExportType.class, (String) params.get("exportType"));
							boolean showprice = params.get("showPricing")!= null ? ((boolean)params.get("showPricing")): false;
							
							DataSource datasource = (DataSource) this.getTool().getToolSpringApplicationContext().getBean("corona");
							JdbcTemplate jdbctemplate = new JdbcTemplate(datasource);
							con = jdbctemplate.getDataSource().getConnection();
							
							ConfigDao configDao = new ConfigDaoImpl();
							if(params.get("configId") != null){
								String configId = (String) params.get("configId");
								ConfigVO configVO = configDao.readConfig(con, configId , "OCA", "HPE");
								exporterRequest.setConfigVo(configVO);
							}

							boolean configName = params.get("configName")!= null ? ((boolean) params.get("configName")) : false;
							boolean parentNodeName = params.get("parentNodeName")!= null ? ((boolean) params.get("parentNodeName")) : false;
							boolean summaryPage = params.get("showSummaryPage")!= null ? ((boolean) params.get("showSummaryPage")) : false;
							boolean productTypeOverview = params.get("productTypeOverview")!= null ? ((boolean) params.get("productTypeOverview")): false;
							boolean groupByProductType = params.get("groupByProductType")!= null ? ((boolean) params.get("groupByProductType")) : false;
							boolean hideFactoryIntegratedOptions = params.get("hideFactoryIntegratedOptions")!= null ? ((boolean) params.get("hideFactoryIntegratedOptions")) : false;
							ConfigurationPreference configurationPreference = null;
							JsonObject totalLeadTimeObj = new JsonObject();
							if (statefulConfig.getEngineConfig() != null && statefulConfig.getDomainConfiguration() != null) {
								configurationPreference = statefulConfig.getDomainConfiguration().getConfigurationPreference();

								Map<String,List<String>> bomMaterialMap = new HashMap<String, List<String>>();
								OCALeadTimeHelper.addKBBOMMaterials(subConfig,bomMaterialMap,configurationPreference,true);
								DataServices dataServices = this.getTool().getToolSpringApplicationContext().getBean("dataServices", DataServices.class);
								totalLeadTimeObj = (JsonObject)dataServices.getLeadTimeColorCodes(bomMaterialMap,configurationPreference, getUser().getType().toString());
							}
							
							//Add for Show Lead Time
							Gson gson = new Gson();
							String result = gson.toJson(totalLeadTimeObj);
							if(result != null){
								totalLead = gson.fromJson(result, PARAMETER_TYPE);
							}

							exporterRequest.setUser(this.getUser());
							exporterRequest.setConfiguration(statefulConfig);
							exporterRequest.setAssertName("OCA");
							exporterRequest.setEngineSession(this.getEngineSession());
							exporterRequest.setSynConfigurationRequired(true);
							exporterRequest.setOnline(isOnline);
							exporterRequest.setExportType(exportType);
							exporterRequest.setLeadTimeValuesKBBOM(totalLead);
							exporterRequest.setParentNodeName(parentNodeName);
							exporterRequest.setSummaryPage(summaryPage);
							exporterRequest.setProductTypeOverview(productTypeOverview);
							exporterRequest.setGroupByProductType(groupByProductType);
							exporterRequest.setHideFactoryIntegratedOptions(hideFactoryIntegratedOptions);
							if(newId != null) {
								exporterRequest.setExportBom(newId);
							}
							if(newId != null && newId.equalsIgnoreCase("save"))
							{
								
								exporterRequest.setExportSavedBom(this.getSavedSolutionConfigItems());
							}
								
							/**
							 * Here oca won't renew the price from ezprs.
							 * true: the price will renew from ezprs.
							 * false: the price get from corona.
							 * Chunk ~~
							 */
							exporterRequest.setRepriceRequired(false);
							exporterRequest.setShowPrice(showprice);
							exporterRequest.setToolFolder(getToolFolder());

							exporterRequest.setConfigName(configName);
							boolean exportExpertBom = subConfig.getConfiguration().isExpertBomEnabled() && "ExpertBOM".equals(subConfig.getConfiguration().getActiveBomDownStream());
							 if(exportExpertBom) {
					            	exporterRequest.setExportExpertBom(true);
					            	ConfigurationImpl configImpl = subConfig.getConfiguration();
					            	ConfigurationPreference cp = statefulConfig.getDomainConfiguration().getConfigurationPreference();
					            	SubConfigRootItem rootItem = OCAExpertBOMUtility.convertExpoertBomToSubConfigRootItem(configImpl.getExpertBomRootNode(), configImpl.getSolutionSubconfiguration(),null, OCAUtilities.getClicDataPerUCID(session));
					            	DataServices dataSerices = (DataServices)SpringApplicationContext.getBean("dataServices");
									dataSerices.getPriceForBom(rootItem, cp, false, false);
									exporterRequest.setExpertBomRootItem(rootItem);
					            }
							
							addTopLevelNodeSubConfigIds(exporterRequest, window);
							 
							IExporter exporterFacade = (ExporterFacade) SpringApplicationContext.getBean("exporterFacade");
							//ShareState shareState = statefulConfig.getDomainConfiguration().getShareState();
							ExporterResponse exporterResponse = exporterFacade.export(exporterRequest);
							String  ucid = statefulConfig.getUcid();
							//String fileName = subConfig.getName();
							//Added to change the filename as per business request
							
							String finalfileName = subConfig.getName();
							if(statefulConfig != null && statefulConfig.getDomainConfiguration()!= null &&
									statefulConfig.getDomainConfiguration().getConfigName() != null){
								finalfileName = statefulConfig.getDomainConfiguration().getConfigName();
							}
							/*if(newId != null && newId.equalsIgnoreCase("save"))
							{
								finalfileName = finalfileName+"_"+ucid+"_Saved_BOM";
							}
							else {*/
								finalfileName = finalfileName+"_"+ucid+"_CF";
							//}
							//String newfileName = finalfileName.replaceAll("[^a-zA-Z0-9.-]", "_");
							String newfileName = finalfileName.replaceAll("[\\s]", "_");
							
							refreshNonConfigLineItem(window);
							
							if(params.get("exportall")!=null){
								prepareExportDataMap(newfileName+exportType.getExtension(),exporterResponse.getContent());
								System.out.println("oca_export_bom ended :"+newfileName+" - "+exporterResponse.getContent().length);
								return null;
							}else{
								return Window.actionDownload(exporterResponse.getContent(), exportType.getContentType(), newfileName
										+ exportType.getExtension(), null);
							}
							
						} catch (Exception e) {
							e.printStackTrace();
							throw new EngineException("Export configuration error", e);
						}
						finally
						{
							try{
								if(con != null)
								{
									con.close();
								}
							}
							catch(Exception ex)
							{
								
							}
						}

					
				    }
		// US-15452 - Customer Facing Export - End	    

		public List<OCARecommendationAlertMessages> getMessagingAlert() {
			OCAUser ocaUser = getUser();
			boolean isInternal = ocaUser.isInternalUser();
			String userId = ocaUser.getUserId();
			
			String previousLastLoginDate = ocaUser.getPreviousLastLoginDate(); 
			
			
						
			return ocaDashBoardManager.getLatestAlertMessaging(userId,isInternal, previousLastLoginDate);
		}
	    

		public JsonObject getMessagingAlertsByMsgId(String msgId) {

			OCARecommendationAlertMessages oCARecommendationAlertMessages =  ocaDashBoardManager.getMessagingAlertsByMsgId(msgId);
			 
			 JsonElement alertMessages = null;
		    	
			 JsonObject messagingJsonObj = new JsonObject();
		     
			 if(oCARecommendationAlertMessages != null){
		         try{
		        	 alertMessages = TestUISerializer.getJsonElement(oCARecommendationAlertMessages);
		             }catch(Exception e){
		             	e.printStackTrace();
		             }
		         }
		         messagingJsonObj.add("alertMessages", alertMessages);
		    return messagingJsonObj;
		}

	    public int getUnReadMessagecount(){
			int count=0;
			OCAUser ocaUser =  getUser();
			count = ocaDashBoardManager.unReadMessageCount(ocaUser.getEmail(), ocaUser.isInternalUser());
			return count;
		}
	    
	    public boolean deleteUserReadMessages(String messageId)
				throws Exception {
			boolean result;
			result = ocaDashBoardManager.deleteUserReadMessages(messageId, getUser().getEmail());
			return result;
		}
	    
	    public int[] markAsReadMessage(ArrayList<String> list)
				throws Exception {
			
			int[] updaterecordlength=ocaDashBoardManager.markAsReadMessage(list,getUser().getEmail());
			
			return updaterecordlength;
		}
	    
	    public MauiResponse markAsReadMessage(Map<String, Object> params, Window window)
				throws Exception {

			JsonObject returnJO = new JsonObject();
			String msgId = (String) params.get("messageIDList");
			
			ArrayList<String> list = new ArrayList<String>();
			list.add(msgId);
			int[] updaterecordlength= markAsReadMessage(list);
			int count = getUnReadMessagecount();
			returnJO.addProperty("length", updaterecordlength.length);
			returnJO.addProperty("count", count);
			return Window.responseForGetServerData(returnJO);
		}
		  /**
		     * mdcp selection
		     * @param params
		     * @param window
		     * @return
		     * @throws Exception
		     */
		    public MauiResponse create_config_show_catalog(Map<String, Object> params, Window window) throws Exception {

		        //OCASession session = getSessionObj();
		        OCASession session = (OCASession) window.getSessionObj();
		        Configuration domainConfig = session.getStatefulAPIConfiguration().getDomainConfiguration();
		        IPreferences preference = session.getStatefulAPIConfiguration().getEngineConfig().getPreferences();
		        OCAUserManager ocaUserManager = (OCAUserManager) ocaApplicationContext.getBean("OCAUserManager");

		        String origCustomerGlobalduns = preference.getPreference(Preferences.CUSTOMER_ID);
		        if(origCustomerGlobalduns == null)origCustomerGlobalduns = "";
		        String origCountryCode = preference.getPreference(Preferences.COUNTRY);
		        String origRegion = preference.getPreference(Preferences.REGION);
		        String origProductLifecycle = preference.getPreference(Preferences.PRODUCT_LIFECYCLE);
		        boolean isCustomerAccountExist=false;

		        String userId = session.getUser().getUserId();
		        String workgroupId = getStringParam(params, "workgroup_id", OCANewWorkgroupManager.HPE_INTERNAL);
		        
		        String customerGlobalduns = null;
		        if(params.get("custAccFlag") != null && params.get("custAccFlag").equals("Y")){
		        	customerGlobalduns = (String) params.get("customer_globalduns")!=null?(String) params.get("customer_globalduns"):"";
		        }else{
		        	customerGlobalduns = getStringParam(params,"customer_globalduns",origCustomerGlobalduns);
		        }
		         
		        String productLifecycle = getStringParam(params,"product_lifecycle",origProductLifecycle);
		        
		        
		        if(productLifecycle == null) {
		        	productLifecycle = "";
		        }
		        productLifecycle = productLifecycle.replace(",",", ");
		        if(productLifecycle == null || productLifecycle.isEmpty() || productLifecycle.equalsIgnoreCase("Active")) {
		        	productLifecycle = "Active";
		        }else if(productLifecycle.equalsIgnoreCase("Any")){
		        	productLifecycle = "Active, Obsolete, Discontinued, Pre-Release";
		        }else if(!productLifecycle.contains("Active")){
		        	 productLifecycle = "Active, "+productLifecycle;
		        }
		       
		        String countryCode = getStringParam(params, "country", origCountryCode);
		        String region = getStringParam(params, "region", origRegion);
		        
		        // add for oca country on summary page supported
		        preference.setPreference(Preferences.OCA_COUNTRY, countryCode);
		        SubConfigurationImpl solSubConfig =  (SubConfigurationImpl)this.solutionSubConfig;//(SubConfigurationImpl) parameters.get("solutionSubConfig");
		        solSubConfig.getConfiguration().resetSerpFlag();//reset serpFlag to null
		        domainConfig.getConfigurationPreference().setConfigType("OCA");
		        domainConfig.setWorkgroupId(workgroupId);
		        domainConfig.setGlobalDuns(getStringParam(params, "customer_globalduns", origCustomerGlobalduns));
		        
		       if(!StringUtils.isEqual(productLifecycle, origProductLifecycle)) {
		        	preference.setPreference(Preferences.PRODUCT_LIFECYCLE,productLifecycle);
		        }
		        if (session.getEngineCatalog() != null || session.getSoftwareCatalog() != null || session.getAccessoryCatalog() != null) {
		            // Either globalduns and country is changed, need to refresh preference and refresh catalog.
		            if (!StringUtils.isEqual(customerGlobalduns, origCustomerGlobalduns)
		                    || !StringUtils.isEqual(countryCode, origCountryCode)) {
		                preference.setPreference(Preferences.CUSTOMER_ID, customerGlobalduns);
		              preference.setPreference(Preferences.SHOW_EXTENDED_PRODUCT,((Boolean)customerAccountManager.isShowExtended(customerGlobalduns.toString())).toString());
		             preference.setPreference(Preferences.CUSTOMER_OFFERINGS,customerAccountManager.getProductFilterByCustomerId(customerGlobalduns.toString()));
		                // Country changed
		                if(!countryCode.equals(origCountryCode)){
		                   OCAUtilities.upadteConfigPrefs(preference, region, countryCode, session, ocaUserManager);
		                }
		                // initialize Catalog and Catalog Widget
		                initiateEngineCatalog();
		                initiateAccessoryCatalog();
		                initiateSoftwareCatalog();
		               
		            }
		        }
		        
		        JsonObject res = new JsonObject();
		//US 14067 Starts
			    //if(params.get("partyId")!=null && params.get("globalEntity")==null){
		        if(params.get("partyId")!=null){
			        res.addProperty("partyID", "");
			        res.addProperty("countryEntity","");
			        res.addProperty("globalEntity","");
			        coronaEMDMHService = (CoronaEMDMHServiceDao)getTool().getToolSpringApplicationContext().getBean("coronaEMDMHService");
			        List<CustomerDetailsVO> customerDetails = coronaEMDMHService.getEntityDetails((String)params.get("partyId"));
			        if(!customerDetails.isEmpty() && customerGlobalduns!=null){
			        CustomerDetailsVO customerDetail=customerDetails.get(0);
			        res.addProperty("partyID", customerDetail.getPartyID());
			        res.addProperty("countryEntity",customerDetail.getCountryEntity());
			        res.addProperty("globalEntity",customerDetail.getGlobalEntity());	
			        isCustomerAccountExist=true;
			      }
			    res.addProperty("isCustomerAccountExsist",isCustomerAccountExist);
			    }
		        res.addProperty("isSerp",UtilityConfigMethods.isEmdmhPartyIdEnabled((KnowledgeBaseImpl) ((ConfigurationImpl)solSubConfig.getConfiguration()).getKB(),((ConfigurationImpl)solSubConfig.getConfiguration()).getCountryCode()));
		        res.addProperty("isEMDMHEnabled", OCAUtilities.isEMDMHEnabled(this.getUser().getOcaUserRole().getText()));
			  //US 14067 Ends	    
		        res.addProperty("warningData",!OCAUserManager.isCountrySupportedByEngine(OCAUserManager.getCountryMapping(countryCode),session));
//		        res.addProperty("warningData",!OCAUserManager.isCountrySupportedByEngine(OCAUserManager.getCountryMapping(countryCode)));
		        res.addProperty("key", userId + SUFFIX_OF_LAST_SELECTED_WORKGROUP);
		        res.addProperty("workgroupId", workgroupId);
		        res.addProperty("productLifecycle", productLifecycle);
		        res.addProperty("isGLSCEnabled", OCAUtilities.isGLSCEnabled(this));      
		        MauiResponse response = Window.responseForGetServerData(res);
		        return response;
		    }
	    	
		    private String getStringParam(Map<String, Object> params, String name, String defaultVal) {
		        String val = (String) params.get(name);
		        if (val == null) {
		            val = defaultVal;
		        }
		        return val;
		    }

			public Map<String, HashMap<String, HashMap<String, List<ClicResponse>>>> getClicCheckData() {
				return clicCheckData;
			}

			public void setClicCheckData(
					Map<String, HashMap<String, HashMap<String, List<ClicResponse>>>> clicCheckData) {
				this.clicCheckData = clicCheckData;
			}

			public boolean isCountryChanged() {
				return isCountryChanged;
			}

			public void setCountryChanged(boolean isCountryChanged) {
				this.isCountryChanged = isCountryChanged;
			}

			public boolean isGreenLakeChanged() {
				return isGreenLakeChanged;
			}

			public void setGreenLakeChanged(boolean isGreenLakeChanged) {
				this.isGreenLakeChanged = isGreenLakeChanged;
			}

			public boolean isClicCheckAfterBomToggle() {
				return isClicCheckAfterBomToggle;
			}

			public void setClicCheckAfterBomToggle(boolean isClicCheckAfterBomToggle) {
				this.isClicCheckAfterBomToggle = isClicCheckAfterBomToggle;
			}

			public List<ConfigItem> getClicCheckSubConfigItems() {
				return clicCheckSubConfigItems;
			}

			public void setClicCheckSubConfigItems(List<ConfigItem> clicCheckSubConfigItems) {
				this.clicCheckSubConfigItems = clicCheckSubConfigItems;
			}

			public boolean isClicCheckExpertBOM() {
				return doClicCheckExpertBOM;
			}

			public void setClicCheckExpertBOM(boolean isClicCheckExpertBOM) {
				this.doClicCheckExpertBOM = isClicCheckExpertBOM;
			}
			
			//US 16164 Ad-hoc Restrictions by user and role in OCA Excel Export Start
			public MauiResponse exportMainStreamManagement(Map<String, Object> params, Window window) throws Exception {
				String roleId = (String) params.get("role_id");
				LoggerUtils.info(logger, "OCASession.exportMainStreamManagement roleId=" + roleId);
				OCAUserManager oum = (OCAUserManager) getTool().getToolSpringApplicationContext().getBean("OCAUserManager");
				List<Map<String, String>> userMainStreamList = oum.getUserListByRole(roleId);
				XSSFWorkbook workbook = new XSSFWorkbook();
				XSSFSheet sheet = workbook.createSheet("Mainstream_Management");
				writeHeaderLine(workbook, sheet, userMainStreamList);
				writeDataLines(workbook, sheet, userMainStreamList);
				ByteArrayOutputStream os = new ByteArrayOutputStream();
				try {
					workbook.write(os);
					workbook.close();
					ExporterResponse exporterResponse = new ExporterResponse();
					exporterResponse.setContent(os.toByteArray());
					ExportType exportType = (ExportType) Enum.valueOf(ExportType.class, "UNFORMATTED_EXCEL_EXPORT");
					return Window.actionDownload(exporterResponse.getContent(), exportType.getContentType(),
							"mainStream_management" + exportType.getExtension(), null);
				} catch (Exception e) {
					LoggerUtils.error(logger, "OCASession.exportMainStreamManagement Exception=" +e);
					e.printStackTrace();
				} finally {
					if (os != null) {
						try {
							os.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					LoggerUtils.info(logger, "OCASession.exportMainStreamManagement download completed");
				}
				return null;

			}

			private void writeHeaderLine(XSSFWorkbook workbook, XSSFSheet sheet, List<Map<String, String>> userMainStreamList) {
				Row row = sheet.createRow(0);
				CellStyle style = workbook.createCellStyle();
				XSSFFont font = workbook.createFont();
				font.setBold(true);
				font.setFontHeight(16);
				style.setFont(font);

				createCell(row, 0, "Name", style, sheet);
				createCell(row, 1, "Email", style, sheet);
				createCell(row, 2, "MainStream Toggle Enabled", style, sheet);
				createCell(row, 3, "Ad-hoc Visibility", style, sheet);
				createCell(row, 4, "Ad-hoc for C2B Visibility", style, sheet);
				createCell(row, 5, "Comments", style, sheet);

			}

			private void createCell(Row row, int columnCount, Object value, CellStyle style, XSSFSheet sheet) {
				sheet.autoSizeColumn(columnCount);
				Cell cell = row.createCell(columnCount);
				if (value instanceof Integer) {
					cell.setCellValue((Integer) value);
				} else if (value instanceof Boolean) {
					cell.setCellValue((Boolean) value);
				} else {
					cell.setCellValue((String) value);
				}
				cell.setCellStyle(style);
			}

			private void writeDataLines(XSSFWorkbook workbook, XSSFSheet sheet, List<Map<String, String>> userMainStreamList) {
				int rowCount = 1;

				CellStyle style = workbook.createCellStyle();
				XSSFFont font = workbook.createFont();
				font.setFontHeight(14);
				style.setFont(font);

				for (Map<String, String> map : userMainStreamList) {
					Row row = sheet.createRow(rowCount++);
					int columnCount = 0;

					createCell(row, columnCount++, map.get("FIRST_NAME")+map.get("LAST_NAME"), style, sheet);
					createCell(row, columnCount++, map.get("USER_ID"), style, sheet);
					createCell(row, columnCount++, map.get("TOGGLE_VISIBLE_FLAG"), style, sheet);
					createCell(row, columnCount++, map.get("AD_HOC_VISIBILITY"), style, sheet);
					createCell(row, columnCount++, map.get("AD_HOC_C2B_VISIBILITY"), style, sheet);
					createCell(row, columnCount++, map.get("COMMENTS"), style, sheet);

				}
			}
			//US-16164 : Ad-Hoc Restrictions by user/role in OCA
			public String getDynamicAdhocMessage() {
				return adHocMessage;
			}
			public void setDynamicAdHocMessage(String adHocMessage) {
				this.adHocMessage = adHocMessage;
			}

}
