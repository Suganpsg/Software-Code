package essn.server.proliantservers.dlserver.g10.dl380g10 {
	import common.productcategories.*;
	import common.agentutility.*;
	import common.coremodel.*;
	//	import essn.server.common.servercommon.*;
	import essn.server.common.servercommon.pciE3p0x8flfhSlot;
	import essn.server.common.servercommon.pciE3p0x16flfhSlot;
	import essn.server.common.servercommon.Tier1BasicDelivery;
	import essn.server.common.servercommon.Tier2ValueAddServices;
	import essn.server.common.servercommon.Tier3ValueAddServices;
	import essn.server.proliantservers.dlserver.g10.common.dl380g10common.*;
	import essn.server.proliantservers.common.proliantproductoption.*;
	//	import essn.server.proliantservers.common.*;
	//	import essn.server.common.servercommon.*;
	//	import essn.server.proliantservers.common.softwareg10common.*;
	//	import essn.storage.offline.externaltapedrives.HPSDExternalTapeDrive.*;
	//	import essn.storage.common.storagecommon.*;
	//	import essn.storage.online.mslseries.mslseriescommon.*;
	//	import essn.storage.offline.tapeautoloader.g2autoloader.*;
	//	import essn.storage.offline.tapeenclosure.tapeenclosure1u.*;
	import essn.server.common.servercommon.ServiceTrackingSKU;
	import essn.server.common.servercommon.NOServiceguardIntegrationDummy;
	import essn.server.common.servercommon.ServiceguardIntegrationDummy;
	import essn.server.common.servercommon.RapidDeploymentStandardDummy;
	import essn.server.common.servercommon.RapidDeploymentBestShoreDummy;
	import essn.server.proliantservers.dlserver.g10.common.dlg10common.dlTrackingSku;
	import essn.server.proliantservers.dlserver.g10.common.dlg10common.vSANTrackingSku;
	import essn.common.software.OneViewManagementSoftware;
	import essn.common.software.VMwareVSAN;
	import essn.common.software.VMWareVSphereEditions;
	import essn.cas.prostackcommon.ProStackServerTracking;
	import essn.common.software.HACClusterSGLtu;

	/* @Author: Paola Fuentes
	 * @Source: PPM 71523
	 * @Family: DL380G10
	 * @EffectivityID: PFA_DL380G10
	 * @Description: DL380 Gen 10 class
	 */
	class DL380Gen10 extends DL380G10Common {
	// JCN GLSC
		boolean isGLSC: true;
		//Class variables
		description: "DL380 Gen10";
		configurationEntryPoint;
		platformName: "DL380Gen10";
		string shortLabel: "DL380 Gen10";
		string softwarePlatformName: "DL380 Gen10";
		string BTOType: "";
		string quickSpecMap: "DL380Gen10";
		string[] preferredPDUList: "any";
		int childSequenceNumber: 91; // to fix IM26359373
		boolean hpefsEnabled: false; //shd 9/30/2021
		//The list of primary controllers that can be choosen.
		//string[] sPrimaryControllerPrioritizationList: "870549-B21", "804338-B21", "804331-B21", "830824-B21", "804326-B21", "804394-B21";
		//string[] defaultList: "standardDL380G10Riser";
		// ifEffective VLR_PPM_77595 {
		// 	int iNumMemoryBlankkit : 2;
		// }		
		//int iHalfEiaUnitsRequired: 4; //Space in a rack
		//int iNumPowerSupplies: 2;
		//int iNumProcessorSlots: 2; //Processor counter
		//int iNumHeatsink: 1;
		//int iNumMemoryColumns: 12;
		//int iNumMemoryRows: 2; //Processor counter
		//int iMinNumMemoryPerProcessor: 1;
		//int iMaxNumMemoryPerProcessor;
		//int iMaxNumMemoryPerProcessorAdvancedMemory;
		//int iNumHarddiskBays: 24; //Minimum bays, every limit is set in the server models under iNumHarddiskBay attribute.
		//int iNumKits;
		//int iNumSmartMemory: 1;
		//int iNumProliantStorageSassa: 3;
		//int iNumSAP420iControllerCache: 1;
		//int iNumInternalStorageController: 99;
		//int iNumControllerMode: 2;
		//int iNumRaidSettings: 1;
		//int iNumDriveCages: 6; // set the DLSeries.deviceSubsystem.driveCageSlots slots available
		//int iNumBlankKit: 1;
		//int iNumTransceivers: 32;
		//int iNumFanOption: 1;
		//int iNumPowerOptions: 2;
		// int iNumSecurityHardware: 2; //SAM_ALM_108621
		//ifEffective RTR_PPM_77073 {int iNumSecurityHardware: 4;}otherwise{int iNumSecurityHardware: 5;} // RTR ALM 117017 As per rule 2 the max qty of one per SKU/SKE ALM 108443, Max Value Changed to Four, there is no max for this section. So, each quantity max should be one, total should be 4.
		//int iNumTPMModeSetting: 1;
		//int iNumGraphicsAccessories: 2;
		int iNumGraphicsAccessories: 10; //SE - For PERT 17895   05-Dec-2019
		//int iNumDiskBasedBackup: 1;
		//int iNumTapeStorage: 1;
		//int iNumKeyboardandMouse: 1;
		int iNumProliantManagementHardware: 3; //SE - For PERT 17895  2-Jan-2020
		//int iNumRiserRows: 3; //Dedicated Riser slots on server
		//int iNumPciSlotRows: 2; //Slots directly on the server
		//int iNumRowsRailKits: 2; //Slots for Rail Kits class
		//int iNumBiosMode: 1;
		//int iNumEnergyStar: 1;
		//int iNumLogicalSizeSetting: 1;
		//int iNumNVMeEnablementeSetting: 3;
		//int iNum3POProduct: 1;
		int iNumTrackingSkus: 1; //MFG 24827	

		//TD BILLING TIER
		string billingTier: "DL380 Gen10";
		int iNumNetworkCable: 2;
		int iNumHPECEMREnableKit: 1; //SE - For PERT 20151   04-Sep-2020
		int iNumRetainercrd: 2; //SE - For PERT 20266     15-Oct-2020
		int iNumPwrSupAces: 2; //SE - For PERT 20266     15-Oct-2020
		boolean isSupportedServers: true; //PRS Added for ISS Software changes PERT-21301 13-Jan-2021
		//SKE for Cost Optimization View
		//Cost Optimization
		boolean showCostOptimizationView: true;
		string[] costOptimizationUISections:
		//Memory 
		"MEMORY:memory.memorySlots" //, "MEMORY:memory.memorySlotsPersistent"
		//SSD
, "SSD:drive.SSDReadIntensiveChoice", "SSD:drive.SSDWriteIntensiveChoice", "SSD:drive.SSDMixedUseChoice"
		//NVME
, "NVME:drive.NVMeReadIntensiveChoice", "NVME:drive.NVMeWriteIntensiveChoice", "NVME:drive.NVMeMixedUseChoice"
		// M2
, "M2:drive.M2SSDReadIntensiveChoice", "M2:drive.M2SSDMixedUseChoice"
		// PCI Acelerators
, "PCIEACCELERATOR:drive.PCIeAcceleratorsChoice"
		//Hard drives
, "HDD:drive.HDDEnterprise15K_10KChoice", "HDD:drive.HDDMidline72KChoice"
		//NICs
, "NIC:networkControllerSection.CNAPCIeChoice", "NIC:networkControllerSection.CNAFlexibleLOMChoice", "NIC:networkControllerSection.EthernetFlexibleLOMChoice", "NIC:networkControllerSection.EthernetPCIeChoice",
		"NIC:networkControllerSection.FibreChannelHBAChoice", "NIC:networkControllerSection.InfiniBandFlexibleLOMChoice", "NIC:networkControllerSection.InfiniBandPCIeChoice"
		//Transceivers
, "TRANSCEIVER:networkControllerSection.TransceiversChoice"
		//Controllers
, "CONTROLLER:drive.SmartArrayControllerChoice";
		def front_rear_drive_cage_HDDdrives_check: boolean = callout("CSUtils", "front_rear_drive_cage_HDDdrives_function", thisInst);
		def getSoftwareRedError (): int = callout("IntOptUtility", "getSoftware", thisInst);

		//SE - Test Commit 06-Dec-2020
		//SE - For PERT 20117    31-Jul-2020
		def defaultTrustedSupplyChain (): string[] = {
			if thisInst.selected(TrustedSupplyChain).count > 0 then expanderString ("867824-B21", 1) + expanderString ("BD505A", 1); //TD software installed differently + expanderString ("R6X85AAE", 1);

		}

		//DK Added for Exception 1012707 DL380 Gen10 NGC and PERT 18967
		def isDL380G10NCModel (): boolean = {
			val dl380G10NC_Model = (thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P19720-B21");
			dl380G10NC_Model;
		}
		def getPCInetworkingCount (): int = {
			val pCIe_Networking = thisInst.selected(NetworkingPci).filter(tPciType = "PCI_A").count;
			pCIe_Networking;
		}
		def getFlexNetworkingCount (): int = {
			val netWorkingFlex = thisInst.selected(NetworkingFlex).filter(tPciType = "PCI_A").count;
			netWorkingFlex;
		}
		def getNetworkAdapterPciCount (): int = {
			val networkAdapterPci = thisInst.selected(NetworkAdapterPci).filter(tPciType = "PCI_A").count;
			networkAdapterPci;
		}
		// JCN - DL380 are already on TechCare on PRO!!		
		//		ifEffective MS_PERT_22433 {
		//		boolean supportsTechCare : true;
		//		}otherwise{
		//		boolean supportsTechCare : false;
		//		}
		def max_ControllerMode: int = 2; //AB 28-Jan-2022 for ALM ID: 144270
		def max_SmartArrayControllerFunction: int = 3; //HK - ALM 143641 15 Nov 2021
		def max_opticalDriveBandingFunction: int = 1; //AB 18-Mar-2020 for ALM ID: 135249
		def max_internalstoragecontrollerCablesFunction: int = 2; //AB 18-Mar-2020 for ALM ID: 135249 		
		def max_driveCageBandingFunction: int = 6;
		def max_processorSlotsBandingFunction: int = 1;
		def max_managementHardwareBandingFunction: int = 3;
		def max_ILO_management_BandingFunction: int = 10; //SE - ALM 142792		20-Sep-2021
		//Below Controllers are referred as Tri Mode Controllers:
		def deftriModController (): int = {
			thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) >= "P04220-B21").count + thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) >= "P06367-B21").count +
			thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) >= "P12688-B21").count + thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) >= "P26279-B21").count +
			thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) >= "P26324-B21").count + thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) >= "P26325-B21").count;
		}
		//AB 24-Apr-2020 for ALM ID: 135578
		//RV 12-May-2021 added int ALM 140904
		def maxSFF (): int = {
			val standard8SFF = if((thisInst.id = "875782-B21" or thisInst.id = "868703-B21" or thisInst.id = "R1R46A" or thisInst.id = "P19720-B21") and (thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <=
			"826689-B21 826690-B21 826691-B21").count = 3 or thisInst.selected(RemovalReplacement).filter(a => split(a.id, "#").get(0) <= "873763-B21").count = 1)) then 0 else 8;
			thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826687-B21").count * 2 + thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826688-B21").count * 2 +
			thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826690-B21").count * 8 + thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826691-B21").count * 8 +
			thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "867805-B21").count * 2 + standard8SFF;
		}
		//AB 24-Apr-2020 for ALM ID: 135578
		//RV 12-May-2021 added int ALM 140904
		//def maxNVME () : int = {
		def maxNVME: int = {
		//val valor1 = (thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826690-B21 826687-B21 873781-B21").count) * 2;
			val valor1 = (thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826690-B21 873781-B21").count) * 2;
			val valor3 = if thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826687-B21").count > 0 then 2 else 0;
			val valor2 = (thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826689-B21").count) * 8;
			valor1 + valor2 + valor3;
		}
		def getDrivesInCage87 (): int = {
			val cage1 = if thisInst.selected(826687-B21).count >= 1 then getInstancesOfClass (thisInst.selected(826687-B21), "ProliantDriveCage").get(0).selected("ProliantHardDrive_HP_SFF_NVME").count else 0;
			val cage2 = if thisInst.selected(826687-B21).count >= 2 then getInstancesOfClass (thisInst.selected(826687-B21), "ProliantDriveCage").get(1).selected("ProliantHardDrive_HP_SFF_NVME").count else 0;
			cage1 + cage2;
		}
		def getDrivesInCage90 (): int = {
			val cage1 = if thisInst.selected(826690-B21).count >= 1 then getInstancesOfClass (thisInst.selected(826690-B21), "ProliantDriveCage").get(0).selected("ProliantHardDrive_HP_SFF_NVME").count else 0;
			val cage2 = if thisInst.selected(826690-B21).count >= 2 then getInstancesOfClass (thisInst.selected(826690-B21), "ProliantDriveCage").get(1).selected("ProliantHardDrive_HP_SFF_NVME").count else 0;
			val cage3 = if thisInst.selected(826690-B21).count >= 3 then getInstancesOfClass (thisInst.selected(826690-B21), "ProliantDriveCage").get(2).selected("ProliantHardDrive_HP_SFF_NVME").count else 0;
			cage1 + cage2 + cage3;
		}
		def defaultBulkPack (): string[] = {
			if thisConfig.getInstancesOfModel("468640-B21").count > 0 and thisInst.id = "868706-B21" then expanderString ("826866-L21", 1) + expanderString ("815100-B21", 1) + expanderString ("865408-B21", 1);
		}
		def max_pciSlotsBandingFunction: int = {
		//Primary Riser
			val pRiser1 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "867807-B21").count > 0 then 0 else 0;
			val pRiser2 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "871673-B21").count > 0 then 3 else 0;
			val pRiser3 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826701-B21").count > 0 then 3 else 0;
			val pRiser4 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "871674-B21").count > 0 then 2 else 0;
			val pRiser5 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "871676-B21").count > 0 then 2 else 0;
			//Secondary Riser
			val pRiser6 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826694-B21").count > 0 then 2 else 0;
			val pRiser7 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826704-B21").count > 0 then 2 else 0;
			val pRiser8 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "867806-B21").count > 0 then 3 else 0;
			val pRiser9 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "870548-B21").count > 0 then 3 else 0; //AB 26-Nov-2019 for ALM ID:133605 
			val pRiser10 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "873209-B21").count > 0 then 3 else 0;
			val pRiser11 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "873732-B21").count > 0 then 0 else 0;
			val pRiser12 = thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "P01011-B21").count * 2;
			//Tertiary Riser
			val pRiser13 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826700-B21").count > 0 then 1 else 0;
			val pRiser14 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826702-B21").count > 0 then 1 else 0;
			val pRiser15 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "867808-B21").count > 0 then 0 else 0;
			val pRiser16 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "875780-B21").count > 0 then 2 else 0;

			//Standard Riser
			val pRiser17 = if thisInst.selected(StandardProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "standardDL380G10Riser").count > 0 then 3 else 0;
			val totalPci = pRiser1 + pRiser2 + pRiser3 + pRiser4 + pRiser5 + pRiser6 + pRiser7 + pRiser8 + pRiser9 + pRiser10 + pRiser11 + pRiser12 + pRiser13 + pRiser14 + pRiser15 + pRiser16 + pRiser17;
			if(thisConfig.getProperty("targetEnvironment") >= "ezc" or thisConfig.getProperty("targetEnvironment") >= "ipcs") then 8 else totalPci;
		}
		def minHardDriveFunction: int = 0;
		def maxHardDriveFunction: int = {
			nMaxBandingHardDrives ();
		}
		def hardDriveCounterPositionFunction: double = {
			if maxHardDriveFunction = 0 then 0.0 else ProliantHardDrive.selected.count * 1.0 / maxHardDriveFunction;
		}
		//AB 07-Sep-2021 for DRP fix and PERT ID: 24641
		def defaultBatteryPseriesOCA (): string[] = {
			val qty_Controller = thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "804331-B21 804338-B21 804405-B21 830824-B21 869081-B21 869083-B21 P44219-B21").count;
			val smartBattery = thisInst.selected(SAP420iControllerCacheUpgrade).filter(x => split(x.id, "#").get(0) <= "P01366-B21").count;
			//AB 04-Oct-2021 for ALM ID: 143137if((thisConfig.getProperty("targetEnvironment") = "oca" or thisConfig.getProperty("targetEnvironment") = "ipcs" or thisConfig.getProperty("targetEnvironment") = "eocs")) and qty_Controller > 0 and smartBattery = 0 then expanderString ("P02377-B21", 1);
			if((thisConfig.getProperty("targetEnvironment") = "oca" /*SE - Removed for ALM 143313		25-Oct-2021		or thisConfig.getProperty("targetEnvironment") = "eocs"*/)) and qty_Controller > 0 and smartBattery = 0 then expanderString
			("P02377-B21", 1);
		}
		//SE - Removed for ALM 143313		25-Oct-2021
		//		def defaultBatteryPseriesOCC (): string[] = {
		//			val qty_Controller  = thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "804331-B21 804338-B21 804405-B21 830824-B21 869081-B21 869083-B21 P44219-B21").count;
		//			//val smartBattery = thisInst.selected(SAP420iControllerCacheUpgrade).filter(x => split(x.id, "#").get(0) <= "P01366-B21#0D1").count;
		//			val smartBattery = thisInst.selected(SAP420iControllerCacheUpgrade).filter(x => split(x.id, "#").get(0) <= "P01366-B21").count;
		//			//AB 04-Oct-2021 for ALM ID: 143137if thisConfig.getProperty("targetEnvironment") = "ezc"  and qty_Controller > 0 and smartBattery = 0 then expanderString ("P02377#0D1-B21", 1);
		//			if (thisConfig.getProperty("targetEnvironment") = "ezc" /*SE - Removed for ALM 143313		23-OCt-2021 or thisConfig.getProperty("targetEnvironment") = "ipcs" */)  and qty_Controller > 0 and smartBattery = 0 then expanderString ("P02377-B21#0D1", 1); 
		//		}		
		// JCN Removing since the default was already made on def defCTOModel_r2. If required a red error will be thrown with other constraints.		
		//		def defaultBatteryPseries (): string[] = {
		//			val listOfControllers = "804338-B21 804405-B21 830824-B21";
		//			if thisConfig.getProperty("targetEnvironment") = "oca" and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= listOfControllers).count > 0  
		//			   and thisInst.selected(SAP420iControllerCacheUpgrade).isEmpty then "P01366-B21";
		//			   //then "P01366-B21";	//SE - For ALM 139162	13-Jan-2021	and thisInst.selected(SAP420iControllerCacheUpgrade).isEmpty then "P01366-B21";
		//		}//PRS Modified def for ALM-139021 11-Dec-2020
		def defCTOModel_r4 (): string[] = {
			if thisConfig.getProperty("targetEnvironment") = "oca" and (thisInst.id = "868705-B21" || thisInst.id = "875785-B21" || thisInst.id = "P19718-B21") then expanderString ("804338-B21", 1) else
			if(thisConfig.getProperty("targetEnvironment") = "ezc" or thisConfig.getProperty("targetEnvironment") = "ipcs") and (thisConfig.getInstancesOfModel("DL380Gen10").filter(z => split(z.id, "#").get(0) >= "868705-B21" || split(z.id,
			"#").get(0) >= "875785-B21" || split(z.id, "#").get(0) >= "P19718-B21").count > 0) then expanderString ("804338-B21#0D1", 1); // NL modified for PERT 15777, 19-July-2019	

		}
		def defCTOModel_rflom (): string[] = {
			if thisConfig.getProperty("targetEnvironment") = "oca" and (! DL380Gen10.isProStackModel) and (thisInst.id = "P19717-B21" || thisInst.id = "P19718-B21" || thisInst.id = "P19719-B21" || thisInst.id = "P19720-B21") then expanderString
			("665240-B21", 1) else if(thisConfig.getProperty("targetEnvironment") = "ezc" or thisConfig.getProperty("targetEnvironment") = "ipcs") and (thisConfig.getInstancesOfModel("DL380Gen10").filter(z => split(z.id, "#").get(0) >=
			"P19717-B21" || split(z.id, "#").get(0) >= "P19718-B21" || split(z.id, "#").get(0) >= "P19719-B21" || split(z.id, "#").get(0) >= "P19720-B21").count > 0) then expanderString ("665240-B21#0D1", 1);
		}
		def getProliantProcessorOfInstances (instancesList1: Set< RootProductClass >, targetFillerClass: RootProductClass): Set< ProliantProcessor > =
		callout("GetInstancesFromSetOfInstances", instancesList1, targetFillerClass);
		def sataHardDrives (): int = {
			thisInst.selected(ProliantHardDrive).filter(x => x.tDriveType >= "SATA" and x.tDriveFormFactor >= "lff" and x.tDriveSSD != "M2").count + thisInst.selected(ProliantHardDrive).filter(x => x.tDriveType >= "SATA" and x.tDriveFormFactor >=
			"sff" and x.tDriveSSD != "M2").count + thisInst.selected(ProliantHardDrive).filter(x => split(x.id, "#").get(0) >= "815606-B21").count + thisInst.selected(ProliantHardDrive).filter(x => split(x.id, "#").get(0) >= "822594-B21").count +
			/*thisInst.selected(ProliantHardDrive).filter(x => split(x.id, "#").get(0) >= "815605-B21").count * 2 + thisInst.selected(ProliantHardDrive).filter(x => split(x.id, "#").get(0) >= "822593-B21").count * 2*/
			thisInst.selected(ProliantHardDrive_HP_uFF).count * 2;
		}
		def sasHardDrives (): int = {
			thisInst.selected(ProliantHardDrive).filterByAttribute(tDriveType, "SAS").count + thisInst.selected(ProliantHardDrive).filterByAttribute(tDriveType, "SAS-SSD").count;
		}
		def hsxMaxDataStorage: int = {
			12;
		}
		def hsxMaxHsFsMetaDrives: int = {
			2;
		}
		def max_BootDrivesFunc: int = {
			2;
		}
		def hsxMaxPcie: int = {
			3;
		}
		def nLFFHardDrives (): int = {
			val nDCage1 = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826685-B21").count * 3;
			val nDCage2 = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826686-B21").count * 4;
			val total = if isEOCSBanding then 7 else nDCage1 + nDCage2;
			if((isOCA or isOCS) and (thisInst.id = "868710-B21" or thisInst.id = "868705-B21" or thisInst.id = "875785-B21" or thisInst.id = "P02468-B21" or thisInst.id = "P02463-B21" or thisInst.id = "P20172-291" or thisInst.id = "P20172-B21" or
			thisInst.id = "P19718-B21")) then total + 12 else if(isEZC or isIPCS) and thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868705-B21 875785-B21 P19718-B21 P20172-291 P20172-B21 P19718-B21").count >
			0 then total + 12 else total + 8; //NL modified by adding 12LFF 2 BTO models, 20-June-2019								 

		}
		def nMaxBandingHardDrives: int = {
			if(thisInst.id >= "826564-291" or thisInst.id >= "826564-B21" or thisInst.id >= "826565-291" or thisInst.id >= "826565-AA1" or thisInst.id >= "826565-B21" or thisInst.id >= "826566-291" or thisInst.id >= "826566-AA1" or thisInst.id >=
			"826566-B21" or thisInst.id >= "826567-291" or thisInst.id >= "826567-B21" or thisInst.id >= "868709-AA1" or thisInst.id >= "879938-291" or thisInst.id >= "879938-B21" or thisInst.id >= "P02462-291" or thisInst.id >= "P02462-B21" or
			thisInst.id >= "P02464-291" or thisInst.id >= "P02464-B21" or thisInst.id >= "P02465-291" or thisInst.id >= "P02465-B21" or thisInst.id >= "P02466-291" or thisInst.id >= "P02466-B21" or thisInst.id >= "P02467-291" or thisInst.id >=
			"P02467-B21" or thisInst.id >= "P06420-291" or thisInst.id >= "P06420-B21" or thisInst.id >= "P06421-291" or thisInst.id >= "P06421-B21" or thisInst.id >= "P20174-291" or thisInst.id >= "P20174-B21" or thisInst.id >= "P25216-AA1" or
			thisInst.id >= "P20245-291" or thisInst.id >= "P20245-B21" or thisInst.id >= "P20248-291" or thisInst.id >= "P20248-B21" or thisInst.id >= "P20249-291" or thisInst.id >= "P20249-B21" or thisInst.id >= "P23465-291" or thisInst.id >=
			"P23465-B21" or thisInst.id >= "P24840-291" or thisInst.id >= "P24840-B21" or thisInst.id >= "P24841-291" or thisInst.id >= "P24841-B21" or thisInst.id >= "P24842-291" or thisInst.id >= "P24842-B21" or thisInst.id >= "P24844-291" or
			thisInst.id >= "P24844-B21" or thisInst.id >= "P24845-291" or thisInst.id >= "P24845-B21" or thisInst.id >= "P24846-291" or thisInst.id >= "P24846-B21" or thisInst.id >= "P24847-291" or thisInst.id >= "P24847-B21" or thisInst.id >=
			"P24848-291" or thisInst.id >= "P24848-B21" or thisInst.id >= "P24849-291" or thisInst.id >= "P24849-B21" or thisInst.id >= "P24850-291" or thisInst.id >= "P24850-B21" or thisInst.id >= "868703-B21" or thisInst.id >= "868704-B21" or
			thisInst.id >= "875782-B21" or thisInst.id >= "875783-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P19720-B21" or thisInst.id >= "P36135-291" or thisInst.id >= "P36135-B21" or thisInst.id >= "P39380-291" or thisInst.id >=
			"P39380-B21" or thisInst.id >= "P40422-291" or thisInst.id >= "P40422-B21" or thisInst.id >= "P40423-291" or thisInst.id >= "P40423-B21" or thisInst.id >= "P40424-291" or thisInst.id >= "P40424-B21" or thisInst.id >= "P40425-291" or
			thisInst.id >= "P40425-B21" or thisInst.id >= "P40426-291" or thisInst.id >= "P40426-B21" or thisInst.id >= "P40427-291" or thisInst.id >= "P40427-B21" or thisInst.id >= "P40428-291" or thisInst.id >= "P40428-B21") then nSFFHardDrives
			else //SE - For PERT 20151    14-Sep-2020		//SE - For PERT 20287	02-Nov-2020
			if(thisInst.id >= "868709-291" or thisInst.id >= "868709-B21" or thisInst.id >= "P02463-291" or thisInst.id >= "P02463-B21" or thisInst.id >= "P02468-291" or thisInst.id >= "P02468-B21" or thisInst.id >= "P02483-AA1" or thisInst.id >=
			"P02485-AA1" or thisInst.id >= "P20172-291" or thisInst.id >= "P20172-B21" or thisInst.id >= "P20182-291" or thisInst.id >= "P20182-B21" or thisInst.id >= "868705-B21" or thisInst.id >= "868706-B21" or thisInst.id >= "875784-B21" or
			thisInst.id >= "875785-B21" or thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21") then nLFFHardDrives else 30;
		}
		def defaultRailKitOptionTrigger (): string[] = {
		// SFF CTO Models
			if(thisInst.id = "868703-B21" || thisInst.id = "868704-B21" || thisInst.id = "875782-B21" || thisInst.id = "875783-B21" || thisInst.id = "P19720-B21" || thisInst.id = "P19719-B21") then expanderString ("733660-B21", 1)
			// LFF CTO Models
			else if(thisInst.id = "868705-B21" || thisInst.id = "868706-B21" || thisInst.id = "875784-B21" || thisInst.id = "875785-B21" || thisInst.id = "P19717-B21" || thisInst.id = "P19718-B21") then expanderString ("733662-B21", 1) else
			if(thisInst.id = "R1R46A" || thisInst.id = "R1R46B") then expanderString ("720863-B21", 1) + expanderString ("720865-B21", 1);
		}
		def isNotLffModel (): boolean = thisConfig.getProperty("targetEnvironment") = "ezc" or thisConfig.getProperty("targetEnvironment") = "ipcs" or thisInst.id = "868703-B21" or thisInst.id = "868704-B21" or thisInst.id = "R1R46A" or
		thisInst.id = "875782-B21" or thisInst.id = "875783-B21" or thisInst.id = "P19719-B21" or thisInst.id = "P19720-B21";
		def isNotSffModel (): boolean = thisInst.id = "868705-B21" or thisInst.id = "868706-B21" or thisInst.id = "875784-B21" or thisInst.id = "875785-B21";
		subsystem generalRulesSubsystem {
			constraint processorGenerationNoMix {
				message: " Only 1st generation processors x1xx (i.e. 6144) can be selected with 2666 memory options; and vice versa <br>
                     Only 2nd generation processors x2xx (i.e. 6244) can be selected with 2933 memory options; and vice versa.";
				body: dependency (ProliantProcessor [ sProcessorGeneration = "First" ] > 0, ProliantMemoryArray [ sMemorySubType = "PC4-2933Y" ] = 0);
				dependency (ProliantProcessor [ sProcessorGeneration = "Second" ] > 0, ProliantMemoryArray [ sMemorySubType = "PC4-2666V" && (! sDimmType = "NVDIMM") ] = 0);
			}
		}
		
		def templateMsg: string = {
		if thisInst.id >= "P19720-B21" then
		"<p>IMPORTANT NOTE: Templates currently only available for 8SFF model</p>
		 <p>Selecting these templates brings in products like drive cages, controllers and cable kits. Note some templates bring in more products than shown to satisfy rules, products defaults, or allow slotting of included cards.</p>
		 <p>Template contains:
			<li>- Qty1  of P02519-L21 - Intel Xeon-Platinum 8256 (3.8GHz/4-core/105W) FIO Processor Kit for HPE ProLiant DL380 Gen10
 			<li>- Qty1  of P02519-B21 - Intel Xeon-Platinum 8256 (3.8GHz/4-core/105W) Processor Kit for HPE ProLiant DL380 Gen10
			<li>- Qty10 of P00930-B21 - HPE 64GB (1x64GB) Dual Rank x4 DDR4-2933 CAS-21-21-21 Registered Smart Memory Kit
			<li>- Qty1  of 665240-B21 - HPE Ethernet 1Gb 4-port FLR-T I350-T4V2 Adapter
			<li>- Qty2  of 865434-B21 - HPE 800W Flex Slot -48VDC Hot Plug Low Halogen Power Supply Kit
			<li>- Qty2  of Q0H80A     - HPE 48VDC 2.85m Power Cable
			<li>- Qty1  of BD505A     - HPE iLO Advanced 1-server License with 3yr Support on iLO Licensed Features
			<li>- Qty1  of 733660-B21 - HPE 2U Small Form Factor Easy Install Rail Kit
		</p>"
		else
		if thisInst.id >= "868703-B21" then
		"<p>IMPORTANT NOTE: Templates currently only available for 8SFF model</p>
		 <p>Selecting these templates brings in products like drive cages, controllers and cable kits. Note some templates bring in more products than shown to satisfy rules, products defaults, or allow slotting of included cards.</p>
		 <p>Template contains: 
			<li>- Qty1  of P02518-L21 - Intel Xeon-Platinum 8253 (2.2GHz/16-core/125W) FIO Processor Kit for HPE ProLiant DL380 Gen10
 			<li>- Qty1  of P02518-B21 - Intel Xeon-Platinum 8253 (2.2GHz/16-core/125W) Processor Kit for HPE ProLiant DL380 Gen10
			<li>- Qty8  of P00922-B21 - HPE 16GB (1x16GB) Dual Rank x8 DDR4-2933 CAS-21-21-21 Registered Smart Memory Kit
			<li>- Qty2  of 865434-B21 - HPE 800W Flex Slot -48VDC Hot Plug Low Halogen Power Supply Kit
			<li>- Qty2  of Q0H80A     - HPE 48VDC 2.85m Power Cable
			<li>- Qty1  of BD505A     - HPE iLO Advanced 1-server License with 3yr Support on iLO Licensed Features
			<li>- Qty1  of P8B31A     - HPE OneView w/o iLO including 3yr 24x7 Support 1-server FIO LTU
			<li>- Qty1  of 733660-B21 - HPE 2U Small Form Factor Easy Install Rail Kit
		</p>";
		}
		subsystem modelDefaults {
		/* @Author: Paola Fuentes
		 	 * @Source: I/O Layouts
		  	 * @MenuSection: RiserCardsSubsystem
			 * @RuleNumber: 
		 	 * @EffectivityID: 
		 	 * @Description: Default standard riser.
		 	*/
			part addDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaults: "standardDL380G10Riser";, string[] targetEnvs: "sce", "eocs", "ezc", "ipcs";
			}

			//RTR ALM 117602 Default of the standard riser.
			//			part addDefaultStandardRiserInOCA: triggerConsequentialSelectionNoOverride {
			//				string consequentialSelectionFunc: "defaultStandardRiserInOCA";, string[] targetEnvs: "oca";, boolean allowUserToOverride: true;, boolean syncDoNotQuote: true;, part[] agentTiming: finishUpdate;
			//			}
			/* @Author: Paola Fuentes
		 	 * @Source: I/O Layouts
		  	 * @MenuSection:
			 * @RuleNumber: 
		 	 * @EffectivityID: 
		 	 * @Description: PDC preparation to default standard riser.
		 	*/
			part prePDCTrig: prePDCTrigger;
			//			ifEffective AJM_PPM_77100 {
			//				constraint prioritizationList {
			//					message: "Prioritization List for Primary Controller: <br />
			//							* HPE 12Gb SAS Expander Card (This option requires an additional Internal Controller to be selected, except P824i-p Controller) <br />
			//							* HPE Smart Array P816i-a Cntrlr  <br />
			//							* HPE Smart Array P408i-a Cntrlr  <br />
			//							* HPE Smart Array P408i-p Cntrlr  <br />
			//							* HPE Smart Array E208i-a Cntrlr  <br />
			//							* HPE Smart Array E208i-p Cntrlr  <br />
			//							* AHCI Embedded SATA Controller";
			//					body:
			//					//dependency(DL380Gen10[0D1] > 0, sPrimaryControllerPrioritizationList > 0 );
			//					if thisInst.selected(DL380Gen10).filter(x => x.subTypes <= "0D1").count > 0 then sPrimaryControllerPrioritizationList.count > 0;
			//				}
			//			}
			//			otherwise {
			//			/* @Author: Paola Fuentes
			//			 	 * @Source: PPM 71523
			//			  	 * @MenuSection: CTO Models
			//				 * @RuleNumber: 1
			//			 	 * @EffectivityID: PFA_DL380G10
			//			 	 * @Description:Prioritization List for Primary Controller
			//			 	*/
			//				constraint prioritizationList {
			//					message: "Prioritization List for Primary Controller: <br />
			//							* HPE 12Gb SAS Expander Card (This option requires an additional Cntrlr to be selected) <br />
			//							* HPE Smart Array P816i-a Cntrlr  <br />
			//							* HPE Smart Array P408i-a Cntrlr  <br />
			//							* HPE Smart Array P408i-p Cntrlr  <br />
			//							* HPE Smart Array E208i-a Cntrlr  <br />
			//							* HPE Smart Array E208i-p Cntrlr  <br />
			//							* AHCI Embedded SATA Controller";
			//					body:
			//					//dependency(DL380Gen10[0D1] > 0, sPrimaryControllerPrioritizationList > 0 );
			//					if thisInst.selected(DL380Gen10).filter(x => x.subTypes <= "0D1").count > 0 then sPrimaryControllerPrioritizationList.count > 0;
			//				}
			//			}

			/* @Author: Paola Fuentes
		 	 * @Source: 
		  	 * @MenuSection: deviceSubsytem
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: SFF and LFF cannot be mixed.
		 	*/
//SKE ALM 109227, Changed the Constraint excluded NVMe Drives.
			constraint hideHHD {
				message: "SSF and LFF hard drives cannot be mixed";
				body:
				//	dependency (DL380Gen10[bFormFactor="8LFF" || bFormFactor="12LFF"] > 0 && ProliantDriveCage[826687-B1 || 826688-B21 || 826690-B21 || 826691-B21 || 867805-B21] = 0, ProliantHardDrive_HP_SFF = 0);
				dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "12LFF" ] > 0 && ProliantDriveCage [ 826687-B21 || 826688-B21 || 826690-B21 || 826691-B21 || 867805-B21 ] = 0, ProliantHardDrive_HP_SFF_SATA_SSD = 0 &&
				ProliantHardDrive_HP_SFF_SAS_SSD = 0 && ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SATA" || tDriveType = "SATA-SSD" || tDriveType = "SAS-SSD" ] = 0); //ABS_ALM_113175
				dependency (DL380Gen10 [ bFormFactor = "8SFF" || bFormFactor = "24SFF" ] > 0 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] = 0, ProliantHardDrive_HP_LFF = 0);
			}
		}

		//LAW TEST- //LAW NGC_LITE_FILTER
		//		subsystem testNgcLiteIncludedSubsystem {
		//			locationArray testNgcLiteIncludedArray {
		//				fillerClasses: ProliantProcessor,ProliantMemoryArray;
		//				rows: 20;
		//			}
		//			
		//			choice testNgcLiteChoiceSingle1 {
		//				optional: true;
		//				targetClass: EmbededControllerState;
		//				choiceType: single_select;
		//			}
		//			choice testNgcLiteChoiceSingle2 {
		//				optional: true;
		//				targetClass: EmbededControllerState;
		//				choiceType: single_select;
		//			}
		//			choice testNgcLiteChoiceSingle3 {
		//				optional: true;
		//				targetClass: EmbededControllerState;
		//				choiceType: single_select;
		//			}
		//			choice testNgcLiteChoiceMulti {
		//				optional: true;
		//				targetClass: ProliantDriveCage;
		//				choiceType: multi_select;
		//			}
		//		}
		subsystem cascadelakeSubsystem {
			choice flexTrackingSkuServices {
				targetClass: ServiceTrackingSKU;
			}
			choice flexNOServiceguardIntegrationDummy {
				targetClass: NOServiceguardIntegrationDummy;
			}
			choice flexServiceguardIntegrationDummy {
				targetClass: ServiceguardIntegrationDummy;
			}
			choice flexRapidDeploymentStandard {
				targetClass: RapidDeploymentStandardDummy;
			}
			choice flexRapidDeploymentBestShore {
				targetClass: RapidDeploymentBestShoreDummy;
			}
		}
		subsystem processorSubsystem {
		//BEGIN - CDC PPM 76327 Default DL380 within Bulkpacks
			part getdefaultBulkPack: triggerConsequentialSelection {
				string consequentialSelectionFunc: "defaultBulkPack";
			}
			//END - CDC PPM 76327 Default DL380 within Bulkpacks
			constraint ProcessorVsan_remark {
				message: " - The L21 processor kits include a CPU + heatsink.</br>
 							   - The B21 processor kits include a CPU + heatsink + 2 fans.</br>
							 - The 8LFF and 8SFF Model-Xs come with 4 standard fans in the chassis.  When a second processor is added (-B21), this kit already includes the two additional fans that are required to be placed in the chassis.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.selected(ProliantProcessor).count > 0 then false;
				//if thisInst.selected(vSANTrackingSku).count > 0 and thisInst.selected(ProliantProcessor).count > 0 then false;

			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Processors
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: User selection min and max
		 	*/
			constraint Processors_maxmin {
				message: "A processor must be selected";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: restriction (ProliantProcessor >= 1);
			}
			//SE - For ALM 133241  31-Oct-2019
			constraint processor_2nd_generation_memory_compatibility_rule {
				message: "This processor is classified as '2nd generation' of Intel Xeon Scalable processor. </br>
							Only '2nd generation' processors 'x2xx' (i.e. 6244) can be selected with '2933' memory options; and vice versa. </br>
							NOTE: </br>
							- The 2nd digit of processor model number 'x2xx' (i.e. 6244) is used to denote the processor generation (i.e. 2 = 2nd generation). </br>
							- The 4 digits in memory description 'xxxx' (i.e. 2933) is used to denote the memory transfer rate (i.e. 2933 = 2933 MT/s).</br>
							Processor selected: $a{procGen} generation processor, model number: $a{proccModel}";
				body: true;
			}
			//SE - For ALM 133552  17-Nov-2019
			//			constraint processor_2nd_generation_memory_compatibility_rules {
			//					message: "This processor is classified as '2nd generation' of Intel Xeon Scalable processor.</br>
			//							Only '2nd generation' processors 'x2xx' (i.e. 6244) can be selected with '2933' memory options; and vice versa. </br>
			//							NOTE: </br>
			//							- The 2nd digit of processor model number 'x2xx' (i.e. 6244) is used to denote the processor generation (i.e. 2 = 2nd generation). </br>
			//							- The 4 digits in memory description 'xxxx' (i.e. 2933) is used to denote the memory transfer rate (i.e. 2933 = 2933 MT/s).</br>
			//							Processor selected: $a{procGen} generation processor, model number: $a{proccModel}";
			//					body: 
			//					if thisInst.selected(ProliantProcessor).count > 0 and procGen = "2nd" and
			//					 thisInst.selected(ProliantMemoryArray).filter(sMemorySubType = "PC4-2666V").count > 0 then false;
			//				}
			constraint persistent_memory_rule24 {
				message: "Only supported with '2nd generation' processors (i.e. x2xx) and '2933' memory options.";
				body:
				if thisInst.selected(ProliantMemoryArray).filter(subCategory = "PersistentMemoryKit").count > 0 then thisInst.selected(ProliantProcessor).count > 0 and procGen = "2nd" and thisInst.selected(ProliantMemoryArray).filter(sMemorySubType =
				"PC4-2933Y").count > 0;
			}
			constraint rule17warning {
				message: "For DL servers, to enable Core Boosting option with this processor, you will need to install an iLO Advanced or iLO Advanced Premium Security Edition license.</br>
								   For Synergy servers, to enable Core Boosting option with this processor, please review the RBSU guides.  Synergy Computes (servers) comes standard with iLO Advanced.  iLO Advanced Premium Security Edition upgrades are not currently supported with OneView management.  Please refer to OneView for future updates.</br>  
								   Please refer to OneView for future updates.</br>";
				body: dependency (ProliantProcessor [ 879423-B21 || 879423-L21 || 879424-B21 || 879424-L21 ], false); //ALM 131814

			}
			constraint rule1_Accessories {
				message: "The 4LFF Mid-Plane HDD  (826686-B21) CANNOT be ordered with this option.";
				body:
				if thisInst.selected(HeatSinkKit).filter(x => split(x.id, "#").get(0) <= "826706-B21").count > 0 then thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826686-B21").count = 0;
			}
			//PRS Added rules for DL38024sffvsan for PERT-17895 05-Jan-2019
			constraint minProcessorallflashVsan {
				message: "When changing default processors on DL380 24SFF - vSAN All Flash 8, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 18 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 36;
			} //PRS Modified the rule for ALM-134517 30-Jan-2020
			constraint minMemoryallflashVsan {
				message: "When changing default memory on DL380 24SFF - vSAN All Flash 8, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash" then thisInst.selected(ProliantMemoryArray).count >= 12; //PRS Modified the rule as per BU confirmation for ALM: 134517
				//thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 384.0;

			}
			constraint minstorageallflashVsan {
				message: "When changing default storage on DL380 24SFF - vSAN All Flash 8, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 10; //PRS Modified the rule as per BU confirmation for ALM: 134517
				//thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) >= 13600.0;

			}
			constraint minProcessorhybridVsan {
				message: "When changing default processors on DL380 24SFF - vSAN Hybrid 2, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 10 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 20;
			} //PRS Modified the rule for ALM-134517 30-Jan-2020
			constraint minMemoryhybridVsan {
				message: "When changing default memory on DL380 24SFF - vSAN Hybrid 2, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid" then thisInst.selected(ProliantMemoryArray).count >= 1; //PRS Modified the rule as per BU confirmation for ALM: 134517
				//thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 32;

			}
			constraint minstoragehybridVsan {
				message: "When changing default storage on DL380 24SFF - vSAN Hybrid 2, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 3; //PRS Modified the rule as per BU confirmation for ALM: 134517	
				//thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) >= 2880.0;

			}

			//PRS Added rule for PERT-18954 31-Jan-2020

			//DL380 24SFF - vSAN All Flash 4
			constraint minProcessor24sffallflash4 {
				message: "When changing default processors on DL380 24SFF - vSAN All Flash 4, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash4" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 12 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash4" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 24;
			}
			constraint minMemory24sffallflash4 {
				message: "When changing default memory on DL380 24SFF - vSAN All Flash 4, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash4" then thisInst.selected(ProliantMemoryArray).count >= 4;
				//thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 128.0;

			}
			constraint minstorage24sffallflash4 {
				message: "When changing default storage on DL380 24SFF - vSAN All Flash 4, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash4" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 7; //SE - Changed from 5   based on BU request  26-Mar-2020
				//thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) >= 5200.0;

			}
			//DL380 24SFF - vSAN Hybrid 4
			constraint minProcessor24sffhybrid4 {
				message: "When changing default processors on DL380 24SFF - vSAN Hybrid 4, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid4" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 12 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid4" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 24;
			}
			constraint minMemory24sffhybrid4 {
				message: "When changing default memory on DL380 24SFF - vSAN Hybrid 4, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid4" then thisInst.selected(ProliantMemoryArray).count >= 4;
				//thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 128.0;

			}
			constraint minstorage24sffhybrid4 {
				message: "When changing default storage on DL380 24SFF - vSAN Hybrid 4, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid4" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 5;
				//thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) >= 5200.0;

			}
			//DL380 8SFF - vSAN Hybrid 4
			constraint minProcessorvSanhybrid4 {
				message: "When changing default processors on DL380 8SFF - vSAN Hybrid 4, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid4" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 12 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid4" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 24;
			}
			constraint minMemoryvSanhybrid4 {
				message: "When changing default memory on DL380 8SFF - vSAN Hybrid 4, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid4" then thisInst.selected(ProliantMemoryArray).count >= 4;
				//thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 128.0;

			}
			constraint minstoragevSanhybrid4 {
				message: "When changing default storage on DL380 8SFF - vSAN Hybrid 4, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid4" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 5;
				//thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) >= 5200.0;

			}
			constraint minProcessorallflashVsan_8sff {
				message: "When changing default processors on DL380 8SFF - vSAN All Flash 8, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffallflash" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 18 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffallflash" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 36;
			}
			constraint minMemoryallflashVsan_8sff {
				message: "When changing default memory on DL380 8SFF - vSAN All Flash 8, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffallflash" then thisInst.selected(ProliantMemoryArray).count >= 12; //SE - Changed as per BU conformation 06-Feb-2020	sum(dCapacity) >= 384.0;

			}
			constraint minstorageallflashVsan_8sff {
				message: "When changing default storage on DL380 8SFF - vSAN All Flash 8, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffallflash" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 10; //SE - Changed as per BU conformation 06-Feb-2020	.sum(dHardDriveSizeGB) >= 13600.0;

			}
			constraint minProcessorhybridVsan_8sff {
				message: "When changing default processors on DL380 8SFF - vSAN Hybrid 2, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 10 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 20;
			}
			constraint minMemoryhybridVsan_8sff {
				message: "When changing default memory on DL380 8SFF - vSAN Hybrid 2, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid" then thisInst.selected(ProliantMemoryArray).count >= 1; //SE - Changed as per BU conformation 06-Feb-2020	.sum(dCapacity) >= 32;

			}
			constraint minstoragehybridVsan_8sff {
				message: "When changing default storage on DL380 8SFF - vSAN Hybrid 2, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 3; //SE - Changed as per BU conformation 06-Feb-2020	.sum(dHardDriveSizeGB) >= 2880.0;

			}

			// TD Lot9 rules for memory
			constraint lot9_bothProcessorRequired {
				message: "If this processor is selected then both -L21 and -B21 SKUs must be selected.";
				//PRS Modified the text message as per BU request for PERT-18965 22-Jan-2020
				//"Per Lot9/EMEA Eco-design regulations, if selecting this processor then both the -L21 and -B21 SKUs must be selected.";
				body:
				{
					val lot9ProcType = "3104";
					if(lot9Country () and thisInst.selected(ProliantProcessor).filter(x => x.sProcessorType <= lot9ProcType).count > 0) then thisInst.selected(ProliantProcessor).count > 1;
				}
			}
			//PRS added LOT9 memory rules for PERT-18965 14-Jan-2020
			constraint lot9_MemoryNotRequired {
				message: "This option should not be offered in Countries impacted by Lot9/EMEA Eco-design regulations.";
				body: if lot9Country () then thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <= "815097-B21 P00918-B21 P02888-B21").count = 0;
				dependency (region ("EU"), ProliantMemoryArray [ 815097-B21 || P00918-B21 || P02888-B21 ] = 0); //PRS Added for ALM-134447 27-Jan-2020

			}

			//			}otherwise{
			//			constraint Processors_r6 {
			//				message: "This option IS NOT supported with the 4LFF Mid-plane (826686-B21).";
			//				body: dependency (ProliantProcessor [ 826858-B21 || 826858-L21 || 826864-B21 || 826864-L21 || 871616-B21 || 871616-L21 || P02519-L21 || P02519-B21 || P02500-B21 || P02500-L21 ] > 0, ProliantDriveCage [ 826686-B21 ] = 0);
			//			}
			//			}
			constraint minProcessorVsan {
				message: "When changing default processors on the DL380 8SFF -  vSAN All Flash 4 Accelerated Infrastructure Model, the core should be equal to the default processors or higher. Min/Max should always be a quantity of 2.";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "868703-B21" then thisInst.selected(ProliantProcessor).count > 1 && thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 20;
				}
			}
			constraint minProcessorVsanDataWarehouse {
				message: "When changing default processors on the DL380 24SFF - vSAN Hybrid 8 Storage Optimized, Data Warehouse Model, the core should be equal to the default processors or higher. Min/Max should always be a quantity of 2.";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "868704-B21" then thisInst.selected(ProliantProcessor).count > 1 && thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 24;
				}
			}
			constraint Processors_newr2 {
				message: "The High-Performance Heatsink Kit (826706-B21) CANNOT be ordered with this Processor.";
				body: dependency (ProliantProcessor [ P44883-L21 || P44883-B21 ], HeatSinkKit [ 826706-B21 ] = 0);
			}
			constraint Processors_r2 {
				message: "The High-Performance Heatsink Kit (826706-B21) CANNOT be ordered with this Processor.";
				body: dependency (ProliantProcessor [ sProcessorType = "6132" || sProcessorType = "6134" || sProcessorType = "5222" || sProcessorType = "8260Y" || sProcessorType = "6240Y" || sProcessorType = "6240" || sProcessorType = "6242" ||
				sProcessorType = "6244" || sProcessorType = "6248" || sProcessorType = "6252" || sProcessorType = "6254" || sProcessorType = "8256" || sProcessorType = "8260" || sProcessorType = "8268" || sProcessorType = "8270" || sProcessorType =
				"8276" || sProcessorType = "8280" || sProcessorType = "8260M" || sProcessorType = "8276M" || sProcessorType = "8280M" || sProcessorType = "8260L" || sProcessorType = "8276L" || sProcessorType = "8280L" || sProcessorType = "6212U" ||
				sProcessorType = "6210U" || sProcessorType = "5122" || sProcessorType = "6136" || sProcessorType = "6140" || sProcessorType = "6142" || sProcessorType = "6144" || sProcessorType = "6146" || sProcessorType = "6148" || sProcessorType =
				"6150" || sProcessorType = "6152" || sProcessorType = "6154" || sProcessorType = "8160" || sProcessorType = "8164" || sProcessorType = "8168" || sProcessorType = "8158" || sProcessorType = "8170" || sProcessorType = "8176" ||
				sProcessorType = "8180" || sProcessorType = "6134M" || sProcessorType = "8180M" || sProcessorType = "8176M" || sProcessorType = "8170M" || sProcessorType = "8160M" || sProcessorType = "6142M" || sProcessorType = "6140M" ||
				sProcessorType = "6143" || sProcessorType = "6137" || sProcessorType = "8156" || sProcessorType = "8165" || sProcessorType = "6240L" || sProcessorType = "6234" || sProcessorType = "6238" || sProcessorType = "6240M" || sProcessorType =
				"6238M" || sProcessorType = "6238L" || sProcessorType = "6240L" || sProcessorType = "6262V" || sProcessorType = "6252N" || sProcessorType = "6128" || sProcessorType = "8156" || sProcessorType = "4215R" || sProcessorType = "6226R" ||
				sProcessorType = "6230R" || sProcessorType = "6238R" || sProcessorType = "6240R" || sProcessorType = "6242R" || sProcessorType = "6246R" || sProcessorType = "6248R" || sProcessorType = "6258R" || sProcessorType = "6250" ||
				sProcessorType = "6256" || sProcessorType = "6208U" || sProcessorType = "5220R" || sProcessorType = "6246" || sProcessorType = "6250L" || sProcessorType = "6138" ], HeatSinkKit [ 826706-B21 ] = 0);
			}
			constraint minProcessor8sffallflash6 {
				message: "When changing default processors on DL380 8SFF - vSAN All Flash 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffallflash6" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 12 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffallflash6" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 24;
			}
			constraint minMemory8sffallflash6 {
				message: "When changing default memory on DL380 8SFF - vSAN All Flash 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffallflash6" then thisInst.selected(ProliantMemoryArray).count >= 8;
			}
			constraint minstorage8sffallflash6 {
				message: "When changing default storage on DL380 8SFF - vSAN All Flash 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffallflash6" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 8;
			}
			//DL360 24SFF - vSAN All Flash 6
			constraint minProcessor24sffallflash6 {
				message: "When changing default processors on DL360 24SFF - vSAN All Flash 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash6" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 12 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash6" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 24;
			}
			constraint minMemory24sffallflash6 {
				message: "When changing default memory on DL360 24SFF - vSAN All Flash 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash6" then thisInst.selected(ProliantMemoryArray).count >= 8;
			}
			constraint minstorage24sffallflash6 {
				message: "When changing default storage on DL360 24SFF - vSAN All Flash 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffallflash6" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 10;
			}
			constraint minProcessor24sffhybrid6 {
				message: "When changing default processors on DL380 24SFF - vSAN Hybrid 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid6" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 12 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid6" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 24;
			}
			constraint minMemory24sffhybrid6 {
				message: "When changing default memory on DL380 24SFF - vSAN Hybrid 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid6" then thisInst.selected(ProliantMemoryArray).count >= 8;
			}
			constraint minstorage24sffhybrid6 {
				message: "When changing default storage on DL380 24SFF - vSAN Hybrid 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl38024sffhybrid6" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 10;
			}
			constraint minProcessor8sffhybrid8 {
				message: "When changing default processors on DL380 8SFF - vSAN Hybrid 8, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid8" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 16 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid8" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 32;
			}
			constraint minMemory8sffhybrid8 {
				message: "When changing default memory on DL380 8SFF - vSAN Hybrid 8, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid8" then thisInst.selected(ProliantMemoryArray).count >= 12;
			}
			constraint minstorage8sffhybrid8 {
				message: "When changing default storage on DL380 8SFF - vSAN Hybrid 8, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid8" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 10;
			}
			constraint minProcessor8sffhybrid6 {
				message: "When changing default processors on DL380 8SFF - vSAN Hybrid 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid6" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 12 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid6" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 24;
			}
			constraint minMemory8sffhybrid6 {
				message: "When changing default memory on DL380 8SFF - vSAN Hybrid 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid6" then thisInst.selected(ProliantMemoryArray).count >= 8;
			}
			constraint minstorage8sffhybrid6 {
				message: "When changing default storage on DL380 8SFF - vSAN Hybrid 6, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl3808sffhybrid6" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 10;
			}
			constraint lot9_processorrule_notemea {
			//message: "As currently configured, this system does not meet the EU Lot 9 energy efficiency requirements.<br>
			////AB 21-Apr-2020 for PERT ID: 19056		 If this system is intended to be placed into service in the European Union, the customer will be responsible for assuring that it is properly configured to meet the Lot 9 requirements.";
				message: "<b>This system does not meet the EU Lot 9 energy efficiency requirements and cannot be put into service, installed, or supplied in the EU, nor can it be CE marked.</b><br>
						     <b>Increasing the memory by selecting 16GB or higher memory, installing a 2nd 3104 CPU, or upgrading the CPU is required to meet the Lot 9 requirements.</b>";
				body:
				{
					val lot9ProcType = "3104";
					if(! (lot9Country ()) and thisInst.selected(ProliantProcessor).filter(x => x.sProcessorType <= lot9ProcType).count = 1) then false else true;
				}
			}
			constraint lot9_memoryrule_notemea {
			//message: "As currently configured, this system does not meet the EU Lot 9 energy efficiency requirements.<br>
			////AB 21-Apr-2020 for PERT ID: 19056		 If this system is intended to be placed into service in the European Union, the customer will be responsible for assuring that it is properly configured to meet the Lot 9 requirements.";
				message: "<b>This system does not meet the EU Lot 9 energy efficiency requirements and cannot be put into service, installed, or supplied in the EU, nor can it be CE marked.</b><br>
							 <b>Increasing the memory by selecting 16GB or higher memory, installing a 2nd 3104 CPU, or upgrading the CPU is required to meet the Lot 9 requirements.</b>";
				body:
				{
					if(! (lot9Country ()) and thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <= "815097-B21 P00918-B21 P02888-B21").count > 0) then false else true;
				}
			}
			constraint Processors_r6 {
				message: "This option IS NOT supported with the 4LFF Mid-plane (826686-B21).";
				body: dependency (ProliantProcessor [ 871616-B21 || 871616-L21 || P24475-L21 || P24476-B21 || P24471-B21 || P24471-L21 || P24472-B21 || P24472-L21 || P24473-B21 || P24473-L21 || P24474-B21 || P24474-L21 || P24476-L21 || P24475-B21 ||
				P28387-L21 || P28387-B21 ] > 0, ProliantDriveCage [ 826686-B21 ] = 0);
			}
		}
		subsystem memorySubsystem {

		/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Memory
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Memory requires a processor to be selected
		 	*/
			constraint Memory_processor {
				message: "Memory requires Processor selection";
				body:
				if thisInst.selected(ProliantMemoryArray).count > 0 and thisInst.selected(ProliantProcessor).count = 0 then thisInst.selected(ProliantProcessor).count > 0;
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Memory
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Min and max of memories allowed per processor
		 	*/
			constraint Memory_max {
				message: "1 Processor must have at least 1 memory, 2 processors must have at least 2 memories.";
				body: dependency (ProliantProcessor = 1, ProliantMemoryArray >= 1);
				dependency (ProliantProcessor = 1, ProliantMemoryArray <= 12);
				dependency (ProliantProcessor = 2, ProliantMemoryArray >= 2);
				dependency (ProliantProcessor = 2, ProliantMemoryArray <= 24);
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Memory
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Types cannot be mixed
		 	 * @Inherited: ProliantG10ServersCommon.ngc
		 	*/

/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Factory Configuration Settings - Memory Setting
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Blue note
		 	*/
			constraint MemorySetting_bluenote {
				message:
				"This option is to enable HPE Smart Memory Fast fault tolerance which allows server memory to run at the resiliency of Double Device Data Correct (DDDC) with significantly higher performance Available: Fault Tolerance is available on all HPE Gen10 Servers with Intel CPU.";
				body:
				if thisInst.selected(SmartMemory).filter(x => split(x.id, "#").get(0) <= "875293-B21").count > 0 then false;
			}

			/* @Author: Reyna Torres
			 * @RuleNumber: 4 
			 */
			constraint Memory_r4 {
				message: "This option '845264-B21' requires the selection of the Smart Storage Battery (P01366-B21). One Storage Battery can support multiple options.";
				body: if thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <= "845264-B21").count > 0 then thisInst.selected(SAP420iControllerCacheUpgrade).filter(x => split(x.id, "#").get(0) <= "P01366-B21").count > 0;
			}

			//			otherwise {
			//				constraint fanKit_rule2 {
			//					message: "SRR_PPM_75228 rule 2";
			//					body: dependency (ProliantProcessor [ 880168-L21 ], CoolingFan [ 867810-B21 ] = 1);
			//				}
			//				constraint NVMeDrives_rule8 {
			//					message: "";
			//					body: dependency (ProliantProcessor [ 880168-L21 ], ProliantHardDrive_HP_SFF_NVME = 0);
			//				}
			//				constraint NOrearDriveCagesSupported_rule10 {
			//					message: "";
			//					body: dependency (ProliantProcessor [ 880168-L21 ], ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 0);
			//				}
			//				constraint NOGraphicOptions_rule11 {
			//					message: "";
			//					body: dependency (ProliantProcessor [ 880168-L21 ], GraphicCable [ 871828-B21 || 871829-B21 || 871830-B21 || 874212-B21 ] = 0 && GraphicsPciCard = 0);
			//				}
			//			}
			constraint memoryNotMixDimmTypes {
				message: "NVDIMM and LR-DIMM cannot be selected together..";
				body:
				//restriction(ProliantMemoryArray.noMix(sDimmType));
				if selected(ProliantMemoryArray).filter(x => x.id >= "845264-B21").count > 0 then thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, LR-DIMM).count = 0;
			}
			constraint noMixDimmType {
				message: "LRDIMM and RDIMM cannot be selected together..";
				body:
				//restriction(ProliantMemoryArray.noMix(sDimmType));
				if thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, R-DIMM).count > 0 or thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, RDIMM).count > 0 then
				thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, LR-DIMM).count = 0;
			}
			constraint nvdimmMax12 {
				message: "Max Qty=12 NVDIMM can be selected per server.";
				body: restriction (ProliantMemoryArray [ 845264-B21 ] <= 12);
			}
			//PRS Modified the rule for PERT-18911 26-Dec-2019
			constraint memorydl380oemrule_no_9 {
				message: "For Cascade Lake Processors (x2xx-Series) - Trumpkin 845264-B21 16GB NVDIMM 1Rx4 DDR4-2666 Kit is supported only on 5000-Series and above";
				body: dependency (ProliantMemoryArray [ 845264-B21 ] > 0, ProliantProcessor [ sProcessorType = "3204" || sProcessorType = "4208" || sProcessorType = "4210" || sProcessorType = "4214" || sProcessorType = "4215" || sProcessorType =
				"4216" || sProcessorType = "4214Y" || sProcessorType = "3206R" || sProcessorType = "4210R" || sProcessorType = "4214R" || sProcessorType = "4215R" ] = 0);
			}
			constraint memory_ruleno2_firstgen {
				message: "For 1st generation processors (i.e. x1xx),  Max Qty=12 NVDIMM can be selected per server.  (6 NVDIMMs per CPU)";
				body:
				{
					val first_gen = thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorGeneration, "First").count;
					val nvdimm = thisInst.selected(ProliantMemoryArray).filter(q => q.id >= "845264-B21").count;
					if first_gen > 0 and nvdimm > 0 then (nvdimm <= (first_gen * 6));
				}
			}
			constraint nvdimmRequiresRdimm {
				message: "NVDIMM requires RDIMM depends on the number of processor:<br>&emsp;1P: RDIMM: Min 1<br>&emsp;2P: RDIMM: Min 2";
				body:
				if thisInst.selected(ProliantMemoryArray).filter(q => q.id >= "845264-B21").count > 0 and thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, R-DIMM).count +
				thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, RDIMM).count >= 1 else if thisInst.selected(ProliantMemoryArray).filter(q => q.id >= "845264-B21").count > 0 and thisInst.selected(ProliantProcessor).count = 2 then
				thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, R-DIMM).count + thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, RDIMM).count >= 2;
			}
			constraint MemorySettingRule21a {
				message: "If 875293-B21 selected to Support PC4-2666v, only the following Memory SKUs are supported:</br>
							815098-B21 HPE 16GB 1Rx4 PC4-2666V-R Smart Kit – RDIMM Single Rank</br>
							815100-B21 HPE 32GB 2Rx4 PC4-2666V-R Smart Kit – RDIMM – Dual Rank</br>
							815101-B21 HPE 64GB 4Rx4 PC4-2666V-L Smart Kit - LRDIMM – Quad Rank</br>
							815102-B21 HPE 128GB 8Rx4 PC4-2666V-L Smart Kit - Octal Rank";
				body: dependency (SmartMemory [ 875293-B21 ] > 0 && ProliantMemoryArray [ sMemorySubType = "PC4-2666V" ] > 0, ProliantMemoryArray [ ! (815098-B21 || 815100-B21 || 815101-B21 || 815102-B21) ] = 0);
			}
			constraint MemorySettingRule21b {
				message: "For 1P configurations, minimum requirements must be selected:</br>
							  Single Rank DIMM - Min = 2, Max = 12.  Odd numbers of Single Rank DIMMs is not allowed</br>
								Dual Rank DIMM - Min = 1 Max = 12</br>
								Quad Rank DIMM - Min = 1 Max = 12</br>
								Octal Rank DIMM - Min = 1 Max = 12</br>";
				body:
				if thisInst.selected(SmartMemory).filter(x => split(x.id, "#").get(0) = "875293-B21").count > 0 and thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorGeneration, "First").count = 1 then
				((thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "815098-B21").count >= 2 and thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "815098-B21").count <= 12) or
				(thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <= "815100-B21 815101-B21 815102-B21").count >= 1 and thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <=
				"815100-B21 815101-B21 815102-B21").count <= 12)) and thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "815098-B21").pairs;
			}
			constraint MemorySettingRule21c {
				message: "For 2P configurations, minimum requirements must be selected:</br>
								Single Rank DIMM - Min = 4, Max = 24. Odd numbers of Single Rank DIMMs is not allowed</br>
								Dual Rank DIMM-Min =2 Max = 24</br>
								Quad Rank DIMM - Min = 2 Max = 24</br>
								Octal Rank DIMM-Min = 2 Max = 24.";
				body:
				if thisInst.selected(SmartMemory).filter(x => split(x.id, "#").get(0) = "875293-B21").count > 0 and thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorGeneration, "First").count = 2 then
				((thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "815098-B21").count >= 4 and thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "815098-B21").count <= 24) or
				(thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <= "815100-B21 815101-B21 815102-B21").count >= 2)) and thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "815098-B21").pairs;
			}

			//PRS Removed the unwanted constraint
			constraint memorySettings_minxMax {
				message: "If 875293-B21 selected, only the following memory SKUs are supported: <br />
					  815098-B21	HPE 16GB 1Rx4 PC4-2666V-R Kit – RDIMM Single Rank <br />
					  815100-B21	HPE 32GB 2Rx4 PC4-2666V-R Kit – RDIMM – Dual Rank <br />
					  815101-B21	HPE 64GB 4Rx4 PC4-2666V-L Kit - LRDIMM – Quad Rank <br />
					  815102-B21	HPE 128GB 8Rx4 PC4-2666V-L Smart Kit -  Octal Rank";
				body: true;
			}
			constraint for1PConfigurationMemorySetting {
				message: "For 1P configurations, minimum requirements must be selected: <br />
						  Single Rank DIMM - Min = 2 <br />
						  Dual Rank DIMM - Min = 1 <br />
						  Quad Rank DIMM - Min = 1 <br />
						  Octal Rank DIMM - Min = 1";
				body: true;
			}
			constraint for2PConfigurationMemorySetting {
				message: "For 2P configurations, minimum requirements must be selected: <br />
						  Single Rank DIMM - Min = 4 <br />
						  Dual Rank DIMM - Min = 2 <br />
						  Quad Rank DIMM - Min = 2 <br />
						  Octal Rank DIMM - Min = 2";
				body: true;
			}

			//PRS Modified the rule for PERT-18911 26-Dec-2019
			constraint memoryAccesories_r1 {
				message: "This option is a Requirement (must be ordered) if the configuration includes BOTH the 4LFF MID-plane HDD kit and a processor(s) that is 126W or higher.
                         (IMPORTANT!  If the Memory DIMM QTY=24, then this rule IS NOT Applicable.)
						  Note: The above statement (combination) is the only time in which the DIMM Blank kit MUST be ordered. This is due to thermal thresholds being maintained.
						  This Dimm Blank kit can also be ordered with any other configuration, however, that is totally optional and not required.";
				body: dependency (ProliantDriveCage [ 826686-B21 ] && ProliantProcessor [ iNumWattage >= 126 ] && ProliantMemoryArray < 24, MemoryBlankKit [ P07818-B21 ] = 1);
			}
			constraint memoryAccesories_r3 {
				message: "This option P07818-B21 CAN NOT be ordered if the Memory (DIMM) Qty=24";
				//PRS Modified the rule for PERT-18911 26-Dec-2019
				//"This option CAN NOT be ordered in the Memory (DIMM) Qty=24";
				body: dependency (ProliantMemoryArray = 24, MemoryBlankKit [ P07818-B21 ] = 0);
			}
			constraint onlyForSffModel_rule9 {
				message: "";
				body: dependency (DL380Gen10 [ 868704-B21 || 868705-B21 || 868706-B21 || 875785-B21 || 875783-B21 || 875784-B21 || P19719-B21 || P19717-B21 || P19718-B21 ], ProliantProcessor [ 880168-L21 ] = 0);
			}
			constraint minMemoryVsan {
				message: "When changing default memory on the DL380 8SFF -  vSAN All Flash 4 Accelerated Infrastructure, the total should be equal as the default or higher (128GB or higher)";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "868703-B21" then thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 128.0;
				}
			}
			constraint minMemoryrVsanDataWarehouse {
				message: "When changing default memory on the DL380 24SFF - vSAN Hybrid 8 Storage Optimized, Data Warehouse Model, the total should be equal as the default or higher (384GB or higher";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "868704-B21" then thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 384.0;
				}
			}
			//PRS Added rule for PERT-18954 01-Feb-2020
			constraint minProcessorVsanDataWarehouse {
				message: "When changing default processors on DL380 24SFF - vSAN Hybrid 8 Storage Optimized, Data Warehouse Model, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl380DataWare" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 12 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl380DataWare" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 24;
			}
			constraint minProcessorVsanAccelInfra {
				message: "When changing default processors on DL380 8SFF -  vSAN All Flash 4 Accelerated Infrastructure Model, the total should be equal as the default or higher";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl380AccelInfra" && thisInst.selected(ProliantProcessor).count = 1 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 10 else if
				thisInst.selected(vSANTrackingSku).count > 0 && thisInst.sVsanId = "dl380AccelInfra" && thisInst.selected(ProliantProcessor).count = 2 then thisInst.selected(ProliantProcessor).sum(iNumProcessorCores) >= 20;
			}
			constraint minMemoryrVsanDataWarehouse1 {
				message: "When changing default memory on the DL380 24SFF - vSAN Hybrid 8 Storage Optimized, Data Warehouse Model, the total should be equal as the default or higher (384GB or higher";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "P19719-B21" && thisInst.sVsanId = "dl380DataWare" then thisInst.selected(ProliantMemoryArray).count >= 12; //PRS Modified the rule as per BU confirmation for PERT-18954 06-Feb-2020	
					//thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 384.0;

				}
			}
			constraint minMemoryVsan1 {
				message: "When changing default memory on the DL380 8SFF -  vSAN All Flash 4 Accelerated Infrastructure Model, the total should be equal as the default or higher (128GB or higher)";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "P19720-B21" && thisInst.sVsanId = "dl380AccelInfra" then thisInst.selected(ProliantMemoryArray).count >= 8; //PRS Modified the rule as per BU confirmation for PERT-18954 06-Feb-2020
					//thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 128.0;

				}
			}
			constraint fanKit_rule7 {
				message: "This option requires the High Performance Fan Kit (867810-B21) to be selected";
				body: dependency (DL380Gen10 [ bFormFactor = "24SFF" || bFormFactor = "12LFF" ] = 0 and ProliantProcessor [ 880168-L21 || P24475-L21 || P24476-L21 || P28387-L21 ], CoolingFan [ 867810-B21 ] = 1);
			}
			constraint NOrearDriveCagesSupported_rule10 {
				message: "";
				body: dependency (ProliantProcessor [ 880168-L21 || P24475-L21 || P24476-L21 || P28387-L21 ], ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 0);
			}
			constraint NOGraphicOptions_rule11 {
				message: "";
				body: dependency (ProliantProcessor [ 880168-L21 || P24475-L21 || P24476-L21 || P28387-L21 ], GraphicCable [ 871828-B21 || 871829-B21 || 871830-B21 || 874212-B21 ] = 0 && GraphicsPciCard = 0);
			}
			constraint memory_ruleno2_secondgen {
				message: "For 2nd generation processors (i.e. x2xx), Max Qty=6 NVDIMM can be selected per server.  (3 NVDIMMs per CPU)";
				body:
				{
					val second_gen = thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorGeneration, "Second").count;
					val nvdimm = thisInst.selected(ProliantMemoryArray).filter(q => q.id >= "845264-B21").count;
					if second_gen > 0 and nvdimm > 0 then (nvdimm <= (second_gen * 3));
				}
			}
			constraint MemorySettingRule22a {
				message: "If 875293-B21 selected to support PC4-2933Y, only the following Memory SKUs are supported: </br>
						  P00920-B21 HPE 16GB 1Rx4 PC4-2933Y-R Smart Kit - RDIMM – Single Rank </br>
						  P00924-B21 HPE 32GB 2Rx4 PC4-2933Y-R Smart Kit -  RDIMM – Dual Rank </br>
						  P00926-B21 HPE 64GB 4Rx4 PC4-2933Y-L Smart Kit - LRDIMM – Quad Rank </br>
						  P00928-B21 HPE 128GB 8Rx4 PC4-2933Y-L 3DS Smart Kit - LRDIMM – Octal Rank </br>
						  P00930-B21 HPE 64GB 2Rx4 PC4-2933Y-R Smart Kit -  RDIMM – Dual Rank </br>
						  P11040-B21 HPE 128GB 4Rx4 PC4-2933Y-L Smart Kit -  LRDIMM – Quad Rank</br>
						  P38446-B21 HPE 32GB 1Rx4 PC4-2933Y-R Smart Kit -  RDIMM – Single Rank";
				body: dependency (SmartMemory [ 875293-B21 ] > 0 && ProliantMemoryArray [ sMemorySubType = "PC4-2933Y" ] > 0, ProliantMemoryArray [ ! (P00920-B21 || P00924-B21 || P00926-B21 || P00928-B21 || P00930-B21 || P11040-B21 || P38446-B21) ] =
				0);
			}
			constraint MemorySettingRule22b {
				message: "For 1P configurations, minimum requirements must be selected: </br>
						  Single Rank DIMM – Min = 1 Max = 12. </br>
						  Dual Rank DIMM – Min = 1 Max = 12 </br>
						  Quad Rank DIMM – Min = 1 Max = 12 </br>
						  Octal Rank DIMM – Min = 1 Max = 12";
				body: if thisInst.selected(SmartMemory).filter(x => split(x.id, "#").get(0) = "875293-B21").count > 0 and thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorGeneration, "Second").count = 1 then
				thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "P00920-B21" || split(x.id, "#").get(0) = "P00924-B21" || split(x.id, "#").get(0) = "P00926-B21" || split(x.id, "#").get(0) = "P00928-B21" || split(x.id,
				"#").get(0) = "P00930-B21" || split(x.id, "#").get(0) = "P11040-B21" || split(x.id, "#").get(0) = "P38446-B21").count >= 1;
			}
			constraint MemorySettingRule22c {
				message: "For 2P configurations, minimum requirements must be selected: </br>
						  Single Rank DIMM – Min = 2. </br>
						  Dual Rank DIMM - Min =2 Max = 24 </br>
						  Quad Rank DIMM – Min = 2 Max = 24 </br>
						  Octal Rank DIMM - Min = 2 Max = 24";
				body: if thisInst.selected(SmartMemory).filter(x => split(x.id, "#").get(0) = "875293-B21").count > 0 and thisInst.selected(ProliantProcessor).filterByAttribute(sProcessorGeneration, "Second").count = 2 then
				(thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "P00920-B21" || split(x.id, "#").get(0) = "P38446-B21").count >= 2 or thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) =
				"P00924-B21" || split(x.id, "#").get(0) = "P00930-B21").count >= 2 or thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "P00926-B21" || split(x.id, "#").get(0) = "P11040-B21").count >= 2 or
				thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) = "P00928-B21").count >= 2);
			}
		}
		//PRS Removed the locarray for PERT-20267 16-Nov-2020
		subsystem ConvergedInfrastructureManagementSoftwareSubsystem {
			locationArray OneViewManagementSoftwareLocationArray {
				fillerClasses: OneViewManagementSoftware;
				rows: 0;
			}
		}
		subsystem deviceSubsystem {
		/*locationArray hardDriveBays_UFF {
				rows: 2;
				fillerClasses:ProliantHardDrive_HP_uFF;
			}*/
//			//MS for ALM : 132236
		//			part addDefaultsBatteryTrigger: triggerConsequentialSelection{  //triggerConsequentialSelectionNoRestore {
		//				string[] consequentialSelectionFunc: "defaultBatteryPseries";
		//			}
		/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: CTO Models
			 * @RuleNumber: 2
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Default controller P408i-a as SAS/SATA Primary Controller.
		 	*/

//		 	ifEffective AB_PERT_19085
		//		 	{
		//		 		part getDefaultController2: triggerConsequentialSelection {
		//				string consequentialSelectionFunc: "defCTOModel_r2";
		//		 		}}
		//		 	otherwise{
		//AB 22-Sep-2020 for make it as older version removed the effectivity AB_PERT_19085	 	
		//			part getDefaultController2: triggerConsequentialSelectionNoRestore {
		//				string consequentialSelectionFunc: "defCTOModel_r2";
		//				
		//				}
			part getDefaultController2: triggerInternalDefaults {
				string modelDefaultsFunc: "defCTOModel_r2";
			}
			part getDefaultControllerOCCr2: triggerConsequentialSelectionNoRestore {
				string consequentialSelectionFunc: "defCTOModelOCC_r2";
			}
			//}
			//			part getDefaultController2_1: triggerConsequentialSelectionNoRestore {
			//				string consequentialSelectionFunc: "defCTOModel_r2_1";
			//			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: CTO Models
			 * @RuleNumber: 3
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Default controller P408i-a SAS/SATA controller  and SAS Expander as primary combination.
		 	*/
//		 	ifEffective AB_PERT_19085
			//		 	{}
			//		 	otherwise{
			part getDefaultController3: triggerConsequentialSelectionNoRestore {
				string consequentialSelectionFunc: "defCTOModel_r3";
			}
			//}}
			//Commented by enhacement ALM 121394
			//			part getDefaultController3_1: triggerConsequentialSelectionNoRestore {
			//				string consequentialSelectionFunc: "defCTOModel_r3_1";
			//			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: CTO Models
			 * @RuleNumber: 4
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Default controller P816i-a  as SAS/SATA Primary controller.
		 	*/
			part getDefaultController4: triggerConsequentialSelectionNoRestore {
				string consequentialSelectionFunc: "defCTOModel_r4";
			}

			//AB 07-Sep-2021 for DRP fix and PERT ID: 24641
			part setdefaultBatteryPseriesOCA: triggerConsequentialSelection {
				string consequentialSelectionFunc: "defaultBatteryPseriesOCA";, string[] ngcContainerSelections: "deviceSubsystem.SmartStorageBatteryLocArray";
			}
			//AB 07-Sep-2021 for DRP fix and PERT ID: 24641
			//SE - Removed for ALM 143313		25-Oct-2021			
			//			part setdefaultBatteryPseriesOCC: triggerConsequentialSelection {
			//				string consequentialSelectionFunc: "defaultBatteryPseriesOCC";,
			//				string[] ngcContainerSelections: "deviceSubsystem.SmartStorageBatteryLocArray";	
			//			}
			locationArray Boot_Drives_MinMax {
				rows: 2;
				fillerClasses: ProliantHardDrive_HP_SFF_SATA_SSD;
			}

			/*dependency (ProliantHardDrive_HP_SFF_SATA_SSD [ P18432-B21 ] > 0, ProliantHardDrive_HP_SFF_SATA_SSD [ P09712-B21 || P05976-B21 ] = 0); 
				dependency (ProliantHardDrive_HP_SFF_SATA_SSD [ P09712-B21 ] > 0, ProliantHardDrive_HP_SFF_SATA_SSD [ P18432-B21 || P05976-B21 ] = 0);
				dependency (ProliantHardDrive_HP_SFF_SATA_SSD [ P05976-B21 ] > 0, ProliantHardDrive_HP_SFF_SATA_SSD [ P18432-B21 || P09712-B21 ] = 0);*/
//restriction (ProliantHardDrive_HP_SFF_SATA_SSD.noMix);
			// if(thisInst.realBasedummyId = "P19718-B21_HSX") then 
			//thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) = "P18432-B21" || split(x.id, "#").get(0) = "P09712-B21" || split(x.id, "#").get(0)= "P05976-B21").noMix;


			/*constraint hsx_P19718-B21_HS {
				message: "Min 1 / max 2 P19917-B21 or P21135-B21 or P37017-B21 or P18438-B21 or P05994-B21 or  P21517-B21 required";
				enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
				body: /*if(thisInst.realBasedummyId = "P19718-B21_HSX") then 
				thisInst.selected(ProliantHardDrive_HP_SFF_SAS_SSD).filter(x => split(x.id, "#").get(0) = "P19917-B21" || split(x.id, "#").get(0) = "P21135-B21" || split(x.id, "#").get(0)= "P37017-B21")	+ 	
				thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) = "P18438-B21" || split(x.id, "#").get(0) = "P05994-B21" || split(x.id, "#").get(0)= "P21517-B21").count > 1);*/
/*{
				val sasssd =  thisInst.selected(ProliantHardDrive_HP_SFF_SAS_SSD).filter(x => split(x.id, "#").get(0) <= "P19919-B21 P19917-B21 P21135-B21 P37017-B21").count;
				val satassd = thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) <= "P18438-B21 P05994-B21 P21517-B21").count;
				if(thisInst.realBasedummyId = "P19718-B21_HSX") then (sasssd + satassd) >= 1 and (sasssd + satassd) <= 2;
			
			}
			}*/
			constraint hsx_P19718-B21_HS_FS_Display_Note {
				message: "Must select quantity 2 3.2TB SAS Mixed Use SSD or 
				quantity 2 3.84TB Value SAS Mixed Use SSD or 
				quantity 1 6.4TB SAS Mixed Use SSD or 
				quantity 2 3.84TB SATA Mixed Use SSDs. 
				Drive types cannot be mixed.";
				enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
				body: false;
			}
			constraint HS_and_FS_Metadata_drives_DisplayNote {
				message: "Must select quantity 2 3.2TB SAS Mixed Use SSD or quantity 2 3.84TB Value SAS Mixed Use SSD or 
				quantity 1 6.4TB SAS Mixed Use SSD or quantity 2 3.84TB SATA Mixed Use SSDs. 
				Drive types cannot be mixed.";
				enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
				body: false;
			}
			ifEffective KS_PERT_24882 {
				constraint Boot_Drives {
					message: "Minimum and Maximum 2 quantities of this option must be selected.";
					enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
					body: /*if(thisInst.realBasedummyId = "P19718-B21_HSX") then 
				thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) <= "P18432-B21 || P09712-B21 || P05976-B21").count = 2;*/
					{
						val HDD = thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) <= "P18432-B21 || P09712-B21 || P05976-B21 || P47323-B21").count;
						if(thisInst.realBasedummyId = "P19718-B21_HSX") then (HDD) = 2;
					}
				}
				constraint Boot_Drives_NoMix {
					message: "No Mixing Allowed.";
					enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
					body:
					{
						val HDD = thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) <= "P18432-B21 P09712-B21 P09712-B21 P47323-B21");
						if DL380G10HSX.realBasedummyId = "P19718-B21_HSX" then for(HDD) y => (y.id = HDD.get(0).id);
					}
				}
				constraint HS_and_FS_Metadata_drives_noMix {
					message: "No Mixing Allowed.";
					enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
					body: /*{
				val HDD = thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id,"#").get(0) <= "P18438-B21 P05994-B21 P21517-B21")
				+ thisInst.selected(ProliantHardDrive_HP_SFF_SAS_SSD).filter(y => split(y.id,"#").get(0) <= "P19917-B21 P21135-B21 P37017-B21 P19919-B21") ;
				if DL380G10HSX.realBasedummyId = "P19718-B21_HSX" then for (HDD) z=> (z.id = HDD.get(0).id); 
				
				} */
					if(thisInst.realBasedummyId = "P19718-B21_HSX") then (thisInst.selected(ProliantHardDrive_HP_SFF_SAS_SSD).filter(x => split(x.id, "#").get(0) = "P19917-B21" || split(x.id, "#").get(0) = "P21135-B21" || split(x.id, "#").get(0) =
					"P37017-B21" || split(x.id, "#").get(0) = "P19919-B21" || split(x.id, "#").get(0) = "P49052-B21" || split(x.id, "#").get(0) = "P49056-B21") + thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) =
					"P18438-B21" || split(x.id, "#").get(0) = "P05994-B21" || split(x.id, "#").get(0) = "P21517-B21")).noMix;
					//selected(ProliantHardDrive).filter(ProliantHardDrive_HP_SFF_SAS_SSD || ProliantHardDrive_HP_SFF_SATA_SSD).noMix;

				}
			}
			otherwise {
				constraint Boot_Drives {
					message: "Minimum and Maximum 2 quantities of this option must be selected.";
					enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
					body: /*if(thisInst.realBasedummyId = "P19718-B21_HSX") then 
				thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) <= "P18432-B21 || P09712-B21 || P05976-B21").count = 2;*/
					{
						val HDD = thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) <= "P18432-B21 || P09712-B21 || P05976-B21").count;
						if(thisInst.realBasedummyId = "P19718-B21_HSX") then (HDD) = 2;
					}
				}
				constraint Boot_Drives_NoMix {
					message: "No Mixing Allowed.";
					enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
					body:
					{
						val HDD = thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) <= "P18432-B21 P09712-B21 P09712-B21");
						if DL380G10HSX.realBasedummyId = "P19718-B21_HSX" then for(HDD) y => (y.id = HDD.get(0).id);
					}
				}
			}
			ifEffective SP_25086_HSX {
				constraint hsx_P19718-B21_HS_FS {
				message: "Min 2 and Max 2 qty of HS and FS Metadata drives required.";
				enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
				body: {
						val sasssd1 = thisInst.selected(ProliantHardDrive_HP_SFF_SAS_SSD).filter(x => split(x.id, "#").get(0) <= "P19917-B21 P37017-B21").count;
						val satassd = thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) <= "P18438-B21 P05994-B21 P21517-B21").count;
						if(thisInst.realBasedummyId = "P19718-B21_HSX") then (ReqOneSasSsd) = 1 or (sasssd1  + satassd) = 2;
					}
				}
			} otherwise {
				constraint hsx_P19718-B21_HS_FS {
				message: "Min 1 and Max 2 qty of HS and FS Metadata drives required. <br>
					If P19919-B21 is selected then QTY=1 required else
					P19917-B21 P21135-B21 P37017-B21 P18438-B21 P05994-B21 P21517-B21 is selected then QTY=2 required";
				enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
				body: {
						val sasssd2 = thisInst.selected(ProliantHardDrive_HP_SFF_SAS).filter(x => split(x.id, "#").get(0) <= " P49056-B21").count;
						val sasssd = thisInst.selected(ProliantHardDrive_HP_SFF_SAS_SSD).filter(x => split(x.id, "#").get(0) <= "P19919-B21").count;
						val ReqOneSasSsd = sasssd2 + sasssd;
						val sasssd1 = thisInst.selected(ProliantHardDrive_HP_SFF_SAS_SSD).filter(x => split(x.id, "#").get(0) <= "P19917-B21 P21135-B21 P37017-B21").count;
						val sasssd3 = thisInst.selected(ProliantHardDrive_HP_SFF_SAS).filter(x => split(x.id, "#").get(0) <= "P49052-B21").count;
						val satassd = thisInst.selected(ProliantHardDrive_HP_SFF_SATA_SSD).filter(x => split(x.id, "#").get(0) <= "P18438-B21 P05994-B21 P21517-B21").count;
						if(thisInst.realBasedummyId = "P19718-B21_HSX") then (ReqOneSasSsd) = 1 or (sasssd1  + satassd) = 2;
					}
				}
			}
			constraint hsx_P19718-B21_DS {
				message: "Min 12 819201-B21 or 857644-B21 or 881779-B21 or P09153-B21 or P37664-B21 or P23863-B21 required";
				enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
				body: if(thisInst.realBasedummyId = "P19718-B21_HSX") then thisInst.selected(ProliantHardDrive_HP_LFF).filter(x => split(x.id, "#").get(0) = "819201-B21" || split(x.id, "#").get(0) = "857644-B21" || split(x.id, "#").get(0) =
				"881779-B21" || split(x.id, "#").get(0) = "P09153-B21" || split(x.id, "#").get(0) = "P23863-B21" || split(x.id, "#").get(0) = "P37664-B21").count > 11;
			}
			//Commented by enhacement ALM 121394
			//			part getDefaultController4_1: triggerConsequentialSelectionNoRestore {
			//				string consequentialSelectionFunc: "defCTOModel_r4_1";
			//			}
			/* @Author: Reyna Torres
			 * @Source: Enhacement ALM 121394
			 * @Section: Controllers Rule 4
			 */
/*part addSasController_r4: triggerConsequentialSelectionNoRestore {
				string[] consequentialSelectionFunc: "sasController_r4";
			}*/
/*part defaultCtrlOCC: triggerConsequentialSelection {
				string consequentialSelectionFunc: "defSelectCtrOCC";, string[] targetEnvs: "ipcs", "ezc";
			}*/

/*constraint Rule1uFF {
				message:"Requires the selection of at least one of the following Kits:<br>
                         * Premium 2SFF Drive Kit (826687-B21)<br>
                         * Premium 2SFF Drive Riser Kit (826688-B21)<br>";
				body:
			if thisInst.selected(ProliantHardDrive_HP_uFF).count>=1 && thisInst.selected(826687-B21).count = 0 && thisInst.selected(826688-B21).count =0 then false;
			
			}*/
/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: M.2 - PCIe M.2 Adapter
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Maximums and minimums of m.2 adapters
		 	*/
//			constraint M2PCIeAdapters_maxmin {
			//				message: "Maximum PCIe M.2 Adapter is 1";
			//				body: restriction (SSDEnablmtKit [ 777894-B21 || 788028-B21 || 835563-B21 || 835565-B21 ] <= 1);
			//				// limit by drivecage rules for UFF drives
			//				restriction (ProliantHardDrive_HP_uFF [ subCategory = 'M2Enablement' ] <= 2);
			//			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: M.2 - PCIe M.2 Adapter
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: PCIe Adapters should not mix with Unversal Media Bay and Optical Devices..
		 	*/

// SKE ALM 108917, No need to display this warning message other than 8SFF Model.Added Drive Cage to constraint, it supports only 8SFF.
			//			constraint M2PCIeAdapters_r1 {
			//				message: "Warning!!!  If this PCIe M.2 Adapter is selected along with the Universal Media Bay (826708-B21), NO Optical Devices ";
			//				body:
			//				//					if  thisConfig.getInstancesOfModel("SSDEnablmtKit").count > 0
			//				//					then false;
			//				if thisInst.selected("SSDEnablmtKit").filter(x => split(x.id,"#").get(0) >= "878783-B21").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) >= "826708-B21").count > 0 then false;
			//			}
			//			constraint M2PCIeAdapters_r1_sce {
			//				message: "Warning!!!  If this PCIe M.2 Adapter is selected along with the Universal Media Bay (826708-B21), NO Optical Devices ";
			//				body:
			//				//					if  thisConfig.getInstancesOfModel("SSDEnablmtKit").count > 0 then false;
			//				if thisConfig.getInstancesOfModel("SSDEnablmtKit").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826708-B21").count > 0 then false;
			//			}

			/* @Author: Yara Yvette Estrada
		 	 * @Source: ALM 108756
		 	 * @Date: 30/08/2017
		  	 * @MenuSection: M.2 - PCIe M.2 Adapter
			 * @RuleNumber: 2
		 	 * @Description: The selection of this option requires a Min=1 SATA M.2 SSD also be selected
		 	 * @Change: PFA ALM 108492 Universal kit and Stardard riser supports M.2 SSD / RTR ALM 115703
		 	 * @Change: JSB ALM 115559 Universal kit OR Stardard riser supports M.2 SSD / RTR ALM 115703 - removing the or in dependency since is breaking the Note:  If only ONE of the Conditions is met, the Max Qty=2.  If both Conditions are met, the Max Qty=4.	
		 	 */
//			constraint SelectSATAM2SSD {
			//				message: "(878783-B21) Requires a SATA M.2 SSD to be selected.  (Min=1 of the SATA M.2 SSD)";
			//				body:
			//				//dependency(DL380Gen10[0D1] && SSDEnablmtKit[878783-B21] = 0 && !StandardProliantPciRiser, Apollo4500XL450SSDDrive = 0);
			//				//dependency (DL380Gen10 [ 0D1 ] && SSDEnablmtKit [ 878783-B21 ] = 1 && !StandardProliantPciRiser, Apollo4500XL450SSDDrive <= 2);
			//				if thisInst.selected(SSDEnablmtKit).filter(x => split(x.id, "#").get(0) >= "878783-B21").count >= 1 then thisInst.selected(Apollo4500XL450SSDDrive).count > 0;
			//			}
			//			constraint M2PCIeAdapters_r2 {
			//				message: "(878783-B21) Requires a SATA M.2 SSD to be selected.  (Min=1 of the SATA M.2 SSD)";
			//				body:
			//					if thisInst.selected(SSDEnablmtKit).filter(x => split(x.id,"#").get(0) >= "878783-B21").count >= 1 &&
			//						thisInst.selected(Apollo4500XL450SSDDrive).count <= 0
			//					then false;
			//			}

			//			/* @Author: Paola Fuentes
			//		 	 * @Source: PPM 71523
			//		  	 * @MenuSection: M.2 - PCIe M.2 Adapter
			//			 * @RuleNumber: Remark_1
			//		 	 * @EffectivityID: PFA_DL380G10
			//		 	 * @Description: Only one can be configured in this server SATA M.2 Kit or Optical Device.
			//		 	 * @Change: PFA ALM 108492 the Universal M.2 Kit and the optical drive share the same household to be connected.
			//		 	 */
			//			constraint M2PCIeAdapters_remark {
			//				message: "Only ONE of the following options can be configured into the server: * SATA M.2 Kit  or  Optical Device.";
			//				body: dependency (SSDEnablmtKit [ 878783-B21 ] > 0, ProliantInternalOpticalDrive = 0);
			//			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: M.2 - SDD Drive
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Maximums and minimums for sdd drives
		 	*/
//RTR ALM 122689 - Maxmin Qty for selection of M2 SSD drives
			//PRS Modified the rule for PERT-18911 18-Jan-2020
			def maxM2SDDDrives: int = {
				val stdRiser = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "standardDL380G10Riser" || split(x.id, "#").get(0) <= "826701-B21").count;
				val m2UniversalKit = thisInst.selected(SSDEnablmtKit).filter(x => split(x.id, "#").get(0) <= "878783-B21").count;
				val nSDDSlots = stdRiser + m2UniversalKit;
				nSDDSlots;
			}

			//RTR 122689 - Count of M2 SSD drive
			def nM2SDDDrives: int = {
				thisInst.selected(Apollo4500XL450SSDDrive).count;
			}
			//			constraint MSDDDrive_maxmin {
			//				message: "Reach maximum of M.2 SSD allowed, if you want to order more than 2 M.2SSD, the Standard Riser and HPE Universal SATA HH M.2 Kit (878783-B21) must be selected.";
			//				body: //dependency (DL380Gen10 [ 0D1 ] && SSDEnablmtKit [ 878783-B21 ] = 1 && ! StandardProliantPciRiser && Apollo4500XL450SSDDrive > 2, Apollo4500XL450SSDDrive = 0);
			//				//				dependency (DL380Gen10 [ 0D1 ] && StandardProliantPciRiser >= 1 && ! SSDEnablmtKit [ 878783-B21 ], Apollo4500XL450SSDDrive <= 2);
			//				//				dependency (DL380Gen10 [ 0D1 ] && StandardProliantPciRiser >= 1 && ! SSDEnablmtKit [ 878783-B21 ] && Apollo4500XL450SSDDrive > 2, Apollo4500XL450SSDDrive = 0);
			//				//				dependency (DL380Gen10 [ 0D1 ] && StandardProliantPciRiser >= 1 && SSDEnablmtKit [ 878783-B21 ] >= 1, Apollo4500XL450SSDDrive <= 4);
			//				if standRiserPlusM2Kit () = 0 then thisInst.selected(Apollo4500XL450SSDDrive).count = 0 else if standRiserPlusM2Kit () = 1 then thisInst.selected(Apollo4500XL450SSDDrive).count <= 2 else thisInst.selected(Apollo4500XL450SSDDrive).count
			//				<= 4;
			//			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: M.2 - SDD Drives
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: No SDD Drives should be selected with the selected primary risers.
		 	 * @Change: RTR ALM 115703 / RTR Updating rule since banding was allowing to add only 2 ssd
		 	*/
//PRS Modified the text message for PERT-18911 18-Jan-2020
			constraint M2SDDDrives_r1 {
				message: "M.2 SSD option can only be selected if EITHER or both of the following conditions have been fulfilled:</br>
						Condition 1 -  The Universal SATA M.2 Kit (878783-B21) HAS BEEN selected.</br>
						Condition 2 -  The Standard Primary Riser (that comes standard with the Model-X) OR HPE DL380 Gen10 x8 x16 x8 M.2 NEBS Riser (826701-B21) HAS BEEN selected.</br>
						Note:  If only ONE of the conditions is met, the Max Qty=2. If both Conditions are met, the Max Qty=4.";
				body: //dependency (SSDEnablmtKit [ 878783-B21 ] = 0 && StandardProliantPciRiser [ standardDL380G10Riser ] = 0, Apollo4500XL450SSDDrive = 0);
				if(maxM2SDDDrives = 0 and nM2SDDDrives > 0) or (maxM2SDDDrives = 1 and nM2SDDDrives > 2) then false;
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Drive Cage
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Maximum and minimum of the drive cages to choose.
		 	*/
			constraint DriveCage_maxmin {
				message: "The Drive cage is not available for this model";
				body: dependency (DL380Gen10 [ bFormFactor = "12LFF" ], ProliantDriveCage [ 826689-B21 || 826690-B21 || 826691-B21 || 826708-B21 || 867805-B21 || 873781-B21 ] = 0);
				dependency (DL380Gen10 [ bFormFactor = "24SFF" ], ProliantDriveCage [ 826689-B21 || 826690-B21 || 826691-B21 || 826708-B21 || 867805-B21 || 873781-B21 ] = 0);
			}
			//PRS Added rule for ALM: 133139 01-Nov-2019
			constraint SAS_Portrule {
				message: "An additional SAS controller is required.";
				//				body: if thisConfig.getProperty("targetEnvironment") = "oca" and thisInst.selected(ProliantStorageContSASSA).filter(y => y.id = "804338-B21").count = 0 and //SE - For ALM 133593  21-Nov-2019 
				//				//(thisInst.selected(DL380Gen10).filterByAttribute(bFormFactor , "8LFF") || thisInst.selected(DL380Gen10).filterByAttribute(bFormFactor , "12LFF")) and //AB 06-Nov-2019 for ALM iD: 133186
				//				(thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "8LFF" or thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "12LFF") and //AB 06-Nov-2019 for ALM iD: 133186
				//				//AB 06-Nov-2019 for ALM iD: 133186 thisInst.id = "868706-B21" and// 875784-B21 P19717-B21
				//				thisInst.selected(ProliantHardDrive_HP_SFF).filter(tDriveType = "SAS" || tDriveType = "SATA" || tDriveType = "SATA-SSD" || tDriveType = "SAS-SSD").count > 0 then thisInst.selected(ProliantStorageContSASSA).count > 1;
				//RS ALM 135042 28Feb2020
				body:
				if thisConfig.getProperty("targetEnvironment") = "oca" and thisInst.selected(ProliantStorageContSASSA).filter(y => y.id = "804338-B21").count = 0 and (thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "8LFF" or
				thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "12LFF") and thisInst.selected(ProliantHardDrive_HP_SFF).filter(tDriveType = "SAS" || tDriveType = "SAS-SSD").count > 0 and
				thisInst.selected(ProliantHardDrive_HP_SFF).filter(tDriveType = "SATA" || tDriveType = "SATA-SSD").count > 12 then thisInst.selected(ProliantStorageContSASSA).count > 1;
			}
			/*	ifEffective VLR_PPM_77257 {
				//RTR for BTO 8SFF is not possible to remove the standard cage
				constraint StandardDriveCageR1 {
					message: "Defaulting Standard Drive Cage";
					body: dependency (targetEnv ("oca", "sce") and DL380Gen10 [ bFormFactor = "8SFF" ] and (ProliantDriveCage [ 826689-B21 || 826690-B21 || 826691-B21 || 867805-B21 || 873781-B21 || 882096-B21 || 882097-B21 ] < 3 or RemovalReplacement [ 873763-B21 ] = 0),
					ProliantDriveCage [ standard8LFFDriveCage ] = 0 and ProliantDriveCage [ standard12LFFDriveCage ] = 0 and ProliantDriveCage [ standard24SFFDriveCage ] = 0);
					dependency (targetEnv ("oca", "sce") and DL380Gen10 [ bFormFactor = "8SFF" ] and DL380Gen10 [ BTO ] = 1 /*and (ProliantDriveCage [ 826689-B21 || 826690-B21 || 826691-B21 || 867805-B21 || 873781-B21 || 882096-B21 || 882097-B21 ] < 3 or RemovalReplacement [
					873763-B21 ] = 0), ProliantDriveCage [ standard8SFFDriveCage ] = 1 and ProliantDriveCage [ standard8LFFDriveCage ] = 0 and ProliantDriveCage [ standard12LFFDriveCage ] = 0 and ProliantDriveCage [ standard24SFFDriveCage ] = 0);
					dependency (targetEnv ("oca", "sce") and DL380Gen10 [ bFormFactor = "8SFF" ] and (ProliantDriveCage [ 826689-B21 || 826690-B21 || 826691-B21 || 867805-B21 || 873781-B21 || 882096-B21 || 882097-B21 ] > 2 or RemovalReplacement [ 873763-B21 ] > 0),
					ProliantDriveCage [ standard8SFFDriveCage ] = 0 and ProliantDriveCage [ standard8LFFDriveCage ] = 0 and ProliantDriveCage [ standard12LFFDriveCage ] = 0 and ProliantDriveCage [ standard24SFFDriveCage ] = 0);
					dependency (targetEnv ("oca", "sce") and DL380Gen10 [ bFormFactor = "8LFF" ], ProliantDriveCage [ standard8SFFDriveCage ] = 0 and ProliantDriveCage [ standard8LFFDriveCage ] = 1 and ProliantDriveCage [ standard12LFFDriveCage ] = 0 and ProliantDriveCage [
					standard24SFFDriveCage ] = 0);
					dependency (targetEnv ("oca", "sce") and DL380Gen10 [ bFormFactor = "12LFF" ], ProliantDriveCage [ standard8SFFDriveCage ] = 0 and ProliantDriveCage [ standard8LFFDriveCage ] = 0 and ProliantDriveCage [ standard12LFFDriveCage ] = 1 and ProliantDriveCage [
					standard24SFFDriveCage ] = 0);
					dependency (targetEnv ("oca", "sce") and DL380Gen10 [ bFormFactor = "24SFF" ], ProliantDriveCage [ standard8SFFDriveCage ] = 0 and ProliantDriveCage [ standard8LFFDriveCage ] = 0 and ProliantDriveCage [ standard12LFFDriveCage ] = 0 and ProliantDriveCage [
					standard24SFFDriveCage ] = 1);
					dependency (targetEnv ("ezc", "ipcs"), ProliantDriveCage [ standard8SFFDriveCage ] = 0 and ProliantDriveCage [ standard8LFFDriveCage ] = 0 and ProliantDriveCage [ standard12LFFDriveCage ] = 0 and ProliantDriveCage [standard24SFFDriveCage ] = 0);
				}
				/*constraint StandardDriveCageRemoval {	
					message: "If Standard Drive Cage is de-selected, then HPE 8SFF Front Remove SPEC Perf FIO needs to be selected";
					body: if  thisInst.selected(ProliantDriveCage).filter(x => split(x.id,"#").get(0) <= "standard8SFFDriveCage standard8LFFDriveCage standard24SFFDriveCage standard12LFFDriveCage").count = 0 
					then thisInst.selected(RemovalReplacement).filter(x => split(x.id,"#").get(0) <= "873763-B21").count > 0 ;
				
				}		
				constraint StandardDriveCageRemoval {	
					message: "If Standard Drive Cage is deselected, you need to select enough Drive Cage to fill the front rear ";
					body: 
					if  (thisConfig.getProperty("targetEnvironment") = "oca" or thisConfig.getProperty("targetEnvironment") = "sce") and thisInst.selected(ProliantDriveCage).filter(x => split(x.id,"#").get(0) <= "standard8SFFDriveCage standard8LFFDriveCage standard24SFFDriveCage standard12LFFDriveCage").count = 0 
					then thisInst.selected(ProliantDriveCage).filter(x => split(x.id,"#").get(0) <= "826689-B21 || 826690-B21 || 826691-B21 || 867805-B21 || 873781-B21 || 882096-B21 || 882097-B21").count > 2 ;
				
				}				
				part defStandardDriveCage8SFF: triggerConsequentialSelectionNoRestore {
					string consequentialSelectionFunc: "defStandardDriveCage8SFF";
				}
/*				part defStandardDriveCageRemoval: triggerConsequentialSelectionNoRestore{
					string consequentialSelectionFunc: "StandardDriveCageRemoval";
				}*/

/*	constraint StandardDriveCageMax {
					message: "Defaulting Standard Drive Cage";
					body: restriction (ProliantDriveCage [ standard8SFFDriveCage ] <= 1);
				}
			}*/
/* @Author: Reyna Torres
		 	 * @Source: ALM 118507
		  	 * @MenuSection: Drive Cage
		 	 * @Description: To enable qty of 2 Riser Kit '826688-B21' de select the standard riser card, since this riser takes the 1st position of riser cards and leave only one space to place the drive cage 826688-B21 which can be placed only in riser cards position 1 and 2.
		 	*/
			constraint riserKitCagetQtyNote {
				message: "To enable qty of 2 Riser Kit '826688-B21', first de select the standard riser card.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count <= 1 then false;
			}
			//PRS Added for PERT-17895 26-Dec-2019
			constraint remark_SATAM2Kit {
				message: "The SATA M.2 Kit (PCIe M.2 Adapter) and the Optical Device utilizes a unique set of the embedded SATA connectors in the server.
						  Since there is only ONE set of these connectors per server, only ONE of the following options can be configured into the server: <br />
 						  * SATA M.2 Kit  or  Optical Device.";
				body: if thisInst.selected(SSDEnablmtKit).count > 0 then false;
			}

			/* @Author: Reyna Torres
		 	 * @Source: ALM 113709
		  	 * @MenuSection: Drive Cage
			 * @RuleNumber: 
		 	 * @Description: When selecting 3 drive cages, the hard drives SATA and SAS will be disabled because the third drive cage take the space of the standard drive cage.
		 	*/
			constraint DriveCage_3NVMECages {
				message: "Not able to select when selecting 3 Nvme Drive Cages";
				body: dependency (DL380Gen10 [ bFormFactor = "8SFF" ] and ProliantDriveCage [ 826689-B21 ] = 3, ProliantHardDrive_HP_SFF_SAS_SSD = 0 && ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SATA" || tDriveType = "SATA-SSD" ||
				tDriveType = "SAS-SSD" ] = 0);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] and ProliantDriveCage [ 826689-B21 ] = 3, ProliantHardDrive_HP_LFF = 0);
			}

			/* @Author: Reyna Torres
		 	 * @Source: ALM 115026
		  	 * @MenuSection: Drive Cage - 826687-B21 and 826690-B21
			 * @RuleNumber: 17 and 20
		 	 * @Description: When drive cage 806687-B21 or/and 826690-B21 are selected have the capability to support 2 Nvme drives each one while the NVMe spects are selected. When NVMe spect is selected, it means that the function to support both NVMe and/or SATA/SAS drives is required other wise only the SATA/SAS drives will be available. 
		 	*/
/*constraint noNVMeSpectSelected {
				message: "To enable the NVMe drives in Drive Cage 826687-B21, select the NVMe Instruction Spect (878189-B21).</br>
						To enable the NVMe drives in Drive Cage 826690-B21, select the NVMe Instruction Spect (878192-B21).";
				body: dependency (DL380Gen10 [ 868703-B21 ] && ProliantDriveCage [ 826687-B21 ] && ! ProliantDriveCage [ 826689-B21 || 826690-B21 ] && ! NVMEnablement [ 878189-B21 ], ProliantHardDrive_HP_SFF_NVME = 0);
				dependency (DL380Gen10 [ 868703-B21 ] && ProliantDriveCage [ 826690-B21 ] && ! ProliantDriveCage [ 826687-B21 || 826689-B21 ] && ! NVMEnablement [ 878192-B21 ], ProliantHardDrive_HP_SFF_NVME = 0);
				dependency (DL380Gen10 [ 868703-B21 ] && ProliantDriveCage [ 826687-B21 || 826690-B21 ] && ! ProliantDriveCage [ 826689-B21 ] && ! NVMEnablement [ 878189-B21 || 878192-B21 ], ProliantHardDrive_HP_SFF_NVME = 0);
			}*/

//			/* @Author: Reyna Torres
			//		 	 * @Source: ALM 115026
			//		  	 * @MenuSection: Drive Cage
			//			 * @RuleNumber: 0
			//		 	 * @Description: The 3 spaces in the front of the server only can be occupied by these 4 drive cages * 826689-B21, * 826690-B21, * 826691-B21 and * 826708-B21, so the max qty to select between all of them is 3.
			//		 	*/
			//			constraint DriveCage_frontQtyRestriction {
			//				message: "Max three of these drive cages can be selected: * 826689-B21, * 826690-B21, * 826691-B21 or * 826708-B21.";
			//				body: restriction (ProliantDriveCage [ 826689-B21 || 826690-B21 || 826691-B21 ] <= 3);
			//			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Drive Cage
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Only for 8LFF and 12LFF Mod-X
		 	*/
			constraint DriveCage_r1 {
				message: "For use only with 8LFF Mod-X and 12LFF Mod-X";
				enabled: ! isBandingPage; //AB 01-Feb- 2022 For ALM ID: 144327
				body: dependency (! DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "12LFF" ], ProliantDriveCage [ 826685-B21 || 826686-B21 ] = 0);
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Drive Cage
			 * @RuleNumber: 2
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Maximum qty of 1
		 	*/
			constraint DriveCage_r2 {
				message: "Maximum 1 drive cage";
				body: restriction (ProliantDriveCage [ 826685-B21 ] <= 1);
				restriction (ProliantDriveCage [ 826686-B21 ] <= 1);
				//SE - Removed as per BU conformation 136149 23-Jun-2020	//AB 29-Apr-2020 for ALM ID: 135053
				restriction (ProliantDriveCage [ 826691-B21 ] <= 1);
				restriction (ProliantDriveCage [ 826708-B21 ] <= 1);
			}
			//AB 29-Apr-2020 for ALM ID: 135053 for 0D1 only max 1
			constraint DriveCage_826691-B21_rule2 {
				message: "Maximum 1 drive cage";
				body: dependency (DL380Gen10 [ 0D1 ], ProliantDriveCage [ 826691-B21 ] <= 1);
			}
			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Drive Cage
			 * @RuleNumber: 3
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Secondary Controller
		 	*/
			constraint DriveCage_r3 {
				message: "The customer may choose a Secondary Controller. The Secondary Controller selected must have an equal or lower priority than the Primary Controller.
						from the following list: $a{sPrioritizationController}";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				if thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826685-B21" || x.id <= "826686-B21" || x.id <= "867805-B21").count >= 1 then (thisInst.selected(ProliantStorageContSASSA).filter(x => x.id <= "870549-B21").count = 0 or
				(thisInst.id <= "868706-B21" and thisInst.selected(ProliantStorageContSASSA).filter(x => x.id <= "804338-B21").count = 0) or (thisInst.id <= "868705-B21" and thisInst.selected(ProliantStorageContSASSA).filter(x => x.id <=
				"804338-B21").count < 1));

				/*else if thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826685-B21 826686-B21 867805-B21").count >= 1 and
						thisInst.id <= "868706-B21" and thisInst.selected(ProliantStorageContSASSA).filter(x => x.id <= "804338-B21").count = 0 then false
					else if thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826685-B21 826686-B21 867805-B21").count >= 1 and
						thisInst.id <= "868705-B21" and thisInst.selected(ProliantStorageContSASSA).filter(x => x.id <= "804338-B21").count < 1 and
						thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826686-B21 826687-B21 826688-B21").count = 0 then false;*/
			}

			/* @Author: Reyna Torres
			 * @Source: ALM 111300, 111504
			 * @MenuSection: Drive Cage
			 * @RuleNumber: 3,14
			 * @Description: SAS Expander requires and additional controller.
			 * @Change: ALM 112905
			 */
			constraint DriveCage_r3_1 {
				message: "The SAS Expander(870549-B21) requires an additional controller to be selected.";
				body:
				if
				//thisInst.selected(ProliantDriveCage).filter(x => split(x.id,"#").get(0) <= "826685-B21 826686-B21 826687-B21 826688-B21 826690-B21 826691-B21 867805-B21").count > 0
				thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) >= "870549-B21").count > 0 then thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
				"804326-B21 804338-B21 804394-B21 830824-B21 804331-B21 870658-B21").count >= 1;
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Drive Cage
			 * @RuleNumber: 4
		 	 * @EffectivityID: PFA826686-B21_DL380G10
		 	 * @Description: If this option is selected, NO "Full Length" (FL) PCIe cards can be supported.
		 	*/
			constraint DriveCage_r4 {
				message: "If this option is selected, NO 'Full Length' (FL) PCIe cards can be supported.";
				body:
				//ALM 115010 (Rule states, PCIe (As in devices that consume this bus, not PCI RiserCards).
				//dependency(ProliantDriveCage[826686-B21] > 0, ProliantPciRiser[867807-B21 || 867808-B21 || 873732-B21 || 867806-B21 || 871673-B21] = 0);//as discussed with thompson matt (HPE servers) RPA removed riser except NVMe for ALM 108980 
				//				dependency (ProliantDriveCage [ 826686-B21 ] > 0, GraphicsPciCard [ P9P59A || P9P59A || Q0E21A || Q0J62A || Q0V76A || Q0V77A || Q0V78A || Q0V80A
				//				//MS for PPM: 17829
				//				|| Q0J62C || Q0V80C ] = 0);
				//SE - For ALM 136789		3-Jul-2020
				dependency (ProliantDriveCage [ 826686-B21 ] > 0, GraphicsPciCard [ Q0J62C || Q0V78A || Q0V80C || Q7G75C || Q9B37C || Q9U36C || R0W29C || R0X82C || R0Z45C || R1F95C || R1F97C || R2U55C || R4B03C || R4D73C ] = 0);
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Drive Cage
			 * @RuleNumber: 5
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Only only one kit can be selected with the drive cage
		 	*/
			constraint DriveCage_r5 {
				message: "Max Qty=1 from the following list of options is allowed per server.  This means that only one item can be selected from the following list:<br/>- 2SFF Bay Kit (826687-B21) <br/>- 3LFF Rear Drive Kit (82685-B21)";
				body: dependency (ProliantDriveCage [ 826685-B21 ] > 0, ProliantDriveCage [ 826687-B21 ] = 0);
			}
			constraint DriveCage_r7 {
				message: "For use only with 8LFF Mod-X.";
				body: dependency (DL380Gen10 [ bFormFactor = "8SFF" ], ProliantDriveCage [ 867805-B21 || 873781-B21 ] = 0);
			}
			constraint DriveCage_r8 {
				message: "Maximum quantity of 2 drive cages";
				body: restriction (ProliantDriveCage [ 826688-B21 ] <= 2);
				//restriction(ProliantDriveCage[826690-B21] <= 2);

			}
			constraint DriveCage_r9 {
				message:
				"A Max Qty=1 from the following list of options is allowed per server.  This means that only one item can be selected from the following list: <br/>- 2SFF SAS/SATA Side-to-Side Bay Kit (867805-B21) <br/>- 2SFF NVMe Side-to-Side Bay Kit (873781-B21)";
				body: restriction (ProliantDriveCage [ 867805-B21 || 873781-B21 ] <= 1);
				dependency (ProliantDriveCage [ 867805-B21 ] > 0, ProliantDriveCage [ 873781-B21 ] = 0);
			}
			constraint DriveCage_r10 { //ALM_108727 24August2017
				message: "With the selection of this option, the customer must choose a Riser with NVMe support from the following list (Max=1). <br/> 
						* 1-Port Slimline Riser (867806-B21) <br/>  
						* 1-Port Slimline FIO Riser (871673-B21) <br/>  
						* 2-Port Slimline Tertiary Riser (867808-B21)  <br/>
						Note: <br/>A NVMe Riser IS NOT required if the following has occurred: <br/>
						* The 2-Port Simline Tertiary Riser (867808-B21) is already selected.";
				body:
				if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "873781-B21").count > 0 then thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "867806-B21 867808-B21 871673-B21").count > 0 else
				true;
			}
			constraint DriveCage_r11 {
				message: "For use only with 8SFF Mod-X.";
				body: dependency (DL380Gen10 [ bFormFactor = "8LFF" ], ProliantDriveCage [ 826689-B21 || 826690-B21 || 826691-B21 || 826708-B21 ] = 0);
			}
			constraint DriveCage_r13 {
				message: "The Max Qty=3, with the following requirements:<br/>
  					    * If Qty=1, the customer must choose ONE Riser with NVMe support from the following list<br/>
				         	    * 4-Port Slimline Primary Riser (867807-B21)<br/>
				                * 4-Port Slimline Secondary Riser (873732-B21) <br/><br/>
					    * If Qty=2, the customer must choose BOTH of the following NVMe Risers<br/>
					      * 4-Port Slimline Primary Riser (867807-B21)<br/>
					      * 4-Port Slimline Secondary Riser (873732-B21) <br/><br/>
					    * If Qty=3, the costumer must choose ALL of the following NVMe Risers<br/>
         					      * 4-Port Slimline Primary Riser (867807-B21)<br/>
         					      * 4-Port Slimline Secondary Riser (873732-B21) <br/>
         					      * 2-Port Slimline Tertiary Riser (867808-B21)<br/>
         					      * Box1 4NMMe Instruction Spec (878186-B21)";
				body:
				/*dependency(ProliantPciRiser[867807-B21 || 873732-B21] > 0, ProliantDriveCage[826689-B21]  <= 1);
					dependency(ProliantPciRiser[867807-B21 && 873732-B21] > 0, ProliantDriveCage[826689-B21]  <= 2);
					dependency(ProliantDriveCage[826689-B21] = 3, ProliantPciRiser[867807-B21 && 873732-B21 && 867808-B21 && 878186-B21] > 0, );*/
				if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826689-B21").count = 1 then thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "867807-B21 873732-B21").count = 1 else if
				thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826689-B21").count = 2
				//GKK For ALM 110676//then thisInst.selected(ProliantPciRiser).filter(y => y.id = "867807-B21" && y.id = "873732-B21").count = 1
				then thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "867807-B21").count > 0 && thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "873732-B21").count > 0 else if
				thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826689-B21").count = 3 then thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "867807-B21").count > 0 &&
				thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "867808-B21").count > 0 && thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "873732-B21").count > 0 &&
				thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878186-B21").count > 0;
				//GKK For ALM 110676//then thisInst.selected(ProliantPciRiser).filter(y => y.id = "867807-B21" && y.id = "867808-B21"  && y.id = "873732-B21"  && y.id = "878186-B21").count = 1;

			}
			constraint DriveCage_r14 {
				message: "With the selection of this option, the customer MAY choose a Secondary Controller from the following list (Max=1).  The Secondary Controller selected must have an equal or lower priority than the Primary Controller.<br/><br/>		 
						 * HPE 12Gb SAS Expander Card (This option requires an additional Cntrlr to be selected) <br/>
						 * HPE Smart Array P816i-a Cntrlr  <br/>
						 * HPE Smart Array P408i-a Cntrlr  <br/>
						 * HPE Smart Array P408i-p Cntrlr  <br/>
						 * HPE Smart Array E208i-a Cntrlr  <br/>
						 * HPE Smart Array E208i-p Cntrlr  <br/>
						 * AHCI Embedded SATA Controller (This controller comes standard with all models and therefore, is not a selectable item in the ordering systems.) <br/><br/>
									
							Note:<br/>
							A Controller IS NOT required if the flowing has occurred:  <br/>
							* If SAS Expander Card has been selected as the Primary Controller. <br/>
							* If configuring the 8SFF Model-X AND the P816i-a Controller has been selected as the Primary Controller AND only ONE line item from the following list has been selected: <br/>
							  - Premium 8SFF HDD Bay Kit (826690-B21) <br/>
							  - Box 1/2 HDD Cage (826691-B21) <br/>
							  - Premium 2SFF HDD Kit (826687-B21) <br/>
							  - (Qty=2) Premium 2SFF HDD Kit (826687-B21) <br/>
							  - Premium 2SFF HDD Riser Kit (826688-B21) <br/>
							  - (Qty=2) Premium 2SFF HDD Riser Kit (826688-B21) <br/>
							  - Premium 2SFF HDD Kit (826687-B21) AND Premium 2SFF HDD Riser Kit (826688-B21)";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				{
					val driveCages = "826687-B21 826688-B21 826690-B21 826691-B21";
					val driveCageCount = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= driveCages).count;
					val bBase_8SFF = thisInst.bFormFactor = "8SFF"; //
					val bBase_LFF = thisInst.tFormFactor = "lff";
					val maxSASController = controllersCount;
					val maxSATAController = controllersCount + 12;
					val driveCagesHHD = thisInst.selected(ProliantStorageContSASSA).filter(x => x.tCardType >= "internal").sum(iNumSupportedinternalDevices);
					//					val sataDriveCount = thisInst.deviceSubsystem.hardDriveBays.contents.filterByAttribute(tDriveType, "SATA").count + thisInst.deviceSubsystem.hardDriveBays.contents.filterByAttribute(tDriveType, "SATA-SSD").count;
					//					val sasDriveCount = thisInst.deviceSubsystem.hardDriveBays.contents.filterByAttribute(tDriveType, "SAS").count + thisInst.deviceSubsystem.hardDriveBays.contents.filterByAttribute(tDriveType, "SAS-SSD").count;
					if driveCageCount > 0 then if bBase_LFF then if(thisInst.selected(ProliantHardDrive_HP_SFF).filterByAttribute(tDriveType, "SAS").count + thisInst.deviceSubsystem.hardDriveBays.contents.filterByAttribute(tDriveType, "SAS-SSD").count) >
					0 then thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "870549-B21").count > 0 || maxSASController >= thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <=
					driveCages).sum(iNumHarddiskBays) + thisInst.iNumHarddiskBays else thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "870549-B21").count > 0 || maxSATAController >=
					thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= driveCages).sum(iNumHarddiskBays) + thisInst.iNumHarddiskBays else if bBase_8SFF then (thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id,
					"#").get(0) <= "804338-B21").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826690-B21").count = 1) || (thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
					"804338-B21").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826691-B21").count = 1) || (thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
					"804338-B21").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count = 1) || (thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
					"804338-B21").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count = 2) || (thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
					"804338-B21").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count = 1) || (thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
					"804338-B21").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count = 1) || (thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
					"804338-B21").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count = 1 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count = 1)
					|| (thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count = 2 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826689-B21").count = 1 and maxSATAController >
					(thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= driveCages).sum(iNumHarddiskBays) + 8) and thisInst.selected(ProliantHardDrive).count = 0) || maxSATAController >=
					thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= driveCages).sum(iNumHarddiskBays) + thisInst.iNumHarddiskBays else maxSATAController >= thisInst.selected(ProliantDriveCage).filter(x => split(x.id,
					"#").get(0) <= driveCages).sum(iNumHarddiskBays) + thisInst.iNumHarddiskBays;
				}
			}
			constraint DriveCage_r15 {
				message: "This option CANNOT be ordered with ANY of the following:
						- Qty=2 Premium 8SFF Drive Cage (826690-B21)
						- Qty=2 NVMe 8 Drive Cage (826689-B21)
						- Premium 8SFF Drive Cage (826690-B21) AND Universal Media Bay (826708-B21)";
				body: dependency (ProliantDriveCage [ 826690-B21 ] = 2, ProliantDriveCage [ 826691-B21 ] = 0);
				dependency (ProliantDriveCage [ 826689-B21 ] = 2, ProliantDriveCage [ 826691-B21 ] = 0);
				dependency (ProliantDriveCage [ 826690-B21 ] && ProliantDriveCage [ 826708-B21 ], ProliantDriveCage [ 826691-B21 ] = 0);
			}
			constraint DriveCage_r18_0 {
				message: "Maximum quantity for 8 SFF model.";
				body: dependency (DL380Gen10 [ bFormFactor = "8SFF" ], ProliantDriveCage [ 826687-B21 ] <= 2);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 || 826690-B21 || 826691-B21 || 826708-B21 ] >= 3, ProliantDriveCage [ 826687-B21 ] <= 1);
			}
			constraint DriveCage_r18_3 {
				message: "A Max Qty=1 for the 8LFF Model-X, 12LFF Model-X, and 24SFF Model-X.<br/> 
				         - Since this option will be installed in the rear of the chassis, the High Performance Fan Kit (867810-B21) must also be selected.";
				body: dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "12LFF" || bFormFactor = "24SFF" ] >= 1, ProliantDriveCage [ 826687-B21 ] <= 1);
				//RVL - ALM 114980 - Adding base model 868710-B21 in condition to avoid select High Performance Fan Kit (867810-B21)
				dependency (ProliantDriveCage [ 826687-B21 ] >= 1 && DL380Gen10 [ 868703-B21 || 875782-B21 || 868705-B21 || 868704-B21 || R1R46A || 875785-B21 || 875783-B21 || 868710-B21 || P02463-B21 || P19720-B21 || P19718-B21 || P19719-B21 ] <= 0,
				CoolingFan [ 867810-B21 ] >= 1); //NL fixed for ALM : 132144 , 22-Aug-2019 

			}
			constraint DriveCage_r19 {
				message: "This option requires the High Performance Fan Kit (867810-B21) to be selected";
				body:
				//				if thisInst.id <= "868706-B21 868703-B21" and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826685-B21 826686-B21 826688-B21 826689-B21 873781-B21").count >= 1 then thisInst.selected(CoolingFan).filter(x
				//				=> split(x.id, "#").get(0) <= "867810-B21").count >= 1;
				dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "8SFF" ] && ProliantDriveCage [ 826685-B21 || 826686-B21 || 826688-B21 || 826689-B21 || 873781-B21 ] > 0, CoolingFan [ 867810-B21 ] > 0);
			}
			constraint DriveCage_r25 {
				message: "This option '826688-B21' CANNOT be selected with ANY Tertiary Riser.";
				body: dependency (ProliantDriveCage [ 826688-B21 ] > 0, ProliantPciRiser [ 826700-B21 || 826702-B21 || 867808-B21 || 875780-B21 ] = 0);
			}
			constraint DriveCage_r27 {
				message: "If there is a Max Qty=3 of the NVMe 8 SSD Express Bay (826689-B21) ordered, then NO INTERNAL Smart Array Controllers can be ordered.<br/> 

				The following controllers CAN NOT be ordered:<br/>
				- HPE 12Gb SAS Expander Card <br/>
				- HPE Smart Array P816i-a Cntrlr  <br/>
				- HPE Smart Array P408i-a Cntrlr  <br/>
				- HPE Smart Array P408i-p Cntrlr  <br/>
				- HPE Smart Array E208i-a Cntrlr  <br/>
				- HPE Smart Array E208i-p Cntrlr";
				body: dependency (ProliantDriveCage [ 826689-B21 ] = 3, ProliantStorageContSASSA [ 870549-B21 || 804338-B21 || 804331-B21 || 830824-B21 || 804326-B21 || 804394-B21 || 870658-B21 ] = 0);
			}
			constraint DriveCage_r28 {
				message: "NONE of the Tertiary Risers can be ordered if ANY of the following conditions occur:</br>
						For the 8SFF Model-X.</br>
						- If Qty=2 of the Premium 2SFF HDD Kit (826687-B21) are ordered.</br>
						- If Qty=1 of the Premium 2SFF HDD Kit (826687-B21) is ordered and the Universal Media Bay (826708-B21) IS NOT ordered. </br>
						For the 8LFF Model-X, 12LFF Model-X, and 24SFF Model-X.</br>
						- If Qty=1 of the Premium 2SFF HDD Kit (826687-B21) is ordered.  ";
				body: dependency (DL380Gen10 [ bFormFactor = "8SFF" ] and (ProliantDriveCage [ 826687-B21 ] = 2 or (ProliantDriveCage [ 826687-B21 ] = 1 and ProliantDriveCage [ 826708-B21 ] = 0)), ProliantPciRiser [ 826700-B21 || 826702-B21 ||
				867808-B21 || 875780-B21 ] = 0);
				dependency (DL380Gen10 [ bFormFactor != "8SFF" ] and ProliantDriveCage [ 826687-B21 ] = 1, ProliantPciRiser [ 826700-B21 || 826702-B21 || 867808-B21 || 875780-B21 ] = 0);
			}
			constraint DriveCage_38 {
				message: "IMPORTANT!!!  This 2SFF option is designed with a x4 cable connector in order to support uFF drives.</br>
						  The option will therefore occupy a Total=4 port/lanes of any controller in which it is connected.</br>  
						  The ordering tools must account for this Qty=4 devices supported when determining the quantity of storage device options that can be supported per the max capacity limits per controller. (In more general terms, this option should be considered as a 4 Device option that will consume/occupy 4 ports/lanes of any controller in which it is attached.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				{
					val driveCagexFour = "826687-B21 826688-B21";
					if(thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= driveCagexFour).count > 0) then false;
				}
			}
			constraint DriveCage_remark2_msg {
				message: "To enable the cage's drives slots to support BOTH SAS/SATA and NVMe drives with drive cage '826687-B21', the 2SFF NVMe Enablement Spec (878189-B21) must be selected.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) >= "826687-B21").count >= 1 && thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) >= "878189-B21").count < 1 then false;
			}
			constraint DriveCage_remark3_msg {
				message: "To enable two of the cage's drives slots to support BOTH SAS/SATA and NVMe drives with drive cage '826690-B21', the NVMe Enablement Spec (878192-B21) must be selected";
				body:
				if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) >= "826690-B21").count >= 1 && thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) >= "878192-B21").count < 1 then false;
			}
			constraint DriveCage_remark3 {
				message: "Select a drive cage NVMe to enable the NVME disks";
				body: dependency (! ProliantDriveCage [ 826687-B21 || 826690-B21 || 826689-B21 || 873781-B21 ] >= 1, ProliantHardDrive_HP_SFF_NVME = 0);
			}
			constraint DriveCage_r21 {
			//	message: "Maximum quantity of 2 drive cages";
				message: "This drive cage 826690-B21 can able to choose Maximum of three quantity";
				body:
				//		restriction(ProliantDriveCage[826690-B21] <= 2);
				restriction (ProliantDriveCage [ 826690-B21 ] <= 3);
			}
			constraint OpticalDrives_r1 {
				message: "If this option (726536-B21, 726537-B21) is selected on the 8SFF Model-X, the Universal Media Bay (826708-B21) must also be included on the order.";
				body: dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantInternalOpticalDrive, ProliantDriveCage [ 826708-B21 ] = 1);
				//					if (thisInst.selected(DL380Gen10).filterByAttribute(bFormFactor, "8SFF").count > 0 && thisInst.selected(ProliantInternalOpticalDrive).count > 0)
				//					then thisInst.selected(ProliantDriveCage).filter(x => x.id >= "826708-B21").count > 0;

			}
			constraint MustSelectController {
				message:
				"The 'AHCI Embedded SATA Controller' can support up to 12 'SATA Only' hard drives, you have $a{sataHardDrives} SATA and $a{sasHardDrives} SAS drives. The additional controllers selected support only $a{controllersCount} SAS/SATA drives.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				{
				//if controllersCount > 0 and controllersCount < nSFFHDcount+nLFFHDcount then false;
					val maxControllerSATA = if thisInst.selected(ProliantInternalOpticalDrive).count > 0 or thisInst.selected(SSDEnablmtKit).filter(x => split(x.id, "#").get(0) <= "878783-B21").count > 0 then controllersCount + 10 else controllersCount +
					12; //ALM 112001 - 12 default Embedded SATA Controller SATA 826709
					val maxControllerSAS = controllersCount;
					val availableControllerSAS = maxControllerSAS - nSASHDcount;
					val availableControllerSATA = maxControllerSATA - nSATAHDcount - nSASHDcount;
					if((availableControllerSAS < 0) or (availableControllerSATA < 0)) then false;
				}
			}
			constraint rule3_SAS_Controllers {
				message: "For external storage only.";
				body: //if(thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "804398-B21 804405-B21").count) >= 1 &&
				//				//(thisInst.selected(ExternalTapeDriveUltrium).count + thisInst.selected(SASTapeEnclosure1UUltrium).count) = 0
				//				thisConfig.getInstancesOfModel("StorageModel").count = 0 then false;
				{
					val pProliantStorageContSASSA: string = "804398-B21 804405-B21";
					val cProliantStorageContSASSA: int = thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= pProliantStorageContSASSA).count;
					if cProliantStorageContSASSA > 0 then false;
				}
			}
			constraint rule3_1_SAS_Controllers {
				message: "When external storage is selected, at least one external controller must be ordered (804398-B21 or 804405-B21).";
				body: if(thisConfig.getInstancesOfModel("StorageModel").count - thisConfig.getInstancesOfModel("HPSwitch").count) > 0 then thisConfig.getInstancesOfModel("ProliantStorageContSASSA").filter(x => split(x.id, "#").get(0) <=
				"804398-B21 804405-B21").count > 0;
			}
			constraint HardDrives_uff_maxmin {
				message: "Reach maximum UFF Hard drives available for selection";
				body: dependency (DL380Gen10 && ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 1, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				dependency (DL380Gen10 && ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 2, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 4);
				dependency (DL380Gen10 && ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 3, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 6);
			}
			constraint HardDrives_lff_maxmin {
				message: "Reach maximum LFF Hard drives available for selection";
				//RTR ALM 124389
				body:
				if(isEZC () or isIPCS ()) and thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "8LFF" and thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826685-B21#0D1 826686-B21#0D1").count = 0 then
				thisInst.selected(ProliantHardDrive_HP_LFF).count <= 8;
				if(isEZC () or isIPCS ()) and thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "12LFF" and thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826685-B21#0D1 826686-B21#0D1").count = 0 then
				thisInst.selected(ProliantHardDrive_HP_LFF).count <= 12;
				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ bFormFactor = "8LFF" ] && ! ProliantDriveCage [ 826685-B21 || 826686-B21 ], ProliantHardDrive_HP_LFF <= 8); //RTR ALM 125276
				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ bFormFactor = "12LFF" ] && ! ProliantDriveCage [ 826685-B21 || 826686-B21 ], ProliantHardDrive_HP_LFF <= 12);
				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ bFormFactor = "8LFF" ] && ProliantDriveCage [ 826685-B21 ] = 1 && ! ProliantDriveCage [ 826686-B21 ], ProliantHardDrive_HP_LFF <= 11);
				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ bFormFactor = "8LFF" ] && ProliantDriveCage [ 826686-B21 ] = 1 && ! ProliantDriveCage [ 826685-B21 ], ProliantHardDrive_HP_LFF <= 12);
				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ bFormFactor = "8LFF" ] && ProliantDriveCage [ 826685-B21 ] = 1 && ProliantDriveCage [ 826686-B21 ] = 1, ProliantHardDrive_HP_LFF <= 15);
				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ bFormFactor = "12LFF" ] && ProliantDriveCage [ 826685-B21 ] = 1 && ! ProliantDriveCage [ 826686-B21 ], ProliantHardDrive_HP_LFF <= 15);
				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ bFormFactor = "12LFF" ] && ProliantDriveCage [ 826686-B21 ] = 1 && ! ProliantDriveCage [ 826685-B21 ], ProliantHardDrive_HP_LFF <= 16);
				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ bFormFactor = "12LFF" ] && ProliantDriveCage [ 826685-B21 || 826686-B21 ] = 2, ProliantHardDrive_HP_LFF <= 19);
				//RTR Commented dependencies since some of them was not working recreated up
				//				body: dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage = 0, ProliantHardDrive_HP_LFF <= 8);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage = 0, ProliantHardDrive <= 8);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 || 826688-B21 || 867805-B21 || 873781-B21 ] > 0 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] < 1, ProliantHardDrive_HP_LFF <=
				//				8);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826685-B21 ] = 1 && ! ProliantDriveCage [ 826686-B21 ] && ProliantDriveCage [ 826687-B21 || 826688-B21 || 867805-B21 || 873781-B21 ] >= 0,
				//				ProliantHardDrive_HP_LFF <= 11);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826685-B21 ] = 1 && ProliantDriveCage [ 826686-B21 ] = 1 && ProliantDriveCage [ 826687-B21 || 826688-B21 || 867805-B21 || 873781-B21 ] >= 0,
				//				ProliantHardDrive_HP_LFF <= 15);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826686-B21 ] = 1 && ! ProliantDriveCage [ 826685-B21 ] && ProliantDriveCage [ 826687-B21 || 826688-B21 || 867805-B21 || 873781-B21 ] >= 0,
				//				ProliantHardDrive_HP_LFF <= 12);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 || 867805-B21 || 873781-B21 ] && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0,
				////				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ] <= 2);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 || 867805-B21 || 873781-B21 ] && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0,
				//				ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_SFF [
				////				tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ] <= 4);
				//				
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_uFF [
				//				tDriveType = "uFF" ] <= 4);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 867805-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21
				////				] >= 0, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ] <= 6);
				//				
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 867805-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21
				//				] >= 0, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_SFF [
				////				tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ] <= 6);
				//				
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_uFF [
				//				tDriveType = "uFF" ] <= 6);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 || 867805-B21 || 873781-B21 ] && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0,
				////				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ] <= 2);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 || 867805-B21 || 873781-B21 ] && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0,
				//				ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826688-B21 ] = 2 && ! ProliantDriveCage [ 826687-B21 || 867805-B21 || 873781-B21 ] && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0,
				////				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ] <= 4);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826688-B21 ] = 2 && ! ProliantDriveCage [ 826687-B21 || 867805-B21 || 873781-B21 ] && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0,
				//				ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 4);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 867805-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_SFF [
				////				tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ] <= 4);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 867805-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_uFF [
				//				tDriveType = "uFF" ] <= 2);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 867805-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_SFF [
				////				tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ] <= 6);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 867805-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_uFF [
				//				tDriveType = "uFF" ] <= 4);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 867805-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 || 826688-B21 || 873781-B21 ] && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0,
				////				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ] <= 2);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] >= 1 && ! ProliantDriveCage [ 826685-B21 || 826686-B21 ], ProliantHardDrive_HP_LFF <= 12);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826685-B21 ] = 1 && ! ProliantDriveCage [ 826686-B21 ] && ProliantDriveCage [ 826688-B21 ] >= 0, ProliantHardDrive_HP_LFF <= 15);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826685-B21 ] = 1 && ProliantDriveCage [ 826686-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] >= 0, ProliantHardDrive_HP_LFF <= 19);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826686-B21 ] = 1 && ! ProliantDriveCage [ 826685-B21 ] && ProliantDriveCage [ 826688-B21 ] >= 0, ProliantHardDrive_HP_LFF <= 16);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ! ProliantDriveCage [ 826685-B21 || 826686-B21 ], ProliantHardDrive_HP_uFF <= 2);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826688-B21 ] = 2 && ! ProliantDriveCage [ 826685-B21 || 826686-B21 ], ProliantHardDrive_HP_uFF <= 4);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826686-B21 || 826685-B21 ] >= 1 && ProliantDriveCage [ 826688-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD"
				////				|| tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 2);
				////				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826686-B21 || 826685-B21 ] >= 1 && ProliantDriveCage [ 826688-B21 ] = 2, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD"
				////				|| tDriveType = "SATA-SSD" ] <= 4);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826686-B21 || 826685-B21 ] >= 1 && ProliantDriveCage [ 826688-B21 ] = 1, ProliantHardDrive_HP_uFF <= 2);
				//				
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826686-B21 || 826685-B21 ] >= 1 && ProliantDriveCage [ 826688-B21 ] = 2, ProliantHardDrive_HP_uFF <= 4);
				//				if(thisConfig.getProperty("targetEnvironment") >= "ezc" or thisConfig.getProperty("targetEnvironment") >= "ipcs") and thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "8LFF" and nLFFHDcount () > nLFFHardDrives () + 8
				//				then false else if(thisConfig.getProperty("targetEnvironment") >= "ezc" or thisConfig.getProperty("targetEnvironment") >= "ipcs") and thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "12LFF" and nLFFHDcount () >
				//				nLFFHardDrives () + 12 then false;
				if nLFFHDcount () > nLFFHardDrives () then false;
			}
			constraint HDHotPlugLFF_r2 {
				message: "This option cannot be populated in Rear Drive cages. Consider this limitation for selection of Drives with these cages.";
				body: dependency (ProliantHardDrive_HP_LFF [ P49038-B21 ], ProliantDriveCage [ 826685-B21 || 826687-B21 ] = 0);
				dependency (ProliantDriveCage [ 826685-B21 || 826687-B21 ], ProliantHardDrive_HP_LFF [ P49038-B21 ] = 0);
			}
			constraint HDHotPlugSFF_r1 {
				message: "User may select any combination of SAS or SATA Hard Drives. 
						However, if RAID is selected and both SAS and SATA Hard Drives have been selected, then only the SAS Drives will be used in the RAID set.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				selected(ProliantHardDrive).noMix;
			}
			constraint HDHotPlugSFF_r2 {
				message: "Requires the selection of at least one of the following NVMe Kits:
							* Premium 2SFF Drive Kit (826687-B21)
							* LFF 1U NVMe Kit (873781-B21)
							* Premium 8SFF Drive Bay (826690-B21)
							* NVMe 8 SSD Express Bay (826689-B21)";
				body:
				//		dependency(ProliantDriveCage[826687-B21 || 873781-B21 || 826689-B21 || 826691-B21] <= 0, ProliantHardDrive[736936-B21 || 736939-B21 || 764892-B21 || 764894-B21 || 764904-B21 || 764906-B21 || 765034-B21 || 765036-B21 || 765038-B21 || 765044-B21] = 0);
				// SKE ALM 108432, Added this drive Cage 826690-B21 into this constraint and removed drive cage 826691-B21;
				dependency (ProliantDriveCage [ 826687-B21 || 873781-B21 || 826689-B21 || 826690-B21 ] <= 0, ProliantHardDrive_HP_SFF_NVME = 0);
			}
			//AB 25-Mar-2021 for ALM ID: 139961 added NVME drives max section
			constraint HardDrives_nvme_max {
				message: "With 2 quantities of 826687-B21 0D1 HPE DL38X Gen10 Premium 2SFF HDD Kit then Maximum 2 quantities of NVMe Drives can be ordered per base model";
				body: dependency (ProliantDriveCage [ 826687-B21 ] > 1, ProliantHardDrive_HP_SFF_NVME <= 2);
			}
			constraint HardDrives_Uff_r1 {
				message: "Requires the selection of at least one of the following Kits:
							* Premium 2SFF Drive Kit (826687-B21)
							* Premium 2SFF Drive Riser Kit (826688-B21)";
				body: dependency (ProliantDriveCage [ 826688-B21 || 826687-B21 ] <= 0, ProliantHardDrive_HP_uFF [ 815605-B21 || 822593-B21 || P19896-B21 || P47819-B21 ] = 0);
			}
			constraint ComponentRemovalRepSett_r1 {
				message: "Max Qty=1";
				body: restriction (RemovalReplacement [ 873766-B21 || 873763-B21 ] <= 1);
			}
			constraint PCIeAccelators_r1 {
				message: "A minimum 4GB of server memory is required per card.";
				body:
				if thisInst.selected(IOAccelerator).count > 0 then thisInst.selected(ProliantMemoryArray).sum(dCapacity) >= 4 * thisInst.selected(IOAccelerator).count;
			}
			//			ifEffective AB_PERT_24630
			//			{}
			//			otherwise{
			//			constraint CtrlSAS_remark {
			//				message:
			//				"Only one HPE Smart Storage Battery is required per server when one or more P-class Smart Array controllers are selected for Gen10 configurations, and thus are not included individually with each P-class Smart Array controller.";
			//				body: dependency (targetEnv ("ezc", "ipcs") && ProliantStorageContSASSA [ iTypeCntrl = "P" ] > 0, SAP420iControllerCacheUpgrade [ P01366-B21 || P02377-B21] = 1);
			//				//SE - Back to old state since we need this red error when we have no upgrade kit in the order			25-Oct-2021
			//				//body: dependency (targetEnv ("ezc", "ipcs") && ProliantStorageContSASSA [ iTypeCntrl = "P" ] > 0, SAP420iControllerCacheUpgrade [ P01366-B21 || P02377-B21 ] > 0);
			//				//SE - Removed  for ALM 143313		22-Oct-2021
			//				//}				
			//			}
			constraint CtrlSAS_TypeE {
				message: "If only one type E controller is selected without a P-type controller, Smart Storage Battery(P01366-B21) must not be selected.";
				body:
				{
				//val controllerPclass = "804331-B21 804338-B21 804405-B21 870658-B21";
					val controllerEclass = "804394-B21 804326-B21 804398-B21";
					if thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= controllerEclass).count >= 1 and pSeriesCntrl = 0 and thisInst.selected(SAP420iControllerCacheUpgrade).filter(x => split(x.id, "#").get(0) <=
					"P01366-B21").count >= 1 and thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <= "845264-B21").count = 0 then false;
				}
			}
			constraint CtrlSAS_r1 {
				message: "Max Qty=1 AROC per server.";
				body: restriction (ProliantStorageContSASSA [ 804326-B21 || 804331-B21 || 804338-B21 ] <= 1);
			}
			constraint CtrlSAS_r2 {
			//		message: "Does not consume the PCIe slot.";
				message: "The following Controllers (804326-B21,804331-B21,804338-B21) does not consume PCIe slot.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				//		thisInst.selected(ProliantStorageContSASSA).filter(x => x.id <= "804326-B21 804331-B21 804338-B21").count >= 1;
				if ! thisInst.selected(vSANTrackingSku).filter(x => split(x.id, "#").get(0) <= "P17481-B21").count > 0 and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "804326-B21 804331-B21 804338-B21").count >= 1
				then false; //SE - Excluding this logic for vSan Ready Node for PERT 17885 27-Nov-2019

			}

			//SE - For PERT 22462  28-Apr-2021
			constraint CtrlSAS_r_99 {
				message: "Both SAS Expander and P824i-p Controller cannot be selected together.";
				body:
				if thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "P44219-B21").count > 0 and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "870549-B21").count > 0 then false;
			}
			constraint CtrlSAS_r6 { //JQD ALM 131798
				message: "This option requires the selection of HPE DL38X 24P Cable Kit (P00614-B21).";
				body: dependency (ProliantStorageContSASSA [ 870658-B21 || P44219-B21 ] > 0, ProliantMiniSasCable [ P00614-B21 ] > 0); //SE - Added P44219-B21 for PERT 22642  26-Apr-2021
				restriction (ProliantMiniSasCable [ P00614-B21 ] <= 1);
			}
			constraint DriveCage_r6 {
				message: "If this option is selected, No Secondary Riser or Tertiary Risers are suppoted";
				body: dependency (ProliantDriveCage [ 826685-B21 ] > 0, ProliantPciRiser [ tCardType = "type_2" or tCardType = "type_3" ] = 0);
				dependency (ProliantDriveCage [ 826685-B21 ] > 0, ProliantDriveCage [ 826688-B21 ] <= 1);
			}
			//SE - For PERT 22462  28-Apr-2021
			constraint sasctrl_r7 {
				message: "If the P824i-p Controller is selected as the Primary SAS/SATA controller, then ordering systems will automatically de-select both 
							the HPE Smart Array P408i-a Controller (804331-B21) and the SAS Expander (870549-B21). 
							and Qty=2 of the DL380 Gen9 8SFF H240 Cable Kit (786092-B21) is NOT required.";
				body: dependency (ProliantDriveCage [ 826685-B21 ] > 0, ProliantPciRiser [ tCardType = "type_2" or tCardType = "type_3" ] = 0);
				dependency (ProliantDriveCage [ 826685-B21 ] > 0, ProliantDriveCage [ 826688-B21 ] <= 1);
			}
			constraint DriveCage_R30 {
				message: "This option has one x16 PCIe slot available for use.  However, due to mechanical limitations, the PCIe slot CANNOT be populated with ANY (singlewide or doublewide) GPU.";
				body:
				if(thisConfig.getProperty("targetEnvironment") >= "ezc" or thisConfig.getProperty("targetEnvironment") >= "ipcs") and (thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826688-B21").count > 0 and
				((thisInst.selected(ProliantPciRiser).count + thisInst.selected(StandardProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "standardDL380G10Riser").count) > 0) and thisInst.selected(GraphicsPciCard).filter(x => x.tPciType >=
				"PCI_E" and x.iBusWidth = 16).count > 0) then countPCIe16Available () > countPCIex16 ();
				if(thisConfig.getProperty("targetEnvironment") >= "ezc" or thisConfig.getProperty("targetEnvironment") >= "ipcs") and (thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826688-B21").count > 0 and
				((thisInst.selected(ProliantPciRiser).count + thisInst.selected(StandardProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "standardDL380G10Riser").count) = 0) and thisInst.selected(GraphicsPciCard).filter(x => x.tPciType >=
				"PCI_E" and x.iBusWidth = 16).count > 0) then false;
			}
			constraint warning_MID {
				message:
				"Warning: DIMM Blanks kit is required when using the 4LFF mid-plane tray (826686-B21) in conjunction with one of the following processors -8156, 6128 or 5122- or >126W parts. Please refer to the DL380 Gen10 Quickspecs for additional information on system inlet ambient temperature for processors.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "8826686-B21").count > 0 then false;
			}
			constraint DriveCage_R31 {
				message: "This option IS NOT supported with the following Processors:</br>
					*X6137 - (880168-B21/L21)</br>
					*X8165 - (879423-B21/L21)</br>
					*X6143 - (879424-B21/L21)</br>
					*X6250 - (P24475-B21/L21)</br>
                    *X6256 - (P24476-B21/L21)";
				body: dependency (ProliantProcessor [ 879424-B21 || 879424-L21 || 880168-B21 || 880168-L21 || 879423-B21 || 879423-L21 || P24475-B21 || P24475-L21 || P24476-B21 || P24476-L21 ] > 0, ProliantDriveCage [ 826686-B21 ] = 0);
			}

			//PRS Modified the rule for PERT-18911 18-Jan-2020
			constraint DriveCage_R32 {
				message: "If this option is selected with a 126W or higher Processor, then the HPE DDR4 DIMM Blanks Kit (P07818-B21) must also be ordered.
						  (IMPORTANT!  If the Memory DIMM QTY=24, then this rule IS NOT Applicable.)";
				body: dependency (ProliantDriveCage [ 826686-B21 ] > 0 && ProliantProcessor [ iNumWattage > 126 ] && ProliantMemoryArray < 24, MemoryBlankKit [ P07818-B21 ] > 0);
			}
			constraint DriveCage_R33 {
				message: "If this option is ordered with one of the below listed processors, then the HPE DDR4 DIMM Blanks Kit (P07818-B21) must also be ordered:</br>
								*X5122 - (826858-B21/L21)</br>
								*X6128 - (826864-B21/L21)</br>
								*X8156 - (871616-B21/L21)</br>
								*X5222 - (P02500-B21/L21)</br>
								*X8256 - (P02519-B21/L21)</br>
								*X6250 - (P24475-B21/L21)</br>
								*X6256 - (P24476-B21/L21)
								";
				body: dependency (ProliantDriveCage [ 826686-B21 ] > 0 && ProliantProcessor [ 826858-B21 || 826858-L21 || 826864-B21 || 826864-L21 || 871616-B21 || 871616-L21 || P02500-B21 || P02500-L21 || P02519-B21 || P02519-L21 || P24475-B21 ||
				P24475-L21 || P24476-B21 || P24476-L21 ] > 0, MemoryBlankKit [ P07818-B21 ] > 0);
			}
			constraint CtrlSAS_r5 {
				message: "Max Qty=1 per server";
				body: restriction (ProliantStorageContSASSA [ 870549-B21 ] <= 1);
				restriction (ProliantStorageContSASSA [ 870658-B21 ] <= 1);
				restriction (ProliantStorageContSASSA [ P44219-B21 ] <= 1); //SE - For PERT 22462     26-Apr-2021

			}
			constraint DriveCage_r14_1 {
				message: "It is necessary to deselect the primary controller P408i-a and replace it with the P816i-a controller if ANY of the following has occurred:</br>
							* If the P408i-a Controller is by default as the Primary Controller on the 24SFF Model-X and only ONE line item from following list has been selected:</br>
	 						* Qty=1 DL38X Gen10 12Gb SAS Expander (870549-B21)
							* Qty=2 2SFF Riser (826688-B21).";
				body:
				if(thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) >= "868704-B21 P19719-B21").count > 0) and (thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
				"870549-B21 804331-B21").count >= 1) and (thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21 826687-B21").count > 1) then thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id,
				"#").get(0) <= "804338-B21").count = 1;

				//				if thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "24SFF" and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <="870549-B21 804331-B21").count >= 1 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21 826687-B21").count > 1
				//				then thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <="804338-B21").count = 1; 
				//				if thisConfig.getInstancesOfModel("DL380Gen10").filter(y => split(y.id, "#").get(0) >= "868704-B21").count >0 && thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <="870549-B21 804331-B21").count >= 1 && thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21 826687-B21").count > 1 then
				//				thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <="804338-B21").count >= 1 && thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <="804331-B21").count = 0;

				//				if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826691-B21 826690-B21 826688-B21 826687-B21").count >= 1 then thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
				//				"870549-B21").count >= 1 or (thisConfig.getInstancesOfModel("DL380Gen10").filter(y => split(y.id, "#").get(0) >= "868703-B21").count >0 and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "804338-B21").count >= 1 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id,
				//				"#").get(0) <= "826690-B21 826691-B21 826687-B21 826688-B21").count >= 1) or (thisConfig.getInstancesOfModel("DL380Gen10").filter(y => split(y.id, "#").get(0) >= "868705-B21").count >0 and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "804338-B21").count >= 1 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id,
				//				"#").get(0) <= "826687-B21 826688-B21").count <= 1)  or thisInst.selected(ProliantStorageContSASSA).count >= 2;

			}
			constraint DriveCage_r18_1 {
				message: "If the Qty=2, then the Universal Media Bay (826708-B21)must also be selected.";
				body:
				//if thisInst.selected(ProliantDriveCage).filter(x => split(x.id,"#").get(0) <= "826687-B21").count = 2 &&
				//(thisInst.id = "868703-B21" or thisInst.id = "875782-B21")
				//then thisInst.selected(ProliantDriveCage).filter(x => split(x.id,"#").get(0) <="826708-B21").count >= 1;
				dependency (DL380Gen10 [ 868703-B21 || R1R46A || P19720-B21 ] && ProliantDriveCage [ 826687-B21 ] = 2, ProliantDriveCage [ 826708-B21 ] = 1);
			}
			constraint DriveCage_r18_2 {
				message: "To install on the rear select the High Perfomance Fan Kit, otherwise select Universal Media Bay .";
				body:
				if(thisInst.id = "868703-B21" or thisInst.id = "R1R46A" or thisInst.id = "875782-B21" or thisInst.id = "P19720-B21") && thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826687-B21 826687-B21#0D1").count = 1 &&
				thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826708-B21 826708-B21#0D1").count <= 0 then thisInst.selected(CoolingFan).filter(x => x.id <= "867810-B21 867810-B21#0D1").count >= 1;
			}
			constraint DriveCage_r17 {
				message: "This option 826687-B21 has the capability of supporting 2 NVMe drives. To enable this NVMe support, the following must be selected:<br/>
						* The 2SFF NVMe Instruction Spec (878189-B21) must be selected.<br/>
						* The Universal Media Bay (826708-B21) must be selected.  Note:  This functionality is only allowed for drives mounted in the front of the server.</br>
						* The High Performance Fan Kit (867810-B21) must be selected.</br>					
						* Enough port to support NVMe drives of the following NVMe Risers must be selected:</br>
						       * 1-Port Slimline Riser (867806-B21)</br>
						       * 1-Port Slimline FIO Riser (871673-B21)</br>
						       * 2-Port Slimline Tertiary Riser (867808-B21)";
				body:
				{
					val bBase_8SFF = thisInst.bFormFactor = "8SFF";
					val intSlimeLine_Risers_Ports = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "867806-B21 867808-B21 871673-B21").sum(iNumSlimelinePorts);
					val DC87Drives = getDrivesInCage87; //thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count;
					val DC90Drives = getDrivesInCage90; //thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826690-B21").count;
					val enablement89 = thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878189-B21").count;
					val enablement92 = thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878192-B21").count;
					if DC87Drives > 0 then bBase_8SFF && enablement89 > 0 && thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826708-B21").count > 0 && thisInst.selected(CoolingFan).filter(x => split(x.id, "#").get(0) <=
					"867810-B21").count > 0 && intSlimeLine_Risers_Ports * 2 >= (DC87Drives + DC90Drives);
				}
			}
			constraint DriveCage_r20 {
				message: "This option 826690-B21 has the capability of supporting 2 NVMe drives.  To enable this NVMe support, ALL of the following must occur: <br/> 
	                          * The 6+2 NVMe Instruction Spec (878192-B21) must be selected.<br/>
	                          * The 8SFF Model-X must be selected.<br/>
	                          * The High Performance Fan Kit (867810-B21) must be selected.<br/>
	                          * Enough port to support NVMe drives of the following NVMe Risers must be selected:<br/>
	                         - 1-Port Slimline Riser (867806-B21)<br/>
	                         - 1-Port Slimline FIO Riser (871673-B21)<br/>
	                         - 2-Port Slimline Tertiary Riser (867808-B21)<br/>";
				body:
				{
					val bBase_8SFF = thisInst.bFormFactor = "8SFF";
					val intSlimeLine_Risers_Ports = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "867806-B21 867808-B21 871673-B21").sum(iNumSlimelinePorts);
					val DC87Drives = getDrivesInCage87; //thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count;
					val DC90Drives = getDrivesInCage90; //thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826690-B21").count;
					val enablement89 = thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878189-B21").count;
					val enablement92 = thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878192-B21").count;
					if thisInst.subTypes.get(0) = "BTO" then true else (if DC90Drives > 0 then bBase_8SFF && enablement92 > 0 && thisInst.selected(CoolingFan).filter(x => split(x.id, "#").get(0) <= "867810-B21").count > 0 && intSlimeLine_Risers_Ports *
					2 >= (DC87Drives + DC90Drives));
				}
			}

			//For ALM 141026
			constraint HardDrives_nvme_sas_sata {
				message: "The selected hard drives do not have sufficient or supported Drive cage to be filled.";
				body:
				{
					val nvmecage_8sff = thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826690-B21").count;
					val nvme_enablement_8sff = thisInst.selected(NVMEnablement).filter(a => split(a.id, "#").get(0) <= "878192-B21").count;
					val nvmecage_2sff = thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826687-B21").count;
					val nvme_enablement_2sff = thisInst.selected(NVMEnablement).filter(a => split(a.id, "#").get(0) <= "878189-B21").count;
					val nvme_hd = thisInst.selected(ProliantHardDrive_HP_SFF_NVME).count;
					val other_hd = thisInst.selected(ProliantHardDrive).filter(tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SAS4" || tDriveType = "SAS_SFF" || tDriveType = "SATA" || tDriveType = "SATA-SSD" || tDriveType = "SATA_SFF" ||
					tDriveType = "SSD_SFF").count;
					val remainder = mod (nvme_hd, 2);
					if thisInst.id >= "P19720-B21" and nvmecage_8sff > 0 and nvme_enablement_8sff > 0 and nvmecage_2sff > 0 and nvme_enablement_2sff = 0 and nvme_hd > 0 then other_hd <= ((8 + (nvmecage_8sff * 8) + (nvmecage_2sff * 2)) - ((nvme_hd) +
					remainder)) and nvme_hd <= (nvmecage_8sff * 2);
				}
			}

			//PRS Modified the rule for PERT-18911 31-Dec-2019
			constraint DriveCage_r40 {
				message: "In order to enable NVMe support for the drive bays, THEN the 2SFF NVMe Instruction Spec (878189-B21) MUST be selected.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count > 0 then false;
			}
			constraint DriveCage_r41 {
				message: "If this option 826690-B21 is selected, then the 6+2 NVMe Instruction Spec (878192-B21) MUST also be selected.";
				body: if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826690-B21").count > 0 then thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878192-B21").count > 0;
			}

			//				// JCN ALM 134763
			//				constraint DriveCage_r11 {
			//					message : "For use only with 8SFF Mod-X.";
			//					body: dependency (~DL380Gen10 [ 868703-B21 || 875782-B21 || P19720-B21 ] > 0, ProliantDriveCage [826690-B21] = 0);
			//				}
			constraint DriveCage_r26 {
				message: "If there is a Max Qty=3 of the Premium 8SFF HDD Bay (826690-B21) or Max Qty=3 of the NVMe 8 SSD Express Bay (826689-B21) ordered, then the Universal Media Bay (826708-B21) CAN NOT be ordered.";
				body: dependency (ProliantDriveCage [ 826689-B21 || 826690-B21 ] = 3, ProliantDriveCage [ 826708-B21 ] = 0);
				//				dependency (ProliantDriveCage [ 826690-B21 ] = 3, ProliantDriveCage [ 826708-B21 ] = 0); //ALM 131152

			}
			constraint DriveCage_37 {
				message: "When ANY of the following drive cage combinations occur on the 8SFF Model-X, 
						  the 8SFF SAS/SATA drive cage that comes standard as part of the 8SFF Model-X must be physically removed to allow space for the additional drive cages.  
						  The ordering tools must account for the removal of this 8SFF drive cage and must reduce the SAS/SATA drive Max Capacity limits by a Qty=8.</br>

	
							Drive Cage Combinations:</br>
							* (Qty=3) NVMe Express Bay [826689-B21]</br>
							* (Qty=2) NVMe Express Bay [826689-B21] and (Qty=1) Universal Media Bay 	[826708-B21]</br>
							* (Qty=2) NVMe Express Bay [826689-B21] and (Qty=1) Premium 8SFF HDD Bay 	[826690-B21]</br>
							* (Qty=3) Premium 8SFF HDD Bay 	[826690-B21]</br>
							* (Qty=2) Premium 8SFF HDD Bay 	[826690-B21] and (Qty=1) Universal Media Bay 	[826708-B21]</br>
							* (Qty=2) Premium 8SFF HDD Bay 	[826690-B21] and (Qty=1) NVMe Express Bay 		[826689-B21]</br>
							* (Qty=1) NVMe Express Bay 		[826689-B21] and (Qty=1) Premium 8SFF HDD Bay 	[826690-B21] and (Qty=1) Universal Media Bay [826708-B21]";
				body:
				{
					val driveCageFront = "826689-B21 826690-B21 826708-B21";
					if((thisInst.id = "875782-B21" or thisInst.id = "868703-B21" or thisInst.id = "R1R46A" or thisInst.id = "P19720-B21") and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= driveCageFront).count = 3) then
					thisInst.selected(ProliantHardDrive).count <= 24; //ALM 131152

					//    			if(thisInst.id = "875782-B21" or thisInst.id = "868703-B21" or thisInst.id = "R1R46A" or thisInst.id = "P19720-B21") then ((thisInst.selected(ProliantHardDrive_HP_SFF).count) -
					//				thisInst.selected(ProliantHardDrive_HP_SFF_NVME).count) <= maxSFF () and thisInst.selected(ProliantHardDrive_HP_SFF_NVME).count <= maxNVME ();

				}
			}
			constraint DriveCage_41 {
				message: "If this option (826690-B21) is selected, then the 6+2 NVMe Instruction Spec (878192-B21) MUST also be selected.";
				body: if thisInst.id = "826690-B21" then thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878192-B21").count > 0;
			}
			constraint CTO_r3_a {
				message: "Note: If the SAS Expander (870549-B21) is de-selected, a Qty=2 of the DL380 Gen9 8SFF H240 Cable Kit (786092-B21) MUST BE ordered.";
				body:
				if((thisConfig.getProperty("targetEnvironment") >= "ezc" or thisConfig.getProperty("targetEnvironment") >= "ipcs" or thisConfig.getProperty("targetEnvironment") >= "sce" or thisConfig.getProperty("targetEnvironment") >= "eocs") and
				thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868704-B21 875783-B21 P19719-B21").count > 0 and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
				"870549-B21 870658-B21").count = 0) or ((thisConfig.getProperty("targetEnvironment") >= "oca") and (thisInst.id = "875783-B21" or thisInst.id = "868704-B21" or thisInst.id = "P19719-B21") and
				thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= "870549-B21 870658-B21").count = 0) then thisInst.selected(ProliantMiniSasCable).filter(x => split(x.id, "#").get(0) <= "786092-B21").count >= 2; //RPA Fixed for ALM 117719 since the KE mentioned the incorrect part number in the constraint as 870549-B212 so it fails on ecomcat ALM TICKET 118908

			}
			constraint CTO_r3_b {
			//message: "If the P824i-p Controller (870658-B21) is selected as the Primary SAS/SATA controller, the Qty=2 of the DL380 Gen9 8SFF H240 Cable Kit (786092-B21) is NOT required.";
				message: "If the P824i-p Controller is selected as the Primary SAS/SATA controller, the Qty=2 of the DL380 Gen9 8SFF H240 Cable Kit (786092-B21) is NOT required.";
				body:
				if thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868704-B21 875783-B21 P19719-B21").count > 0 and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
				"870658-B21").count > 0 and thisInst.selected(ProliantMiniSasCable).filter(x => split(x.id, "#").get(0) <= "786092-B21").count >= 1 then false;
			}
			constraint controllerFor24SFF {
				message: "	An extra controller is required for 24SFF model in order to support the remaining 12 bays, based on the Embedded controller that only can support 12 SATA bays.</br> 
								All of the Base Model-X drive slots must be connected to the controller.</br>
								* HPE 12Gb SAS Expander Card (This option requires an additional Cntrlr to be selected)</br>
								* HPE Smart Array P816i-a Cntrlr</br>  
								* HPE Smart Array P408i-a Cntrlr</br>
								* HPE Smart Array P408i-p Cntrlr</br>  
								* HPE Smart Array E208i-a Cntrlr</br>  
								* HPE Smart Array E208i-p Cntrlr</br> 
								* HPE Smart Array P824i-p Cntrlr";
				body:
				{
				//					val controllerList1 = "870549-B21 804338-B21 870658-B21";
				//					val controllerList2 = "804326-B21 804331-B21 804394-B21 830824-B21";
					val models = "868704-B21 875783-B21 P19719-B21";
					val maxControllerSATA = controllersCount + 12;
					if(thisConfig.getProperty("targetEnvironment") = "ezc" or thisConfig.getProperty("targetEnvironment") = "ipcs") and thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= models).count > 0 and
					(maxControllerSATA < 24) then false else if(thisConfig.getProperty("targetEnvironment") = "oca" or thisConfig.getProperty("targetEnvironment") = "sce" or thisConfig.getProperty("targetEnvironment") = "eocs") and (thisInst.id =
					"868704-B21" or thisInst.id = "875783-B21" or thisInst.id = "P19719-B21") and (maxControllerSATA < 24) then false;
					//							thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id,"#").get(0) <= models).count >0 then 
					//							thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "24SFF" then 
					//thisInst.id = "868704-B21" then thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <= controllerList2).count >= 2 or thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) <=
					//controllerList1).count >= 1;

				}
			}
			constraint HardDrives_sff_maxmin {
				message: "Reach maximum SFF Hard drives available for selection";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826687-B21 || 826688-B21 || 826690-B21 || 826691-B21 || 867805-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType
				= "SATA-SSD" || tDriveType = "SATA" ] <= 8); //RTR ALM 125276
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 || 826690-B21 || 826691-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" ||
				tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 10);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1 && ! ProliantDriveCage [ 826691-B21 || 826690-B21 || 826689-B21 ], ProliantHardDrive_HP_SFF [ tDriveType =
				"SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 12);
				//ALM 119446
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 3, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType =
				"SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 28);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826688-B21 || 826691-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" ||
				tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 18);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826688-B21 || 826690-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826691-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" ||
				tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 18);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826690-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826691-B21 ] = 1, ProliantHardDrive_HP_SFF [
				tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 20);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 2 && ! ProliantDriveCage [ 826688-B21 || 826690-B21 || 826691-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" ||
				tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 12);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 2 && ProliantDriveCage [ 826690-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType =
				"SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 20);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 2 && ProliantDriveCage [ 826690-B21 ] >= 2, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" ||
				tDriveType = "SATA" ] <= 28);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 || 826690-B21 || 826691-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" ||
				tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 10);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826687-B21 || 826691-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" ||
				tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 18);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826687-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType =
				"SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 26);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826687-B21 || 826691-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826691-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" ||
				tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 18);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826687-B21 || 826691-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1 && ProliantDriveCage [ 826691-B21 ] = 1,
				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 26);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 2 && ! ProliantDriveCage [ 826687-B21 || 826690-B21 || 826691-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" ||
				tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 12);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826687-B21 || 826691-B21 ] && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 826690-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" ||
				tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 20);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826687-B21 || 826690-B21 ] && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 826691-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" ||
				tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 20);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 || 826687-B21 || 826691-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" ||
				tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 16);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 2 && ! ProliantDriveCage [ 826688-B21 || 826687-B21 || 826691-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" ||
				tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 24);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantDriveCage [ 826689-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 || 826687-B21 || 826691-B21 ], ProliantHardDrive [ tDriveFormFactor = "sff" ] <=
				//				16);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantDriveCage [ 826688-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 || 826691-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" ||
				tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 26);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType =
				"SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 18);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 3 && ! ProliantDriveCage [ 826688-B21 || 826687-B21 || 826691-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" ||
				tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 24); //Dependency rest
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 || 826691-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 || 826687-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" ||
				tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 16);
				//RTR ALM 120007
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ! ProliantDriveCage [ 826689-B21 || 826690-B21 ], ProliantHardDrive_HP_SFF_NVME <= 2);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 || 826689-B21 ], ProliantHardDrive_HP_SFF_NVME <= 2); //VLR ALM TICKET 115991
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826689-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 4);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 2 && ! ProliantDriveCage [ 826690-B21 || 826689-B21 ], ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 4);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 2 && ! ProliantDriveCage [ 826687-B21 || 826689-B21 ], ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 4);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 2 && ProliantDriveCage [ 826690-B21 ] = 1 && ! ProliantDriveCage [ 826689-B21 ], ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 6);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ! ProliantDriveCage [ 826689-B21 ], ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 6);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 3 && ! ProliantDriveCage [ 826689-B21 || 826687-B21 ], ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 6);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 3 && ProliantDriveCage [ 826687-B21 ] = 1 && ! ProliantDriveCage [ 826689-B21 ], ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 8);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 || 826690-B21 ], ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 8);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826687-B21 || 826690-B21 ] = 1, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 10);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826687-B21 || 826690-B21 ] = 2, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 12);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826687-B21 || 826690-B21 ] = 3, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 14); //VLR ALM TICKET 115991
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 2 && ! ProliantDriveCage [ 826687-B21 || 826690-B21 ], ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 16);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 2 && ProliantDriveCage [ 826687-B21 || 826690-B21 ] = 1, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 18); //VLR ALM TICKET 115991
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 2 && ProliantDriveCage [ 826687-B21 || 826690-B21 ] = 2, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 20);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 || 826687-B21 ] > 3 || ProliantDriveCage [ 826689-B21 ] = 3, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 20);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ! ProliantDriveCage [ 826687-B21 ] && ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType =
				"SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 6, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 12);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ! ProliantDriveCage [ 826687-B21 ] && ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType =
				"SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] = 7, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 11);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ! ProliantDriveCage [ 826687-B21 ] && ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType =
				"SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] >= 8 && ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 14, ProliantHardDrive_HP_SFF_NVME [
				tDriveType = "NVME" ] <= 10);
				//dependency (DL380Gen10[868703-B21] && ProliantDriveCage[826689-B21] = 1 && ProliantDriveCage[826690-B21] = 2 && !ProliantDriveCage[826687-B21] && ProliantHardDrive_HP_SFF[tDriveType="SAS" || tDriveType="SAS-SSD" || tDriveType="SATA-SSD"] >= 14, ProliantHardDrive_HP_SFF_NVME[tDriveType="NVME"] <= 8);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826688-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1 && ProliantHardDrive_HP_SFF [
				tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] = 18, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 8);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826688-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1 && ProliantHardDrive_HP_SFF
				[ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] = 16, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 10);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826688-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1 && ProliantHardDrive_HP_SFF
				[ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] = 10 && ProliantHardDrive_HP_uFF = 0, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 10);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ! ProliantDriveCage [ 826688-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1 && ProliantHardDrive_HP_SFF
				[ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] = 10 && ProliantHardDrive_HP_uFF = 2, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 8);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType =
				"SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 6 && ProliantHardDrive_HP_uFF = 0, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 14);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType =
				"SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] = 7 && ProliantHardDrive_HP_uFF = 0, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 14);
				//END RTR ALM 120007
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] = 1 &&
				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 6, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 13);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] >= 2 &&
				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 6, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 12);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] = 1 &&
				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] = 7, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 12);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] = 1 &&
				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] = 8, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 11);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826689-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] >= 2 &&
				ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 6, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 12);
				//dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 || 826690-B21 || 826691-B21 ], ProliantHardDrive_HP_uFF <= 2);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1, ProliantHardDrive_HP_uFF <= 4);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826691-B21 ] = 1, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826687-B21 ] = 2 && ! ProliantDriveCage [ 826688-B21 || 826690-B21 || 826691-B21 ], ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 4);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 || 826690-B21 || 826691-B21 ], ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 2, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826691-B21 ] = 1, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826690-B21 ] = 1 && ProliantDriveCage [ 826691-B21 ] = 1, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 2 && ! ProliantDriveCage [ 826687-B21 || 826690-B21 || 826691-B21 ], ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 4);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 826690-B21 ] = 1, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 4);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 826691-B21 ] = 1, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 4);
				//				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 ] = 2 && ProliantDriveCage [ 826688-B21 ] = 1, ProliantHardDrive_HP_uFF [ tDriveType = "uFF" ] <= 2);
				dependency (DL380Gen10 [ 868704-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 ], ProliantHardDrive_HP_SFF_NVME <= 2);
				//dependency (DL380Gen10 [ 868704-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ! ProliantDriveCage [ 826688-B21 ], ProliantHardDrive_HP_uFF <= 2);
				//dependency (DL380Gen10 [ 868704-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 ], ProliantHardDrive_HP_uFF <= 2);
				//dependency (DL380Gen10 [ 868704-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826687-B21 ] = 1, ProliantHardDrive_HP_uFF <= 4);
				dependency (DL380Gen10 [ 868704-B21 ] && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826687-B21 ] = 1, ProliantHardDrive_HP_SFF_NVME <= 2);
				//dependency (DL380Gen10 [ 868704-B21 ] && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 826687-B21 ] = 1, ProliantHardDrive_HP_uFF <= 6);
				dependency (DL380Gen10 [ 868704-B21 ] && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 826687-B21 ] = 1, ProliantHardDrive_HP_SFF_NVME <= 2);
				//				dependency (DL380Gen10 [  bFormFactor = "8LFF" || bFormFactor = "12LFF" ] && ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <=
				//				2);
				//				dependency (DL380Gen10 [  bFormFactor = "8LFF" || bFormFactor = "12LFF" ] && ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 2, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <=
				//				4);
				dependency (DL380Gen10 [ bFormFactor = "8SFF" ] && ProliantDriveCage [ 826690-B21 || 826691-B21 ] = 2 && ProliantDriveCage [ 826708-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 || 826688-B21 || 826689-B21 || 826691-B21 || 867805-B21 ||
				873781-B21 ], ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType = "SATA" ] <= 16);
				//ALM 124155 - drivecage 867805-B21 was missing 
				dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "12LFF" ] && ProliantDriveCage [ 826687-B21 || 826688-B21 || 867805-B21 ] = 1, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType =
				"SATA-SSD" || tDriveType = "SATA" ] <= 2);
				dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "12LFF" ] && ProliantDriveCage [ 826687-B21 || 826688-B21 || 867805-B21 ] = 2, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType =
				"SATA-SSD" || tDriveType = "SATA" ] <= 4);
				dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "12LFF" ] && ProliantDriveCage [ 826687-B21 || 826688-B21 || 867805-B21 ] = 3, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType =
				"SATA-SSD" || tDriveType = "SATA" ] <= 6);
				dependency (DL380Gen10 [ bFormFactor = "8LFF" ] && ProliantDriveCage [ 826687-B21 || 826688-B21 || 867805-B21 ] = 4, ProliantHardDrive_HP_SFF [ tDriveType = "SAS" || tDriveType = "SAS-SSD" || tDriveType = "SATA-SSD" || tDriveType =
				"SATA" ] <= 8);
				//End ALM 124155
				dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "12LFF" ] && ProliantDriveCage [ 826687-B21 || 873781-B21 ] = 1, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 2);
				dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "12LFF" ] && ProliantDriveCage [ 826687-B21 || 873781-B21 ] = 2, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 4);
				//				dependency (DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_SFF_NVME [
				//				tDriveType = "NVME" ] <= 2);
				//				dependency (DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 1 && ProliantDriveCage [ 867805-B21 ] = 1 && ProliantDriveCage [ 826685-B21 || 826686-B21
				//				] >= 0, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 2);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1 && ProliantDriveCage [ 826688-B21 ] = 2 && ProliantDriveCage [ 826685-B21 || 826686-B21 ] >= 0, ProliantHardDrive_HP_SFF_NVME [
				//				tDriveType = "NVME" ] <= 2);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 873781-B21 ] = 1 && ! ProliantDriveCage [ 826687-B21 ], ProliantHardDrive_HP_SFF_NVME <= 2);
				//				dependency (targetEnv ("ezc", "ipcs") && DL380Gen10 [ 868706-B21 ] && ProliantDriveCage [ 873781-B21 ] = 1 && ProliantDriveCage [ 826687-B21 ] = 1, ProliantHardDrive_HP_SFF_NVME <= 4);
				//				dependency (DL380Gen10 [ 868705-B21 ] && ProliantDriveCage [ 826687-B21 ] = 1, ProliantHardDrive_HP_SFF_NVME [ tDriveType = "NVME" ] <= 2);

				//if thisInst.selected(DL380Gen10).filterByAttribute(bFormFactor, "8SFF").count > 0 || thisInst.selected(DL380Gen10).filterByAttribute(bFormFactor, "24SFF").count > 0 && nSFFHDcount () > nSFFHardDrives () //+ thisInst.iNumHarddiskBays
				if(thisConfig.getProperty("targetEnvironment") >= "oca" or thisConfig.getProperty("targetEnvironment") >= "ezc" or thisConfig.getProperty("targetEnvironment") >= "ipcs") and
				(thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "8SFF" or thisConfig.getInstancesOfModel("DL380Gen10").get(0).bFormFactor = "24SFF") then nSFFHDcount () <= nSFFHardDrives; //HK included for OCA - ALM 144588 01-Mar-2022

			}
			constraint minMemoryVsan {
				message: "When changing default storage on the DL380 8SFF -  vSAN All Flash 4 Accelerated Infrastructure Model, the total should be equal as the default or higher (6.240 TB or higher)";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "868703-B21" then thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) >= 6240.0;
				}
			}
			constraint minMemoryrVsanDataWarehouse {
				message: "When changing default storage on the DL380 24SFF - vSAN Hybrid 8 Storage Optimized, Data Warehouse Model, the total should be equal as the default or higher (15.2 TB or higher";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "868704-B21" then thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) >= 15200.0;
				}
			}
			constraint minMemoryVsan1 {
				message: "When changing default storage on the DL380 8SFF -  vSAN All Flash 4 Accelerated Infrastructure Model, the total should be equal as the default or higher (6.240 TB or higher)";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "P19720-B21" && thisInst.sVsanId = "dl380AccelInfra" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 4; //PRS Modified the rule as per BU confirmation for PERT-18954 06-Feb-2020
					//thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) >= 6240.0;

				}
			}
			constraint minMemoryrVsanDataWarehouse1 {
				message: "When changing default storage on the DL380 24SFF - vSAN Hybrid 8 Storage Optimized, Data Warehouse Model, the total should be equal as the default or higher (15.2 TB or higher";
				body:
				{
					if thisInst.selected(vSANTrackingSku).count > 0 && thisInst.id >= "P19719-B21" && thisInst.sVsanId = "dl380DataWare" then thisInst.selected(ProliantHardDrive).filter(tDriveSSD != "M2").count >= 8; //PRS Modified the rule as per BU confirmation for PERT-18954 06-Feb-2020	
					//thisInst.selected(ProliantHardDrive).sum(dHardDriveSizeGB) >= 15200.0;

				}
			}
			constraint Upgarde_r1 {
				message: "Max Qty=1 per server";
				body: dependency (DL380Gen10 [ 0D1 ] > 0, SAP420iControllerCacheUpgrade <= 1);
			}
			constraint remark_UpgradeControllers {
				message: "The HPE Smart Storage Battery has the capability of supporting up to 6 P-class Smart Array controllers.  The Smart Hybrid Capacitor has the capability of supporting up to  3 P-class Smart Array controllers.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				{
					val upgradeProducts = thisInst.selected(SAP420iControllerCacheUpgrade).count;
					if upgradeProducts > 0 then false;
				}
			}
			constraint rule4A_Battery_SASControllers {
				message: "This option requires the selection of either the Smart Storage Battery (P01366-B21) or Smart Hybrid Capacitor (P02377-B21).  
							  The Storage Battery can support up to 6 P-Class controllers.  
							  The Smart Hybrid Capacitor can support up to 3 P-Class controllers.";
				body:
				{
					val smartBattery = thisInst.selected(SAP420iControllerCacheUpgrade).filter(x => split(x.id, "#").get(0) <= "P01366-B21").count;
					val smartHybrid = thisInst.selected(SAP420iControllerCacheUpgrade).filter(x => split(x.id, "#").get(0) <= "P02377-B21").count;
					if(pSeriesCntrl () > 0 and pSeriesCntrl () <= 3) then (smartHybrid > 0 or smartBattery > 0) else if(pSeriesCntrl () >= 4) then smartBattery > 0 and smartHybrid = 0;
					/*SE - Removed tool check for ALM 143407	23-Oct-2021
					if((isOCA or isOCS) and pSeriesCntrl () > 0 and pSeriesCntrl () <= 3) then (smartHybrid > 0 or smartBattery > 0) 
					else if((isOCA or isOCS) and pSeriesCntrl () >= 4) then smartBattery > 0 and smartHybrid = 0;*/
				}
			}
			constraint HardDrives_r3 {
				message: "NVMe drives ARE NOT supported on the 12LFF and 24SFF Model-X";
				body: dependency (DL380Gen10 [ bFormFactor = "12LFF" or bFormFactor = "24SFF" ] > 0, ProliantHardDrive_HP_SFF_NVME = 0);
			}
			constraint usb_rul1 { //SE - Added 0D1 check since the BIOS mode is a FIO products are only applicable for CTO servers. 
				message: "HPE 8GB Dual microSD USB Flash Drive Option is supported only in UEFI BIOS mode..";
				body: dependency (DL380Gen10 [ 0D1 ] && UsbMedia [ 741279-B21 ] > 0, ProliantBIOSMode [ 758959-B22 ] = 0);
			}
			constraint DriveCage_rul42 {
				message: "If HPE DL38X Gen10 2SFF HDD Riser Kit (826688-B21) and 3LFF Rear Drive Cage (826685-B21) are selected together on 8LFF Model X or 12LFF Model X then HPE DL38X Gen10 2SFF HDD Riser Kit (826688-B21) 
							will REPLACE the Primary PCIe Riser that comes standard with all Model-Xs. The 'PCIe Card Capacity Limits' must account for this replacement and make the necessary adjustments to the PCIe slot counts and characteristics.</br>

							When this combination is selected, the ordering tools must unselect the 'defaulted' Primary PCIe Riser that comes standard with the Model-X. ";
				body:
				if(thisInst.id >= "868709-291" or thisInst.id >= "868709-B21" or thisInst.id >= "P20172-291" or thisInst.id >= "P20172-B21" or thisInst.id >= "P20182-291" or thisInst.id >= "P20182-B21" or thisInst.id >= "868705-B21" or thisInst.id >=
				"868706-B21" or thisInst.id >= "875784-B21" or thisInst.id >= "875785-B21" or thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21") and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <=
				"826685-B21").count > 0 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count > 0 then thisInst.selected(standardDL380G10Riser).filter(x => split(x.id, "#").get(0) <=
				"standardDL380G10Riser").count = 0;
			}
			constraint DriveCage_rul43 {
				message: "Max selectable quantity of HPE DL38X Gen10 2SFF HDD Riser Kit (826688-B21) is limited to 1 if selected along with 3LFF Rear Drive Cage (826685-B21) on 8LFF Model X or 12LFF Model X.";
				body: dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "12LFF" ] && ProliantDriveCage [ 826685-B21 ] > 0 && ProliantDriveCage [ 826688-B21 ] > 0, ProliantDriveCage [ 826688-B21 ] <= 1);
			}
			constraint DriveCage_rul44 {
				message: "This drive cage option and Graphics Option cannot be selected together.";
				body: dependency (ProliantDriveCage [ 826686-B21 ] > 0, GraphicsPciCard = 0);
			}
			constraint ProcessorRule30_HDD {
				message: "Max of 8 NVMe Drives allowed for selection with this Processor (All NVMe Drives selected must be below 10W).";
				body: dependency (ProliantProcessor [ P24475-B21 || P24475-L21 || P24476-B21 || P24476-L21 || P28387-B21 || P28387-L21 ] > 0, ProliantHardDrive_HP_SFF_NVME [ P07179-B21 || P10210-B21 || P10212-B21 || P13668-B21 || P13670-B21 ||
				P13676-B21 || P13678-B21 || P19809-B21 || P19825-B21 ] <= 8);
			}
			constraint ProcessorRule30_HDD1 {
				message: "Max of 8 NVMe Drives allowed for selection with this Processor (All NVMe Drives selected must be below 10W).";
				body: if thisInst.selected(ProliantProcessor).filter(x => split(x.id, "#").get(0) <= "P24475-B21 P24475-L21 P24476-B21 P24476-L21 P28387-B21 P28387-L21").count > 0 then thisInst.selected(ProliantHardDrive_HP_SFF_NVME).filter(x =>
				split(x.id, "#").get(0) <= "P07179-B21 P10210-B21 P10212-B21 P13668-B21 P13670-B21 
																 												  P13676-B21 P13678-B21 P19809-B21 P19825-B21").count <= 8;
			}
			constraint ProcessorRule30_HDD1b {
				message: "When this processor is selected NVMe Drives selected must be below 10W.";
				body: if thisInst.selected(ProliantProcessor).filter(x => split(x.id, "#").get(0) <= "P24475-B21 P24475-L21 P24476-B21 P24476-L21 P28387-B21 P28387-L21").count > 0 then thisInst.selected(ProliantHardDrive_HP_SFF_NVME).filter(x =>
				split(x.id, "#").get(0) <= "878014-B21 P06952-B21 P07192-B21 P07196-B21 P10214-B21 P10222-B21 P10224-B21 P10226-B21 P13672-B21 P13674-B21 
																											      P13680-B21 P13695-B21 P13697-B21 P13699-B21 P13701-B21 P13703-B21 P19813-B21 P19817-B21 P19821-B21 P19829-B21
																											      P19833-B21 P19837-B21 P20015-B21 P20017-B21 P20019-B21 P20094-B21 P20096-B21 P20098-B21 P20100-B21 P20139-B21 
																											      P20141-B21 P20143-B21 P20203-B21 P20205-B21 P20207-B21 P20209-B21 P22268-B21 P22270-B21 P22272-B21 P22274-B21").count = 0;
			}
			constraint DriveCage_r46_LFF { //MFG ALM 143952 144000 144018 Jan 13 2022
				message: "If more than Qty 1 of any below drive cages are selected along with 4LFF Mid Tray (826686-B21) then 3POS cable kit (826709-B21) must be selected. <br>
						- 826687-B21 - HPE DL38X Gen10 Premium 2SFF HDD Kit <br>
						- 826688-B21 - HPE DL38X Gen10 2SFF HDD Riser Kit <br>
                         *This rule is not applicable in below scenarios <br>
						- If SAS Expander (870549-B21) is selected. <br>
						- If P816i/824i is a Primary Controller on 8LFF Model X/ 12LFF Model X. <br>
						- If Secondary SAS controller selected on 8LFF Model X/ 12LFF Model X.";
				enabled: (thisInst.tFormFactor = "lff");
				body:
				if(thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21 826688-B21").count > 1 and thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826686-B21").count > 0) then
				(driveBaysTotalCount () <= controllersCount ()) or thisInst.selected(ProliantMiniSasCable).filter(x => split(x.id, "#").get(0) = "826709-B21").count > 0;
			} //24827
			constraint removalreplacement_8sffmodx {
				message: "HPE 8SFF Front Remove SPEC Perf FIO(873763-B21) is only supported with 8SFF Model-X";
				enabled: ! isBandingPage; //AB 01-Feb- 2022 For ALM ID: 144327
				body: dependency (! DL380Gen10 [ 868703-B21 || P19720-B21 ], RemovalReplacement [ 873763-B21 ] = 0);
			}
			constraint HDHotPlugSFF_r5_8SFF {
				message: "This option cannot be populated in Rear Drive cages. Consider this limitation for selection of Drives with these cages.";
				body: if thisInst.id >= "868703-B21" or thisInst.id >= "P19720-B21" then front_rear_drive_cage_HDDdrives_check ();
			}
			constraint HDHotPlugSFF_r5_24SFF {
				message: "PM6 drives cannot be populated in Rear Drive cages. Consider this limitation for selection of Drives with these cages.";
				body:
				{
					val pm6driveslist =
					"P26302-B21 P26310-B21 P26314-B21 P26354-B21 P26358-B21 P26362-B21 P26372-B21 P26376-B21 P49030-B21 P49034-B21 P49039-B21 P49044-B21 P49048-B21 P49052-B21 P49056-B21";
					// HK added P49028-B21 P49030-B21 P49034-B21 P49039-B21 P49044-B21 P49046-B21 P49048-B21 P49052-B21 P49056-B21
					// HK removed P26285-B21 P26290-B21 P26295-B21 P26306-B21 P49028-B21 & P49046-B21 for PERT 24929 12-Feb-2022
					val pm6drivescount = thisInst.selected(ProliantHardDrive).filter(x => split(x.id, "#").get(0) <= pm6driveslist).count;
					val driveCage1 = 2 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count; //front & rear
					val driveCage2 = 8 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826690-B21").count; //dual 
					val driveCage3 = 8 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826691-B21").count; //normal
					val driveCage5 = 8 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826689-B21").count; //only nvme
					val driveCage7 = 2 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count; //full rear
					val mediabay = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826708-B21").count; //universal media
					val totalcage1 = driveCage2 + driveCage3;
					val totalcage2 = driveCage5 + driveCage7;
					val model24sff = totalcage1 + 24;
					if(thisInst.id >= "868704-B21" or thisInst.id >= "P19719-B21") then if driveCage1 > 0 then pm6drivescount <= model24sff else if(model24sff > 0 and totalcage2 > 0 and driveCage1 >= 0) and pm6drivescount > model24sff then false;
				}
			}
			constraint hard_drive_warning {
				message: "In order to have SED feature on NVMe SED drives connected via direct attach,</br>
						Local Key Management requires TPM2.0</br>
						Remote Key Management requires iLO Adv";
				body: if thisInst.selected(ProliantHardDrive_HP_SFF_NVME).filter(x => split(x.id, "#").get(0) <= "P44572-B21 P44580-B21 P44588-B21 P44596-B21").count > 0 then false;
			}
			constraint DriveCage_r45_SFF { //MFG ALM 143952 144000 144018 Jan 13 2022
				message: "If more than Qty 2 of any below drive cages are selected then 3POS cable kit (826709-B21) must be selected if no internal SAS Controller selected for these Cages. <br>
							- 826687-B21 - HPE DL38X Gen10 Premium 2SFF HDD Kit <br>
							- 826688-B21 - HPE DL38X Gen10 2SFF HDD Riser Kit <br>
                             *This rule is not applicable if SAS Expander (870549-B21) is selected.";
				enabled: (thisInst.tFormFactor = "sff");
				body:
				if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21 826688-B21").count > 2 then (driveBaysTotalCount () <= controllersCount ()) or thisInst.selected(ProliantMiniSasCable).filter(x => split(x.id,
				"#").get(0) = "826709-B21").count > 0;
			}
		   	
		   	ifEffective NL_25024_1016427 {
				constraint UnsupportedssdSKU { 
				message: "Unsupported SKU for OCC/OCS";
				body: dependency (! targetEnv ("oca"), ProliantHardDrive_HP_SFF_SATA [ P54827-B21 || P54823-B21 ] = 0);
			   }
			}	
			
			
		} //End deviceSubsystem definition		
		subsystem pciUpgradeSubsystem {
		//			part addDefaultsBatteryTrigger: triggerConsequentialSelectionNoRestore {
		//				string[] consequentialSelectionFunc: "defaultBatteryPseries";
		//			}
		//SE - Move this constraint logic to the correct subsystem for PERT 17885  27-Nov-2019
			constraint graphicOptionswarning {
				message: "Additional Software Requirement!  If this order includes an NVIDIA GPU option and the intended use of this NVIDIA GPU Option is for a virtual desktop or virtual workstation (VDI) virtual GPU deployment, 
							you must procure additional NVIDIA GRID® Virtual PC (GRID vPC) and GRID® Virtual Apps (GRID vApps) Software Licenses.  
							See <a href=\"https://h20195.www2.hpe.com/v2/getdocument.aspx?docname=a00059765enw#\">HPE Complete NVIDIA GRID Solutions</a> for more details. ";
				body: true;
			}
		}
		subsystem RiserCardsSubsystem {

		//RV 20-Mar-2020 ALM.135245 - same rule working correct from DL380G10common. So removing this unwanted ovverdden rule
		/* constraint RiserCards_r18 {
				message: "When this option (P14373-B21, P14374-B21 ) is ordered, a Min Qty=4 of  below  GPU must be ordered:</br>
						 * HPE NVIDIA Tesla T4 16GB Module (R0W29C)  </br>
 						 * HPE NVIDIA Tesla T4 GPU (R0W29A) ";
				body: dependency (ProliantPciRiser [ P14374-B21 ], GraphicsPciCard [ R0W29A || R0W29C ] >= 4);
				dependency (ProliantPciRiser [ P14373-B21 ], GraphicsPciCard [ R0W29A || R0W29C ] >= 4);
			}8/

		//			ifEffective NL_15787_36DL { 						//NL added for PERT 15787 , 06-Sept-2019
		//				constraint Risercards_r20 {
		//					message: "If this option (P14373-B21, P14374-B21 ) is ordered with the 24SFF Model-X, then the Tertiary x16 Riser (826700-B21) must also be ordered.";
		//					body: dependency (DL380Gen10 [ bFormFactor = "24SFF" ] > 0 and ProliantPciRiser [ P14373-B21 || P14374-B21 ] > 0, ProliantPciRiser [ 826700-B21 ] > 0);
		//				}
		//				constraint RiserCards_r18 {
		//					message: "When this option (P14373-B21, P14374-B21 ) is ordered, a Min Qty=6 of  below  GPU must be ordered:</br>
		// 						 * HPE NVIDIA Tesla T4 GPU (R0W29A) ";
		//					body: dependency (ProliantPciRiser [ P14374-B21 || P14373-B21 ], GraphicsPciCard [ R0W29A ] = 6);
		//				}		
		//			}			

		//BTO rules
		/* @Author: Reyna Torres
		 * @Description: Standard riser comes already integrated in the model.
		 */
//		constraint standrdRiserInBTOs{
		//			message: "Riser Inegrated.";
		//			body: dependency(DL380Gen10 [ BTO ] , StandardProliantPciRiser [ standardDL380G10Riser ] = 1);
		//		}
		//		/* @Author: Reyna Torres
		//		 * @Description: Standard riser cannot be deselected because it comes already integrated in the model.
		//		 */
		//		constraint noPrimaryRiserInBTO{
		//			message: "Not able to add primary riser because standard riser comes alrady integrated in the model.";
		//			body: dependency(DL380Gen10 [ BTO ], ProliantPciRiser [  tCardType = "type_1" ] <= 1);
		//		}
		//		
		//		//RTR Max qty for M2 Enablement Kit
		//			constraint maxmin_M2Adapter {
		//				message: "Max qty = 1.";
		//				body: restriction (SSDEnablmtKit [ 878783-B21 ] <= 1);
		//			}
		//			//RTR ALM119620
		//			constraint maxmin_slots {
		//				message: "Reach max capacity of PCIe Cards, select another riser to increase the max capacity of the slots.";
		//				body:
		//				{
		//					val availableSlotsx8 = countPCIe8Available + countPCIe16Available - countPCIex16;
		//					if(countPCIex8 > availableSlotsx8) or (countPCIex16 > countPCIe16Available) then false;
		//				}
		//			}
		//			/* @Author: Reyna Torres
		//		 * @Source: ALM 117602
		//		 * @MenuSection: Riser Cards
		//		 * @Description: Standard riser needs to be removed when a primary riser has been selected.
		//		 */
		//			constraint standardRemWhilePrimRiserSelected {
		//				message: "Not able to be selected when a primary riser is ordered.";
		//				body: dependency (ProliantPciRiser [ 826701-B21 || 867807-B21 || 871673-B21 || 871674-B21 || 871676-B21 ] > 0 && StandardProliantPciRiser [ standardDL380G10Riser ] = 0, StandardProliantPciRiser [ standardDL380G10Riser ] = 0);
		//			}
		//			/* @Author: Paola Fuentes
		//			 * @Source: PPM 71523
		//			 * @MenuSection: M.2 - Riser
		//			 * @RuleNumber: 1
		//			 * @EffectivityID: PFA_DL380G10
		//			 * @Description: Riser Cards subsystem
		//			 */
		//// RTR Commented because is duplicated with M2PCIeAdapters_r1
		////			constraint M2Riser_r1 {
		////				message: "Warning!!! If this option is selected along with the Universal Media Bay (826708-B21), NO Optical Devices can be selected.";
		////				body:
		////				if thisInst.selected(SSDEnablmtKit).filter(x => split(x.id, "#").get(0) <= "878783-B21").count > 0 then false;
		////			}
		//
		//			/* @Author: Paola Fuentes
		//			 * @Source: PPM 71523
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 0
		//			 * @EffectivityID: PFA_DL380G10
		//			 * @Description: Standard Riser max 1 
		//			 */
		//			constraint RiserCards_standard {
		//				message: "A Max Qty=1";
		//				body: restriction (StandardProliantPciRiser [ standardDL380G10Riser ] <= 1);
		//			}
		//			/* @Author: Reyna Torres
		//			 * @Source: PPM 76600
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 2
		//			 * @Description: PPM 76600: riser P01011-B21 changed its qty to 2.
		//			 */
		//			constraint maxmin_P01011 {
		//				message: "Max qty=2.";
		//				body: restriction (ProliantPciRiser [ P01011-B21 ] <= 2);
		//			}
		//			/* @Author: Paola Fuentes
		//			 * @Source: PPM 71523
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 0
		//			 * @EffectivityID: PFA_DL380G10
		//			 * @Description: Either standard or primary risers 
		//			 * @Change: PFA for ALM112821 
		//			 */
		///*constraint RiserCards_standardorprimary {
		//				message: "Standard and Primary Riser cannot be selected together";
		//				body: 
		//					if 	 thisInst.selected(ProliantPciRiser).filter(x => x.id <= "826701-B21" || x.id <= "867807-B21" || x.id <= "871673-B21" || x.id <= "871674-B21" || x.id <= "871676-B21").count > 0 
		//					or thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826688-B21").count > 0
		//					then thisInst.selected(standardDL380G10Riser).count < 1; 
		//			}*/
		//
		//			ifEffective  VLR_PPM_12179{
		//				/* @Author: Paola Fuentes
		//				 * @Source: PPM 71523
		//				 * @MenuSection: Riser Cards
		//				 * @RuleNumber: 1
		//				 * @EffectivityID: PFA_DL380G10
		//				 * @Description: A Max Qty=1 from the following list of PRIMARY Risers is allowed per server. 
		//				 * @Change: RTR PPM 76600/ RTR 12/01/18 ALM 114088 / PPM 75884 - Changing text description for 826701-B21.- RTR ALM 117602 12/04/18
		//				 * @Change: VLR_PPM_77601 Rule Text Changed 
		//				 */
		//				constraint RiserCards_r1 {
		//					message: "A Max Qty=1 from the following list of PRIMARY Risers is allowed per server.  This means that only one item can be selected from the following list:</br>
		//								* (Qty=1) Primary 4Port Slimline Riser (867807-B21)</br>
		//								* (Qty=1) 1Port Slimline FIO Riser (871673-B21)</br>
		//								* (Qty=1) Slot 1/2 GPU FIO Riser (871674-B21)</br>
		//								* (Qty=1) Slot 2/3 GPU FIO Riser (871676-B21)</br>
		//								* (Qty=1) Standard Primary M.2 NEBs Riser (826701-B21)</br>
		//								* (Qty=1) HPE DL38X Gen10 Prem 2SFF HDD Riser Kit (826688-B21)</br>
		//								* (Qty=2) HPE DL380 G10 2 x16 S2-3 GPU NEBS Riser (P01011-B21)</br>
		//								* (Qty=1) Primary PCIe Riser that comes standard with all Model-Xs (Defaulted)";
		//					body: restriction (ProliantPciRiser [ 826701-B21 || 867807-B21 || 871673-B21 || 871674-B21 || 871676-B21 ] <= 1);
		//					dependency (ProliantPciRiser [ P01011-B21 ] = 2 || StandardProliantPciRiser [ Assembledriser ] = 2 || (StandardProliantPciRiser [ Assembledriser ] = 1 && ProliantPciRiser [ 826694-B21 || 826704-B21 || 867806-B21 || 870548-B21 ||
		//					873209-B21 || 873732-B21 || P01011-B21 ] > 0), ProliantPciRiser [ 826701-B21 || 867807-B21 || 871673-B21 || 871674-B21 || 871676-B21 || standardDL380G10Riser ] = 0);
		//					{
		//						val riserCards = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826701-B21 867807-B21 871673-B21 871674-B21 871676-B21").count + thisInst.selected(StandardProliantPciRiser).filter(x => split(x.id,
		//						"#").get(0) <= "standardDL380G10Riser").count;
		//						val driveCageSlot = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count; //+thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826685-B21").count;
		//						val riserP01011 = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "P01011-B21").count;
		//						val drivecage85 = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826685-B21").count;
		//						if driveCageSlot > 1 and riserCards > 0 or riserCards > 1 or riserCards + riserP01011 = 3 or (riserCards > 0 and drivecage85>0 and driveCageSlot>0 )
		//						or ((riserCards + riserP01011=2) and drivecage85>0 and driveCageSlot>0 ) then false;
		//					}
		//				}					
		//			}otherwise{
		//				/* @Author: Paola Fuentes
		//				 * @Source: PPM 71523
		//				 * @MenuSection: Riser Cards
		//				 * @RuleNumber: 1
		//				 * @EffectivityID: PFA_DL380G10
		//				 * @Description: A Max Qty=1 from the following list of PRIMARY Risers is allowed per server. 
		//				 * @Change: RTR PPM 76600/ RTR 12/01/18 ALM 114088 / PPM 75884 - Changing text description for 826701-B21.- RTR ALM 117602 12/04/18
		//				 * @Change: VLR_PPM_77601 Rule Text Changed 
		//				 */
		//				constraint RiserCards_r1 {
		//					message: "A Max Qty=1 from the following list of PRIMARY Risers is allowed per server.  This means that only one item can be selected from the following list:</br>
		//								* (Qty=1) Primary 4Port Slimline Riser (867807-B21)</br>
		//								* (Qty=1) 1Port Slimline FIO Riser (871673-B21)</br>
		//								* (Qty=1) Slot 1/2 GPU FIO Riser (871674-B21)</br>
		//								* (Qty=1) Slot 2/3 GPU FIO Riser (871676-B21)</br>
		//								* (Qty=1) Standard Primary M.2 NEBs Riser (826701-B21)</br>
		//								* (Qty=1) HPE DL38X Gen10 Prem 2SFF HDD Riser Kit (826688-B21)</br>
		//								* (Qty=2) HPE DL380 G10 2 x16 S2-3 GPU NEBS Riser (P01011-B21)</br>
		//								* (Qty=1) Primary PCIe Riser that comes standard with all Model-Xs";
		//					body: restriction (ProliantPciRiser [ 826701-B21 || 867807-B21 || 871673-B21 || 871674-B21 || 871676-B21 ] <= 1);
		//					dependency (ProliantPciRiser [ P01011-B21 ] = 2 || StandardProliantPciRiser [ Assembledriser ] = 2 || (StandardProliantPciRiser [ Assembledriser ] = 1 && ProliantPciRiser [ 826694-B21 || 826704-B21 || 867806-B21 || 870548-B21 ||
		//					873209-B21 || 873732-B21 || P01011-B21 ] > 0), ProliantPciRiser [ 826701-B21 || 867807-B21 || 871673-B21 || 871674-B21 || 871676-B21 || standardDL380G10Riser ] = 0);
		//					{
		//						val riserCards = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826701-B21 867807-B21 871673-B21 871674-B21 871676-B21").count + thisInst.selected(StandardProliantPciRiser).filter(x => split(x.id,
		//						"#").get(0) <= "standardDL380G10Riser").count;
		//						val driveCageSlot = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count; //+thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826685-B21").count;
		//						val riserP01011 = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "P01011-B21").count;
		//						val drivecage85 = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826685-B21").count;
		//						if driveCageSlot > 1 and riserCards > 0 or riserCards > 1 or riserCards + riserP01011 = 3 or (riserCards > 0 and drivecage85>0 and driveCageSlot>0 )
		//						or ((riserCards + riserP01011=2) and drivecage85>0 and driveCageSlot>0 ) then false;
		//					}
		//				}				
		//			}
		//
		//			/* @Author: Reyna Torres
		//			 * @Source: ALM 115168
		//			 * @MenuSection: Riser Cards - Drive Cages
		//			 * @RuleNumber: 1
		//			 * @Description: Only one primary riser can be selected, 2SFF riser kit should only allows 1 PCIe slot.  
		//			 * @change: ALM 116801
		//			 */
		//			constraint RiserCards_StandardAnd2SffRiserQty {
		//				message: "Max qty = 2 for these options:</br> * HPE DL38X Gen10 2SFF HDD SAS/SATA Riser Kit (826688-B21)</br>* HPE DL Gen10 x16/x16 NEBS Riser Kit (P01011-B21)</br>* standardDL380G10Riser";
		//				body: dependency (ProliantPciRiser [ standardDL380G10Riser ] > 0, ProliantDriveCage [ 826688-B21 ] <= 1 && ProliantPciRiser [ P01011-B21 ] <= 1);
		//				dependency (ProliantDriveCage [ 826688-B21 ] = 1, ProliantPciRiser [ P01011-B21 ] <= 1);
		//				dependency (ProliantPciRiser [ P01011-B21 ] = 1, ProliantDriveCage [ 826688-B21 ] <= 1);
		//				dependency (ProliantPciRiser [ P01011-B21 ] = 1 && ProliantPciRiser [ standardDL380G10Riser ], ProliantDriveCage [ 826688-B21 ] = 0);
		//				dependency (ProliantPciRiser [ P01011-B21 ] = 2, ProliantDriveCage [ 826688-B21 ] = 0);
		//			}
		//
		//			/* @Author: Paola Fuentes
		//			 * @Source: PPM 71523
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 2
		//			 * @EffectivityID: PFA_DL380G10
		//			 * @Description: A Max Qty=1 from the following list of SECONDARY Risers is allowed per server.  
		//			 * @Change: RTR PPM 76600/ RTR 12/01/18 ALM 114088
		//			 */
		//			constraint RiserCards_r2 {
		//				message: "A Max Qty=1 from the following list of SECONDARY Risers is allowed per server.  This means that only one item can be selected from the following list:</br>
		//							* (Qty=1) Secondary 4Port Slimline Riser (873732-B21)</br>
		//							* (Qty=1) 1Port Slimline Riser (867806-B21)</br>
		//							* (Qty=1) Slot 1/2 GPU Riser (826694-B21)</br>
		//							* (Qty=1) Slot 2/3 GPU Riser (826704-B21)</br>
		//							* (Qty=1) Secondary Non-M.2 Riser (870548-B21)</br>
		//							* (Qty=1) Secondary Non-M.2 NEBs Riser (873209-B21)</br>
		//							* (Qty=1) HPE DL38X Gen10 Prem 2SFF HDD Riser Kit (826688-B21)</br>
		//							* (Qty=2)  HPE DL380 G10 2 x16 S2-3 GPU NEBS Riser (P01011-B21)";
		//				body: restriction (ProliantPciRiser [ 826694-B21 || 826704-B21 || 867806-B21 || 870548-B21 || 873209-B21 || 873732-B21 ] <= 1);
		//				dependency (StandardProliantPciRiser = 2 || (StandardProliantPciRiser [ Assembledriser ] = 1 && ProliantPciRiser [ 826701-B21 || 867807-B21 || 871673-B21 || 871674-B21 || 871676-B21 ] > 0), ProliantPciRiser [ 826694-B21 || 826704-B21
		//				|| 867806-B21 || 870548-B21 || 873209-B21 || 873732-B21 || P01011-B21 ] = 0);
		//				dependency (ProliantPciRiser [ P01011-B21 ] >= 1, ProliantPciRiser [ 826694-B21 || 826704-B21 || 867806-B21 || 870548-B21 || 873209-B21 || 873732-B21 ] = 0);
		//				{
		//					val riserCards = thisInst.selected(ProliantPciRiser).filter(x => x.id <= "826694-B21" || x.id <= "826704-B21" || x.id <= "867806-B21" || x.id <= "870548-B21" || x.id <= "873209-B21" || x.id <= "873732-B21" || x.id <=
		//					"P01011-B21").count;
		//					val driveCageSlot = thisInst.selected(ProliantDriveCage).filter(x => x.id <= "826688-B21").count;
		//					if driveCageSlot = 2 and riserCards > 0 then false;
		//				}
		//			}
		//
		//			/* @Author: Jorge Arturo Silva Bucio
		//			 * @Source: ALM 117662
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 1 and 2 for 2SFF HDD Riser Kit
		//			 * @EffectivityID: PFA_DL380G10
		//			 * @Description: If both riser cards are selected (Primary and Secondary), the Drive Cage 2SFF HDD Riser Kit (826688-B21) can not be selected for configuration, since the Primary and Secondary spaces are already occupied by the riser cards. 
		//			 */
		//			constraint RiserCards_1_2_DriveCage_2SFFHDDRiserKit {
		//				message: "If both riser cards are selected (Primary and Secondary), the Drive Cage 2SFF HDD Riser Kit (826688-B21) can not be selected for configuration, since the Primary and Secondary spaces are already occupied by the riser cards";
		//				body:
		//				{
		//					val riserCardsPrimary = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826694-B21 826704-B21 867806-B21 870548-B21 873209-B21 873732-B21 P01011-B21").count;
		//					val riserCardsSecundary = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826701-B21 867807-B21 871673-B21 871674-B21 871676-B21").count;
		//					val driveCageSlot = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count;
		//					if driveCageSlot > 0 and (riserCardsPrimary > 0 and riserCardsSecundary > 0) then false;
		//				}
		//			}
		//
		//			/* @Author: Paola Fuentes
		//			 * @Source: PPM 71523
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 3
		//			 * @EffectivityID: PFA_DL380G10
		//			 * @Description: A Max Qty=1 from the following list of PRIMARY Risers is allowed per server. 
		//			 */
		//			constraint RiserCards_r3 {
		//				message: "A Max Qty=1 from the following list of TERTIARY Risers is allowed per server.  This means that only one item can be selected from the following list:
		//							* Tertiary x16 Riser (826700-B21)
		//							* Tertiary 2Port Riser (867808-B21)
		//							* Tertiary x8 Riser (875780-B21)
		//							* Tertiary NEBs Riser (826702-B21)";
		//				body: restriction (ProliantPciRiser [ 826700-B21 || 826702-B21 || 867808-B21 || 875780-B21 ] <= 1);
		//			}
		//			/* @Author: Paola Fuentes
		//			 * @Source: PPM 71523
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 4
		//			 * @EffectivityID: PFA_DL380G10
		//			 * @Description: IMPORTANT!!!  This option will REPLACE the Primary PCIe Riser that comes standard with all Model-Xs.  The â€œPCIe Card Capacity Limitsâ€� must account for this replacement and make the necessary adjustments to the PCIe slot counts and characteristics.
		//			 */
		//			constraint RiserCards_r4 {
		//				message:
		//				"IMPORTANT!!! This option will REPLACE the Primary PCIe Riser that comes standard with all Model-Xs. The PCIe Card Capacity Limits must account for this replacement and make the necessary adjustments to the PCIe slot counts and characteristics.";
		//				body:
		//				if thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826701-B21 867807-B21 871673-B21 871674-B21 871676-B21").count > 0 then false;
		//			}
		//
		//			/* @Author: Paola Fuentes
		//			 * @Source: PPM 71523
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 5
		//			 * @EffectivityID: PFA_DL380G10
		//			 * @Description: Requires the selection of a 2nd Processor
		//			 */
		//			constraint RiserCards_r5 {
		//				message: "Requires the selection of a 2nd Processor";
		//				body:
		//				{
		//					val listOfRiserCards = "873209-B21 873732-B21 875780-B21 867808-B21 870548-B21 826702-B21 826704-B21 867806-B21 826694-B21 826700-B21 P01011-B21";
		//					if thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= listOfRiserCards).count > 0 then thisInst.selected(ProliantProcessor).count = 2;
		//				}
		//			}
		//			/* @Author: Reyna Torres
		//			 * @Source: ALM 119666 enhacement
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 7
		//			 * @Description: When one doublewide card is selected in one of the risers with rule7, one slot will be disabled since the dw occupies this space 1 x16+1 x8.
		//			 */
		//			constraint RiserCards_r7_x8 {
		//				message:
		//				"IMPORTANT! The top x8 PCIe slot connector on these risers '826701-B21, 870548-B21, 873209-B21 and standardDL380G10Riser' kits CANNOT be utilized as the Doublewide GPU occupies this space.  The 'PCIe Card Capacity Limits' must account for this limitation.";
		//				body:
		//				{
		//					val doubleWideGPUs = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//					val doubleWidesCount = thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= doubleWideGPUs).count;
		//					val riserRule7 = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826701-B21 870548-B21 873209-B21 standardDL380G10Riser").count;
		//					val riserRule8 = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826694-B21 871674-B21").count;
		//					val riserRule9 = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826700-B21 826702-B21 826704-B21 871676-B21 P01011-B21").count; //contains one slot or rule 9 where the extra slot is not removed by gpu.
		//					val slotsAvailable = countPCIe8Available + (countPCIe16Available - countPCIex16);
		//					if riserRule7 = 1 and riserRule8 = 1 and riserRule9 = 0 and doubleWidesCount >= 2 and countPCIex8 > 1 then countPCIex8 <= slotsAvailable - 2 
		//					else if riserRule7 = 1 and riserRule8 = 1 and riserRule9 = 0 and doubleWidesCount = 1 then countPCIex8 <= slotsAvailable - 1
		//					else if riserRule7 = 1 and riserRule8 >= 0 and riserRule9 = 1 and doubleWidesCount = 2 then countPCIex8 <= slotsAvailable - 1
		//					 
		//					else if riserRule7 = 1 and riserRule8 = 1 and riserRule9 = 1 and doubleWidesCount = 2 then countPCIex8 <= slotsAvailable - 1 
		//					else if riserRule7 = 1 and riserRule8 = 1 and riserRule9 = 1 and doubleWidesCount = 3 then countPCIex8 <= slotsAvailable - 2 
		//					else if riserRule7 = 2 and riserRule9 = 1 and doubleWidesCount = 2 then countPCIex8 <= slotsAvailable - 1 
		//					else if riserRule7 = 2 and riserRule9 = 1 and doubleWidesCount >= 3 then countPCIex8 <= slotsAvailable - 2 
		//					else if riserRule7 = 2 and riserRule9 = 0 and doubleWidesCount = 1 then countPCIex8 <= slotsAvailable - 1 
		//					else if riserRule7 = 2 and riserRule9 = 0 and doubleWidesCount = 2 then countPCIex8 <= countPCIe8Available - 2
		//					//else if riserRule8 = 2 and riserRule9 = 1 and doubleWidesCount = 2 then countPCIex8 <= slotsAvailable - 1
		//					//else if riserRule8 = 2 and riserRule9 = 1 and doubleWidesCount >= 3 then countPCIex8 <= slotsAvailable - 2
		//					else if riserRule7 = 1 and riserRule8 + riserRule9 = 0 and doubleWidesCount = 1 then countPCIex8 <= countPCIe8Available - 1
		//					else if riserRule7 = 1 and riserRule8 = 0 and riserRule9 = 2 and doubleWidesCount >= 3 then countPCIex8 <= slotsAvailable - 1;
		//				}
		//			}
		//			/* @Author: Reyna Torres
		//			 * @Source: ALM 119666 enhacement
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 8
		//			 * @Description: When one doublewide card is selected in one of the risers with rule8, one slot will be disabled since the dw occupies this space 2 x16.
		//			 */
		//			constraint RiserCards_r8_x16 {
		//				message: "IMPORTANT! The top x16 PCIe slot connector on these risers '826694-B21 and 871674-B21' kits CANNOT be utilized as the Doublewide GPU occupies this space.  The 'PCIe Card Capacity Limits' must account for this limitation.";
		//				body:
		//				{
		//					val doubleWideGPUs = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//					val doubleWidesCount = thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= doubleWideGPUs).count;
		//					val riserRule7 = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826701-B21 870548-B21 873209-B21 standardDL380G10Riser").count;
		//					val riserRule8 = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826694-B21 871674-B21").count;
		//					val riserRule9 = thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826700-B21 826702-B21 826704-B21 871676-B21 P01011-B21").count; //contains one slot or rule 9 where the extra slot is not removed by gpu.
		//					val slotsAvailable = countPCIe16Available;
		//					val usedSlots = countPCIex8 + countPCIex16;
		//					if riserRule7 = 1 and riserRule8 = 1 and riserRule9 = 1 and doubleWidesCount = 3 then usedSlots <= slotsAvailable + countPCIe8Available - 2
		//					//ALM 125058
		//					else if riserRule8 = 1 and riserRule9 = 2 and doubleWidesCount = 3 then usedSlots <= slotsAvailable + countPCIe8Available - 1
		//					//else if riserRule7 = 2 and riserRule9 = 1 and doubleWidesCount = 2 then countPCIex8 <= slotsAvailable - 1
		//					//else if riserRule7 = 2 and riserRule9 = 1 and doubleWidesCount = 3 then countPCIex8 <= slotsAvailable - 2
		//					else if riserRule8 = 2 and riserRule9 = 0 and doubleWidesCount >= 2 then usedSlots <= slotsAvailable - 2 
		//					else if riserRule8 = 2 and riserRule9 = 1 and doubleWidesCount = 2 then usedSlots <= slotsAvailable - 1 
		//					else if riserRule8 = 2 and riserRule9 = 1 and doubleWidesCount >= 3 then usedSlots <= slotsAvailable - 2 
		//					else if riserRule8 = 1 and riserRule7 + riserRule9 = 0 and doubleWidesCount >= 1 then usedSlots <= slotsAvailable - 1 
		//					else if riserRule8 = 1 and riserRule7 = 1 and riserRule9 = 0 and doubleWidesCount >= 2 then usedSlots <= slotsAvailable + countPCIe8Available - 2 
		//					else if riserRule8 = 1 and riserRule7 = 1 and riserRule9 = 0 and doubleWidesCount >= 2 then usedSlots <= slotsAvailable - 1
		//					else if riserRule8 = 1 and riserRule7 = 1 and riserRule9 = 1 and doubleWidesCount >= 3 then usedSlots <= slotsAvailable + countPCIe8Available - 2;
		//				}
		//			}
		//			/* @Author: Reyna Torres
		//			 * @Source: ALM 118162
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 8 
		//			 * @Description: A Max Qty=1 DoubleWide GPU per riser x16 qty2
		//			 * @Change: RTR ALM 116577
		//			 */
		//			constraint RiserCards_r9 {
		//				message: "A Max Qty=1 DoubleWide GPU per riser.";
		//				body:
		//				{
		//					val doubleWideGPUs = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A Q0Y81A";
		//					val riserCards = "standardDL380G10Riser 826694-B21 826700-B21 826701-B21 826702-B21 826704-B21 870548-B21 871674-B21 871676-B21 873209-B21 P01011-B21";
		//					if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= doubleWideGPUs).count > thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= riserCards).count then false;
		//				}
		//			}
		//			/* @Author: Reyna Torres
		//			 * @Source: ALM 118162
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 9 
		//			 * @Description: A Max Qty=1 DoubleWide GPU per riser x16 qty2
		//			 * @Change: RTR ALM 116577
		//			 */
		////			constraint RiserCards_r9 {
		//			//				message: "A Max Qty=1 DoubleWide GPU per riser.";
		//			//				body: 
		//			//					{
		//			//						val doubleWideGPUs = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//			//						val riserCards = "826694-B21 826701-B21 826702-B21 826704-B21 870548-B21 871674-B21 871676-B21 873209-B21 P01011-B21";//All risers that can support only one DWGPU.
		//			//						if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= doubleWideGPUs).count > 
		//			//						(countPCIe16Available - thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= riserCards).count) 
		//			//						then false;
		//			//					}
		//			//			}
		//
		//			/* @Author: Paola Fuentes
		//		 	 * @Source: PPM 71523
		//		  	 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 10
		//		 	 * @EffectivityID: PFA_DL380G10
		//		 	 * @Description: This option requires the High Performance Fan Kit (867810-B21) to be selected.
		//		 	*/
		//			constraint RiserCards_r10 {
		//				message: "This option requires the High Performance Fan Kit (867810-B21) to be selected.";
		//				body: dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "8SFF" ] && ProliantPciRiser [ 873209-B21 || 826701-B21 || 826702-B21 || P01011-B21 ], CoolingFan [ 867810-B21 ] >= 1);
		//			}
		//
		//			/* @Author: Paola Fuentes
		//		 	 * @Source: PPM 71523
		//		  	 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 11
		//		 	 * @EffectivityID: PFA_DL380G10
		//		 	 * @Description: This option requires the Primary NEBs Riser (826701-B21) to be selected.
		//		 	*/
		//			constraint RiserCards_r11 {
		//				message: "This option requires the Primary NEBs Riser (826701-B21) to be selected.";
		//				body:
		//				//dependency(DL380Gen10[875784-B21 || 875782-B21 || 868706-B21 || 868703-B21 || P01011-B21] and ProliantPciRiser[873209-B21], ProliantPciRiser[826701-B21]);
		//				//MRR_ALM 112774
		//				if thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "873209-B21 P01011-B21").count = 1 then thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "826701-B21").count = 1;
		//			}
		//
		//			/* @Author: Paola Fuentes
		//		 	 * @Source: PPM 71523
		//		  	 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 12
		//		 	 * @EffectivityID: PFA_DL380G10
		//		 	 * @Description: This option requires the Secondary NEBs Riser (873209-B21) to be selected.
		//		 	*/
		//			constraint RiserCards_r12 {
		//				message: "This option requires the Secondary NEBs Riser (873209-B21) to be selected.";
		//				body: dependency (ProliantPciRiser [ 826702-B21 ] > 0, ProliantPciRiser [ 873209-B21 ] >= 1);
		//			}
		//
		//			/* @Author: Reyna Torres
		//			 * @Source: PPM 75862
		//			 * @MenuSection: Riser Cards
		//			 * @RuleNumber: 13 
		//			 * @Description: A Max Qty=1 Singlewide GPU per riser
		//			 * @Change: RTR ALM 116577 / last update ALM 118526
		//			 */
		//			constraint RiserCards_r13 {
		//				message: "A Max Qty=1 Singlewide GPU per riser.";
		//				body: if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "Q0V77A Q0V78A Q0V79A Q1K37A Q8Z50A").count > (countPCIe16Available - thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <=
		//				"826704-B21 871676-B21").count) then false;
		//			}
			constraint riserCards_r18 {
				message: "When this Riser kit is selected then min Qty=2 of one of the below listed GPUs must be ordered<br>
								 * HPE NVIDIA Tesla T4 GPU (R0W29C)</br>
								 * HPE Xilinx Alveo U50 Accelerator (R4B02C)";
				body:
				if thisInst.selected(vSANTrackingSku).count > 0 && (thisInst.sVsanId = "dl3808sffallflash6" or thisInst.sVsanId = "dl3808sffallflash" or thisInst.sVsanId = "dl3808sffhybrid" or thisInst.sVsanId = "dl3808sffhybrid4" or thisInst.sVsanId
				= "dl3808sffhybrid6" or thisInst.sVsanId = "dl3808sffhybrid8" or thisInst.sVsanId = "dl38024sffallflash4" or thisInst.sVsanId = "dl38024sffallflash6" or thisInst.sVsanId = "dl38024sffallflash" or thisInst.sVsanId = "dl38024sffhybrid"
				or thisInst.sVsanId = "dl38024sffhybrid4" or thisInst.sVsanId = "dl38024sffhybrid6" or thisInst.sVsanId = "dl380AccelInfra" or thisInst.sVsanId = "dl380DataWare") && thisInst.selected(ProliantPciRiser).filter(x => split(x.id,
				"#").get(0) <= "P14373-B21 P14374-B21").count > 0 then thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) >= "R0W29C" || split(x.id, "#").get(0) >= "R4B02C").count >= 2;
			}
			constraint RiserCards_r22 {
				message: "None of the x16 PCIe cards except T4 GPU (R0W29C) and U50 GPU (R4B02C) are allowed on this Riser. 
						  The “PCIe Card Capacity Limits” must account for this limitation.";
				body:
				{
					val unsupportedx16list = "825110-B21 829335-B21 872725-B21 872726-B21 P06154-B21 P06154-B23 P06250-B21 P06251-B21 
								 			   874253-B21 P08458-B21 P13188-B21 Q0J62C R0Z45C R1F95C R1F97C R2U55C R4B03C R6B53C R7E31C R7G39C R9S37C";
					val unsupportedx16count = thisInst.selected(PciCard).filter(x => split(x.id, "#").get(0) <= unsupportedx16list).count;
					val pRiser1 = if thisInst.selected(StandardProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "standardDL380G10Riser").count > 0 then 1 else 0; //3
					val pRiser2 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826694-B21").count > 0 then 2 else 0;
					val pRiser3 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826700-B21").count > 0 then 1 else 0;
					val pRiser4 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826701-B21").count > 0 then 1 else 0; //3
					val pRiser5 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826702-B21").count > 0 then 1 else 0;
					val pRiser6 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "826704-B21").count > 0 then 2 else 0;
					//val pRiser7 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "867806-B21").count > 0 then 3 else 0;
					//val pRiser8 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "867807-B21").count > 0 then 4 else 0;
					//val pRiser9 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "867808-B21").count > 0 then 2 else 0;
					val pRiser10 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "870548-B21").count > 0 then 1 else 0; //3
					//val pRiser11 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "871673-B21").count > 0 then 3 else 0;
					val pRiser12 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "871674-B21").count > 0 then 2 else 0;
					val pRiser13 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "871676-B21").count > 0 then 2 else 0;
					val pRiser14 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "873209-B21").count > 0 then 1 else 0; //3
					//val pRiser15 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "873732-B21").count > 0 then 4 else 0;
					//val pRiser16 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "875780-B21").count > 0 then 2 else 0;
					val pRiser17 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "P01011-B21").count > 0 then 2 else 0;
					val pRiser18 = if thisInst.selected(ProliantPciRiser).filter(a => split(a.id, "#").get(0) <= "Assembledriser").count > 0 then 1 else 0;
					val totalriser = pRiser1 + pRiser2 + pRiser3 + pRiser4 + pRiser5 + pRiser6 /* + pRiser7*/ + pRiser10 /*+ pRiser11*/ + pRiser12 + pRiser13 + pRiser14 /* + pRiser16 */ + pRiser17 + pRiser18;
					if unsupportedx16count > 0 then unsupportedx16count <= totalriser;
				}
			}
		}
		subsystem SecurityOptionsSubsystem {

		/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Factory Configuration Settings - TPM Mose Setting
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Blue note
		 	*/
			constraint TPMModeSett_bluenote {
				message: "Selecting this option will change the default setting of the HPE TPM 2.0 Gen10 Kit, to TPM 1.2.";
				body:
				if thisInst.selected(TPMModeSetting).filter(x => split(x.id, "#").get(0) <= "872108-B21").count > 0 then false;
			}
			constraint rule1_TPM {
				message: "This option 872108-B21 requires the selection of TPM 2.0 Kit (864279-B21)";
				body:
				if thisInst.selected(TPMModeSetting).filter(x => split(x.id, "#").get(0) >= "872108-B21").count > 0 then thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) >= "864279-B21").count > 0;
			}
			constraint rule2_SecurityHardware {
				message: "Max Qty=1";
				body: restriction (SecurityHardware [ 867809-B21 ] <= 1);
			}
			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Security Hardware
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: if this option is ordered with the Legacy BIOS mode (758959-B21), then  TPM 1.2 FIO (872108-B21) MUST ALSO be ordered.
		 	*/
			constraint SecurityHardware_Max1 {
				message: "Max Qty = 1";
				body:
				//if thisInst.selected(SecurityHardware).filter(x => x.id <= "864279-B21").count >1 
				//or thisInst.selected(SecurityHardware).filter(x => x.id <= "867809-B21").count >1 ;
				if thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "864279-B21").count > 1 or thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "867809-B21").count > 1 or
				thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "867824-B21").count > 1 or thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "875519-B21").count > 1 or
				thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "872212-B21").count > 1 then false; //ABS_ALM_111645

			}
			constraint SecurityHardware_r1 {
				message: "If this option is to configured into a system operating in the Legacy BIOS mode (758959-B22), it can not operate at the TPM 2.0 setting.  It must operate at the TPM 1.2 setting.
						  Therefore, if this option is ordered with the Legacy BIOS mode (758959-B22), then TPM 1.2 FIO (872108-B21) MUST ALSO be ordered.";
				body:
				if thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "864279-B21").count >= 1 and thisInst.selected(ProliantBIOSMode).filter(x => split(x.id, "#").get(0) <= "758959-B22").count >= 1 then
				thisInst.selected(TPMModeSetting).filter(x => split(x.id, "#").get(0) <= "872108-B21").count >= 1;
			}
			constraint SecurityHardware_r2 { //SAM_ALM_108621 - RTR ALM 117405 20-03-18 - Security hardware should be able to be selected one per SKU.
				message: "Max Qty=1";
				body: restriction (SecurityHardware [ 864279-B21 ] <= 1);
				//restriction (SecurityHardware [ 867809-B21 ] <= 1);
				restriction (SecurityHardware [ 867824-B21 ] <= 1);
				//restriction (SecurityHardware [ 872212-B21 ] <= 1);
				restriction (SecurityHardware [ 875519-B21 ] <= 1);
			}
			constraint SecurityHardware_r3 { //VM Added this part number 872212-B21 for this ALM ID : 142362
				message: "Requires the selection of a Bezel kit.";
				body:
				//RS ALM 142579 27Aug2021 removing 872212-B21 from the constraint as it cause conflict that couldnt able to resolve
				if thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "875519-B21").count >= 1 then thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "867809-B21").count = 1;
			}
			constraint SecurityHardware_r4 {
				message: "The TPM 2.0 Gen10 Option is compatible with the following Operating Systems:<br />
						
						 In TPM 1.2 Mode<br />
						-Windows Server 2012 R2<br />
						-Redhat RHEL 6.9, RHEL 7.0, and later.<br />
						-SUSE SLES 12 SP2, SLES 15 GA and newer<br />
						-VMware vSphere 6.0U3, 6.5U1, 6.5U2, 6.5U3, 6.7, 6.7U1, 6.7U2 and 6.7U3<br />
						 
						 In TPM 2.0 Mode<br />
						-Windows Server 2016 and Windows Server 2019<br />
						-Redhat RHEL 7.2, RHEL 8.0, and later.<br />
						-SUSE SLES 12 SP2, SLES 15 GA and newer<br />
						-VMware vSphere 6.7, 6.7U1, 6.7U2, 6.7U3, 7.0U1 and newer";
				body:
				if thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "864279-B21  P17811-B21").count > 0 then false;
			}
			constraint SecurityHardware_r5 {
				message:
				"Part number 488069-B21 , 745823-B21 and/or 864279-B21 cannot be sold in China as Standalone. Part numbers 488069-B21 / 745823-B21 / 864279-B21 can be only sold as integrated into supported Servers in China, but only with special procedures.";
				body:
				{
					val securityHardwareChina = "488069-B21 745823-B21 864279-B21";
					if thisConfig.getProperty("targetEnvironment") >= "oca" and thisConfig.getProperty("country") = "CN" and thisConfig.getInstancesOfModel("RackModel").count() = 0 and thisInst.selected(SecurityHardware).filter(x => split(x.id,
					"#").get(0) <= securityHardwareChina).count > 0 then thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= securityHardwareChina).count = 0;
				}
			}
			constraint SecurityHardware_r6 {
				message: "Max Qty=1 of any Bezel kit is allowed per server. This means that from all the bezel kits offered, only one kit can be selected.";
				body: restriction (SecurityHardware [ 867809-B21 || 872212-B21 ] <= 1);
			}
			constraint SecurityHardware_bluenote {
				message: "The default setting for the TPM 2.0 Gen 10 Kit (864279-B21) is TPM 2.0.  To change this setting to TPM 1.2, the TPM 1.2 FIO option (872108-B21) must be selected.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: false;
			}
		}
		subsystem pciSubsystem {

		//SE - for ALM 139472		12-Feb-2021
		//		constraint eocs_support{
		//			message : "Supported only eocs";
		//				body :	dependency (targetEnv ("oca","sce","ipcs"), NetworkAdapterPci[869585-B21] = 0);
		//			}
		// NL added for PERT 15777, 20-July-2019
			part getDefaultflomrule: triggerConsequentialSelectionNoRestore {
				string consequentialSelectionFunc: "defCTOModel_rflom";
			}

			//			}otherwise{
			//			constraint FlexibleLom_r2 {
			//				message: "Total Slots available for ALOM is 1. This is a total selection from anything in the following categories (Sub Category FlexibleLOM): Infiniband & Networking";
			//				body: restriction (ProliantInfinibandFlom [ tPciType = "PCI_A" ] <= 1);
			//				restriction (NetworkingPci [ tPciType = "PCI_A" ] <= 1);
			//				restriction (NetworkingFlex [ tPciType = "PCI_A" ] <= 1);
			//				restriction (NetworkAdapterPci [ tPciType = "PCI_A" ] <= 1);
			//				restriction (ProliantInfinibandFlom [ tPciType = "PCI_A" ] or NetworkingFlex [ tPciType = "PCI_A" ] or NetworkAdapterPci [ tPciType = "PCI_A" ] or NetworkingPci [ tPciType = "PCI_A" ] <= 1);
			//			}
			//			}//End of ifEffective - DK_PERT_18967
			constraint riser_cards_info {
				message: "For a more comprehensive and detailed understanding of the GPU / Riser relationships, dependencies, and restrictions, please refer to the DL380 GPU and Riser Template.</br>  
							See <a href='https://h20195.www2.hpe.com/v2/getdocument.aspx?docname=a00059765enw#' target='_blank'>HPE Complete NVIDIA GRID Solutions</a> for more details";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.selected(ProliantPciRiser).count > 0 then false;
			}
			constraint rule12_FibreChannel {
				message: "With the configuration of HPE Servers with Fibre Channel HBAs, consider adding Fibre Channel Switches (24-48 Ports) for connecting to HPE Fibre Channel SAN Storage. <br />
						  HPE Fibre Channel switches provide advantage of full interoperability and automated configuration using HPE Smart SAN Software. <br />
						  For more information and details on the switch models, https://www.hpe.com/storage/san";
				body:
				{
					val listFibreChannel = "P9D94A P9M75A P9M76A Q0L11A Q0L12A Q0L14A";
					if thisInst.selected(ProliantStorageControllerFC).filter(x => split(x.id, "#").get(0) <= listFibreChannel).count > 0 then false;
				}
			}
			constraint cableKit_rule5 {
				message: "";
				body: dependency (GraphicsPciCard [ Q1K37A ] >= 1, GraphicCable [ 874212-B21 ] = 1);
			}
			constraint requiresHighPerformanceFanKit_rule7 {
				message: "";
				body: dependency ((DL380Gen10 [ 875782-B21 ] >= 1 || DL380Gen10 [ 868706-B21 ] >= 1 || DL380Gen10 [ 868703-B21 ] >= 1 || DL380Gen10 [ R1R46A ] >= 1 || DL380Gen10 [ 875784-B21 ] >= 1 || DL380Gen10 [ P19720-B21 ] >= 1 || DL380Gen10 [
				P19717-B21 ] >= 1) && GraphicsPciCard [ Q1K37A ] >= 1, CoolingFan [ 867810-B21 ] = 1);
			}
			constraint rule3_FlexibleLOM {
				message: "This option IS NOT supported with 166W or higher Processors.";
				body: dependency (ProliantProcessor [ iNumWattage > 166 ], NetworkingPci [ 867331-B21 ] = 0);
			}
			constraint networkingFlexLOM_Min {
				message: "Minimum 1 FlexibleLOM is required";
				enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
				body: 
				if thisInst.selected(NetworkingPci).filter(subCategory = "EthernetFlexLOM").count = 0 then true else false;
					if thisInst.selected(NetworkAdapterPci).filter(subCategory = "EthernetFlexLOM").count = 0 then true else false;
			}
			constraint minPCI_Adapter {
				message : "Minimum 1 PCI Adapter is required";
				enabled: (thisInst.realBasedummyId = "P19718-B21_HSX");
				body: if thisInst.selected(NetworkingPci).filter(subCategory = "EthernetPCIe").count = 0 then true else false;
					if thisInst.selected(NetworkAdapterPci).filter(subCategory = "EthernetPCIe").count = 0 then true else false;
			}
			constraint NetworkingFlexibleLom_r1 {
			//	message: "Does not consume the PCIe slot.";
			//SE - For vSan Ready Node for PERT 17885 27-Nov-2019
			//message: "The following FlexibleLOM (629135-B22,665240-B21,700751-B21,700759-B21,727054-B21,764302-B21,817709-B21,817721-B21,817749-B21) does not consume PCIe slot.";
				message: "The FlexibleLOM options does not consume the PCIe slot.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				//	if 	thisInst.selected(NetworkingFlex).filter(x => x.id <= "629135-B22 665240-B21 700751-B21 700759-B21 727054-B21").count >= 1 and
				if thisInst.selected(NetworkingFlex).filter(x => split(x.id, "#").get(0) <= "629135-B22 665240-B21 700751-B21 700759-B21 727054-B21").count >= 1 or thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <=
				"764302-B21 817709-B21 817721-B21 817749-B21 817745-B21 867334-B21 P08440-B21").count >= 1 or thisInst.selected(ProliantInfinibandFlom).filter(x => split(x.id, "#").get(0) <= "764285-B21 879482-B21").count >= 1 then false;
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Networking - FlexibleLOM
			 * @RuleNumber: 2
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Total Slots available for ALOM is 1
		 	 * @Inherited: repeated in FlexibleLom_r2
		 	*/
			constraint minFLOMVsan {
				message: "If changing the default of HPE Ethernet 10Gb 2-port 562FLR-SFP+ Adapter, customers is required to select one of the following from the Networking - FlexibleLOM category.";
				body: if thisInst.selected(vSANTrackingSku).count > 0 then (thisInst.selected(NetworkingFlex).filter(x => split(x.id, "#").get(0) <= "700751-B21 700759-B21 727054-B21").count > 0 or thisInst.selected(NetworkAdapterPci).filter(x =>
				split(x.id, "#").get(0) <= "764302-B21 817749-B21").count > 0 or thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) <= "817709-B21 817721-B21 817745-B21 867334-B21").count > 0);
			}
			constraint Unsupportedforoca {
				message: "Unsupported SKU for OCA";
				body: dependency (targetEnv ("oca"), NetworkingPci [ 870825-B21 ] = 0); //RS ALM 142730 23Sep2021 updating class FlexLOMCard [ 870825-B21 ] = 0);

			}
			constraint mustSelectPCIeNetworkingFlexibleLOM {
				message: "FlexibleLOM or PCIe Networking must be selected.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				{
					val dl380G10NC_Model = (thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P19720-B21" or thisInst.id >= "P21294-B21" or thisInst.id >= "P21397-B21" or thisInst.id >=
					"P21398-B21" or thisInst.id >= "P20702-B21" or thisInst.id >= "P21296-B21" or thisInst.id >= "P20700-B21" or thisInst.id >= "P20701-B21" or thisInst.id >= "P20703-B21" or thisInst.id >= "P21295-B21" or thisInst.id >= "P21297-B21");
					if(dl380G10NC_Model) then if(getPCInetworkingCount () > 0 || getFlexNetworkingCount () > 0 || getNetworkAdapterPciCount () > 0 || thisInst.selected("NetworkingPci").count > 0 || thisInst.selected("NetworkAdapterPci").count > 0) then
					true else false else true;
				}
			}
			constraint ctomodel_rule12 {
				message: "For NC Model X, Min Qty=1 FlexibleLOM or Standup PCIe Card must be selected from Networking or Smart I/O Category.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				{
					val dl380G10NC_Model = (thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P19720-B21");
					val networkingFlex = (thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <=
					"629135-B22 665240-B21 665243-B21 700751-B21 700759-B21 727054-B21 764302-B21 817709-B21 817721-B21 817745-B21 817749-B21 867334-B21 P08440-B21").count);
					val networkingcard = (thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <= "615732-B21 647594-B21 652497-B21 652503-B21 656596-B21 665249-B21 727055-B21 811546-B21 813661-B21 817718-B21 817738-B21 817753-B21 867328-B21 867707-B21 
												874253-B21 P08421-B21 P08446-B21 P11335-B21 P11338-B21 870825-B21").count);
					val pensandocard = (thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) <= "P26966-B21").count);
					val pensandoflex = (thisInst.selected(NetworkingFlex).filter(x => split(x.id, "#").get(0) <= "P26969-B21").count);
					val totalcard = networkingFlex + networkingcard + pensandocard + pensandoflex;
					if(dl380G10NC_Model) then totalcard > 0;
				}
			}
			constraint notSelectedFlexibleLOM_QuoteNetworkingCard {
				message: "If FlexibleLOM (from Networking or Smart IO) is not selected then any one of these Networking or Smart IO cards must be selected with NC Model X.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				{
					val dl380G10NC_Model = (thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P19720-B21");
					val networkingFlex = (thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <=
					"629135-B22 665240-B21 665243-B21 700751-B21 700759-B21 727054-B21 764302-B21 817709-B21 817721-B21 817745-B21 817749-B21 867334-B21 P08440-B21").count);
					val networkingcard = (thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <= "615732-B21 647594-B21 652497-B21 652503-B21 656596-B21 665249-B21 727055-B21 811546-B21 813661-B21 817718-B21 817738-B21 817753-B21 867328-B21 867707-B21 
												874253-B21 P08421-B21 P08446-B21 P11335-B21 P11338-B21 870825-B21 P08458-B21").count); //RV 21-Jul-2021 PERT 23573 added P08458-B21
					val pensandocard = (thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) <= "P26966-B21").count);
					val pensandoflex = (thisInst.selected(NetworkingFlex).filter(x => split(x.id, "#").get(0) <= "P26969-B21").count);
					val flexcardtotal = networkingFlex + pensandoflex;
					if(dl380G10NC_Model) then if flexcardtotal = 0 then (networkingcard > 0 or pensandocard > 0);
				}
			}
			constraint pensandocard_rule7 {
				message: "If FlexibleLOM (from Networking) or PCIe Networking (with rule 1) is not selected then this option (P26966-B21) must be selected with NC Model X.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				{
					val dl380G10NC_Model = (thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P19720-B21");
					val networkingFlex = (thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <=
					"629135-B22 665240-B21 700751-B21 700759-B21 727054-B21 764302-B21 817709-B21 817721-B21 817745-B21 817749-B21 867334-B21 P08440-B21").count);
					val networkingcard = (thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <= "615732-B21 647594-B21 652497-B21 652503-B21 656596-B21 665249-B21 727055-B21 811546-B21 813661-B21 817718-B21 817738-B21 817753-B21 867328-B21 867707-B21 
												874253-B21 P08421-B21 P08446-B21 P11335-B21 P11338-B21 870825-B21 P08458-B21").count); //RV 21-Jul-2021 PERT 23573 added P08458-B21
					val pensandocard = (thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) <= "P26966-B21").count);
					val totalcard = networkingFlex + networkingcard;
					if(dl380G10NC_Model) then if(totalcard = 0) then pensandocard > 0;
				}
			}
			constraint Pesando_networkingflex_rule6 {
				message: "The P26969-B21 option, cannot be selected with ANY GPU.";
				body:
				if thisInst.selected(NetworkingFlex).filter(x => split(x.id, "#").get(0) >= "P26969-B21").count > 0 then thisInst.selected(GraphicsPciCard).count = 0;
			}
			constraint FlexibleLom_r2 {
				message: "Total Slots available for FlexibleLOM is 1. The FlexibleLOM capacity limit is 'all inclusive' and must account for ALL FlexibleLOM cards from all categories and sub-categories.";
				body: restriction (ProliantInfinibandFlom [ tPciType = "PCI_A" ] <= 1);
				restriction (NetworkingPci [ tPciType = "PCI_A" ] <= 1);
				restriction (NetworkingFlex [ tPciType = "PCI_A" ] <= 1);
				restriction (NetworkAdapterPci [ tPciType = "PCI_A" ] <= 1);
				restriction (ProliantInfinibandFlom [ tPciType = "PCI_A" ] or NetworkingFlex [ tPciType = "PCI_A" ] or NetworkAdapterPci [ tPciType = "PCI_A" ] or NetworkingPci [ tPciType = "PCI_A" ] <= 1);
			}
			//SE - For issue fix	12-Dec-2020			
			//			constraint fLom_required {
			//				message: "Total Slots available for FlexibleLOM is 1. The FlexibleLOM capacity limit is 'all inclusive' and must account for ALL FlexibleLOM cards from all categories and sub-categories."; //AB 25-June-2020 for ALM ID: 136734
			//				body:
			//				{
			//					val flomcount = thisInst.selected(ProliantInfinibandFlom).filter(x => split(x.id, "#").get(0) <= "764285-B21 879482-B21 764286-B21").count + 
			//					thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) <= "867334-B21 817745-B21 817721-B21 817709-B21 867331-B21 P08440-B21 615732-B21 647594-B21 652497-B21 652503-B21 656596-B21 665249-B21 727055-B21 789009-B21 789013-B21 811546-B21 813661-B21 817718-B21 817738-B21 867328-B21 867707-B21 874253-B21 P05891-B21 P05954-B21 P08446-B21 P11335-B21 P11338-B21 870825-B21").count + 
			//					thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <= "817749-B21 764302-B21 817753-B21 869585-B21 P08421-B21 P10109-B21").count + 
			//					thisInst.selected(ProliantInfiniband).filter(x => split(x.id, "#").get(0) <= "629135-B21").count + 
			//					thisInst.selected(NetworkingFlex).filter(x => split(x.id, "#").get(0) <= "727054-B21 700751-B21 700759-B21 665243-B21 665240-B21 629135-B22 700699-B21 727060-B21 779799-B21 P26969-B21").count;
			//					
			//					if thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) >= "P19717-B21" || split(x.id, "#").get(0) >= "P19718-B21" || split(x.id, "#").get(0) >= "P19719-B21" || split(x.id, "#").get(0) >=
			//					"P19720-B21").count > 0 then flomcount > 0;
			//				}
			//			}							
			constraint dl380_Networking_rule9 {
				message: "This option and Legacy Mode Setting (758959-B22) cannot be selected together on NC Model X.<br>
					  However customer is allowed to select this combination if any other PCIe Networking card (with Rule#1 without Legacy BIOS restriction) or FlexibleLOM (except Smart IO (HW)) is selected with NC Model X.";
				body:
				{
					val dl380G10NC_Model = (thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P19720-B21");
					val listOfunspportedNIC = "615732-B21 647594-B21 652497-B21 811546-B21 813661-B21 817718-B21 870825-B21 P08446-B21 P18671-B21 P21383-B21 P26966-B21";
					val unsupportednics = thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) <= listOfunspportedNIC).count;
					val networking = (thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) <=
					" P11335-B21 P11338-B21  817738-B21 867328-B21 867707-B21 652503-B21 656596-B21 665249-B21 727055-B21 789009-B21 789013-B21 817709-B21 817721-B21 867334-B21 P08440-B21 870825-B21").count);
					//RS ALM 142730 23Sep2021 updating class	val flexLOMCard = (thisInst.selected(FlexLOMCard).filter(x => split(x.id, "#").get(0) <= "870825-B21").count);
					val networkAdapterPci = (thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <= "817753-B21 869585-B21 P10109-B21 764302-B21 817745-B21 817749-B21 764285-B21 879482-B21").count);
					val networingTotal = networking + networkAdapterPci; //RS + flexLOMCard
					val supportedFlex = thisInst.selected(NetworkingFlex).count - thisInst.selected(NetworkingFlex).filter(x => split(x.id, "#").get(0) <= "P26966-B21").count;
					val infinibandflex = (thisInst.selected(ProliantInfinibandFlom).filter(x => split(x.id, "#").get(0) <= "764285-B21 879482-B21").count);
					val supportedFlex1 = supportedFlex + infinibandflex;
					val totalnic = networingTotal + supportedFlex1;
					val legacymodesetting = thisInst.selected(ProliantBIOSMode).filter(x => split(x.id, "#").get(0) >= "758959-B22").count;
					if(dl380G10NC_Model) then if unsupportednics > 0 and legacymodesetting > 0 and (totalnic = 0) then false;
				}
			}
			constraint dl380_Networking_rule10 {
				message: "This option and Legacy Mode Setting (758959-B22) cannot be selected together. </br>
					  However customer is allowed to select this combination if any other PCIe Networking card (with Rule#1 without Legacy BIOS restriction) is selected along with Pensando DSP 10/25G 2p SFP28 Card (P26966-B21) with NC Model X.";
				body:
				{
				//		   		val dl380G10NC_Model = (thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P19720-B21");
				//		   					    
				//				val networking = (thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) <= " P11335-B21 P11338-B21  817738-B21 867328-B21 867707-B21 652503-B21 656596-B21 665249-B21 727055-B21 789009-B21 789013-B21 817709-B21 817721-B21 867334-B21 P08440-B21").count);
				//					val flexLOMCard = (thisInst.selected(FlexLOMCard).filter(x => split(x.id, "#").get(0) <= "870825-B21").count);
				//					val networkAdapterPci = (thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <= "817753-B21 869585-B21 P10109-B21 764302-B21 817745-B21 817749-B21 764285-B21 879482-B21").count);
				//					val totalnic = networking + flexLOMCard + networkAdapterPci;	
				//			    
				//			    val supportedFlexP = thisInst.selected(NetworkingFlex).filter(subCategory = "PesandoPCIe").count;
				//			    //val supportedPCIP = thisInst.selected(NetworkingPci).filter(subCategory = "PesandoPCIe").count;	
				//			    val supportedPCIP = thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) >= "P26966-B21").count;		    
				//			    		    	    			    
				//			    val legacymodesetting = thisInst.selected(ProliantBIOSMode).filter(x => split(x.id, "#").get(0) >= "758959-B22").count;
				//			    
				//				if (dl380G10NC_Model) then
				//				
				//				if supportedFlexP > 0 and legacymodesetting > 0 and (totalnic = 0 and supportedPCIP = 0) then false;
					val dl380G10NC_Model = (thisInst.id >= "P19717-B21" or thisInst.id >= "P19718-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P19720-B21");
					val networkingcard = (thisInst.selected(NetworkAdapterPci).filter(x => split(x.id, "#").get(0) <= "652503-B21 656596-B21 665249-B21 727055-B21 789009-B21 817738-B21 817753-B21 867328-B21 867707-B21 P11335-B21 P11338-B21").count);
					val biosmodesetting = thisInst.selected(ProliantBIOSMode).filter(x => split(x.id, "#").get(0) <= "758959-B22").count;
					val pensandocard = thisInst.selected(NetworkingPci).filter(x => split(x.id, "#").get(0) <= "P26966-B21").count;
					val pensandoALOM = thisInst.selected(NetworkingFlex).filter(x => split(x.id, "#").get(0) <= "P26969-B21").count;
					if(dl380G10NC_Model) then if pensandoALOM > 0 and biosmodesetting > 0 then networkingcard > 0 and pensandocard > 0;
				}
			}
			constraint OSBootDeviceRule1 {
				message: "Max 1";
				body: restriction (OSPciBootDevice [ P12965-B21 ] <= 1);
			}
			constraint OSBootDeviceRule2 {
				message: "The Legacy Mode Setting (758959-B22) and NS 204ip Boot Devide (P12965-B21) CAN NOT be selected together";
				body: dependency (OSPciBootDevice [ P12965-B21 ] > 0, ProliantBIOSMode [ 758959-B22 ] = 0);
			}
			constraint maxNetworkSmartIO_rule15 {
				message: "Max of 2 Enterprise (Ent) version of Pensando cards are allowed per server.";
				body: restriction (NetworkingPci [ P26966-B21 || P37690-B21 ] <= 2);
			}
		}
		//		ifEffective	SE_PERT_21303{		//SE - Removed for PERT 2130312-Dec-2020
		//		subsystem SmartIOSubsystem {
		//			constraint pensando_rule2info {
		//			message: "Upon order entry, GBU Pensando Product Managers must validate and provide authorization for this product.
		//							  To request a FAN override please email hpe-pensando-pm@hpe.com and include the customer name, sales contact and order number in the message.";		
		//				body:true;
		//			}
		//		}}
		subsystem FactoryConfigurationSettingsSubsystem {

		//SE - For PERT 20151   04-Sep-2020
		//			locationArray HPECEMREnableKitLocArray {
		//				rows: iNumHPECEMREnableKit;
		//				fillerClasses: HPECEMREnableKit;
		//			}

		//				locationArray factoryConfigurationSettingsLocArray {
		//				rows: iNumHPECEMREnableKit;
		//				fillerClasses: HPECEMREnableKit;
		//			}

		//SE - For PERT 20117   29-Jul-2020
			locationArray TrustedSupplyChainLocArray {
				rows: 1;
				fillerClasses: TrustedSupplyChain;
			}
			part getdefaulforTSC: triggerConsequentialSelection {
				string consequentialSelectionFunc: "defaultTrustedSupplyChain";
			}
			/* @Author: Alan Linares
		 	 * @Source: PERT 15778
		  	 * @MenuSection: Factory Configuration Settings - Identifier/ Tracking Skus
			 * @RuleNumber: 1,2, remark
		 	 * @EffectivityID: ALL_PERT_15778
		 	 * @Description: create a new choice for this tracking skus choice, as well as their related rules*/
			choice trackingSkusChoice {
				optional: true;
				//targetClass: dlTrackingSku;
				targetClass: NulifyChoiceObject;
				choiceType: multi_select;
				title: "Identifier/Tracking SKUs";
			}
			//HK 12-Feb-2022 PERT 24933
			choice vSanTracskuchoice {
				choiceType: multi_select;
				targetClass: vSANTrackingSku;
			}
			//AB 14-Oct-2021 for PERT ID: 24742
			locationArray IdenTrackingSkuLocArray {
			//rows: 3;
				rows: iNumTrackingSkus; //MFG 24827
				fillerClasses: IdenTrackingSku, dlTrackingSku;
			}
			constraint FactConfSett_maxmin {
				message: "Maximum 1 Legacy Fio Mode Setting";
				body: dependency (DL380Gen10 [ 0D1 ] > 0, ProliantBIOSMode <= 1);
			}
			constraint BiosMode_r1 {
				message: "The Legacy Mode Setting and Enable HBA Mode Setting CAN NOT be selected together.";
				body: dependency (ProliantBIOSMode [ 758959-B22 ] > 0, EmbededControllerState [ 784308-B21 ] = 0);
			}
			constraint BiosMode_r2 {
				message: "Selecting this Option for this Platform will change the default UEFI BIOS setting into Legacy BIOS setting";
				body:
				if selected(ProliantBIOSMode).filter(x => split(x.id, "#").get(0) <= "758959-B22").count > 0 then false;
			}
			constraint ControllerState_r2 {
				message: "B140i/S100i controller only supports SATA Hard Drives.  SAS Hard Drives are not supported with this controller.";
				body: dependency (EmbededControllerState [ 784308-B21 ] > 0, ProliantHardDrive [ tDriveType = "SAS" || tDriveType = "SAS-SSD" ] = 0);
			}
			constraint ControllerState_r4 {
				message: "Max 1 Enable Smart Array SW RAID";
				body: restriction (EmbededControllerState [ 784308-B21 ] <= 1);
			}
			constraint EnergyStar_r1 {
				message: "Required when all options on the order are ENERGY STAR";
				body: dependency (ProliantEnergyStar, ProliantProcessor [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, ProliantMemoryArray [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, SecurityHardware [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, MediaOptions [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, ProliantRemovableInternalMediaDrive [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, ProliantRemovableInternalMediaDrive [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, ProliantDriveCage [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, DL380Gen10 [ ESTAR ]);
				dependency (ProliantEnergyStar, ProliantPowerOption [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, ProliantRpsEnablementKit [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, ProliantPciRiser [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, PciCard [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, ControllerUpgrade [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, ProliantMiniSasCable [ ! ESTAR ] = 0);
				dependency (ProliantEnergyStar, ProliantPciRiser [ ! ESTAR ] = 0);
			}
			constraint LogSizeSett_r1 {
				message: " This option is not required and is only selectable if a RAID level has been selected.";
				body: dependency (LogicalDriveSize [ 436007-B21 ] >= 1, RAIDLevelSettings || ComplexConfiguration);
			}
			constraint NVMeEnablementSett_r1 {
				message: "Max Qty=1";
				body: restriction (NVMEnablement [ 878186-B21 ] <= 1);
				restriction (NVMEnablement [ 878189-B21 ] <= 1);
				restriction (NVMEnablement [ 878192-B21 ] <= 1);
			}
			constraint NVMeEnablementSett_r2 {
				message: "This option requires the High Performance Fan Kit (867810-B21) to be selected.";
				body:
				//if thisConfig.getInstancesOfModel("868703-B21").count > 0 and (thisInst.selected(NVMEnablement).count >= 1) then false;
				//			if thisConfig.getInstancesOfModel("868703-B21").count > 0 && (thisInst.selected(NVMEnablement).filter(x => split(x.id,"#").get(0) >="878186-B21 878189-B21 878192-B21").count >= 1)
				//					 && thisInst.selected(CoolingFan).filter(x => split(x.id,"#").get(0) >="867810-B21").count = 0 then false;//GKK 26-SEP-17 for ALM ID:109205
				//			dependency(NVMEnablement, CoolingFan[867810-B21] > 0);
				dependency ((DL380Gen10) and DLG10Common [ 0D1 ] and ! DLG10Common [ bFormFactor = "12LFF" || bFormFactor = "24SFF" ] and NVMEnablement [ 878186-B21 || 878189-B21 || 878192-B21 ], CoolingFan [ 867810-B21 ] = 1);
			}
			constraint NVMeEnablementSett_r3 {
				message: "This option can only be selected when a Qty=3 NVMe 8 SSD Express Bay (826689-B21) have been ordered. The total NVMe Drive Cage Capacity for the 3 drive cages is Max=20.";
				body:
				/* 	if thisInst.selected(ProliantHardDrive).filter(x => x.tDriveType >= "NVME" and x.tDriveFormFactor >= "sff").count > 20
					then false;*/
/*if (thisInst.selected(NVMEnablement).filter(x => split(x.id,"#").get(0) >= "878186-B21").count = 1) and (thisConfig.getInstancesOfModel("868703-B21").count > 0)
					then ((thisInst.selected(ProliantHardDrive).filter(x => x.tDriveType >= "NVME" and x.tDriveFormFactor >= "sff").count <= 20) and (thisInst.selected(ProliantDriveCage).filter(x => split(x.id,"#").get(0) >= "826689-B21").count = 3 ));	*/
//					
				//					if (thisInst.selected(NVMEnablement).filter(x => split(x.id,"#").get(0) >= "878186-B21").count = 1) and (thisInst.id = "868703-B21")
				//					then ((thisInst.selected(ProliantHardDrive).filter(x => x.tDriveType >= "NVME" and x.tDriveFormFactor >= "sff").count <= 20) and (thisInst.selected(ProliantDriveCage).filter(x => split(x.id,"#").get(0) >= "826689-B21").count = 3 ));		
				if thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) >= "878186-B21").count = 1 then ((thisInst.selected(ProliantHardDrive).filter(x => x.tDriveType >= "NVME" and x.tDriveFormFactor >= "sff").count <= 20) and
				(thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) >= "826689-B21").count = 3));
			}
			//PRS Modified the rule for PERT-18911 26-Dec-2019
			constraint NVMeEnablementSett_r4 {
				message: "If this option 878189-B21 is selected, a Min Qty=1 of the Premium 2SFF HDD Kit (826687-B21) and Min Qty=1 of the Universal Media Bay (826708-B21) must be ordered.";
				body: if thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878189-B21").count > 0 then (thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) >= "826687-B21").count > 0 and
				thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) >= "826708-B21").count > 0);
			}
			constraint NVMeEnablementSett_r5 {
				message: "If this option 878192-B21 is selected, a Min Qty=1 of the Premium 8SFF HDD Bay [826690-B21] must also be ordered.";
				body: if thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878192-B21").count > 0 then thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) >= "826690-B21").count > 0;
			}
			constraint RAIDSettings_r1 {
				message: "If this part number is selected, then at least 1 hard drive must be on the order.";
				body:
				if thisInst.selected(ComplexConfiguration).filter(x => x.id <= "389692-B21").count > 0 then (sasHardDrives () + sataHardDrives ()) >= 1;
			}
			constraint RAIDSettings_r2 {
				message: "A Customer Intent Document must be supplied if this part number is ordered. <br />
						  This Customer Intent Document should include all details about the desired RAID custom configuration.<br>
						  (This includes drive part numbers and quantities, RAID levels desired, which drives should be applied to each RAID level, and if a preinstalled OS has been ordered - which RAID set it should be installed on).";
				body:
				//if thisInst.selected(ComplexConfiguration).count > 0 then false; //AB 24-July-2020 for ALM ID: 137129
				if thisInst.selected(ComplexConfiguration).count > 0 or thisInst.selected(RAIDLevelSettings).filter(x => split(x.id, "#").get(0) >= "389692-B21").count > 0 then false; //AB 24-July-2020 for ALM ID: 137129

			}
			constraint RAIDSettings_r3i {
				message: "Only a single set of RAID will be offered and will only be applied to the first drive cage. ";
				body: restriction (RAIDLevelSettings [ 339777-B21 || 339778-B21 || 339779-B21 || 339780-B21 || 339781-B21 ] <= 1);
			}
			constraint RAIDSettings_r3ii {
				message: "RAID requires selection of a Smart Array controller and a specific number of matching hard drives. ";
				body:
				//SE - For ALM 138718		21-Nov-2020
				//if thisInst.selected(RAIDLevelSettings).count > 0 then thisInst.selected(ProliantStorageContSASSA).count > 0 and thisInst.selected(ProliantHardDrive).filter(tDriveType = "SAS" || tDriveType = "SAS-SSD").noMix;
				if thisInst.selected(RAIDLevelSettings).count > 0 and thisInst.selected(ProliantHardDrive).filter(tDriveType = "SATA").count > 0 then thisInst.selected(ProliantStorageContSASSA).count > 0 or
				thisInst.selected(EmbededControllerState).count > 0;
			}
			constraint RAIDSettings_r3iv {
				message: "If RAID is selected and both SAS and SATA HDDs have been selected, then only the SAS HDDs will be used in the RAID set.";
				body:
				if thisInst.selected(RAIDLevelSettings).count > 0 then false;
			}
			constraint RAIDSettings_r3v {
				message: "RAID must be selected if both Factory Installed OS and Smart Array SAS controller (embedded or otherwise) are present. ";
				body:
				if thisInst.selected(ProliantStorageContSASSA).count > 0 and thisInst.selected(OperatingSystem).filterByAttribute(bIsFactoryInstalledMicrosoft, true).count > 0 then thisInst.selected(RAIDLevelSettings).count > 0;
			}
			constraint RAIDSettings_r5 {
				message: "If H240/H240ar/E208i-a/E208i-p is the primary controller, then the following RAID levels are allowed: 0, 1, 5.";
				body:
				if getPrimaryController.id >= "804326-B21" or getPrimaryController.id >= "804394-B21" then thisInst.selected(RAIDLevelSettings).filter(x => x.id <= "339781-B21").count = 0;
			}
			constraint ScalablePersistentMemory_r1 {
				message: "For use only with 8SFF Mod-X";
				enabled: ! isBandingPage; //AB 01-Feb- 2022 For ALM ID: 144327
				body: dependency (! DL380Gen10 [ bFormFactor = "8SFF" ], ScalablePMEM = 0);
			}
			constraint ScalablePersistentMemory_r2Msj {
				message: "If this option is selected, the ordering systems will automatically default ALL of the following options:<br/>
                    - Qty=1  HPE Scalable PMEM 800W PSU/400W BBU FIO (827608-B21)<br/>
					- Qty=1  HPE DL38X NVMe 8 SSD Express Bay (826689-B21)<br/>
					- Qty=1  4-Port Slimline Primary Riser (867807-B21)<br/>
					- Qty=1  High Performance Fan Kit (867810-B21)";
				body: dependency (ScalablePMEM, ProliantDriveCage [ 826689-B21 ] = 1);
				dependency (ScalablePMEM, ProliantPowerOption [ 827608-B21 ] = 1);
				dependency (ScalablePMEM, ProliantPciRiser [ 867807-B21 ] = 1);
				dependency (ScalablePMEM, CoolingFan [ 867810-B21 ] = 1);
				if thisInst.selected(ScalablePMEM).count >= 1 then false;
			}
			constraint ScalablePersistentMemory_r3 {
				message: "If this option is selected, the ordering systems will automatically default the following memory option:<br/>
                      - (Min Qty=12)  HPE 32GB 2Rx4 PC4-2666V-R Smart Kit (815100-B21)</br>
                        With the (Min Qty=12) memory option defaulted, this is just the minimum requirement and the selection of additional memory is allowed to be added to the system.<br/><br/>
					If choose to deselect the defaulted memory option, it can only be replaced by ONE of the following memory options:<br/>
						- Qty=24  HPE 16GB 1Rx4 PC4-2666V-R Smart Kit (815098-B21)<br/>
						- Qty=24  HPE 16GB 2Rx8 PC4-2666V-R Smart Kit (835955-B21)";
				body:
				if thisInst.selected(ScalablePMEM).filter(x => split(x.id, "#").get(0) >= "876401-B21").count >= 1 && thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) >= "815100-B21").count < 12 then
				thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) >= "815098-B21").count >= 24 && thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) >= "835955-B21").count >= 24;
			}
			part getDefaultM01: triggerConsequentialSelectionNoRestore {
				string consequentialSelectionFunc: "DefaultM1";
			}
			constraint ScalablePersistentMemory_r4 {
				message: "If this option is selected, the ordering systems will automatically default the following memory option:</br>
				- Qty=24  HPE 32GB 2Rx4 PC4-2666V-R Smart Kit (815100-B21)</br>
				Note:  If the customer chooses to deselect the defaulted memory option, it can only be replaced by ONE of the following memory options:</br>
				- (Min Qty=12)  HPE 64GB 4Rx4 PC4-2666V-L Smart Kit (815101-B21)</br>
				When the (Min Qty=12) memory option is selected, this is just the minimum requirement and the selection of additional memory is allowed to be added to the system.";
				body:
				if thisInst.selected(ScalablePMEM).filter(x => split(x.id, "#").get(0) >= "876402-B21").count >= 1 && thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) >= "815100-B21").count < 24 then
				thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) >= "815101-B21").count >= 12;
			}
			part getDefaultM02: triggerConsequentialSelectionNoRestore {
				string consequentialSelectionFunc: "DefaultM2";
			}
			constraint ScalablePersistentMemory_r5 {
				message: "If this option is selected (876403-B21), the ordering systems will automatically default the following memory option:
						- Qty=24  HPE 64GB 4Rx4 PC4-2666V-L Smart Kit (815101-B21)";
				body: dependency (ScalablePMEM [ 876403-B21 ], ProliantMemoryArray [ 815101-B21 ] = 24);
				if thisInst.selected(ScalablePMEM).filter(x => split(x.id, "#").get(0) >= "876403-B21").count > 0 then thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) >= "815101-B21").count = 24;
			}
			constraint ScalablePersistentMemory_r6Msj {
				message: "If this option is selected, the ordering systems will automatically default the following NVMe options:<br/>
	              - A (Min Qty=2) of the following is required:  HPE 1.6TB NVMe x4 MU SFF SCN DS SSD (877994-B21)<br/><br/>
	               Note: This is just the minimum requirement and the selection of additional NVMe drives is allowed to be added to the system.";
				body: dependency (ScalablePMEM [ 876401-B21 ], ProliantHardDrive_HP_SFF_NVME [ 877994-B21 ] = 2);
				if thisInst.selected(ScalablePMEM).filter(x => split(x.id, "#").get(0) >= "876401-B21").count >= 1 then false;
			}
			constraint ScalablePersistentMemory_r7Msj {
				message: "If this option is selected, the ordering systems will Automatically Populate (DEFAULT) the following NVMe options:<br/>
						- A (Min Qty=4) of the following is required:  HPE 1.6TB NVMe x4 MU SFF SCN DS SSD (877994-B21)<br/><br/>
						
						Note: This is just the minimum requirement and the selection of additional NVMe drives is allowed to be added to the system.";
				body: dependency (ScalablePMEM [ 876402-B21 ], ProliantHardDrive_HP_SFF_NVME [ 877994-B21 ] = 4);
				if thisInst.selected(ScalablePMEM).filter(x => split(x.id, "#").get(0) >= "876402-B21").count >= 1 then false;
			}
			constraint ScalablePersistentMemory_r8 {
				message: "A (Min Qty=8) of the following is required:  HPE 1.6TB NVMe x4 MU SFF SCN DS SSD (877994-B21).";
				body: if thisInst.selected(ScalablePMEM).filter(x => split(x.id, "#").get(0) >= "876403-B21").count > 0 then thisInst.selected(ProliantHardDrive).filter(x => split(x.id, "#").get(0) >= "877994-B21").count >= 8;
			}
			constraint ScalablePersistentMemory_r9 {
				message: "This option requires a Qty=2 Processors to be selected";
				body: if thisInst.selected(ScalablePMEM).count > 0 then thisInst.selected(ProliantProcessor).count = 2;
			}
			constraint ScalablePersistentMemory_r10 {
				message: "With the selection of this option, the MAX number of SSDs that can be ordered is 16. (MAX=16 SSD)";
				body: if thisInst.selected(ScalablePMEM).count > 0 then (thisInst.selected(ProliantHardDrive).filterByAttribute(subCategory, "SSDWI") + thisInst.selected(ProliantHardDrive).filterByAttribute(subCategory, "SSDMU") +
				thisInst.selected(ProliantHardDrive).filterByAttribute(subCategory, "SSDRI")).count <= 16;
			}
			constraint ScalablePersistentMemory_r11 { //Warning
				message: "If the system is configured to support storage devices in Box1, only HDDs can be supported in Box1. <br />
						Support for ANY SSD is not permitted in Box1 when a Persistent Memory Solution is being applied";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: false;
			}
			constraint ScalablePersistentMemory_BlueNote {
				message: "Please use HPE Power Advisor (www.hpe.com/info/hppoweradvisor) for sizing power requirements for your HPE Scalable Persistent Memory solution. <br />
							Visit <a href='https://www.hpe.com/us/en/servers/persistent-memory.html' target='_blank'>www.hpe.com/info/persistentmemory </a> for configuration details for HPE Scalable Persistent Memory.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: false;
			}
			constraint ScalablePersistentMemory_r12 {
				message: "This option CANNOT be selected with ANY Tertiary Riser.";
				body: dependency (ScalablePMEM, ProliantPciRiser [ 826700-B21 || 826702-B21 || 867808-B21 || 875780-B21 ] = 0);
			}
			constraint remark_identifier_skus_section {
				message:
				"HPE offers multiple Trade Agreement Act (TAA) compliant configurations to meet the needs of US Federal Government customers. These products are either manufactured or substantially transformed in a designated country. TAA compliance is only provided when HPE options are included as part of factory integrated orders (CTO).";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.NEBSid != "dl380NEBS" and selected(IdenTrackingSku).filter(x => split(x.id, "#").get(0) <= "P19713-B21 P49803-B21 P49814-B21").count > 0 then false;
			}
			locationArray advancememoryLocationArray {
				fillerClasses: ProliantOEMMemoryArray;
				rows: 1;
			}
			constraint advancememory_rule1 {
				message: "Customer can only order one of the following options:<br>
						  878371-B21 NEC Online Spare Memory FIO <br> 
						  or<br>
						  881665-B21 NEC Memory Mirroring FIO<br>
						  or<br>
						  875293-B21 HPE Memory Fast Fault Tolerance FIO Kit";
				body: restriction (ProliantOEMMemoryArray [ 878371-B21 || 881665-B21 ] <= 1);
			}
			constraint advancememory_rule2 {
				message: "Cannot support single rank memory.";
				body: dependency (ProliantOEMMemoryArray [ 881665-B21 ] > 0, ProliantMemoryArray [ 815097-B21 || 845264-B21 || 815098-B21 || P00918-B21 || P00920-B21 || P38446-B21 ] = 0);
			}
			constraint HPECEMarkRmv_rul1 {
				message: "This system does not meet the EU Lot 9 energy efficiency requirements cannot be put into service, installed, or supplied in the EU, nor can it be CE marked";
				body:
				true;
			}
			constraint HPECEMarkRmv {
				message: "This system does not meet the EU Lot 9 energy efficiency requirements cannot be put into service, installed, or supplied in the EU, nor can it be CE marked";
				body:
				if thisConfig.getProperty("region") != "EU" and (thisInst.NEBSid != "dl380NEBS") and (thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <= "815097-B21 P00918-B21").count > 0 or
				thisInst.selected(ProliantProcessor).filter(x => split(x.id, "#").get(0) <= "873641-B21 873641-L21").count = 1) then thisInst.selected(HPECEMREnableKit).filter(x => split(x.id, "#").get(0) <= "P35876-B21").count > 0;
			}
			constraint rule_iLOPassW {
				message: "Use of iLO Common Password SKU sets the initial iLO password to be a well-known string rather than a random password.<br>
						  It is advisable to match the order quantity of this SKU matching the quantity of servers being ordered.";
				body: if thisInst.selected(IloCommonPswSku).filter(x => split(x.id, "#").get(0) >= "P08040-B21").count > 0 then false;
			}
			constraint RAIDSettings_r4 {
				message: "If B140i/S100i Controller(with Enable B140i/S100i Setting) is the primary controller, then the following RAID levels are allowed :</br>
						- RAID 0, 1, 5.</br>
						If AHCI Embedded SATA controller (without Enable B140i/S100i Setting) is the primary controller, then RAID levels are not allowed.";
				body:
				if getPrimaryControllers.count = 0 and thisInst.selected(EmbededControllerState).filter(x => split(x.id, "#").get(0) >= "784308-B21").count > 0 then thisInst.selected(RAIDLevelSettings).filter(p => p.id >= "339780-B21" or p.id >=
				"339781-B21").count = 0 else if getPrimaryControllers.count = 0 and thisInst.selected(EmbededControllerState).filter(x => split(x.id, "#").get(0) >= "784308-B21").count = 0 then thisInst.selected(RAIDLevelSettings).count = 0;
			}
			constraint IdenTracking_rule4 {
				message: "This option requires selection of HPE TPM 2.0 Gen10 Kit (864279-B21).";
				body:
				if thisInst.selected(IdenTrackingSku).filter(x => split(x.id, "#").get(0) <= "P49803-B21").count > 0 then thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "864279-B21").count > 0;
			}
			constraint IdenTracking_rule5 {
				message: "The TPM 1.2 Setting (872108-B21) and HPE Svr Platform LDevID FIO Setting (P49803-B21) CAN NOT be selected together.";
				body:
				if thisInst.selected(TPMModeSetting).filter(x => split(x.id, "#").get(0) <= "872108-B21").count > 0 and thisInst.selected(IdenTrackingSku).filter(x => split(x.id, "#").get(0) <= "P49803-B21").count > 0 then false;
			}
			constraint IdenTracking_rule6 {
				message: "HPE Svr Platform LDevID FIO Setting (P49803-B21) and HPE Server Identity LDevID FIO Setting (P49814-B21) cannot be selected together.";
				body: restriction (IdenTrackingSku.noMix);
			}
			constraint IdenTracking_rule2 {
				message: "Max 1";
				body: restriction (dlTrackingSku [ P19713-B21 ] <= 1);
				restriction (IdenTrackingSku [ P49803-B21 ] <= 1);
				restriction (IdenTrackingSku [ P49814-B21 ] <= 1);
			}
			constraint IdenTracking_rule4 {
				message: "This P49803-B21 option requires selection of HPE TPM 2.0 Gen10 Kit (864279-B21).";
				body:
				if thisInst.NEBSid != "dl380NEBS" and thisInst.selected(IdenTrackingSku).filter(x => split(x.id, "#").get(0) <= "P49803-B21").count > 0 then thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <=
				"864279-B21").count > 0;
				//AB 30-Oct-2021 for PERT ID: 24767				if thisInst.selected(IdenTrackingSku).filter(x => split(x.id, "#").get(0) <= "P49803-B21").count > 0 then
				//				   thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) <= "864279-B21").count > 0 ;

			}
			constraint IdenTracking_rule5 {
				message: "The TPM 1.2 Setting (872108-B21) and HPE Svr Platform LDevID FIO Setting (P49803-B21) CAN NOT be selected together.";
				body:
				if thisInst.NEBSid != "dl380NEBS" and thisInst.selected(IdenTrackingSku).filter(x => split(x.id, "#").get(0) <= "P49803-B21").count > 0 and thisInst.selected(TPMModeSetting).filter(x => split(x.id, "#").get(0) <= "872108-B21").count >
				0 then false;
				//AB 30-Oct-2021 for PERT ID: 24767				if thisInst.selected(IdenTrackingSku).filter(x => split(x.id, "#").get(0) <= "P49803-B21").count > 0 and
				//AB 30-Oct-2021 for PERT ID: 24767				   thisInst.selected(TPMModeSetting).filter(x => split(x.id, "#").get(0) <= "872108-B21").count > 0 then false;

			}
			constraint raidSettings_rule4c {
				message: "If this part number is selected, then preinstalled OS must be on the order <br>
							MS WS19 (16-Core) Std FIO UEFI de SW P11059-041 <br>
							MS WS19 (16-Core) Std FIO UEFI ja SW P11059-291 <br>
							MS WS19 (16-Core) Std FIO UEFI en SW P11059-B21 <br>
							MS WS19 Ess FIO UEFI ja SW P11071-291 <br>
							RHEL 6 FIO w/o Support Q6J43A <br>
							RHEL 7 FIO w/o Support Q6J44A <br>
							SLES 11 FIO w/o Support Q6J45A <br>
							SLES 12 FIO w/o Support Q6J46A <br>
							SLES 15 FIO Software R1Z69A <br>
							RHEL 8 FIO Software R4T04A <br>"; //RS error message updated as per UAT 25OCT2021
				body: if thisInst.selected(ComplexConfiguration).filter(q => q.id >= "389692-B21").count > 0 then (thisInst.selected(OperatingSystem).filter(x => split(x.id, "#").get(0) <= "P11059-041 P11059-291 P11059-B21 P11071-291").count > 0 or
				thisInst.selected(HPCSoftwareProducts).filter(x => split(x.id, "#").get(0) <= "Q6J43A Q6J44A Q6J45A Q6J46A R1Z69A R4T04A").count > 0);
			}
			constraint RAIDSettings_Rule7 {
				message: "HPE Recommends to use below standard RAID Settings,<br>
						- 339777-B21 - HPE RAID 0 Drive 1 FIO Setting<br>
						- 339778-B21 - HPE RAID 1 Drive 1 FIO Setting<br>
						- 339779-B21 - HPE RAID 5 Drive 1 FIO Setting<br>
 						- 339780-B21 - HPE RAID 5 w/SP Drive 1 FIO Setting<br>
 						- 339781-B21 - HPE Raid Adv Data Guarding FIO";
				body: if thisInst.selected(ComplexConfiguration).filter(x => split(x.id, "#").get(0) <= "389692-B21").count > 0 then false;
			}
			constraint trusted_sup_r1 {
				message: "If 'P36394-B21' this option is selected, the following options are required:<br>
							  - HPE Gen10 Intrusion Detection Kit [867824-B21]<br>
							  (NOTE: OCA to default qty. 1). <br>
							  - HPE iLO Adv 1-svr Lic 3yr Support [BD505A] or HPE OneView for DL 3y 24x7 FIO Phys 1 Svr Lic [E5Y43A] or HPE iLO Adv 1-svr Lic 1yr Support [512485-B21] <br>
							  (NOTE:  OCA to default qty. 1 of [BD505A]; user should be able to deselect the default option and select [E5Y43A] or [512485-B21]).";
				body:
				if thisInst.selected(TrustedSupplyChain).count > 0 then (thisInst.selected(SecurityHardware).filter(x => split(x.id, "#").get(0) >= "867824-B21").count > 0 and (thisInst.selected(IntegratedLightsOut).filter(x => x.id <=
				"BD505A 512485-B21").count > 0 or thisInst.selected(OneViewManagementSoftware).filter(x => x.id >= "E5Y43A").count > 0));
			}
		}
		subsystem powerSubsystem {
			constraint blueNotePowerCord {
				message: "AC power cords not supported with DC power supply.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.selected(ProliantPowerCord).count >= 0 then false;
			}
			constraint powerCords_r2 {
				message: "If AC Power Supply is selected then only AC Power Cords should be in the drop-down.";
				body: dependency (ProliantPowerOption [ sPowerCurrent = "AC" ] > 0, ProliantPowerCord [ ! sPowerCurrent = "AC" ] = 0);
			}

			// SKE ALM 110458
			constraint atLeastOnePowerOption {
				message: "CTO Models require at least one power supply";
				body: true;
			}
			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Cooling Options
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: blue note
		 	*/
			constraint CoolingOptions_r1 { //RJM ALM-107418 7/24/2017
				message: "The 24SFF and 12LFF Model-Xs come standard with the High Performance fans. Therefore, this option should not be offered as a selection on these models.";
				body: dependency (DL380Gen10 [ bFormFactor = "24SFF" || bFormFactor = "12LFF" ], CoolingFan [ 867810-B21 ] = 0);
			}

			//SE - For PERT 20229		06-Nov-2020
			constraint deflt_for_NEBS {
				message: "The DL380 Gen10 NEBS server should have 1 quantity of 867810-B21 HPE DL38X Gen10 High Perf Fan (cannot be remove from configuration)";
				body:
				if thisInst.NEBSid = "dl380NEBS" then thisInst.selected(CoolingFan).filter(x => split(x.id, "#").get(0) = "867810-B21").count > 0;
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Power Supplies	
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: A power supply must be selected
		 	*/
//			constraint PowerSupplies_maxmin { HPD ALM_110117 9/22/2017
			//				message: "A power supply must be selected";
			//				body: restriction(ProliantPowerOption > 0);
			//			}
			constraint PowerSupplies_maxmin { // HPD ALM_110117 9/22/2017
			//	message: "A power supply must be selected";
				message: "Minimum one power supply Kit must be required";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				if thisInst.selected(ProliantPowerOption).count < 1 then false;
			}
			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Power Supplies	
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: If 2nd power supply is ordered, its part number must be the same as the part number of 1st power supply.
		 	*/
			constraint PowerSupplies_r1 {
				message: "If 2nd power supply is ordered, its part number must be the same as the part number of 1st power supply.";
				body: restriction (ProliantPowerOption.noMix);
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Power Supplies	
			 * @RuleNumber: 0
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: blue note
		 	*/
			constraint PowerSupplies_bluenote {
				message: "NEW HPE ProLiant Servers offer Flex Slot Power Supplies that come in multiple power ratings to allow you to pick the Right Size to fit your configuration.  
			 	 This provides you with the advantage of reducing and reclaiming lost power.  By selecting the right sized power supply you will be providing facilities with a nameplate 
				 rating that is much closer to actual power your server uses.  In order to select the right size power supply for your ProLiant Server it is 'highly recommended' 
				 that you use the 'HPE Power Advisor' located at 'https://paonline56.itcs.hpe.com/?Page=Index' to determine the right size power supply for your server needs";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				// if thisConfig.getProperty("targetEnvironment") = "oca" and thisInst.selected(ProliantPowerOption).count > 0 then false;
				if thisInst.selected(ProliantPowerOption).count > 0 then false; //NL fixed for ALM: 130297, 03-May-2019

			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Power Supplies	
			 * @RuleNumber: remark
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description:  tool will default ‘J6X43A’ Power cord when ‘720480-B21’ DC Power supply is selected
		 	*/
//SE - For ALM 136049   21-May-2020		 	
			//			constraint PowerSupplies_remark {
			//				message:
			//				"HPE 800W FS -48VDC HPE P/S Kit does not ship with a power cable.  The configuration tool will default J6X43A Power cord when 720480-B21 DC Power supply is selected, customer can deselect this power cord if decides to use their own cables.";
			//				body: dependency (ProliantPowerOption [ 720480-B21 ] > 0, ProliantPowerCord [ J6X43A ] = 1);
			//			}
			constraint zeroOrEqualCords {
				message: "If power cords are selected, their quantity must equal power option quantity";
				body: true;
			}
			constraint PowerSupplies_r1_a {
				message: "Min/max rule does not apply to this (827608-B21). This kit contains two power supply. Max = 1 allowed per configuration";
				body: restriction (ProliantPowerOption [ 827608-B21 ] <= 1);
			}
			constraint powerSupplies_r27 {
				message: "The power supply selected only supports high line voltage (200VAC to 240VAC).";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body: if thisInst.selected(ProliantPowerOption).filter(x => split(x.id, "#").get(0) <= "830272-B21 865438-B21").count > 0 then false;
			}
			constraint PowerSupplies_r4 {
				message: "If this option is ordered, one of the following Scalable PMEM FIO options must also be ordered:</br>
							* 876401-B21</br>
							* 876402-B21</br>
							* 876403-B21";
				body: if thisInst.selected(ProliantPowerOption).filter(x => split(x.id, "#").get(0) = "827608-B21").count > 0 then thisInst.selected(ScalablePMEM).filter(x => split(x.id, "#").get(0) <= "876401-B21 876402-B21 876403-B21").count > 0;
			}
			constraint PowerCoords_bluenote2 {
				message: "If any of the power cords are configured from the dropdown menu selection, the standard power cord(s) will not ship with the server.";
				enabled: (thisInst.realBasedummyId != "P19718-B21_HSX");
				body:
				if thisConfig.getProperty("targetEnvironment") >= "oca" and thisInst.selected(ProliantPowerCord).count >= 0 then false;
			}
			constraint universalPowerRequiresJumper {
				message: "Customer must select ONE Jumper cord for each power supply ordered from the list below:<br>
							For APP to APP <br>
							&emsp;-  APP-APP14AWG 2.0m Jpr CRD  Opt - J6X00A";
//SE - For ALM 139636 				 
				//				"Customer must select ONE Jumper cord for each power supply ordered from the list below:<br>
				//							For APP to LS25<br>
				//							&emsp;-  APP-LS25 14AWG 2.0m Jpr CRD  Opt - J6X03A
				//							For APP to APP <br>
				//							&emsp;-  APP-APP14AWG 2.0m Jpr CRD  Opt - J6X00A";
				body: if thisInst.selected(ProliantPowerOption).filter(x => split(x.id, "#").get(0) >= "865428-B21").count = 1 then jumperCordsCount () = 1 else if thisInst.selected(ProliantPowerOption).filter(x => split(x.id, "#").get(0) =
				"865428-B21").count = 2 then jumperCordsCount () = 2;
			}
			constraint powerSupplies_r21 {
				message: "(865434-B21) Cannot be selected with any of the following Persistent Memory kits: <br>
						 <br>
						-HPE 128GB 2666 Persistent Memory Kit (835804-B21)<br>
						-HPE 256GB 2666 Persistent Memory Kit (835807-B21)<br>
						-HPE 512GB 2666 Persistent Memory Kit (835810-B21)";
				body: dependency (ProliantMemoryArray [ 835804-B21 || 835807-B21 || 835810-B21 ] > 0, ProliantPowerOption [ 865434-B21 ] = 0);
			}
			constraint powerSupplies_R19 {
				message: "HPE 800W FS 48VDC Ht Plg LH Pwr Sply Kit does not ship with a power cable.<br>
								The configuration tool will default Q0H80A - HPE 48VDC 2.85M Power Cable Power cord when DC Power supply is selected, customer can deselect this power cord if decides to use their own cables.";
				body:
				//if thisInst.selected(ProliantPowerOption).filter(x => split(x.id, "#").get(0) = "865434-B21").count > 0 then false;  
				//then thisInst.selected(ProliantPowerCord).filter(x => split(x.id,"#").get(0) = "Q0H80A").count >= 1;
				if thisConfig.getProperty("targetEnvironment") != "oca" and thisInst.selected(ProliantPowerOption).filter(x => split(x.id, "#").get(0) = "865434-B21").count >= 1 then thisInst.selected(ProliantPowerCord).filter(x => split(x.id,
				"#").get(0) = "Q0H80A").count >= 1;
			}
			part setPowerDefault: triggerConsequentialSelection {
				string consequentialSelectionFunc: "powerCordDefault";
			}
			constraint powerCordsBIS_error {
				message: "This Power Supply is not compliant with India BIS Certification for selected Model -X and SHOULD NOT BE SELECTED. <br>
						  This is a regulatory compliance and hence the user cannot select this combination(Power Supply+ Model-X) if order is shipping to India. <br>
						  Please Select alternate PSU.";
				body: if thisConfig.getProperty("country") = "IN" and thisInst.selected(ProliantPowerOption).filter(x => split(x.id, "#").get(0) <= "865428-B21 865438-B21 P03178-B21").count > 0 then false;
			}
			constraint powerCordsBIS_warning {
				message: "This Power Supply is not compliant with India BIS Certification for selected Model -X and SHOULD NOT BE SELECTED. <br>
						  This is a regulatory compliance and hence the user cannot select this combination(Power Supply+ Model-X) if order is shipping to India. <br>
						  Please Select alternate PSU.";
				body: if thisConfig.getProperty("country") != "IN" and thisInst.selected(ProliantPowerOption).filter(x => split(x.id, "#").get(0) <= "865428-B21 865438-B21 P03178-B21").count > 0 then false;
			}
		}
		subsystem GraphicsOptionsSubsystem {
			constraint managementhw_r1 {
				message: "qty = 2";
				body: restriction (GraphicCable [ 871828-B21 ] <= 2);
				restriction (GraphicCable [ 871829-B21 ] <= 2);
				restriction (GraphicCable [ 871830-B21 ] <= 2);
				restriction (GraphicCable [ 874212-B21 ] <= 2);
				restriction (GraphicCable [ P03849-B21 ] <= 2);
			}

			//SE - Move this constraint logic to the correct subsystem for PERT 17885  27-Nov-2019 
			constraint graphicOptions_Accessories_warning {
				message: "Additional Software Requirement!  If this order includes an NVIDIA GPU option and the intended use of this NVIDIA GPU Option is for a virtual desktop or virtual workstation (VDI) virtual GPU deployment, 
							you must procure additional NVIDIA GRID Virtual PC (GRID vPC) and GRID Virtual Apps (GRID vApps) Software Licenses.  
							See <a href='https://h20195.www2.hpe.com/v2/getdocument.aspx?docname=a00059765enw#' target='_blank'>HPE Complete NVIDIA GRID Solutions</a> for more details";
				body: if thisInst.selected(GraphicCable).count > 0 then false;
			}
			constraint graphicOptions_info {
				message: "For a more comprehensive and detailed understanding of the GPU / Riser relationships, dependencies, and restrictions, please refer to the DL380 GPU and Riser Template.</br>  
							See <a href='https://h20195.www2.hpe.com/v2/getdocument.aspx?docname=a00059765enw#' target='_blank' target='_blank'>HPE Complete NVIDIA GRID Solutions</a> for more details";
				body: if thisInst.selected(GraphicsPciCard).count > 0 then false;
			}
			constraint GraphicOptions_r13 {
				message: "If this graphics option is selected, the system memory capacity must be less than 16TB.";
				body:
				if thisInst.selected(GraphicsPciCard).filter(x => x.id <= "Q1K38C").count > 0 then thisInst.selected(ProliantMemoryArray).sum(dCapacity) <= 16384;
			}
			constraint unsupportedGraphics {
				message: "Unsupported GPU.";
				body: dependency (DL380Gen10 > 0, GraphicsPciCard [ Q0J62A || Q0V80A || Q1K38A || Q7G75A || Q9B37A || Q9U36A || R0W29A || R0Z45A ] = 0);
			}
			constraint GraphicOptions_r2 {
				message: "If more than one GPU is selected, all the part numbers must match;  Mixing of GPUs is not allowed.";
				body: restriction (GraphicsPciCard.noMix);
			}
			constraint GraphicOptions_r3 {
				message: "This GPU requires Pwr Cable Kit (871829-B21) to also be selected.  Note:  One Pwr Cable Kit can support multiple (max=3) GPUs.";
				body:
				if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "Q0E21A Q0V80A Q0V80C Q2N68A Q2S42A M3X67A Q9U36A Q9U36C Q7G75A Q7G75C R4D73C R6B53C R7E31C R7G39C R8T26C R9S37C").count > 0 then
				thisInst.selected(GraphicCable).filter(x => split(x.id, "#").get(0) >= "871829-B21").count >= 1; //PRS Added R9S37C for PERT-25009 07-Apr-2022   //HK Added R8T26C for PERT 24977 21-Feb-2022	//HK 05-Jan-2022 added R7G39C R7E31C for PERT 24870 

			}
			constraint GraphicOptions_r7 {
				message:
				"This option requires the High Performance Fan Kit (867810-B21) to be selected. Note:  If this option is being configured into a 12LFF Model-X or 24SFF Model-X, this rule does not apply as these models already come standard with the High Performance Fans.";
				body: dependency (DL380Gen10 [ bFormFactor = "8LFF" || bFormFactor = "8SFF" ] > 0 && GraphicsPciCard > 0, CoolingFan [ 867810-B21 ] > 0);
			}
			constraint GraphicOptions_r9 {
				message: "A Max Qty=2 of this GPU is allowed per server.";
				body: restriction (GraphicsPciCard [ Q0J62A || Q0Y81A || Q0J62C || R0Z45C || R1F97C || R6B53C || R7E31C || R7G39C || R8T26C || R9S37C ] <= 2); //PRS Added R9S37C for PERT-25009 07-Apr-2022   //HK Added R8T26C for PERT 24977 21-Feb-2022 //HK 05-Jan-2022 added R7G39C R7E31C for PERT 24870	 //|| Q7G75A removed 15611		//SE - Added for PERT 20266		30-Oct-2020

			}
			constraint supportsOnly8SFF_r27 { //PERT15611
				message: "This option is ONLY supported on the 8SFF Model-X.";
				body: dependency (DL380Gen10 [ ~ (bFormFactor = "8SFF") ], GraphicsPciCard [ Q7G75A || Q7G75C || R0X82A || R0X82C || R1F97A ] = 0); //PRS Added R0X82C for PERT-18911 01-Jan-2020	//NL fixed for ALM: 131856 ,|| R1F95A as per current version Menu - 1908.060 its unsuported no rule [ 27 ] mentioned hence removed from constraint.

			}
			constraint GraphicOptions_maxmin {
				message: "Not enough slots to place a PCIe";
				body:
				if thisInst.selected(GraphicsPciCard).filterByAttribute(iBusWidth, 16).count > 0 then countPCIe16Available () >= countPCIex16 () else if thisInst.selected(GraphicsPciCard).filterByAttribute(iBusWidth, 8).count > 0 then
				countPCIe8Available + countPCIe16Available () >= nGPUDoublewide () + countPCIex8 ();
			} //HK ALM 144236 28-Jan-2022
			constraint GraphicsOptions_r22 {
				message: "If this graphics option is selected then the system memory capacity must be less than 1TB.";
				body:
				{
					val listGraphicOptions = "Q1K37A M3X67A Q0J62A Q0J62C Q0Y81A"; // Q1K38A Q1K38C 
					if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= listGraphicOptions).count > 0 then thisInst.selected(ProliantMemoryArray).sum(dCapacity) < 1024;
				}
			}
			constraint GraphicOptions_r23 {
				message: "A Max Qty=1 of this GPU is allowed per server.";
				body:
				if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "Q1K37A").count > 1 then false;
			}
			constraint GraphicOptions_r25 {
				message: "This GPU requires Pwr Cable Kit (P03849-B21) to also be selected. Note: One Pwr Cable Kit can support multiple (Max=3 Doublewide or Max=6 Singlewide) GPUs.";
				body: if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "Q0Y81A Q8Z50A R1F95A R1F95C").count > 0 then thisInst.selected(GraphicCable).filter(x => split(x.id, "#").get(0) <= "P03849-B21").count > 0;
			}
			constraint GraphicOptions_r24 {
				message: "This option IS NOT supported on the 12LFF Model-Xs.";
				//AB 03-June-2020 for PERT ID: 19077body: dependency (DL380Gen10 [ bFormFactor = "12LFF" ] > 0, GraphicsPciCard [ M3X67A || Q1K38A || Q1K38C || Q2N68A || Q8Z50A || Q9U36A || Q9U36C || Q0Y81A || R0W29A || R0W29C ] = 0);
				body: dependency (DL380Gen10 [ bFormFactor = "12LFF" ] > 0, GraphicsPciCard [ M3X67A || Q1K38A || Q1K38C || Q2N68A || Q8Z50A || Q9U36A || Q9U36C || Q0Y81A || R0W29A || R0W29C || R4B02C || R4B03C || R4D73C || R6B53C || R7E31C || R7G39C
				|| R8T26C || R9S37C //SE - Added R6B53C for PERT 20266	30-Oct-2020	 //RS Added R4D73C as per ALM 136581 18Jun2020
				] = 0); //HK Added R8T26C for PERT 24977 21-Feb-2022	//AB 03-June-2020 for PERT ID: 19077 added R4B03C R4B02C  //HK 05-Jan-2022 added R7G39C R7E31C for PERT 24870 

			}

			//AB 03-June-2020 for PERT ID: 19077 added R4B03C , R4B02C	
			constraint GraphicOptions_r32 {
				message: "The R4B03C graphics option and below Drive cage cannot be selected together:<br>
 						  - 826689-B21 - HPE DL38X NVMe 8 SSD Express Bay<br>
 						  - 826690-B21 - HPE DL38X Gen10 Premium 8SFF HDD Bay<br>
                          - 826688-B21 - HPE DL38X Gen10 2SFF HDD Riser Kit.";
				body:
				{
					val drivecagecount = (thisInst.selected(ProliantDriveCage).filter(y => split(y.id, "#").get(0) <= "826689-B21").count + thisInst.selected(ProliantDriveCage).filter(y => split(y.id, "#").get(0) <= "826690-B21").count +
					thisInst.selected(ProliantDriveCage).filter(y => split(y.id, "#").get(0) <= "826688-B21").count);
					if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R4B03C").count > 0 then drivecagecount = 0;
				}
			}

			//RS popaflare UAT 26Apr2021	     	
			constraint GraphicOptions_r39a {
				message: "If Qty 1 of U50 (R4B02C) /V100S (R4D73C) GPU is selected - Max Qty of 16 NVMe Drives allowed for selection (All NVMe Drives selected must be below 10W).";
				body: if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R4B02C R4D73C").count = 1 then thisInst.selected(ProliantHardDrive_HP_SFF_NVME).filter(x => split(x.id, "#").get(0) <= "P07179-B21 P10210-B21 P10212-B21 P13668-B21 P13670-B21 
																 												  P13676-B21 P13678-B21 P19809-B21 P19825-B21").count <= 16;
			}

			//RS popaflare UAT 26Apr2021	
			constraint GraphicOptions_r39b {
				message: "If Qty1 of U50 (R4B02C) /V100S (R4D73C) GPU is selected - Max Qty of 16 NVMe Drives allowed for selection (All NVMe Drives selected must be below 10W)";
				// RV 07-May-2021 ALM. 140378"If Qty 1 of U50 (R4B02C) /V100S (R4D73C) is selected then NVMe Drives not allowed for selection.";
				body: if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R4B02C R4D73C").count = 1 then thisInst.selected(ProliantHardDrive_HP_SFF_NVME).filter(x => split(x.id, "#").get(0) <= "878014-B21 P06952-B21 P07192-B21 P07196-B21 P10214-B21 P10222-B21 P10224-B21 P10226-B21 P13672-B21 P13674-B21 
																											      P13680-B21 P13695-B21 P13697-B21 P13699-B21 P13701-B21 P13703-B21 P19813-B21 P19817-B21 P19821-B21 P19829-B21
																											      P19833-B21 P19837-B21 P20015-B21 P20017-B21 P20019-B21 P20094-B21 P20096-B21 P20098-B21 P20100-B21 P20139-B21 
																											      P20141-B21 P20143-B21 P20203-B21 P20205-B21 P20207-B21 P20209-B21 P22268-B21 P22270-B21 P22272-B21 P22274-B21").count = 0;
			}

			//AB 03-June-2020 for PERT ID: 19077 added R4B03C , R4B02C	
			constraint GraphicOptions_r33 {
				message: "The R4B03C graphics option is selected along with HPE DL38X Gen10 Premium 2SFF HDD Kit (826687-B21) then max quantity of HPE DL38X Gen10 Premium 2SFF HDD Kit (826687-B21) is limited to 1 and must select Universal Media Bay (826708-B21).<br>
 						  NVMe Drives are not supported in this combination.";
				body:
				{
					val graphicscount = thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R4B03C").count; ///graphics
					val drivecage1count = thisInst.selected(ProliantDriveCage).filter(y => split(y.id, "#").get(0) <= "826687-B21").count; //drive cage 
					val drivecage2count = thisInst.selected(ProliantDriveCage).filter(y => split(y.id, "#").get(0) <= "826708-B21").count; ///universal media bay
					val nvmedrivecount = thisInst.selected(ProliantHardDrive_HP_SFF_NVME).count; //nvme drives count
					if(graphicscount > 0 and drivecage1count > 0) then (drivecage1count = 1 and drivecage2count > 0 and nvmedrivecount = 0);
				}
			}

			//AB 03-June-2020 for PERT ID: 19077 added R4B03C , R4B02C
			constraint GraphicOptions_r34 {
				message: "If R4B03C or R4B02C Graphics Option is selected with 8LFF Model X then no additional Drive Cages can be selected.";
				body: dependency (DL380Gen10 [ bFormFactor = "8LFF" ] > 0 && GraphicsPciCard [ R4B03C || R4B02C ] > 0, ProliantDriveCage = 0);
			}

			//AB 03-June-2020 for PERT ID: 19077 added R4B03C
			constraint GraphicOptions_r35 {
				message: "The R4B03C graphic option IS NOT supported on the 24SFF Model-Xs.";
				body: dependency (DL380Gen10 [ bFormFactor = "24SFF" ] > 0, GraphicsPciCard [ R4B03C ] = 0);
			}
			ifEffective HK_PERT_24870 {
				constraint GraphicOptions_r36 {
					message: "Requires selection of HPE DL380 Gen10 Pri/Sec Rsr w/o Retainer (P38515-B21) and/or HPE DL380 Gen10 Tert Riser w/o Retainer (P38517-B21). Selection is based on quantity of Graphics Option selected</br>
							 - If Qty1 of this GPU is selected then Qty 1 of HPE DL380 Gen10 Pri/Sec Rsr w/o Retainer (P38515-B21) must be selected. (If default riser is replaced then replacement riser must have x16 PCIe slot) </br>
							 - If Qty2 of this GPU is selected then any one of the below combination must be selected </br>
							    	- Qty 2 of HPE DL380 Gen10 Pri/Sec Rsr w/o Retainer (P38515-B21) must be selected if Secondary 4Port Slimline Riser (873732-B21) or 1Port Slimline Riser (867806-B21) or Tertiary riser is NOT selected. </br>
							    	- Qty 1 of HPE DL380 Gen10 Pri/Sec Rsr w/o Retainer (P38515-B21) and Qty1 of HPE DL380 Gen10 Tert Riser w/o Retainer (P38517-B21) must be selected if Secondary 4Port Slimline Riser (873732-B21) or 1Port Slimline Riser (867806-B21) or Tertiary riser is selected.";
					body:
					if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R6B53C R7G39C R7E31C R8T26C R9S37C").count = 1 then thisInst.selected(Retainercard).filter(y => split(y.id, "#").get(0) <= "P38515-B21").count = 1 else if
					thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R6B53C R7G39C R7E31C R8T26C R9S37C").count = 2 and thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <=
					"873732-B21 867806-B21 826700-B21 826702-B21 867808-B21 875780-B21 P17803-B21 P17809-B21").count = 0 then (thisInst.selected(Retainercard).filter(y => split(y.id, "#").get(0) <= "P38515-B21").count = 2 and
					thisInst.selected(Retainercard).filter(y => split(y.id, "#").get(0) <= "P38517-B21").count = 0) else if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R6B53C R7G39C R7E31C R8T26C R9S37C").count = 2 and
					thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= "873732-B21 867806-B21 826700-B21 826702-B21 867808-B21 875780-B21 P17803-B21 P17809-B21").count > 0 then (thisInst.selected(Retainercard).filter(y =>
					split(y.id, "#").get(0) <= "P38515-B21").count = 1 and thisInst.selected(Retainercard).filter(y => split(y.id, "#").get(0) <= "P38517-B21").count = 1);
				} //HK Added R8T26C for PERT 24997	
				constraint graphic_accesories_rule37 {
					message: "This option cannot be selected if more than 8NVMe Drives are selected.";
					body:
					{
					//val nvmedrivecount = thisInst.selected(ProliantHardDrive_HP_SFF_NVME).count; //nvme drives count
					//val graphicscount = thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R7E31C R7G39C").count; ///graphics
						if thisInst.selected(ProliantHardDrive_HP_SFF_NVME).count > 8 then thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R6B53C R7E31C R7G39C R8T26C R9S37C").count = 0; //HK Added R8T26C for PERT 24977 21-Feb-2022

					}//PRS Added R9S37C for PERT-25009 07-Apr-2022
				}
				constraint GraphicOptions_r38 {
					message: "This GPU and below Risers cannot be selected together</br>
							 - 867807-B21 - HPE DL38X Gen10 4-port Slim SAS Riser</br>
							 - 871673-B21 - HPE DL38X Gen10 x8/x8/x8 FIO Riser</br>
							 - 873209-B21 - HPE DL38X Gen10 x8 x16 x8 NEBS Riser</br>
							 - P01011-B21 - HPE DL380 G10 2 x16 S2-3 GPU NEBS Riser</br>
							 - 826701-B21 - HPE DL380 Gen10 x8 x16 x8 M.2 NEBS Riser</br>
							 - 826702-B21 - HPE DL380 Gen10 x16 Tertiary NEBS Riser.";
					body: dependency (ProliantPciRiser [ 867807-B21 || 871673-B21 || 873209-B21 || P01011-B21 || 826701-B21 || 826702-B21 ], GraphicsPciCard [ R6B53C || R7E31C || R7G39C || R8T26C || R9S37C ] = 0); //HK Added R8T26C for PERT 24977 21-Feb-2022	

				}//PRS Added R9S37C for PERT-25009 07-Apr-2022
			}
			ifEffective HK_PERT_24997 {
				constraint GraphicOptions_r24a {
					message: "This option cannot be selected if more than 16NVMe Drives are selected.";
					body: dependency (ProliantHardDrive_HP_SFF_NVME > 16, GraphicsPciCard [ R9H23C ] = 0);
				}
			}
			constraint GraphicOptions_r24a {
				message: "This option IS NOT supported on the 8LFF Model-Xs.";
				body: dependency (DL380Gen10 [ bFormFactor = "8LFF" ] > 0, GraphicsPciCard [ R0W29A || R0W29C ] = 0);
			}

			//PM 31-mar-21 ALM-140379
			constraint graphic_accesories_rule6 {
				message: "Selection of GPU cable/ Enablement Kit requires selection of supported Graphics Option. Refer Graphics Option rules for details.<br>
									The GPU Q0J62C/R4B03C requires Pwr Cable Kit (871828-B21) to also be selected"; //RV 12-Apr-2021 ALM.140476 Added the refrence details in message 
				body: dependency (GraphicCable [ 871828-B21 ] > 0, GraphicsPciCard [ Q0J62C || R4B03C ] > 0);
			}
			constraint graphic_accesories_rule3 {
				message: "Selection of GPU cable/ Enablement Kit requires selection of supported Graphics Option. Refer Graphics Option rules for details.<br>
									  The GPU Q0V80C/Q7G75C/Q9U36C/R4D73C/R6B53C/R9S37C requires Pwr Cable Kit (871829-B21) to also be selected"; //RV 12-Apr-2021 ALM.140476 Added the refrence details in message";
				body: dependency (GraphicCable [ 871829-B21 ] > 0, GraphicsPciCard [ Q0V80C || Q7G75C || Q9U36C || R4D73C || R6B53C || R7E31C || R7G39C || R9S37C ] > 0); //PRS Added R9S37C for PERT-25009 07-Apr-2022  //PRS Added R7E31C & R7G39C for PERT-24866 19-Jan-2022

			}
			constraint graphic_accesories_rule14 {
				message: "Selection of GPU cable/ Enablement Kit requires selection of supported Graphics Option. Refer Graphics Option rules for details.<br>
									  The GPU R0Z45C/R1F97C requires Pwr Cable Kit (871830-B21) to also be selected"; //RV 12-Apr-2021 ALM.140476 Added the refrence details in message";";
				body: dependency (GraphicCable [ 871830-B21 ] > 0, GraphicsPciCard [ R0Z45C || R1F97C ] > 0);
			}
			constraint graphic_accesories_rule25 {
				message: "Selection of GPU cable/ Enablement Kit requires selection of supported Graphics Option. Refer Graphics Option rules for details.<br>
									  The GPU R1F95C requires Pwr Cable Kit (P03849-B21-B21) to also be selected"; //RV 12-Apr-2021 ALM.140476 Added the refrence details in message";";";
				body: dependency (GraphicCable [ P03849-B21 ] > 0, GraphicsPciCard [ R1F95C ] > 0);
			}
			constraint GraphicOptions_r5 {
				message: "Intel N3000-N Ntwk Accelerator requires Pwr Cable Kit (874212-B21) to also be selected.  Note: One Pwr Cable Kit can support multiple (Max=3 Doublewide or Max=6 Singlewide) GPUs.";
				body:
				{
					val singlewide = thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R5Z85C").count;
					val graphicscbl = thisInst.selected(GraphicCable).filter(x => split(x.id, "#").get(0) >= "874212-B21").count;
					if(singlewide > 0 and singlewide <= 6) then graphicscbl = 1 else if(singlewide > 0 and singlewide > 6) then graphicscbl = 2 else true;
				}
			}
			constraint GraphicOptions_r39 {
				message: "If Qty1 of U50 (R4B02C) /V100S (R4D73C) GPU is selected - Max Qty of 16 NVMe Drives allowed for selection (All NVMe Drives selected must be below 10W).
                          If more than Qty 1 of U50 (R4B02C) /V100S (R4D73C) is selected then NVMe Drives not allowed for selection.";
				body:
				{
					val graphicscount = thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R4B02C R4D73C").count; ///graphics
					val nvmedrivecount = thisInst.selected(ProliantHardDrive_HP_SFF_NVME).filter(y => split(y.id, "#").get(0) <= "P07179-B21 P10210-B21 P10212-B21 P13668-B21 P13670-B21 P13676-B21 P13678-B21 P19809-B21 P19825-B21").count; //nvme drives count
					val nvmedriveoverallcount = thisInst.selected(ProliantHardDrive_HP_SFF_NVME).count; //nvme drives count
					if(graphicscount > 0 and graphicscount < 2) then (nvmedrivecount <= 16) else if(graphicscount > 1) then (nvmedriveoverallcount = 0);
				}
			}
			constraint GraphicOptions_r10 {
				message: "This option IS NOT supported with 166W or higher Processors.";
				body: dependency (ProliantProcessor [ iNumWattage >= 166 ], GraphicsPciCard [ M3X67A || M3X68A || Q0E21A || Q0J62A
				//MS for PPM: 17829
				|| Q0J62C || Q0V80C || Q1K38C || Q7G75C || Q9U36C || Q0V76A || Q0V80A || Q1K34A || Q1K38A || Q2N68A || Q2S42A || Q8Z50A || Q9U36A || Q0Y81A || Q7G75A || R4D73C ] = 0);
			}
			constraint graphicsRuleNo28 {
				message: "Only Supported with 2nd Generation Processors ' x2xx ' (i.e. 6244).";
				//SE - For PERT 20151  Adding R5Z85C 07_sep_2020
				body: dependency (ProliantProcessor [ sProcessorGeneration = "Second" ] <= 0, GraphicsPciCard [ R4B02C || R4B03C || R5Z85C ] = 0);
			}
		}
		subsystem CTO_Configuration_OptionsSubsystem {
			locationArray CTO_Configuration_OptionsArray {
				rows: 1;
				columns: 1;
				fillerClasses: dlTrackingSku, vSANTrackingSku, ProStackServerTracking; //CSTrackingSKU;

			}
		}
		subsystem AccessoriesSubsystem {

		/* @Author: Paola Fuentes
		 	 * @Source: ALM 108846
		  	 * @MenuSection: Managment Hardware
			 * @RuleNumber: 1
		 	 * @EffectivityID: 
		 	 * @Description: Max Qty = 1
		 	*/
			constraint managementhw_r1 {
				message: "qty = 1";
				body: restriction (ProliantManagementHardware [ 826703-B21 ] <= 1);
				restriction (ProliantManagementHardware [ 873770-B21 ] <= 1);
				restriction (ProliantManagementHardware [ P05420-B21 ] <= 1);
			}

			/* @Author: Reyna Torres
		 	 * @Source: PPM 75701
		  	 * @MenuSection: Managment Hardware
			 * @RuleNumber: 2
		 	 * @EffectivityID: 
		 	 * @Description: Max Qty = 1
		 	*/
			constraint managementhw_r2 {
				message: "For use only with 8SFF Mod-Xs and 24SFF Mod-Xs.";
				enabled: ! isBandingPage; //AB 01-Feb- 2022 For ALM ID: 144327
				body: dependency (! DL380Gen10 [ bFormFactor = "8SFF" || bFormFactor = "24SFF" ], ProliantManagementHardware [ 826703-B21 ] = 0);
			}
			constraint managementhw_r3 {
				message: "If this option is selected, a Bezel Kit must also be ordered.  The bezel is needed to secure the air filter to the chassis.";
				body: dependency (ProliantManagementHardware [ P05420-B21 ], SecurityHardware [ 867809-B21 ] = 1);
			}
			constraint managementhw_r4 {
				message: "A Max Qty=1 from the following list of options is allowed per server.  
								This means that only one item can be selected from the following list:</br>
							- 3LFF Rear SAS/SATA Kit (826685-B21)</br>
							- Rear Serial Cable Kit (873770-B21)";
				body: dependency (ProliantManagementHardware [ 873770-B21 ], ProliantDriveCage [ 826685-B21 ] = 0);
				dependency (ProliantManagementHardware [ 826685-B21 ], ProliantDriveCage [ 873770-B21 ] = 0);
			}
		}
		subsystem servicesSubsystem {

		/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Delivery Logistics Services
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: If this is a Top Config order, then AC114A must be ordered for OCS
		 	*/
/*part addDLSDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaultsFunc: "Tier1DLSDefault";
			}*/

/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Delivery Logistics Services
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: If this is a Top Config order, then AC114A must be ordered for OCS
		 	*/
			constraint Services_r11 {
				message: "P1F69A cannot be ordered with Door/Dock Service AC114A";
				body:
				if(thisInst.selected(Tier1BasicDelivery).filter(x => x.id >= "AC114A").count > 0 && thisInst.selected(Tier2ValueAddServices).filter(x => x.id >= "P1F69A").count > 0) then false;
			}
			/* @Author: Ixchel Ramirez
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Delivery Logistics Services
			 * @RuleNumber: 12
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: 
		 	*/
			constraint rule12_Tier2DLS {
				message: "Can be ordered only with Door/Dock Service AC114A.";
				body:
				if thisInst.selected(Tier2ValueAddServices).filter(x => x.id >= "P1F74A").count > 0 then thisInst.selected(Tier1BasicDelivery).filter(x => x.id >= "AC114A").count > 0;
			}
			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Delivery Logistics Services
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: If this is a Top Config order, then AC114A must be ordered for OCA.
		 	*/
/*part addDLSDefaultTrigger: ocaDefaultsTrigger {
				string[] modelDefaultsFunc: "Tier1DLSDefaultOCA";
			}*/
//			constraint Tier2Maxlimit {
			//			//message: "max is 11";
			//				message: "Max of 11 per server are allowed, however customer should not select more than one each."; //mod cernisoft ALM 106919
			//				body: restriction (Tier2ValueAddServices <= 11);
			//			}
			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Delivery Logistics Services
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: If this is a Top Config order, then AC114A must be ordered for OCA.
		 	*/
/*constraint BasicDelivery_r1{
				message: "If this is a Top Config order, then AC114A must be ordered.";
				body:
					if thisInst.selected(Tier1BasicDelivery).filter(x => x.id >= "AC114A").count > 0
					then false;
			}*/
		}
		subsystem ThreePOProductSubsystem {
			choice ThreePOProductchoice {
				optional: true;
				choiceType: multi_select;
				targetClass: ThreePOProduct;
			}
			constraint rule_1 { //Added for PERT 24671
				message: "Synamedia 2U Gen10Plus Server Pack Kit R8V97A Is supported in US only";
				body:
				if thisConfig.getProperty("country") = "US" and thisInst.selected(ThreePOProduct).filter(x => split(x.id, "#").get(0) <= "R8V97A").count > 0 then false;
			}
			constraint rule_1b { //Added for PERT 24671
				message: "Synamedia 2U Gen10Plus Server Pack Kit R8V97A Is supported in US only";
				body: dependency (! country (US), ThreePOProduct [ R8V97A ] = 0);
			}
			ifEffective HK_PERT_24870 {
				constraint ThreePO_rule1 {
					message: "This configuration contains a 3PO product that requires FE services <br>

                          The Factory Express services are required for proper integration of 3PO options. <br>
                          HA844A1 (3rd Party HW Component Installation) is required if one of the following FEs are not already included <br>
                          ZU706A  SERVER CUSTOMIZATION PACKAGE <br>
                          ZU707A  Enclosure Customization Package <br>
                          ZU708A  Rack Customization Package <br>
                          HA453A1 Customized Integration with onsite Startup (Package 3) <br>
                          HA454A1 Customized Integration with onsite Startup (Package 4) <br>
                          HA455A1 Designed Solution Integration (Package 5) <br>
                          The CID is required to be in place prior to sale. Before issuing a purchase order against this quote, please contact your HPE sales representative to engage with the appropriate Regional Factory Express team.";
					body: if thisInst.selected(ThreePOProduct).filter(y => y.id <= "R8T72A P43781-001 P43782-001-B21 P43783-001 P43784-001 P43785-001 P43786-001 P43787-001 P43788-001
				R6H41A R6Y40A R6Y39A R6W37A R6W36A R6W35A R6W34A R6W33A R6W32A R6W31A").count > 0 then false;
//SE - Added NPI SKU's for PERT 24884		04-Mar-2022

				}
			}
			otherwise {
				constraint ThreePO_rule1 {
					message: "Synamedia 2U Gen10Plus Server Pack Kit R8V97A Is supported in US only <br>
                          This configuration contains a 3PO product that requires FE services <br>

						  The Factory Express services are required for proper integration of 3PO options. <br>
						  HA844A1 (3rd Party HW Component Installation) is required if one of the following FEs are not already included <br>
						  ZU706A  SERVER CUSTOMIZATION PACKAGE <br>
						  ZU707A  Enclosure Customization Package <br>
						  ZU708A  Rack Customization Package <br>
						  HA453A1 Customized Integration with onsite Startup (Package 3) <br>
						  HA454A1 Customized Integration with onsite Startup (Package 4) <br>
						  HA455A1 Designed Solution Integration (Package 5) <br>
						  The CID is required to be in place prior to sale. Before issuing a purchase order against this quote, please contact your HPE sales representative to engage with the appropriate Regional Factory Express team.";
					body: if thisInst.selected(ThreePOProduct).filter(m => m.id >= "R8V97A").count > 0 then false;
				}
			}
		}
		
		subsystem templateSubsystem { //TemplateChoiceItem
			constraint template_commonrule {
				message: "Template only for 8SFF Model-X.";
				enabled: ! isBandingPage;
				body: dependency (! DL380Gen10 [ P19720-B21 || 868703-B21 ], TemplateChoiceItem = 0);
				      dependency (DL380Gen10 [ P19720-B21 ], TemplateChoiceItem [ dl380G10Template2 ]= 0);
				      dependency (DL380Gen10 [ 868703-B21 ], TemplateChoiceItem [ dl380G10Template1 ]= 0);
			}
		}
		
		subsystem RackingSubsystem {

		/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Rack Options
			 * @RuleNumber: 1
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: For use on LFF Model-X only
		 	*/
			part setDefaultRailKitOptionTrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "defaultRailKitOptionTrigger";
			}
			constraint RackOptions_r1 {
				message: "For use on LFF Model-X only";
				body: dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || P19720-B21 ], ProliantRackOption [ 720864-B21 || 733662-B21 ] = 0);
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Rack Options
			 * @RuleNumber: 2
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: For use on SFF Model-X only
		 	*/
			constraint RackOptions_r2 {
				message: "For use on SFF Model-X only";
				body: dependency (DL380Gen10 [ 868705-B21 || 868706-B21 || P19717-B21 || P19718-B21 ], ProliantRackOption [ 720863-B21 || 733660-B21 ] = 0);
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Rack Options
			 * @RuleNumber: 3
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: For use on SFF Model-X only
		 	*/
			constraint RackOptions_r3 {
				message: "Max Qty=1 Rail Kit per server.  Only one of the following kits can be selected from the following list:
							* LFF BB Rail Kit (720864-B21)<br />
							* LFF Easy Install Rail Kit (733662-B21)<br />
							* SFF BB Rail Kit (720863-B21)<br />
							* SFF Easy Install Rail Kit (733660-B21)";
				body: //restriction (ProliantRackOption [ 720864-B21 || 733662-B21 || 720863-B21 || 733660-B21 ] <= 1); ALM 126224 Correction for banding issue.
				if thisInst.selected(ProliantRackOption).filter(x => split(x.id, "#").get(0) <= "720864-B21 733662-B21 720863-B21 733660-B21").count > 1 then false;
			}

			/* @Author: Paola Fuentes
		 	 * @Source: PPM 71523
		  	 * @MenuSection: Rack Options
			 * @RuleNumber: 4
		 	 * @EffectivityID: PFA_DL380G10
		 	 * @Description: Max Qty=1
		 	*/
			constraint RackOptions_r4 {
				message: "Max Qty=1";
				body:
				//		restriction(ProliantRackOption[720865-B21|| 733664-B21] <= 1); 
				// SKE, Changed the Correct Parent Class for the following Products
				restriction (ManagementHardware [ 720865-B21 || 733664-B21 ] <= 1);
			}

			/* @Author: Christean Padilla
			 * @Source: PPM 74788
			 * @MenuSection: TPM Mode Setting
			 * @RuleNumber: 5
			 * @EffectivityID: 
			 * @Description: ManagementHardware only available with certain rail kits
			 */
			constraint rackOptions_r5 {
				message: "This option (720865-B21) can only be selected with one of following rail kits: <br />
							* LFF BB Rail Kit (720864-B21) <br />
							* SFF BB Rail Kit (720863-B21)";
				body: //dependency (ProliantRackOption [ ~ (720863-B21 || 720864-B21) ], ManagementHardware [ 720865-B21 ] = 0);
				if thisInst.selected(ManagementHardware).filter(x => split(x.id, "#").get(0) <= "720865-B21").count > 0 then thisInst.selected(ProliantRackOption).filter(x => split(x.id, "#").get(0) <= "720863-B21 720864-B21").count > 0;
			}

			/* @Author: Christean Padilla
			 * @Source: PPM 74788
			 * @MenuSection: TPM Mode Setting
			 * @RuleNumber: 6
			 * @EffectivityID: 
			 * @Description: ManagementHardware only available with certain rail kits
			 */
			constraint rackOptions_r6 {
				message: "This option (733664-B21) can only be selected with one of following rail kits: <br />
							* LFF Easy Install Rail Kit (733662-B21) <br />
							* SFF Easy Install Rail Kit (733660-B21)";
				body: //dependency (ProliantRackOption [ ~ (733660-B21 || 733662-B21) ], ManagementHardware [ 733664-B21 ] = 0);
				if thisInst.selected(ManagementHardware).filter(x => split(x.id, "#").get(0) <= "733664-B21").count > 0 then thisInst.selected(ProliantRackOption).filter(x => split(x.id, "#").get(0) <= "733660-B21 733662-B21").count > 0;
			}
			part setDefaultRailKitoccOptionTrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "defaultRailKitoccTrigger";
			}
			constraint RailKitMustSelectServerIntegratedWithRack {
				message: "If Server is ordered with Rack then Easy Install Rail Kit or BB Rail kit must be selected. 
						  However if server is not selected with rack then Easy Install Rail kit to be defaulted but customer has to be given option to deselect and select BB Rail kit or none.";
				body:
				if thisConfig.getInstancesOfModel("RackModel").count() > 0 and (thisInst.NEBSid != "dl380NEBS") then (thisInst.selected(ManagementHardware).filter(x => x.id <= "720865-B21 733664-B21").count > 0 or
				thisInst.selected(ProliantRackOption).count > 0) else true;
			}
		}
		subsystem supportSelectionsSubsystem {

		//		 	part addDefaultsTriggerAce: aceDefaultsTrigger{
		//				string[] modelDefaults: "HF385A1","HF385A1","HF385E","HF385E";		//NM
		// 			}
		//
		//			constraint blueNoteEduFixedDl {
		//				message: "HPE Trng Credits ProLiant/HybridIT Svc (HF385E), 2 units is recommended on the first HPE ProLiant DL360, DL380 or DL385 server on the quote. This will entitle  the customer to the 2-day  Introduction to HPE ProLiant Servers  course for one student.  If more than qty. 2 training units are needed, it may be manually adjusted via the Education Services tab.";
		//				body: if (
		//							(
		//								(count(thisConfig.getInstancesOfModel("DL380G9")) + 
		//								 count(thisConfig.getInstancesOfModel("DL360G9")) + 
		//								 count(thisConfig.getInstancesOfModel("DL360Gen10")) + 
		//								 count(thisConfig.getInstancesOfModel("DL380Gen10"))
		//								) > 0
		//							)
		//							&& ( targetEnvironment = "ezc" || targetEnvironment = "ipcs" )
		//							&& ( thisConfig.getProperty("services") = "fixedServicesType")
		//							&& ( thisConfig.getInstancesOfModel("HF385E").count > 0 )
		//						)				
		//											then false else true;
		//			}
		//			constraint blueNoteEduFlexDl {
		//				message: "HPE Trng Credits ProLiant/HybridIT Svc (HF385A1), 2 units is recommended on the first HPE ProLiant DL360, DL380 or DL385 server on the quote. This will entitle  the customer to the 2-day  Introduction to HPE ProLiant Servers  course for one student.  If more than qty. 2 training units are needed, it may be manually adjusted via the Education Services tab.";
		//				body: if (
		//							(
		//								(count(thisConfig.getInstancesOfModel("DL380G9")) + 
		//								 count(thisConfig.getInstancesOfModel("DL360G9")) + 
		//								 count(thisConfig.getInstancesOfModel("DL360Gen10")) + 
		//								 count(thisConfig.getInstancesOfModel("DL380Gen10"))
		//								) > 0
		//							)
		//							&& ( targetEnvironment = "ezc" || targetEnvironment = "ipcs" )
		//							&& ( thisConfig.getProperty("services") = "flexibleServicesType")
		//							&& ( thisConfig.getInstancesOfModel("HF385A1").count > 0 )
		//						)				
		//											then false else true;
		//			}
		//
		//			constraint blueNoteEduFlexDlWaring {
		//				message: "HPE Trng Credits ProLiant/HybridIT Svc (HF385A1), minimum of qty 2 units or more is recommended for the first ProLiant DL360, DL380, DL385 server.";
		//				body: if (
		//							(
		//								(count(thisConfig.getInstancesOfModel("DL380G9")) + 
		//								 count(thisConfig.getInstancesOfModel("DL360G9")) + 
		//								 count(thisConfig.getInstancesOfModel("DL360Gen10")) + 
		//								 count(thisConfig.getInstancesOfModel("DL380Gen10"))
		//								) > 0
		//							)
		//							&& ( targetEnvironment = "ezc" || targetEnvironment = "ipcs" )
		//							&& ( thisConfig.getProperty("services") = "flexibleServicesType")
		//							&& ( thisConfig.getInstancesOfModel("HF385A1").count < 2 )
		//						)
		//											then false else true;
		//			}
		//
		//			constraint blueNoteEduFixedDlWarning {
		//				message: "HPE Trng Credits ProLiant/HybridIT Svc (HF385E), minimum of qty 2 units or more is recommended for the first ProLiant DL360, DL380, DL385 server";
		//				body: if (
		//							(
		//								(count(thisConfig.getInstancesOfModel("DL380G9")) + 
		//								 count(thisConfig.getInstancesOfModel("DL360G9")) + 
		//								 count(thisConfig.getInstancesOfModel("DL360Gen10")) + 
		//								 count(thisConfig.getInstancesOfModel("DL380Gen10"))
		//								) > 0
		//							)
		//							&& ( targetEnvironment = "ezc" || targetEnvironment = "ipcs" )
		//							&& ( thisConfig.getProperty("services") = "fixedServicesType")
		//							&& ( thisConfig.getInstancesOfModel("HF385E").count < 2 )
		//						)				
		//											then false else true;
		//			}

		//LAW NOTE - This is an example where enabled is a bad idea.  In this case the enabled check will impact the Max 1 per Item effect on the UI
		//			constraint limitRedHatEnterpriseLinux {
		//				message: "Quantity limited to 1."; //"Quantity limited to 30.";ANV
		//				enabled:
		//					thisInst.selected(RedHatEnterpriseServer).count > 0;
		//				body: restriction (RedHatEnterpriseServer [ P9T85AAE || Q0D18A || Q0D18AAE || Q0D19A || Q0D19AAE || Q0D20A || Q0D20AAE || Q0D21A || Q0D21AAE || Q0D22A || Q0D22AAE || Q0D23A //|| Q0D23AAE
		//				|| Q0D24A || Q0D24AAE || Q0D25A || Q0D25AAE || Q0D26A || Q0D26AAE || Q0D27A || Q0D27AAE || Q0D28A || Q0D28AAE || Q0D29A || Q0D29AAE || Q0D30A || Q0D30AAE || Q0D95A || Q0D95AAE || Q1X74AAE ] <= 1);
		//			}
			constraint limitRedHatEnterpriseLinux {
				message: "Quantity limited to 1."; //"Quantity limited to 30.";ANV
				body: restriction (RedHatEnterpriseServer [ P9T85AAE || Q0D18A || Q0D18AAE || Q0D19A || Q0D19AAE || Q0D20A || Q0D20AAE || Q0D21A || Q0D21AAE || Q0D22A || Q0D22AAE || Q0D23A //|| Q0D23AAE
				|| Q0D24A || Q0D24AAE || Q0D25A || Q0D25AAE || Q0D26A || Q0D26AAE || Q0D27A || Q0D27AAE || Q0D28A || Q0D28AAE || Q0D29A || Q0D29AAE || Q0D30A || Q0D30AAE || Q0D95A || Q0D95AAE || Q1X74AAE ] <= 1);
			}
		}
		subsystem manufacturingServicesSubsystem {
			constraint ManufacturingServices_Bluenote {
				message: "None of the -409 SKUs should be nested to the CTO Model X server, if the CTO Model X server is nested to the HPE DL 1U-2U Server Bulk Package (468640-B21).";
				body:
				if thisInst.selected(PowerCordsRemoval).filter(x => split(x.id, "#").get(0) >= "469774-409").count > 0 then false;
			}
			constraint OverpackcapacitiesChanged {
				message: "Max 1";
				body: restriction (OverpackKit [ P47280-B21 ] <= 1);
				restriction (OverpackKit [ P42952-B21 ] <= 1);
			}
		}
		subsystem SecurityComplianceSWSectionSubsystem {

		//PRS Added bluenote for ALM-139490 04-Feb-2021
			constraint trustedsupply_bluenote {
				message: "If this HPE Trusted Supply Chain FIO option is selected, one instance of the following E-LTU software option is required per order (not per server):</br> 
					      R6X85AAE - HPE Trusted Supply Chain E-LTU</br>
						  NOTE: OCA to automatically bring in one instance of this E-LTU software SKU per order.";
				body: if thisInst.selected(TrustedSupplyChain).filter(x => split(x.id, "#").get(0) >= "P36394-B21").count > 0 then false;
			}

			//			constraint noBTOInCTO{
			//				message: "BTO products are not allowed in CTO Base Model.";
			//				body: dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || 868706-B21 || 868705-B21 
			//				//MS for PPM: 77026
			//				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21				
			//				], RedHatEnterpriseServer = 0);
			//			}
			//Tab OneView Management Software
			constraint RackedSGIOneViewManagementSoftwareHide {
				message: "Table One View Management Software";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], OneViewManagementSoftware = 0);
			}

			//Tab ServiceGuard
			constraint RackedSGIServiceGuardHide {
				message: "Table ServiceGuard";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], HACClusterSw [ BB086AA || BB094AA || BB094AC || BB094ACE || BB095AA || BB095AC || BB095ACE || BB096AC || BB097AA || BB097AC || BB097ACE || BB098AC || BB099AC || BB100AC ||
				BB100ACE ] = 0);
			}
			//Tab Insight CMU
			constraint RackedSGIInsightCMUHide {
				message: "Table Insight CMU";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], HPCMUSoftware = 0);
			}
			//Tab iLO Advanced
			constraint RackedSGIiLOAdvancedHide {
				message: "Table iLOAdvanced";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], IntegratedLightsOut [ 512485-B21 || 512486-B21 || 512487-B21 || BD505A || BD506A || BD507A || E6U59ABE || E6U64ABE || G6F49A ] = 0);
			}
			//Tab iLO Scale Out
			constraint RackedSGIiLOScaleOutHide {
				message: "Table iLOScaleOut";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], IntegratedLightsOut [ BD776A || BD776AAE || BD777A || BD778A || BD778AAE || BD779A ] = 0);
			}
			//Tab Storage Security Software
			constraint RackedSGIStorageSecuritySoftwareHide {
				message: "Table Storage Security Software";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], SecureEncryption [ Q2F26AAE ] = 0);
			}
			//Tab Storage Sofware
			constraint RackedSGIStorageSoftwareHide {
				message: "Table Storage Software";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], SmartArrayAdvancePack [ D7S26A || D7S27A || D7S27AAE ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], ProliantSoftware [ N3R43A ] = 0);
			}
			//Tab iLO Advance Security
			constraint RackedSGIILOAdvanceSecurityHide {
				message: "Table Advance Security";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], IntegratedLightsOut [ subCategory = "iLOAdvSec" ] = 0);
			}

			//Tab Management Hardware
			constraint RackedSGIManagementHardwareHide {
				message: "Table Management Hardware";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], iLOManagementHardware [ Q7Y55A ] = 0);
			}

			//Tab Clustered Extents File
			constraint RackedSGIClusteredExtentsHide {
				message: "Table Clustered Extents";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ Q2V59AAE || Q2V60AAE ] = 0);
			}

			//Tab Extents File System
			constraint RackedSGIExtentsFileSystemHide {
				message: "Table Extents File System";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ subCategory = "XFSXVM" ] = 0);
			}
			//PS_ALM_121304  && //NL modified for Pert 14484 , 21-Dec-2018
			constraint visibilyforSoftwares {
				message:
				"This SKU is allowed within the HPE SGI 8600 Service Nodes DL360Gen10 (867958-B21, 867959-B21, 867960-B21) and DL380Gen10 (868703-B21, 868704-B21, 868705-B21, 868706-B21) when following Factory Configuration Setting SKU is selected";
				body: dependency (SGINodeConfiguration = 0, HPESGIManagementSuite [ Q2A41A || Q2A36A || Q2A47A ] = 0 and HPCCentOS [ Q2A06A || Q2A75A ] = 0 and PartnerSoftwareOperatingSystem8pks [ Q9V61A ] = 0 and HPCRHEL [ Q6J43A || Q6J44A ] = 0 and
				HPCSLES [ Q6J45A || Q6J46A ] = 0 and RedHatEnterpriseServer [ R1Z69A ] = 0); //PRS removed MPI SKUs as per BU confirmation for ALM: 132931 17-Oct-2019   and HPCSGI [ Q8K21A || Q2A48A || Q5U69A ] = 0

			}
			//	ifEffective GKK_PPM_75786{
			//RV 12-Dec-2018 PERT 14484 added Q2N79A and Q2N80A
			//			ifEffective RV_14484_SMR {
			constraint clusteredExtentsSupportSGI {
				message: "This SKU is allowed within the HPE SGI 8600 Service Nodes DL380Gen10 (868703-B21, 868704-B21, 868705-B21, 868706-B21) when following Factory Configuration Setting SKU is selected";
				body: dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N78A || Q2N76A || Q2N77A || Q2N82A || Q2N79A || Q2N80A) ] = 1, RedHatEnterpriseServer [ Q2V53AAE ||
				Q2V54AAE || Q2V55AAE || Q2V56AAE || Q2V57AAE || Q2V58AAE || R1Z69A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N79A || Q2N80A
				|| R2G03A || R2G04A || R2G05A || R2G06A || R2G07A || R2G08A || R2G09A || R2G10A || R2G11A || R2G12A || R2G13A || R2G14A || R2G15A || R2G16A || R2G17A || R2G18A || R2G19A || R2G20A || R2G21A || R2G22A) ] = 1, ProliantSoftwareMediaKits
				[ Q5T84A || Q5T85A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N79A || Q2N80A
				|| R2G03A || R2G04A || R2G05A || R2G06A || R2G07A || R2G08A || R2G09A || R2G10A || R2G11A || R2G12A || R2G13A || R2G14A || R2G15A || R2G16A || R2G17A || R2G18A || R2G19A || R2G20A || R2G21A || R2G22A) ] = 1, RedHatLinuxAddOns [ G3J34A
				|| G3J35A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N79A || Q2N80A
				|| R2G03A || R2G04A || R2G05A || R2G06A || R2G07A || R2G08A || R2G09A || R2G10A || R2G11A || R2G12A || R2G13A || R2G14A || R2G15A || R2G16A || R2G17A || R2G18A || R2G19A || R2G20A || R2G21A || R2G22A) ] = 1,
				NovellSUSELinuxEnterpriseServer [ M6K34A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N78A || Q2N76A
				|| Q2N77A || Q2N82A || Q2N79A || Q2N80A || R2G03A || R2G04A || R2G05A || R2G06A || R2G07A || R2G08A || R2G09A || R2G10A || R2G11A || R2G12A || R2G13A || R2G14A || R2G15A || R2G16A || R2G17A || R2G18A || R2G19A || R2G20A || R2G21A ||
				R2G22A) ] = 1, RedHatEnterpriseServer [ G3J22A || G3J23A || G3J24A || G3J25A || G3J26A || G3J27A || G3J28A || G3J29A || G3J30A || G3J31A || G3J32A || G3J33A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N78A || Q2N76A
				|| Q2N77A || Q2N82A || R2G03A || R2G04A || R2G05A || R2G06A || R2G07A || R2G08A || R2G09A || R2G10A || R2G11A || R2G12A || R2G13A || R2G14A || R2G15A || R2G16A || R2G17A || R2G18A || R2G19A || R2G20A || R2G21A || R2G22A) ] = 1,
				NovellSUSELinuxEnterpriseServer [ M6K28A || M6K29A || N7F54A || N7F55A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N78A || Q2N76A
				|| Q2N77A || Q2N82A || R2G03A || R2G04A || R2G05A || R2G06A || R2G07A || R2G08A || R2G09A || R2G10A || R2G11A || R2G12A || R2G13A || R2G14A || R2G15A || R2G16A || R2G17A || R2G18A || R2G19A || R2G20A || R2G21A || R2G22A) ] = 1,
				VMWareCoreEditions [ Q5T74A || Q5T75A || Q5T76A || Q5T78A || Q5T80A || Q5T83A || Q5T88A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N79A || Q2N80A
				|| R2G03A || R2G04A || R2G05A || R2G06A || R2G07A || R2G08A || R2G09A || R2G10A || R2G11A || R2G12A || R2G13A || R2G14A || R2G15A || R2G16A || R2G17A || R2G18A || R2G19A || R2G20A || R2G21A || R2G22A) ] = 1, RedHatEnterpriseServer [
				Q0D25A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q2N81A || Q2N78A || Q2N76A || Q2N77A) ] = 1, NovellSUSELinuxEnterpriseServer [ M6K35A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q2N78A) ] = 1, PartnerSoftwareOperatingSystem8pks [ Q1B82A || Q1B83A || Q1B84A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N81A || Q2N76A || Q2N77A) ] = 1, PartnerSoftwareOperatingSystem8pks [ Q1B85A || Q1B86A || Q1B87A ] = 0);
				//					dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N81A || Q2N78A || Q2N76A || Q2N77A) ] = 1, PartnerSoftwareOperatingSystem8pks [ Q5T86A || Q5T87A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N78A || Q2N76A || Q2N77A || Q2N82A || Q2N79A || Q2N80A) ] = 1, HPESGIManagementSuite [ Q2A36A || Q2A41A ||
				Q2A47A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ ~ (Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N78A || Q2N76A
				|| Q2N77A || Q2N82A || Q2N79A || Q2N80A || R2G03A || R2G04A || R2G05A || R2G06A || R2G07A || R2G08A || R2G09A || R2G10A || R2G11A || R2G12A || R2G13A || R2G14A || R2G15A || R2G16A || R2G17A || R2G18A || R2G19A || R2G20A || R2G21A ||
				R2G22A) ] = 1, HPCIntelPS = 0 and HPCIntelVTune = 0 and HPCRHEL [ Q6J44A ] = 0 and HPCSGI [ Q2A48A || Q5U69A || Q8K21A ] = 0 and HPCHPEBCM [ Q5U90A || Q5U92A || Q5U93A || Q5U94A || Q5U95A || Q5U96A ] = 0 and HPCAltairPBSPro [ Q2A45A
				|| Q2A46A ] = 0 and HPCCentOS [ Q2A75A ] = 0 and HPCSLES [ Q6J46A ] = 0);
			}
			constraint ThirdStageForSGISoftware {
				message: "The selected Software is not supported for the model";
				body: dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N78A || Q2N76A || Q2N79A || Q2N77A || Q2N80A || Q2N82A ], HPCHPEBCM [ Q9B96A || Q9B97A ] = 0);
				dependency (DL380Gen10 [ 868704-B21 || 868705-B21 || 868706-B21 ] and SGINodeConfiguration [ Q2N81A ], HPCHPEBCM [ Q9B96A || Q9B97A ] = 0);
				// DAS PERT 15644
				dependency (DL380Gen10 [ 868703-B21 || R1R46A
				//MS for PPM: 77026
				|| 875782-B21 ] and SGINodeConfiguration [ Q2N81A ], HPCHPEBCM [ Q9B96A || Q9B97A ] = 0 and PartnerSoftwareOperatingSystem8pks [ Q1B82A || Q1B83A || Q1B84A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q1W16A ], HPCHPEBCM [ Q9B96A || Q9B97A ] = 0 and PartnerSoftwareOperatingSystem8pks [ Q1B82A || Q1B83A || Q1B84A || Q1B85A || Q1B86A || Q1B87A ] = 0
				and NovellSUSELinuxEnterpriseServer [ M6K35A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N73A || Q2N74A ], HPESGIManagementSuite [ Q2A36A || Q2A41A || Q2A47A ] = 0 and RedHatEnterpriseServer [ Q2V41AAE || Q2V42AAE || Q2V43AAE || Q2V44AAE
				|| Q2V45AAE || Q2V46AAE || Q2V47AAE || Q2V48AAE || Q2V49AAE || Q2V50AAE || Q2V51AAE || Q2V52AAE || Q2V53AAE || Q2V54AAE || Q2V55AAE || Q2V56AAE || Q2V57AAE || Q2V58AAE || Q0D25A || G3J22A || G3J23A || G3J24A || G3J25A || G3J26A ||
				G3J27A || G3J28A || G3J29A || G3J30A || G3J31A || G3J32A || G3J33A ] = 0 and RedHatLinuxAddOns [ G3J34A || G3J35A || Q2V49AAE ] = 0 and HPCCentOS [ Q2A75A ] = 0 and HPCRHEL [ Q6J44A ] = 0 and HPCSLES [ Q6J46A ] = 0 and
				NovellSUSELinuxEnterpriseServer [ M6K34A || M6K28A || M6K29A || N7F54A || N7F55A || M6K35A ] = 0 and VMWareCoreEditions [ Q5T74A || Q5T75A || Q5T76A || Q5T78A || Q5T80A || Q5T83A || Q5T88A ] = 0 and HPCHPEBCM [ Q5U90A || Q5U92A ||
				Q5U93A || Q5U94A || Q5U95A || Q5U96A || Q9B96A || Q9B97A ] = 0 and HPCIntelPS [ Q1Z45A || Q1Z46A || Q1Z47A || Q1Z48A || Q1Z49A || Q1Z50A || Q1Z51A || Q1Z52A || Q1Z53A || Q1Z54A || Q2A49A || Q2A50A || Q2A51A || Q2A52A || Q2A54A ||
				Q2A55A || Q2A56A || Q2A57A || Q2A58A || Q2A59A || Q2A59A || Q2A81A || Q2A82A || Q2A83A || Q2A85A || Q2A86A || Q2A87A || Q2A88A || Q2A89A || Q2A90A || Q2A91A || Q2A92A || Q2A93A || Q2A94A || Q2A95A || Q2A96A || Q2A97A || Q2A98A ||
				Q2A99A || Q2B00A || Q5U97A || Q5U98A || Q5U99A || Q5V00A || Q5V01A || Q5V02A || Q5V03A || Q5V04A || Q5V05A || Q5V06A || Q5V07A || Q5V08A || Q5V09A || Q5V10A || Q5V11A || Q5V12A || Q5V13A || Q5V14A || Q5V15A || Q5V16A || Q5V17A ||
				Q5V18A || Q5V19A || Q5V20A || Q5V21A || Q5V22A || Q5V23A || Q5V24A || Q5V25A || Q5V26A || Q5V27A || Q5V28A || Q5V29A || Q5V30A || Q5V31A || Q5V32A || Q5V33A || Q5V34A || Q5V35A || Q5V36A || Q5V37A || Q5V38A || Q5V39A ] = 0 and
				HPCIntelVTune [ Q5V40A || Q5V41A || Q5V42A || Q5V43A || Q5V44A || Q5V45A || Q5V46A || Q5V47A || Q5V48A || Q5V49A || Q5V50A || Q5V51A || Q5V52A ] = 0 and ProliantSoftwareMediaKits [ Q5T84A || Q5T85A ] = 0 and HPCAltairPBSPro [ Q2A45A
				|| Q2A46A ] = 0 and HPCSGI [ Q2A48A || Q5U69A || Q8K21A ] = 0 and PartnerSoftwareOperatingSystem8pks [ Q1B82A || Q1B83A || Q1B84A || Q1B85A || Q1B86A || Q1B87A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N82A || Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N80A || Q2N79A || Q2N77A || Q2N76A || Q2N78A ], PartnerSoftwareOperatingSystem8pks [ //Q9S73AAE || Q9S74AAE || Q9S75AAE || Q9S76AAE || Q9S77AAE || Q9S78AAE || 
				Q9S79AAE || Q9S80AAE || Q9S81AAE || Q9S82AAE || Q9S83AAE || Q9S84AAE //|| Q9V60AAE 
				] = 0 and NovellSUSELinuxEnterpriseServer [ N7F54AAE || N7F55AAE || P9P41AAE || P9P42AAE || P9P43AAE || P9P44AAE || P9P45AAE || P9P46AAE || P9P47AAE || P9P48AAE || P9P49AAE || P9P50AAE || P9P54AAE || P9P55AAE || P9P92AAE || P9P93AAE ||
				P9P94AAE || P9P95AAE ] = 0 and OEMSoftwareNFV [ Q9W11A || Q9W11A || Q9W11A || Q9W12A || Q9W13A || Q9W14A || Q9W15A || Q9W16A || Q9W17A || Q9W18A || Q9W19A || Q9W20A || Q9W21A || Q9W22A || Q9W23A || Q9W24A || Q9W25A || Q9W26A ] = 0 and
				HPCHPEBCM [ Q9B96A || Q9B97A ] = 0 and HPHelionOpenStack [ R0H12AAE || R0H12AAE || R0H13AAE || R0H14AAE || R0H15AAE || R0H16AAE || R0H17AAE || R0H18AAE || R0H19AAE || R0H20AAE || R0H21AAE || R0H22AAE || R0H23AAE || R0H24AAE ||
				R0H25AAE ] = 0 and ProliantSoftwareMediaKits [ Q9W01A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q1V16A || Q1V15A || Q2D35A ], HPCAllineaForge [ Q1Z87A || Q1Z97A || Q5U71A || Q5U73A || Q5U75A || Q5U77A || Q5U79A || Q5U81A ] = 0 and HPCTotalView [
				Q5V68A || Q5V69A || Q5V70A || Q5V71A || Q5V72A || Q5V73A || Q5V74A || Q5V75A || Q5V76A || Q5V77A || Q5V78A || Q5V79A || Q5V83A ] = 0 and PartnerSoftwareOperatingSystem8pks [ BC351A || BC352A || BD566A || BD565A || BD568A || BD567A ||
				Q5T86A || Q5T87A ] = 0 and HPCHPEBCM [ Q9B96A || Q9B97A ] = 0 and HPCMUSoftware [ QL803B || BD476A || BD477A ] = 0 and MediaOnlyKits [ J1U56A ] = 0 and MediaOnlyKits [ Q5W19AAE ] = 0 and HPCHPEBCM [ M6K35A || M6K36A ] = 0 and
				PartnerSWIM [ TD378A || TD377A || BD571A || BD572A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N77A ], HPCIntelVTune [ Q5V18A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N79A || Q2N80A ], VMWareCoreEditions [ Q5T89A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N73A || Q2N74A ], IssSoftware = 0 and Software = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N82A || Q1W16A || Q1W15A || Q2N80A || Q2N79A ], PartnerSoftwareOperatingSystem8pks [ Q9S73AAE || Q9S74AAE || Q9S75AAE || Q9S76AAE || Q9S77AAE ||
				Q9S78AAE ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration, IntelProClass [ P9L65AAE || P9L67AAE || P9L68AAE || P9L69AAE
				|| P9L70AAE ] = 0 and NovellSUSELinuxEnterpriseServer [ Q1X74AAE || Q1X75AAE ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration, WorkloadAwareSecurity [ Q8K91AAE || Q8K92AAE || Q8K91A ||
				Q8K92A || Q8K93A || Q8K94A ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N78A ], ProliantSoftwareMediaKits [ Q9W01A ] = 0 and NovellSUSELinuxEnterpriseServer [ N7F54AAE || N7F55AAE || P9P41AAE || P9P42AAE || P9P43AAE ||
				P9P44AAE || P9P45AAE || P9P46AAE || P9P47AAE || P9P48AAE || P9P49AAE || P9P50AAE || P9P54AAE || P9P55AAE || P9P92AAE || P9P93AAE || P9P94AAE || P9P95AAE ] = 0 and HPHelionOpenStack [ R0H12AAE || R0H12AAE || R0H13AAE || R0H14AAE ||
				R0H15AAE || R0H16AAE || R0H17AAE || R0H18AAE || R0H19AAE || R0H20AAE || R0H21AAE || R0H22AAE || R0H23AAE || R0H24AAE || R0H25AAE ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q1W15A || Q1W16A || Q2N76A || Q2N77A || Q2N79A || Q2N80A ||
				Q2N81A || Q2N82A ], PartnerSoftwareOperatingSystem8pks [ R1P40A || R1P40AAE || R1P41A || R1P41AAE || R1P42A || R1P42AAE ] = 0);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N79A || Q2N80A || Q2N82A ],
				PartnerSoftwareOperatingSystem8pks [ R1P34A || R1P34AAE || R1P35A || R1P35AAE || R1P36A || R1P36AAE || R1P37A || R1P37AAE || R1P38A || R1P38AAE || R1P39A || R1P39AAE ] = 0);
				dependency (DL380Gen10 [ R1R46A || 868703-B21 || 868704-B21 || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration, HACClusterSGLtu [ R1T30AAE || R1T31AAE || R1T32AAE || R1T33AAE
				|| R1T34AAE || R1T35AAE || R1T36AAE || R1T37AAE ] = 0); //SE - For PERT 15655				25-Apr-2019			

			}
			constraint SoftwaremaxRule1 {
				message: "HPE SGI 8600 Solution limit the quantity selection of the selected SKU as follows for each blade and service node. </br>
								Qty 1 per HPE SGI 8600 Service Node DL380Gen10[ 868703-B21 || 868704-B21 || 868705-B21 || 868706-B21 ] ";
				body: dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N75A || Q2N78A ] = 1, PartnerSoftwareOperatingSystem8pks [ Q1B82A || Q1B83A || Q1B84A ] <= 1);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N81A || Q2N76A || Q2N77A ] = 1, PartnerSoftwareOperatingSystem8pks [ Q1B85A || Q1B86A || Q1B87A ] <= 1);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N81A || Q1W15A ] = 1, ProliantSoftwareMediaKits [ Q5T84A || Q5T85A ] <= 1);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N81A || Q1W15A ] = 1, RedHatLinuxAddOns [ G3J34A || G3J35A ] <= 1);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N81A || Q1W15A ] = 1, NovellSUSELinuxEnterpriseServer [ M6K34A ] <= 1);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N78A || Q2N76A || Q2N77A || Q2N82A ] = 1, VMWareCoreEditions [ Q5T74A || Q5T75A || Q5T76A || Q5T78A || Q5T80A
				|| Q5T83A || Q5T88A || Q5T89A ] <= 1);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N81A || Q1W15A ] = 1, RedHatEnterpriseServer [ Q0D25A ] <= 1);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N78A || Q2N76A || Q2N77A || Q2N82A ] = 1, NovellSUSELinuxEnterpriseServer [ M6K28A || M6K29A || N7F54A ||
				N7F55A ] <= 1);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N81A || Q1W15A || Q2N78A || Q2N76A || Q2N77A || Q2N82A || Q2N79A || Q2N80A ] = 1, RedHatEnterpriseServer [ G3J22A || G3J23A ||
				G3J24A || G3J26A || G3J27A || G3J28A || G3J29A || G3J30A || G3J31A || G3J32A || G3J33A ] <= 1);
				dependency (DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ] and SGINodeConfiguration = 1, PartnerSoftwareOperatingSystem8pks [ R1P34A || R1P34AAE ||
				R1P35A || R1P35AAE || R1P36A || R1P36AAE || R1P37A || R1P37AAE || R1P38A || R1P38AAE || R1P39A || R1P39AAE || R1P40A || R1P40AAE || R1P41A || R1P41AAE || R1P42A || R1P42AAE || R1P40A || R1P40AAE || R1P41A || R1P41AAE || R1P42A ||
				R1P42AAE ] <= 1);
			}
			constraint SGISoftwareRule36_error {
				message: "All HPE SGI 8600 Blades and Service Nodes require adequate Operating System coverage. Select Operating System SKU to meet this requirement in (either SUSE, RHEL, or CentOS 7).</br>
                               DL380Gen10 Service Node (868703-B21, 868704-B21, 868705-B21, 868706-B21)";
				body:
				if thisConfig.getProperty("targetEnvironment") = "oca" and thisInst.selected(SGINodeConfiguration).filter(x => x.id <= "Q2N75A Q1W16A Q2N81A Q1W15A Q2N78A Q2N76A Q2N77A Q2N82A Q2N79A Q2N80A").count > 0 and
				thisConfig.getInstancesOfModel("868703-B21").count() + thisConfig.getInstancesOfModel("868704-B21").count() + thisConfig.getInstancesOfModel("R1R46A").count() + thisConfig.getInstancesOfModel("868705-B21").count() +
				thisConfig.getInstancesOfModel("868706-B21").count()
				//MS for PPM: 77026				
				+ thisConfig.getInstancesOfModel("875782-B21").count() + thisConfig.getInstancesOfModel("875783-B21").count() + thisConfig.getInstancesOfModel("875785-B21").count() + thisConfig.getInstancesOfModel("875784-B21").count() > 0 then
				thisInst.selected(HPCCentOS).filter(y => y.id >= "Q2A75A").count + thisInst.selected(PartnerSoftwareOperatingSystem8pks).filter(x => x.id <= "Q1B82A Q1B83A Q1B84A Q1B85A Q1B86A Q1B87A
																											R1P34A R1P34AAE R1P35A R1P35AAE R1P36A R1P36AAE R1P37A
																											R1P37AAE R1P38A R1P38AAE R1P39A R1P39AAE R1P40A R1P40AAE R1P41A R1P41AAE R1P42A R1P42AAE
				").count + thisInst.selected(VMWareCoreEditions).filter(x => x.id <= "Q5T74A Q5T75A Q5T76A Q5T78A Q5T80A  Q5T83A Q5T88A Q5T89A").count + thisInst.selected(NovellSUSELinuxEnterpriseServer).filter(x => x.id <=
				"M6K28A M6K29A N7F54A N7F55A").count + thisInst.selected(RedHatEnterpriseServer).filter(x => x.id <= "G3J33A G3J32A G3J31A G3J30A G3J29A G3J28A G3J27A G3J26A G3J24A G3J23A G3J22A").count > 0;
			}
			constraint HidingSGIUnSupportSKu {
				message: "SKU's not support for SGI";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], NCSLicense = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MediaOnlyKits = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], IssSolutionsSoftware = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], PartnerSWIM = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareClientVirtualizationProducts = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], HPCCentOS [ Q2A06A ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], PartnerSoftwareOperatingSystem8pks [ Q5U09A || Q8T79AAE || Q8T80AAE ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], HPCRHEL [ Q6J43A ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], NovellSUSELinuxEnterpriseServer [ M6K29AAE || M6K30A ||
				M6K30AAE || M6K31A || M6K31AAE || M6K32A || M6K32AAE || M6K33A || M6K33AAE || M6K35AAE || M6K36A || M6K36AAE ] = 0);
				dependency (SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N73A || Q2N81A || Q1W15A || Q2N74A || Q2N78A || Q2N76A || Q2N77A || Q2N82A || Q2N79A || Q2N80A ] = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 ||
				868706-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], NovellSUSELinuxEnterpriseServer [ M6K34AAE || M6K28AAE ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868705-B21 || 868706-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], HPCSLES [ Q6J45A ] = 0);
			}
			constraint trusted_sup_r5 {
				message: "If this HPE Trusted Supply Chain FIO option is selected, one instance of the following E-LTU software option is required per order (not per server):</br> 
					R6X85AAE - HPE Trusted Supply Chain E-LTU</br>
					
					NOTE: OCA to automatically bring in one instance of this E-LTU software SKU per order.";
				body:
				if thisInst.selected(TrustedSupplyChain).filter(x => split(x.id, "#").get(0) >= "P36394-B21").count > 0 then thisConfig.getInstancesOfModel("R6X85AAE").count = 1;
				//then thisInst.getSoftwareRedError()= 1 else true;

			}
			constraint ELTU_availability {
				message: "The TSC Software SKU is applicable only when TSC FIO option is selected";
				body: dependency (TrustedSupplyChain [ P36394-B21 ] = 0, HPESCSW [ R6X85AAE ] = 0);
			}
			constraint tsc_rul6 {
				message: "HPE Trusted Supply Chain FIO Config option cannot be selected with TAA Model-X's.";
				body: dependency (DL380Gen10 [ 875782-B21 || 875783-B21 || 875784-B21 || 875785-B21 ], TrustedSupplyChain [ P36394-B21 ] = 0);
			}
		}
		subsystem CloudSoftwareandServicesSubsystem {
			constraint RackedSGICloudSoftwareAndServices {
				message: "Table Cloud Software and Services";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ P9T85AAE ] = 0);
			}
			constraint RackedSGIHelionCloudSystem {
				message: "Table Helion CloudSystem";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], CloudSystemEnterprise [ D4T96DAE || F9D69DAE || F9D70DAE || M6Q22DAE || M6Q24DAE || D4T93D || D4T98D || F9D67D || M6Q21DAE ] = 0);
			}
		}
		subsystem OperatingSystemsSubsystem {
		//Table MS Windows Server ROK
			constraint RackedSGIMSWindowsServerROKHide {
				message: "Table MS Windows Server ROK Hide / SGI 8600";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindowsServer2012ROK [ subCategory = "MSWSRok" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindowsServer2008ROK [ subCategory = "MSWSRok" ] = 0);
			}
			// Tables MS Windows Server RDS CALs and MS Windows Server CALs
			constraint RackedSGIMSWindowsServerRDSCALs {
				message: "Table MS Windows Server RDS CALs / SGI 8600</br>
						  Table MS Windows Server CALs / SGI 8600";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindowsServer2012License [ subCategory = "RDSCals" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindowsServer2012License [ subCategory = "MSWSCals" ] = 0);
			}
			constraint RackedSGIMSWindowsServerNotPreinstalled {
				message: "Table MS Windows Server Not Preinstalled";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindows2012R2Server [ subCategory = "MSWSNotPre" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindows2012Essentials [ subCategory = "MSWSNotPre" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindows2012Server [ subCategory = "MSWSNotPre" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindows2012Foundation [ subCategory = "MSWSNotPre" ] = 0);
			}
			constraint RackedSGIMSWindowsServerAdditionalLicense {
				message: "Table MS Windows Server Additional Lincese";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindows2012Server [ subCategory = "MSWSAddL" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindows2012Essentials [ subCategory = "MSWSAddL" ] = 0);
			}
			constraint RackedSGIMSWindowsServerPreinstalled {
				message: "Table MS Windows Server Preinstalled";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindows2012Server [ subCategory = "MSWSPre" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], MSWindows2012Essentials [ subCategory = "MSWSPre" ] = 0);
			}
			constraint RackedMSWindowsServerDowngrade {
				message: "MS Windows Server Downgrade";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], DowngradedMedia [ subCategory = "MSWSDown" ] = 0);
			}
			constraint RackedRedHatHPCOperatingSystems {
				message: "Red Hat HPC Operating Systems";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], PartnerSoftwareOperatingSystem8pks [ Q1B82AAE || Q1B83AAE || Q1B84AAE || Q1B85AAE || Q1B86AAE || Q1B87AAE ] = 0);
			}
			constraint RackedSGISUSEAddonsHide {
				message: "SUSE Addons";
				body: dependency (SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N73A || Q2N81A || Q1W15A || Q2N74A || Q2N78A || Q2N76A || Q2N77A || Q2N82A || Q2N79A || Q2N80A ] = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 ||
				868705-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ M6K34AAE ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ Q1X74AAE || Q1X75AAE ] = 0);
			}
			constraint RackedSGISUSEHPCOpeSystemHide {
				message: "SUSE HPC Operating System";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ M6K35AAE || M6K36AAE || M6K35A ||
				M6K36A ] = 0);
				//LAW - Need to show this (mapped by  Software lookup) - dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || 868706-B21 || 868705-B21 ], PartnerSoftwareOperatingSystem8pks [ Q5T86A || Q5T87A ] = 0);

			}
			constraint RackedSGISUSESAPOpeSystemHide {
				message: "SUSE SAP Operating System";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ subCategory = "SUSESAPOP" ] = 0);
			}
			constraint RackedSGIREDHatAddOnsHide {
				message: "Red Hat Add Ons";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatLinuxAddOns [ A1L29AAE || A1L30AAE || G3J36AAE
				|| G3J37AAE || G3J38AAE || G3J39AAE || G3J40AAE || G3J41AAE || G3J42AAE || G3J43AAE || G5J66AAE || G5J67AAE || G5J68AAE || G5J69AAE || A1L29A || A1L30A || G3J36A || G3J37A || G3J38A || G3J39A || G3J40A || G3J41A || G3J42A || G3J43A ||
				G5J66A || G5J67A || G5J68A || G5J69A ] = 0);
				dependency (SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N73A || Q2N81A || Q1W15A || Q2N74A || Q2N78A || Q2N76A || Q2N77A || Q2N82A || Q2N79A || Q2N80A ] = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 ||
				868705-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatLinuxAddOns [ G3J34AAE || G3J35AAE ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ Q0D22AAE || Q0D23AAE || Q0D24AAE
				|| Q0D26AAE || Q0D27AAE || Q0D28AAE || Q0D29AAE || Q0D30AAE || Q0D22A || Q0D23A || Q0D24A || Q0D26A || Q0D27A || Q0D28A || Q0D29A || Q0D30A ] = 0);
				dependency (SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N73A || Q2N81A || Q1W15A || Q2N74A || Q2N78A || Q2N76A || Q2N77A || Q2N82A || Q2N79A || Q2N80A ] = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 ||
				868705-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ Q0D25AAE ] = 0);
			}
			constraint RackedSGIREDHatOperatingSystemsHide {
				message: "Red Hat Operating Systems";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ G3J22AAE || G3J23AAE ||
				G3J24AAE || G3J25AAE || G3J26AAE || G3J27AAE || G5J62AAE || G5J63AAE || G5J64AAE || G5J65AAE || J8J35AAE || J8J36AAE || G5J62A || G5J63A || G5J64A || G5J65A || J8J35A || J8J36A ] = 0);
				dependency (SGINodeConfiguration [ Q2N75A || Q1W16A || Q2N73A || Q2N81A || Q1W15A || Q2N74A || Q2N78A || Q2N76A || Q2N77A || Q2N82A || Q2N79A || Q2N80A ] = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 ||
				868705-B21 || 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ G3J28AAE || G3J29AAE || G3J30AAE || G3J31AAE || G3J32AAE || G3J33AAE ] = 0);
			}
			constraint RackedSGIRedHatSAPOperatingSystemHide {
				message: "Red Hat SAP Operating System";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ subCategory = "RHSapOpeSys" ] = 0);
			}
		}
		subsystem PartnerSoftwareSubsystem {
		//Table Container And Container Management
			constraint RackedSGIContainerAndContainerManagementHide {
				message: "Table Container And Container Management / SGI 8600";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], DockerServerBundleSoftware = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], DockerCSEngineSoftware = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], DropboxSoftware = 0);
			}
			constraint RackedSGIHadoopHortonsworks {
				message: "Table Hadoop-Hortonsworks";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], IssSolutionsSoftware [ F5Z52A || F5Z52AAE || JP408A || JP408AAE || P9J18AAE || P9P33AAE || P9P34AAE || P9P37AAE || P9P38AAE ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ P9J18AAE ] = 0);
			}
			constraint RackedSGIHadoopCloudera {
				message: "Table Hadoop-Cloudera";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], IssSolutionsSoftware [ G7M27A || G7M27AAE || G7M28A || G7M28AAE || G7M29A || G7M29AAE || G7M30A || G7M30AAE || G7M31AAE || P9A41AAE || P9A42AAE || P9A43AAE || P9A44AAE ||
				P9A45AAE || P9V12AAE || P9V13AAE || P9V14AAE || P9V15AAE || P9V16AAE || P9V17AAE || P9V18AAE || P9V19AAE || P9V20AAE ] = 0);
			}
			constraint RackedSGIObjectStorageScality {
				message: "Table Object Storage-Scality";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], IssSolutionsSoftware [ P8Y89AAE || P8Y90AAE || P8Y91AAE || P8Y92AAE || P8Y93AAE || P8Y94AAE || P8Y95AAE || P8Y96AAE || P8Y97AAE || P8Y98AAE || P8Y99AAE || P8Z00AAE || P8Z01AAE
				|| Q1C84AAE || Q1C85AAE || Q1C86AAE || Q1C87AAE || Q1C88AAE || Q1C89AAE ] = 0);
			}
			constraint RackedSGIDeveloperTools {
				message: "Table Developer Tools Hide";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875965-B21 || 875966-B21 || 875967-B21 ], HPCAllineaForge [ //Q1Z87A 
				Q1Z88A || Q1Z89A || Q1Z90A || Q1Z92A || Q1Z93A || Q1Z94A //|| Q1Z97A 
				|| Q1Z98A || Q1Z99A || Q2A00A || Q2A61A //|| Q5U71A 
				|| Q5U72A //|| Q5U73A 
				|| Q5U74A //|| Q5U75A 
				|| Q5U76A
				//|| Q5U77A 
				|| Q5U78A
				//|| Q5U79A 
				|| Q5U80A //|| Q5U81A 
				|| Q5U82A || Q5U83A || Q5U84A || Q5U85A || Q5U86A || Q5U87A || Q5U88A ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875965-B21 || 875966-B21 || 875967-B21 ], HPCTotalView [ Q5V53A || Q5V54A || Q5V55A || Q5V56A || Q5V57A || Q5V58A || Q5V59A || Q5V60A || Q5V61A || Q5V62A || Q5V63A || Q5V64A || Q5V65A || Q5V66A || Q5V67A //|| Q5V68A || Q5V69A || Q5V70A || Q5V71A || Q5V72A || Q5V73A || Q5V74A || Q5V75A || Q5V76A || Q5V77A || Q5V78A || Q5V79A || Q5V80A 
				|| Q5V82A //|| Q5V83A 
				] = 0);
			}
			constraint RackedSGIWorkloadScheduler {
				message: "Table Workload Scheduler";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], HPCAltairPBSPro [ Q2A44A ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], PartnerSWJM [ TC221A ] = 0);
			}
		}
		subsystem VirtualizationSubsystem {
			constraint RedHatVirtualizationHide {
				message: "Table Red Hat-Virtualization";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseVirtualization [ subCategory = "RedHatVir" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RedHatEnterpriseServer [ subCategory = "RedHatVir" ] = 0);
			}
			constraint RemoteGraphicsSoftwareHide {
				message: "Table Remote Graphics Software";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], RGSeditions [ subCategory = "RGS" ] = 0);
			}
			constraint VMwareExplorerHide {
				message: "Table VMware Explorer";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareBundles [ subCategory = "VMExplorer" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ subCategory = "VMExplorer" ] = 0);
			}
			constraint VMwareHorizonHide {
				message: "Table VMware Horizon";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareClientVirtualizationProducts [ subCategory = "Horizon" ] = 0);
			}
			constraint VMwareNSXHide {
				message: "Table  VMware NSX";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ subCategory = "NSX" ] = 0);
			}
			constraint VMwareSRMHide {
				message: "Table  VMware SRM";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVCenterSrmProducts [ subCategory = "SRM" ] = 0);
			}
			constraint VMwarevCenterHide {
				message: "Table  VMware vCenter";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ subCategory = "VMwareVCenter" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVCenterProducts [ subCategory = "VMwareVCenter" ] = 0);
			}
			constraint VMwarevCloudSuiteHide {
				message: "Table  VMware vCloud Suite";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVCloudProducts [ subCategory = "vCloudSuite" ] = 0);
			}
			constraint VMwarevRealizeHide {
				message: "Table  VMware vRealize";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVCenterProducts [ subCategory = "vRealize" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareClientVirtualizationProducts [ subCategory = "vRealize" ] = 0);
			}
			constraint VMwareVSANHide {
				message: "Table  VMware VSAN";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ subCategory = "VSAN" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVSphereEditions [ subCategory = "VSAN" ] = 0);
			}
			constraint VMwarevSOMHide {
				message: "Table  VMware vSOM";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ subCategory = "VMwareVSOM" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVSphereEditions [ subCategory = "VMwareVSOM" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVSphereKits [ subCategory = "VMwareVSOM" ] = 0);
			}
			constraint VMwarevSphereHide {
				message: "Table  VMware vSphere";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMwareVSAN [ subCategory = "VMwareVS" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVSphereEditions [ subCategory = "VMwareVS" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVSphereKits [ subCategory = "VMwareVS" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareBundles [ subCategory = "VMwareVS" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareClientVirtualizationProducts [ subCategory = "VMwareVS" ] = 0);
				dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], VMWareVCloudProducts [ subCategory = "VMwareVS" ] = 0);
			}
		}
		subsystem HPCSoftwareSubsystem {
			constraint HPCSoftwareStackHide {
				message: "Table HPC Software Stack";
				body: dependency (SGINodeConfiguration = 1 and DL380Gen10 [ 868703-B21 || 868704-B21 || R1R46A || 868706-B21 || 868705-B21
				//MS for PPM: 77026
				|| 875782-B21 || 875783-B21 || 875785-B21 || 875784-B21 ], HPCSoftwareProducts [ subCategory = "HPCSoftStack" ] = 0);
			}
		}
		subsystem OperatingSystemSubsystem {
			constraint noFioOsOnBto {
				message: "Model 1 servers may not have a preinstalled OS.";
				body: true;
			}
			constraint noFioOsOnBtoforDowngrade {
				message: "Model 1 servers may not have a support for MS Windows Server Downgrade.";
				body: restriction (! ProliantServers [ BTO ] || ! (OperatingSystem [ tQuoteType >= "FIO" and subCategory >= "MSWSDown" ]));
			}
			constraint noFioOsOnBtoforNotPreinstalled {
				message: "Model 1 servers may not have a support for MS Windows Server Not Preinstalled section.";
				body: restriction (! ProliantServers [ BTO ] || ! (OperatingSystem [ tQuoteType >= "FIO" and subCategory >= "MSWSNotPre" ]));
			}
			constraint noFioOsOnBtoforPreinstalled {
				message: "Model 1 servers may not have a support for MS Windows Server Preinstalled section.";
				body: restriction (! ProliantServers [ BTO ] || ! OperatingSystem [ tQuoteType >= "FIO" and subCategory >= "MSWSPre" ]);
			}
		}
		subsystem HPCSoftwareSystemSubsystem {
			constraint SGISoftwareRule4_Info {
				message: "";
				body: true;
			}
			constraint SGISoftwareRule5_Info {
				message: "";
				body: true;
			}
		}
		subsystem InsightSoftwareSubsystem {
			choice IntegratedLightsOutChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: NulifyChoiceObject;
			}
		}
		productCategories: DL380Gen10, DL380Gen10Ace;
		def nGPUDoublewide (): int = {
			val graphicCards = "Q0E21A Q0J62A Q0J62C Q0V76A Q0V80A Q0V80C Q2N68A Q2S42A R4B03C"; //AB 07-May-2020 for ALM ID: 135997
			val cGraphicCards = thisInst.selected(GraphicsPciCard).filter(a => split(a.id, "#").get(0) <= graphicCards).count;
			val nGpu = if cGraphicCards = 1 and thisInst.selected(ProliantPciRiser).count = 0 then 1 else 0;
			nGpu;
		}
		def DefaultM2 (): string[] = {
			if thisConfig.getProperty("targetEnvironment") = "oca" and (thisConfig.getInstancesOfModel("876402-B21").count > 0) then expanderString ("815100-B21", 24);
		}
		def DefaultM1 (): string[] = {
			if thisConfig.getProperty("targetEnvironment") = "oca" and (thisConfig.getInstancesOfModel("876401-B21").count > 0) then expanderString ("815100-B21", 12);
		}

		//RS PERT 19058 03Apr2020 Updated String
		boolean eligibleForBTOCheckRecommendation: true;
		string[] matchingBTOBaseModels: "826564-291", "826564-B21", "826565-291", "826565-AA1", "826565-B21", "826566-291", "826566-AA1", "826566-B21", "826567-291", "826567-B21", "868709-291", "868709-AA1", "868709-B21", "879938-291",
		"879938-B21", "P02462-291", "P02462-B21", "P02463-291", "P02463-B21", "P02464-291", "P02464-B21", "P02465-291", "P02465-B21", "P02466-291", "P02466-B21", "P02467-291", "P02467-B21", "P02468-291", "P02468-B21", "P06420-291",
		"P06420-B21", "P06421-291", "P06421-B21", "P20172-291", "P20172-B21", "P20174-291", "P20174-B21", "P20182-291", "P20182-B21", "P20245-291", "P20245-B21", "P20248-291", "P20248-B21", "P20249-291", "P20249-B21", "P23465-291",
		"P23465-B21", "P23476-AA1", "P23477-AA1", "P23478-AA1", "P23479-AA1", "P23480-AA1", "P24840-291", "P24840-B21", "P24841-291", "P24841-B21", "P24842-291", "P24842-B21", "P24844-291", "P24844-B21", "P24845-291", "P24845-B21",
		"P24846-291", "P24846-B21", "P24847-291", "P24847-B21", "P24848-291", "P24848-B21", "P24849-291", "P24849-B21", "P24850-291", "P24850-B21", "P36135-B21", "P36135-291", "P39380-291", "P39380-B21", "P40422-291", "P40422-B21",
		"P40423-291", "P40423-B21", "P40424-291", "P40424-B21", "P40425-291", "P40425-B21", "P40426-291", "P40426-B21", "P40427-291", "P40427-B21", "P40428-291", "P40428-B21"; //SE - For PERT 20151   14-Sep-2020		//SE - For PERT 20287		02-Nov-2020

		//RS "P02462-291", "P02462-B21", "P02463-291", "P02463-B21", "P02464-291", "P02464-B21", "P02465-291", 
		//RS "P02465-B21", "P02466-291", "P02466-B21", "P02467-291", "P02467-B21", "P02468-291", "P02468-B21",
		//		                                "P06419-B21", "868709-B21", "826564-B21", "P20182-B21", "P06420-B21", "868710-B21", "P05524-B21", 
		//										"875760-S01", "875759-S01", "826565-B21", "P06421-B21", "875766-S01", "P02463-B21", "P02462-B21", 
		//										"P02467-B21", "P20172-B21", "P23465-B21", "P02464-B21", "P20174-B21", "P24841-B21", "P24840-B21", 
		//										"P02468-B21", "P24842-B21", "P24848-B21", "875761-S01", "P06422-B21", "826566-B21", "875762-S01", 
		//										"P19195-B21", "P20249-B21", "P02465-B21", "P24844-B21", "P19194-B21", "P20248-B21", "P19193-B21", 
		//										"P24845-B21", "875763-S01", "P06423-B21", "879938-B21", "826567-B21", "875765-S01", "875764-S01", 
		//										"P19196-B21", "P24846-B21", "P02466-B21", "P19192-B21", "P24847-B21", "P20245-B21", "P24849-B21", 
		//										"P24850-B21";
		// shd 4/6/20 Updated based on excel from Caleb.
		//		ifEffective AB_PERT_24630
		//		{
		//		def defCTOModel_r2 (): string[] = {
		//			if thisConfig.getProperty("targetEnvironment") = "oca" and (thisInst.id = "868706-B21" || thisInst.id = "868703-B21" || thisInst.id = "R1R46A" || thisInst.id = "875784-B21" || thisInst.id = "875782-B21" || thisInst.id = "P19720-B21" ||
		//			thisInst.id = "P19717-B21") and thisInst.selected(SAP420iControllerCacheUpgrade).isEmpty then expanderString ("804331-B21", 1) + expanderString ("P02377-B21", 1);
		//			}	
		//			
		//		def defCTOModelOCC_r2 (): string[] = {
		//			if(thisConfig.getProperty("targetEnvironment") = "ezc" or thisConfig.getProperty("targetEnvironment") = "ipcs") and (thisConfig.getInstancesOfModel("DL380Gen10").filter(y => split(y.id, "#").get(0) >= "868706-B21" || split(y.id,
		//			"#").get(0) >= "868703-B21" || split(y.id, "#").get(0) >= "R1R46A" || split(y.id, "#").get(0) >= "875784-B21" || split(y.id, "#").get(0) >= "875782-B21" || split(y.id, "#").get(0) >= "P19720-B21" || split(y.id, "#").get(0) >=
		//			"P19717-B21").count > 0) then expanderString ("804331-B21#0D1", 1);
		//
		//		}
		//		def defCTOModel_r3 (): string[] = {
		//			if(isOCA or isOCS) and (thisInst.id = "868704-B21" || thisInst.id = "875783-B21" || thisInst.id = "P19719-B21") and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) >= "870658-B21").count = 0 then
		//			expanderString ("804331-B21", 1) + expanderString ("870549-B21", 1) + expanderString ("P02377-B21", 1) else if((thisConfig.getProperty("country") != "JP" or thisConfig.getProperty("country") != "CN") and (isEZC or isIPCS) and
		//			(thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) >= "868704-B21" || split(x.id, "#").get(0) >= "875783-B21" || split(x.id, "#").get(0) >= "P19719-B21").count > 0) and
		//			(thisInst.selected(ProliantStorageContSASSA).filter(x => x.id <= "870658-B21#0D1").count = 0)) then expanderString ("804331-B21#0D1", 1) + expanderString ("870549-B21#0D1", 1);	
		//			}					
		//		}
		//		otherwise{
		def defCTOModel_r2 (): string[] = {
			if thisConfig.getProperty("targetEnvironment") = "oca" and (thisInst.id = "868706-B21" || thisInst.id = "868703-B21" || thisInst.id = "R1R46A" || thisInst.id = "875784-B21" || thisInst.id = "875782-B21" || thisInst.id = "P19720-B21" ||
			thisInst.id = "P19717-B21") and thisInst.selected(SAP420iControllerCacheUpgrade).isEmpty then expanderString ("804331-B21", 1) + expanderString ("P01366-B21", 1);

			//else if(thisConfig.getProperty("targetEnvironment") = "ezc" or thisConfig.getProperty("targetEnvironment") = "ipcs") and (thisConfig.getInstancesOfModel("DL380Gen10").filter(y => split(y.id, "#").get(0) >= "868706-B21" || split(y.id, "#").get(0) >= "868703-B21" || split(y.id, "#").get(0) >= "R1R46A" || split(y.id, "#").get(0) >= "875784-B21" ||
			//split(y.id, "#").get(0) >= "875782-B21" || split(y.id, "#").get(0) >= "P19720-B21" || split(y.id, "#").get(0) >= "P19717-B21").count > 0) then expanderString ("804331-B21#0D1", 1); // NL modified for PERT 15777, 19-July-2019	

		}
		//}
		def defCTOModelOCC_r2 (): string[] = {
			if(thisConfig.getProperty("targetEnvironment") = "ezc" or thisConfig.getProperty("targetEnvironment") = "ipcs") and (thisConfig.getInstancesOfModel("DL380Gen10").filter(y => split(y.id, "#").get(0) >= "868706-B21" || split(y.id,
			"#").get(0) >= "868703-B21" || split(y.id, "#").get(0) >= "R1R46A" || split(y.id, "#").get(0) >= "875784-B21" || split(y.id, "#").get(0) >= "875782-B21" || split(y.id, "#").get(0) >= "P19720-B21" || split(y.id, "#").get(0) >=
			"P19717-B21").count > 0) and thisInst.selected(TemplateChoiceItem).count = 0 then expanderString ("804331-B21#0D1", 1); // NL modified for PERT 15777, 19-July-2019

		}
		def defCTOModel_r3 (): string[] = {
			if(isOCA or isOCS) and (thisInst.id = "868704-B21" || thisInst.id = "875783-B21" || thisInst.id = "P19719-B21") and thisInst.selected(ProliantStorageContSASSA).filter(x => split(x.id, "#").get(0) >= "870658-B21").count = 0 then
			expanderString ("804331-B21", 1) + expanderString ("870549-B21", 1) else if((thisConfig.getProperty("country") != "JP" or thisConfig.getProperty("country") != "CN") and (isEZC or isIPCS) and
			(thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) >= "868704-B21" || split(x.id, "#").get(0) >= "875783-B21" || split(x.id, "#").get(0) >= "P19719-B21").count > 0) and
			(thisInst.selected(ProliantStorageContSASSA).filter(x => x.id <= "870658-B21#0D1").count = 0)) then expanderString ("804331-B21#0D1", 1) + expanderString ("870549-B21#0D1", 1); // NL modified for PERT 15777, 19-July-2019	

		}
		//}
		def nSFFHardDrives (): int = {
			val nDCage1 = if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count > 0 then 2 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count else 0;
			val nDCage2 = if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count > 0 then 2 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count else 0;
			val nDCage3 = if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826690-B21").count > 0 then 8 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826690-B21").count else 0;
			val nDCage4 = if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826691-B21").count > 0 then 8 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826691-B21").count else 0;
			val nDCage5 = if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "867805-B21").count > 0 then 2 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "867805-B21").count else 0;
			val NVMEDCage = if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826689-B21").count > 0 then 8 * thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826689-B21").count else 0;
			val RemovalDC = thisInst.selected(RemovalReplacement).filter(x => split(x.id, "#").get(0) <= "873763-B21").count;
			val total = nDCage1 + nDCage2 + nDCage3 + nDCage4 + nDCage5;
			val frontcages = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826689-B21 826690-B21 826691-B21 826708-B21").count;
			val total8sff = if(frontcages > 2 or RemovalDC > 0) then total else total + 8; //HK for ALM 144588	  Removal drive cage included -  01-Mar-2022
			val total24sff = total + 24;
			//ALM 124882
			//			if ((isEZC or isIPCS) and thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868703-B21 875782-B21 826564-B21 826565-B21 826567-B21").count > 0) then total8sff 
			//			else if ((isEZC or isIPCS) and thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868704-B21 875783-B21 875766-S01").count > 0) then total24sff 
			//			else if ((isOCA or isOCS) and thisInst.id="868703-B21" or thisInst.id="875782-B21" or thisInst.id="826564-B21" or thisInst.id="826565-B21" or thisInst.id="826567-B21") then total8sff
			//			else if ((isOCA or isOCS) and thisInst.id="868704-B21" or thisInst.id="875783-B21" or thisInst.id="875766-S01") then total24sff else total;
			//			if thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868703-B21 R1R46A 875782-B21 826564-B21 826565-B21 826567-B21 P19720-B21").count > 0 then total8sff else if
			//			thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868704-B21 875783-B21 875766-S01 P19719-B21").count > 0 then total24sff else total;

			//SE - For ALM 137045    converting the server check from thisConfig.getInstancesOfModel to thisInst.id >=  04-Aug-2020
			if(thisInst.id >= "826564-291" or thisInst.id >= "826564-B21" or thisInst.id >= "826565-291" or thisInst.id >= "826565-AA1" or thisInst.id >= "826565-B21" or thisInst.id >= "826566-291" or thisInst.id >= "826566-AA1" or thisInst.id >=
			"826566-B21" or thisInst.id >= "826567-291" or thisInst.id >= "826567-B21" or thisInst.id >= "868709-AA1" or thisInst.id >= "879938-291" or thisInst.id >= "879938-B21" or thisInst.id >= "P06420-291" or thisInst.id >= "P06420-B21" or
			thisInst.id >= "P06421-291" or thisInst.id >= "P06421-B21" or thisInst.id >= "P20174-291" or thisInst.id >= "P20174-B21" or thisInst.id >= "P20245-291" or thisInst.id >= "P20245-B21" or thisInst.id >= "P20248-291" or thisInst.id >=
			"P20248-B21" or thisInst.id >= "P20249-291" or thisInst.id >= "P20249-B21" or thisInst.id >= "P23465-291" or thisInst.id >= "P23465-B21" or thisInst.id >= "P24841-291" or thisInst.id >= "P24841-B21" or thisInst.id >= "P24842-291" or
			thisInst.id >= "P24842-B21" or thisInst.id >= "P24844-291" or thisInst.id >= "P24844-B21" or thisInst.id >= "P24845-291" or thisInst.id >= "P24845-B21" or thisInst.id >= "P24846-291" or thisInst.id >= "P24846-B21" or thisInst.id >=
			"P24847-291" or thisInst.id >= "P24847-B21" or thisInst.id >= "P24848-291" or thisInst.id >= "P24848-B21" or thisInst.id >= "P24849-291" or thisInst.id >= "P24849-B21" or thisInst.id >= "P24850-291" or thisInst.id >= "P24850-B21" or
			thisInst.id >= "868703-B21" or thisInst.id >= "875782-B21" or thisInst.id >= "P19720-B21" or thisInst.id >= "P36135-B21" or thisInst.id >= "P36135-291" or thisInst.id >= "P39380-291" or thisInst.id >= "P39380-B21" or thisInst.id >=
			"P40422-291" or thisInst.id >= "P40422-B21" or thisInst.id >= "P40423-291" or thisInst.id >= "P40423-B21" or thisInst.id >= "P40424-291" or thisInst.id >= "P40424-B21" or thisInst.id >= "P40425-291" or thisInst.id >= "P40425-B21" or
			thisInst.id >= "P40426-291" or thisInst.id >= "P40426-B21" or thisInst.id >= "P40427-291" or thisInst.id >= "P40427-B21" or thisInst.id >= "P40428-291" or thisInst.id >= "P40428-B21" or thisInst.id >= "R1R46A" or thisInst.id >= "R1R46B") //SE - For PERT 20151   14-Sep-2020	//SE - For PERT 20287  02-Nov-2020
			then total8sff else if(thisInst.id >= "868704-B21" or thisInst.id >= "875783-B21" or thisInst.id >= "P19719-B21" or thisInst.id >= "P24840-291" or thisInst.id >= "P24840-B21") then total24sff else total;

			//			if thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868703-B21 875782-B21").count > 0 then total8sff else if thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <=
			//			"868704-B21 875783-B21").count > 0 then total24sff else total;

		}
		def portsPerDriveCage (): int = {
			val stndDC8SFF =
			if((((isEZC or isIPCS) and (thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868703-B21 R1R46A 875782-B21 P19720-B21").count > 0)) or (thisInst.id = "868703-B21" || thisInst.id = "R1R46A" ||
			thisInst.id = "875782-B21" || thisInst.id = "P19720-B21")) and (thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826689-B21 826690-B21 826691-B21 826708-B21").count < 3)) then 2 else 0; //when one of these dc are equal to 3 the 8sff bays of model are removed and replaced by the dcs.
			val stndDC24SFF =
			if(((isEZC or isIPCS) and (thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868704-B21 875783-B21 P19719-B21").count > 0)) or (thisInst.id = "868704-B21" || thisInst.id = "875783-B21" || thisInst.id
			= "P19719-B21")) then 6 else 0;
			val stndDC8LFF =
			if(((isEZC or isIPCS) and (thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868706-B21 875784-B21 P19717-B21").count > 0)) or (thisInst.id = "868706-B21" || thisInst.id = "875784-B21" || thisInst.id
			= "P19717-B21")) then 2 else 0;
			val stndDC12LFF =
			if(((isEZC or isIPCS) and (thisConfig.getInstancesOfModel("DL380Gen10").filter(x => split(x.id, "#").get(0) <= "868705-B21 875785-B21 P19718-B21").count > 0)) or (thisInst.id = "868705-B21" || thisInst.id = "875785-B21" || thisInst.id
			= "P19718-B21")) then 3 else 0;
			val dc3LFF = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826685-B21").count;
			val dc4LFF = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826686-B21").count;
			val dc2SFF = if thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826687-B21").count > 0 && thisInst.selected(NVMEnablement).filter(x => split(x.id, "#").get(0) <= "878189-B21").count = 0 then 1 else 0;
			val dc2SFFRK = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826688-B21").count;
			val dc8SFFHDB = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826690-B21").count * 2;
			val dc8SFFBKP = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "826691-B21").count * 2;
			val dc2LFF1U = thisInst.selected(ProliantDriveCage).filter(x => split(x.id, "#").get(0) <= "867805-B21").count;
			val total = stndDC8SFF + stndDC24SFF + stndDC8LFF + stndDC12LFF + dc3LFF + dc4LFF + dc2SFF + dc2SFFRK + dc8SFFHDB + dc8SFFBKP + dc2LFF1U;
			total;
		}
		def jumperCordsCount (): int = {
		/*SE - For ALM 139636 	thisInst.selected(ProliantPowerCord).filter(x => split(x.id, "#").get(0) >= "J6X03A").count +*/ thisInst.selected(ProliantPowerCord).filter(x => split(x.id, "#").get(0) >= "J6X00A").count;
		}
		def defaultRailKitoccTrigger (): string[] = {
			if(thisConfig.getProperty("targetEnvironment") = "ezc") and (thisInst.id = "868703-B21" || thisInst.id = "868704-B21" || thisInst.id = "875782-B21" || thisInst.id = "875783-B21" || thisInst.id = "P19720-B21" || thisInst.id =
			"P19719-B21") then expanderString ("733660-B21#0D1", 1) else if(thisConfig.getProperty("targetEnvironment") = "ezc") and (thisInst.id = "868705-B21" || thisInst.id = "868706-B21" || thisInst.id = "875784-B21" || thisInst.id =
			"875785-B21" || thisInst.id = "P19717-B21" || thisInst.id = "P19718-B21") then expanderString ("733662-B21#0D1", 1);
		}
	}
	
	//PRS Added Templates for PERT-25029 25-Mar-2022
	product dl380G10Template1 TemplateChoiceItem {
		string[] productIds: "P02519-L21", "P02519-B21", "P00930-B21:10", "665240-B21", "865434-B21:2", "Q0H80A:2", "BD505A", "733660-B21";
		string[] productsToRemove: "804331-B21", "P01366-B21", "ProliantProcessor", "ProliantMemoryArray", "ProliantPowerOption", "ProliantRackOption", "SAP420iControllerCacheUpgrade", "ProliantStorageContSASSA";
		string[] productIdsOcc: "P02519-L21", "P02519-B21#0D1", "P00930-B21#0D1:10", "665240-B21#0D1", "865434-B21#0D1:2", "Q0H80A#B01:2", "BD505A#0D1", "733660-B21#0D1";
		string[] productsToRemoveOcc: "804331-B21#0D1", "P01366-B21#0D1", "ProliantProcessor", "ProliantMemoryArray", "ProliantPowerOption", "ProliantRackOption", "SAP420iControllerCacheUpgrade", "ProliantStorageContSASSA";
		string choiceSort: "a";
	}
	product dl380G10Template2 TemplateChoiceItem {
		string[] productIds: "P02518-L21", "P02518-B21", "P00922-B21:8", "865434-B21:2", "Q0H80A:2", "BD505A", "P8B31A", "733660-B21";
		string[] productsToRemove: "804331-B21", "P01366-B21", "ProliantProcessor", "ProliantMemoryArray", "ProliantPowerOption", "ProliantRackOption", "SAP420iControllerCacheUpgrade", "ProliantStorageContSASSA";
		string[] productIdsOcc: "P02518-L21", "P02518-B21#0D1", "P00922-B21#0D1:8", "865434-B21#0D1:2", "Q0H80A#B01:2", "BD505A#0D1", "P8B31A", "733660-B21#0D1";
		string[] productsToRemoveOcc: "804331-B21#0D1", "P01366-B21#0D1", "ProliantProcessor", "ProliantMemoryArray", "ProliantPowerOption", "ProliantRackOption", "SAP420iControllerCacheUpgrade", "ProliantStorageContSASSA";
		string choiceSort: "b";
	}
	
	
	product standardDL380G10Riser StandardProliantPciRiser { //to be default
		boolean isProductClass: false;
		subsystem riserKitSubsystem {
		//			constraint risercards_r7{
		//				message: "standardDL380G10Riser: The top x8 PCIe slot is not available as the Doublewide GPU occupies this space, accommodate the card in the right PCIe slot.";
		//				body: 
		//					{
		//						val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//						if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(0).contents.filter(x => x.id <= doubleWideCards).count > 0 then pciSlots.row(1).filler.isNull;
		//					}
		//			}
		//			ifEffective JQD_PERT_13447 {
			locationArray pciSlots {
				rows: 3;
				rowsConsumed: tWidth;
				columns: 1;
				fillerClasses: PciCard;

				//RS ALM 135948 -- updated the slotting for standard riser 21July2020
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x8flfhSlot);
					range (2, 2, pciE3p0x16flfhSlot);
					range (3, 3, pciE3p0x8flfhSlot);
				}
			}
			//			}
			//			otherwise {
			//				locationArray pciSlots {
			//					rows: 3;
			//					columns: 1;
			//					fillerClasses: PciCard;
			//					layout {
			//						indexing: ltr.ttb;
			//						range (1, 1, pciE3p0x16flfhSlot);
			//						range (2, 3, pciE3p0x8flfhSlot);
			//					}
			//				}
			//			}

		}
	}
	product 826694-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
		//			constraint risercards_r8{
		//				message: "Riser 826694-B21: PCIe slot 2 of x16 is not available as the Doublewide GPU occupies this space, accommodate the card in the right PCIe slot.";
		//				body: {
		//						val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//						if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(0).contents.filter(x => x.id <= doubleWideCards).count > 0 then pciSlots.row(1).filler.isNull;}
		//			}
		//			constraint riserCards_r8_1{
		//				message: "Riser 826694-B21: A Max Qty=1 Doublewide GPU per riser.";
		//				body:{ val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//					if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(0).contents.filter(x => x.id <= doubleWideCards).count > 0 && pciSlots.row(1).contents.filter(x => x.id <= doubleWideCards).count > 0 then false;
		//				}
		//			}
			locationArray pciSlots {
				rows: 2;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x16flfhSlot);
					range (2, 2, pciE3p0x16flfhSlot);
				}
			}
		}
	}
	product 826700-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 1;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x16flfhSlot);
				}
			}
		}
	}
	product 826701-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
		//			constraint risercards_r7{
		//				message: "Riser 826701-B21: The top x8 PCIe slot is not available as the Doublewide GPU occupies this space, accommodate the card in the right PCIe slot.";
		//				body: 
		//					{
		//						val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//						if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(1).contents.filter(x => x.id <= doubleWideCards).count > 0 then pciSlots.row(0).filler.isNull;
		//					}
		//			}
			ifEffective JQD_PERT_13447 {
				locationArray pciSlots {
					rows: 3;
					rowsConsumed: tWidth;
					columns: 1;
					fillerClasses: PciCard;
					layout {
						indexing: ltr.ttb;
						range (1, 1, pciE3p0x8flfhSlot);
						range (2, 2, pciE3p0x16flfhSlot);
						range (3, 3, pciE3p0x8flfhSlot);
					}
				}
			}
			otherwise {
				locationArray pciSlots {
					rows: 3;
					columns: 1;
					fillerClasses: PciCard;
					layout {
						indexing: ltr.ttb;
						range (1, 1, pciE3p0x8flfhSlot);
						range (2, 2, pciE3p0x16flfhSlot);
						range (3, 3, pciE3p0x8flfhSlot);
					}
				}
			}
		}
	}
	product 826702-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 1;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x16flfhSlot);
				}
			}
		}
	}
	product 826704-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
		//			constraint riserCards_r9{
		//				message: "Riser 826704-B21: A Max Qty=1 Doublewide GPU per riser.";
		//				body:{ val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//					if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(0).contents.filter(x => x.id <= doubleWideCards).count > 0 && pciSlots.row(1).contents.filter(x => x.id <= doubleWideCards).count > 0 then false;
		//				}
		//			}
			locationArray pciSlots {
				rows: 2;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x16flfhSlot);
					range (2, 2, pciE3p0x16flfhSlot);
				}
			}
		}
	}
	product 867806-B21 ProliantPciRiser {
		int iNumSlimelinePorts: 1;
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 3;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x8flfhSlot);
					range (2, 2, pciE3p0x8flfhSlot);
					range (3, 3, pciE3p0x8flfhSlot);
					//range (4, 4, pciXSlot); //NVMe Slimelime port

				}
			}
		}
	}
	product 867807-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 0;
				columns: 0;
				fillerClasses: PciCard;
				//				layout {
				//					indexing: ltr.ttb;
				//					range (1, 1, pciXSlot); //NVMe Slimelime port
				//					range (2, 2, pciXSlot); //NVMe Slimelime port
				//					range (3, 3, pciXSlot); //NVMe Slimelime port
				//					range (4, 4, pciXSlot); //NVMe Slimelime port
				//
				//				}

			}
		}
	}
	product 867808-B21 ProliantPciRiser {
		int iNumSlimelinePorts: 2;
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 0;
				columns: 0;
				fillerClasses: PciCard;
				//				layout {
				//					indexing: ltr.ttb;
				//					range (1, 1, pciXSlot); //NVMe Slimelime port
				//					range (2, 2, pciXSlot); //NVMe Slimelime port
				//
				//				}

			}
		}
	}
	product 870548-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
		//			constraint risercards_r7{
		//				message: "Riser 870548-B21: The top x8 PCIe slot is not available as the Doublewide GPU occupies this space, accommodate the card in the right PCIe slot.";
		//				body: 
		//					{
		//						val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//						if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(1).contents.filter(x => x.id <= doubleWideCards).count > 0 then pciSlots.row(0).filler.isNull;
		//					}
		//			}
			ifEffective JQD_PERT_13447 {
				locationArray pciSlots {
					rows: 3;
					rowsConsumed: tWidth;
					columns: 1;
					fillerClasses: PciCard;
					layout {
						indexing: ltr.ttb;
						range (1, 1, pciE3p0x8flfhSlot);
						range (2, 2, pciE3p0x16flfhSlot);
						range (3, 3, pciE3p0x8flfhSlot);
					}
				}
			}
			otherwise {
				locationArray pciSlots {
					rows: 3;
					columns: 1;
					fillerClasses: PciCard;
					layout {
						indexing: ltr.ttb;
						range (1, 1, pciE3p0x8flfhSlot);
						range (2, 2, pciE3p0x16flfhSlot);
						range (3, 3, pciE3p0x8flfhSlot);
					}
				}
			}
		}
	}
	product 871673-B21 ProliantPciRiser {
		int iNumSlimelinePorts: 1;
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 3;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x8flfhSlot);
					range (2, 2, pciE3p0x8flfhSlot);
					range (3, 3, pciE3p0x8flfhSlot);
					//range (4, 4, pciXSlot); //NVMe Slimelime port

				}
			}
		}
	}
	product 871674-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
		//			constraint risercards_r8{
		//				message: "Riser 871674-B21: PCIe slot 2 of x16 is not available as the Doublewide GPU occupies this space, accommodate the card in the right PCIe slot.";
		//				body: {
		//						val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//						if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(0).contents.filter(x => x.id <= doubleWideCards).count > 0 then pciSlots.row(1).filler.isNull;}
		//			}
		//			constraint riserCards_r8_1{
		//				message: "Riser 871674-B21: A Max Qty=1 Doublewide GPU per riser.";
		//				body:{ val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//					if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(0).contents.filter(x => x.id <= doubleWideCards).count > 0 && pciSlots.row(1).contents.filter(x => x.id <= doubleWideCards).count > 0 then false;
		//				}
		//			}
			locationArray pciSlots {
				rows: 2;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x16flfhSlot);
					range (2, 2, pciE3p0x16flfhSlot);
				}
			}
		}
	}
	product 871676-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
		//			constraint riserCards_r9{
		//				message: "Riser 871676-B21: A Max Qty=1 Doublewide GPU per riser.";
		//				body:{ val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//					if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(0).contents.filter(x => x.id <= doubleWideCards).count > 0 && pciSlots.row(1).contents.filter(x => x.id <= doubleWideCards).count > 0 then false;
		//				}
		//			}
			locationArray pciSlots {
				rows: 2;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x16flfhSlot);
					range (2, 2, pciE3p0x16flfhSlot);
				}
			}
		}
	}
	product 873209-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
		//			constraint risercards_r7{
		//				message: "Riser 873209-B21: The top x8 PCIe slot is not available as the Doublewide GPU occupies this space, accommodate the card in the right PCIe slot.";
		//				body: 
		//					{
		//						val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//						if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(1).contents.filter(x => x.id <= doubleWideCards).count > 0 then pciSlots.row(0).filler.isNull;
		//					}
		//			}
			ifEffective JQD_PERT_13447 {
				locationArray pciSlots {
					rows: 3;
					rowsConsumed: tWidth;
					columns: 1;
					fillerClasses: PciCard;
					layout {
						indexing: ltr.ttb;
						range (1, 1, pciE3p0x8flfhSlot);
						range (2, 2, pciE3p0x16flfhSlot);
						range (3, 3, pciE3p0x8flfhSlot);
					}
				}
			}
			otherwise {
				locationArray pciSlots {
					rows: 3;
					columns: 1;
					fillerClasses: PciCard;
					layout {
						indexing: ltr.ttb;
						range (1, 1, pciE3p0x8flfhSlot);
						range (2, 2, pciE3p0x16flfhSlot);
						range (3, 3, pciE3p0x8flfhSlot);
					}
				}
			}
		}
	}
	product 873732-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 0;
				columns: 0;
				fillerClasses: PciCard;
				//				layout {
				//					indexing: ltr.ttb;
				//					range (1, 1, pciXSlot); //NVMe Slimelime port
				//					range (2, 2, pciXSlot); //NVMe Slimelime port
				//					range (3, 3, pciXSlot); //NVMe Slimelime port
				//					range (4, 4, pciXSlot); //NVMe Slimelime port
				//
				//				}

			}
		}
	}
	product 875780-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 2;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x8flfhSlot);
					range (2, 2, pciE3p0x8flfhSlot);
				}
			}
		}
	}
	product P01011-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
		//			constraint riserCards_r9{
		//				message: "Riser P01011-B21: A Max Qty=1 Doublewide GPU per riser.";
		//				body:{ val doubleWideCards = "M3X67A M3X68A Q0E21A Q0J62A Q0V76A Q0V80A Q1K34A Q1K38A Q2N68A Q2S42A";
		//					if (thisConfig.getProperty("targetEnvironment") = "oca") then if pciSlots.row(0).contents.filter(x => x.id <= doubleWideCards).count > 0 && pciSlots.row(1).contents.filter(x => x.id <= doubleWideCards).count > 0 then false;
		//				}
		//			}
			locationArray pciSlots {
				rows: 2;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x16flfhSlot);
					range (2, 2, pciE3p0x16flfhSlot);
				}
			}
		}
	}
	// DAS PERT 15778 
	product P14373-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 3;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x16flfhSlot);
					range (2, 2, pciE3p0x16flfhSlot);
					range (3, 3, pciE3p0x16flfhSlot);
				}
			}
		}
	}
	product P14374-B21 ProliantPciRiser {
		subsystem riserKitSubsystem {
			locationArray pciSlots {
				rows: 3;
				columns: 1;
				fillerClasses: PciCard;
				layout {
					indexing: ltr.ttb;
					range (1, 1, pciE3p0x16flfhSlot);
					range (2, 2, pciE3p0x16flfhSlot);
					range (3, 3, pciE3p0x16flfhSlot);
				}
			}
		}
	}

	//****************************************************************//
	/*	    Definition of drive cages according to their bays 		  */
	//****************************************************************//
	//LFF Models
	product 826685-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 3;
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product 826686-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 4;
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}

	//SFF Models
	product 826691-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 8;
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF;
			}
		}
	}

	// SKE ALM 109227, This drive Cage is filled by SFF Drives Only.
	product 867805-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 2;
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF;
			}
		}
	}

	//NVMe Models
	product 826689-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 8;
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_SFF_NVME;
			}
		}
	}
	product 873781-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 2;
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_SFF_NVME;
			}
		}
	}

	//Mixed models
	product 826687-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 2;
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF, ProliantHardDrive_HP_SFF_NVME, ProliantHardDrive_HP_uFF;
			}
		}
	}
	//RTR ALM 112779 28/11/17 Adding ProliantHardDrive_HP_SFF_SATA class to fillerClasses
	product 826688-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 2;
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF, ProliantHardDrive_HP_uFF;
			}
		}
	}
	product 826690-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 8; //Changed value for ALM 139793
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_SFF; //ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_NVME;

			}
			locationArray NVMeMixhardDriveBays {
				rows: 0; //Changed value for ALM 139793
				columns: 1;
				fillerClasses: ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF, ProliantHardDrive_HP_SFF_NVME;
			}
			//Added this for ALM-140488 12-Apr-2021
			//			constraint HardDrives_NVME_maxminDrivecage {
			//				message: "Reached maximum NVME Hard drives available for selection";
			//				body:
			//				{
			//					val nvmecage = (thisInst.selected(ProliantDriveCage).filter(a => split(a.id, "#").get(0) <= "826690-B21").count) * 2;
			//					if thisInst.selected(ProliantDriveCage).count > 0 then thisInst.selected(ProliantHardDrive_HP_SFF_NVME).count <= (nvmecage);
			//				}
			//			}


			//Implemented as TD advise ALM 139793
			//			constraint Max2NVMe{
			//				message: "Max 2 NVMe drives to be selected whith 826690-B21";
			//				body: dependency(ProliantDriveCage [ 826690-B21] > 0, ProliantHardDrive_HP_SFF_NVME <= 2 );
			//			}

		}
	}

	//Universal Drive Cage
	product 826708-B21 ProliantDriveCage {
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				rows: 0;
				columns: 1;
			}
		}
	}
	product 868703-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 8SFF CTO Server";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF; //PFA ALM 111964//ABS_ALM_113175

			}
			//			locationArray driveCageSlots {
			//				rows: 6;
			//				columns: 1;
			//				fillerClasses: ProliantDriveCage;
			//			}

		}
	}
	product 875782-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 TAA 8SFF CTO Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF; //PFA ALM 111964//ABS_ALM_113175

			}
			//			locationArray driveCageSlots {
			//				rows: 6;
			//				columns: 1;
			//				fillerClasses: ProliantDriveCage;
			//			}

		}
	}
	product 868704-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 24SFF CTO Server";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF; //PFA ALM 111964 //ABS_ALM_113175

			}
		}
	}
	product R1R46A DL380Gen10TDI {
		description: "HPE DL380 SAP HANA Comp Block";
		subsystem deviceSubsystem {
			part addDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaults: "standardDL380G10Riser", "870549-B21", "867810-B21", "804331-B21";
			}
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF; //PFA ALM 111964 //ABS_ALM_113175

			}
		}
	}
	product R1R46B DL380Gen10TDI {
		description: "HPE DL380 SAP HANA Comp Block";
		subsystem deviceSubsystem {
			part addDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaults: "standardDL380G10Riser", "870549-B21", "867810-B21", "804331-B21";
			}
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF, ProliantHardDrive_HP_SFF_NVME; //PFA ALM 111964 //ABS_ALM_113175
				//GRE Added by ALM 143690 added class

			}
		}
	}
	product 875783-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 TAA 24SFF CTO Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF; //PFA ALM 111964 //ABS_ALM_113175

			}
		}
	}
	// SKE ALM 108724, These two Base Models to be filled with LFF Drives Only.
	// HPD ALM_110940 11th october 2017.
	// PFA ALM 112855 Eliminate the SFF class in the Filler Location due to a misplace behaviour in the layouts.
	// RTR ALM 120492 05/07/18 - Uncommented sicne model was allowing sff drives in built in cage.
	product 868705-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 12LFF CTO Server";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product 868706-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 8LFF CTO Server";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product 875784-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HHPE DL380 Gen10 TAA 8LFF CTO Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product 868710-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4110 1P 32G 12LFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product 875785-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 TAA 12LFF CTO Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	/* @Section: BTO Models
	 * @Description: Definition of BTO products.
	 */
	product 826564-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 3106 1P 16G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826564-AA1 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL388 Gen10 3106 1P 16G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826565-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}		*/
		description: "HPE DL380 Gen10 4114 1P 32G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826564-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 3106 1P 16G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826565-AA1 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL388 Gen10 4110 1P 32G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826565-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4114 1P 32G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826566-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 5118 2P 64G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826566-AA1 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL388 Gen10 4114 1P 32G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826566-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 5118 2P 64G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826567-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6130 2P 64G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 826567-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6130 2P 64G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 868709-AA1 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL388 Gen10 3104 1P 16G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 875761-S01 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 5115 1P16G 8SFF Svr/S-B";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 875763-S01 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6126 1P32G 8SFF Svr/S-B";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 875765-S01 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6132 2P64G 8SFF Svr/S-B";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 879938-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6130 2P 64G 8SFF Bc Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product 879938-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6130 2P 64G 8SFF Bc Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P02462-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4208 8SFF Perf JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P02462-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4208 8SFF Perf WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P02463-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4208 12LFF Ety JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P02463-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4208 12LFF Ety JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P02464-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4210 8SFF Perf JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P02464-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4210 8SFF Perf WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P02465-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 5218 8SFF Perf JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P02465-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 5218 8SFF Perf WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P02466-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6230 8SFF Perf JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P02466-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6230 8SFF Perf WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P02467-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4208 24SFF Perf JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF; //PFA ALM 111964 //ABS_ALM_113175

			}
		}
	}
	product P02467-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 4208 24SFF Perf WW Svr";
		subsystem deviceSubsystem {
		//ALM 129116 - Fix for Exception issue
			part addDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaults: "standardDL380G10Riser";
			}
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF; //PFA ALM 111964 //ABS_ALM_113175

			}
		}
	}
	product P02468-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4214 12LFF Perf JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P02468-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4214 12LFF Perf WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P05524-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4110 1P 8SFF Soln JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	//SE - For PERT 21303			16-Dec-2020
	product P40717-291 DL380Gen10 {
		description: "HPE DL380 Gen10 4215R 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	//SE - For PERT 21303			16-Dec-2020
	product P40717-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 4215R 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	//HK - For PERT 24769	10 Nov 2021
	product P50751-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 4210R 1P 32G 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P05524-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4110 1P 8SFF Soln Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P06420-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4110 1P 16G 8SFF JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P06420-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4110 1P 16G 8SFF WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P06421-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4114 1P 32G 8SFF JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P06421-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4114 1P 8SFF 800W WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P06422-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 5118 1P 64G 8SFF JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P06422-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 5118 1P 64G 8SFF WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P06423-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6130 1P 64G 8SFF JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P06423-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 6130 1P 64G 8SFF WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}

	//NL added for PERT 15777, 19-July-2019
	product P19717-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 CTO Mod-X 8LFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P19718-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 CTO Mod-X 12LFF Svr";
		boolean isGLSC : false; // JCN GLSC
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P19719-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 CTO Mod-X 24SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P19720-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 CTO Mod-X 8SFF Svr";
		boolean isGLSC : false; // JCN GLSC
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF; //PFA ALM 111964//ABS_ALM_113175

			}
		}
	}
	product P20172-291 DL380Gen10 {
		description: "HPE DL380 Gen10 4208 1P 32GB 12LFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P20172-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 4208 1P 32GB 12LFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P20174-291 DL380Gen10 {
		description: "HPE DL380 Gen10 4210 1P 32GB 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	//SE - For PERT 20287	02-Nov-2020
	product P39380-291 DL380Gen10 {
		description: "HPE DL380 Gen10 5220 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P39380-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 5220 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40422-291 DL380Gen10 {
		description: "HPE DL380 Gen10 5222 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40422-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 5222 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40423-291 DL380Gen10 {
		description: "HPE DL380 Gen10 6226R 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40423-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 6226R 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40424-291 DL380Gen10 {
		description: "HPE DL380 Gen10 6234 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40424-B21 DL380Gen10 {
		description: "";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40425-291 DL380Gen10 {
		description: "HPE DL380 Gen10 4215R 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40425-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 4215R 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40426-291 DL380Gen10 {
		description: "HPE DL380 Gen10 6248R 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40426-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 6248R 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40427-291 DL380Gen10 {
		description: "HPE DL380 Gen10 6250 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40427-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 6250 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40428-291 DL380Gen10 {
		description: "HPE DL380 Gen10 6242 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P40428-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 6242 1P 32G NC 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P20174-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 4210 1P 32GB 8SFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF;
			}
		}
	}
	product P20182-291 DL380Gen10 {
		description: "HPE DL380 Gen10 4214 1P 16GB 8LFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P20182-B21 DL380Gen10 {
		description: "HPE DL380 Gen10 4214 1P 16GB 8LFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}

	//PRS Added for PERT-18911 07-Jan-2020
	product P24840-291 DL380Gen10 {
		subsystem deviceSubsystem {
			part addDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaults: "standardDL380G10Riser";
			}
		}
	}
	product P24840-B21 DL380Gen10 {
		subsystem deviceSubsystem {
			part addDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaults: "standardDL380G10Riser";
			}
		}
	}
	product 875766-S01 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4114 1P16G 24SFF Svr/S-B";
		subsystem deviceSubsystem {
		//ALM 123083 - Fix for Exception issue
			part addDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaults: "standardDL380G10Riser";
			}
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF; //PFA ALM 111964 //ABS_ALM_113175

			}
		}
	}
	product 868709-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 3106 1P 16G 8LFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product 868709-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 3106 1P 16G 8LFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product 875759-S01 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4112 1P16G 8LFF Svr/S-B";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P06419-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 3104 1P 16G 8LFF JP Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product P06419-B21 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 3104 1P 16G 8LFF WW Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	product 868710-291 DL380Gen10 {
	/*ifEffective VLR_PPM_77257 {
			int iNumHarddiskBays:0;
		}*/
		description: "HPE DL380 Gen10 4110 1P 32G 12LFF Svr";
		subsystem deviceSubsystem {
			locationArray hardDriveBays {
				fillerClasses: ProliantHardDrive_HP_LFF;
			}
		}
	}
	//TD TDI version of class so it maps to correct category
	class DL380Gen10TDI extends DL380Gen10 {
		boolean isGLSC : false; // JCN GLSC
		configurationEntryPoint;
		platformName: "saphanaDL380Gen10BB";
		productCategories: SAPHANABuildingBlock; //JQD PERT 15630
		string catalogSequence: "SAPHANABuildingBlock_c";
		//		productCategories: CSSAPHANATDI;
		string source: "MANUAL"; //TD 1-7-2019 prevent menu import from removing these since these are usually not on base menus skips setting end date in import
		string[] serviceTypeAllowed: "flex";
		boolean ignoreServiceGuidance: false;
		boolean isSupportedServers: false; //PRS Added for ISS Software changes PERT-21301 13-Jan-2021
		int iMax128GBMemoriesPerServer: 6;
		def sSDEnablmtKit (): string[] = {
			if thisInst.selected(Apollo4500XL450SSDDrive).count > 0 then expanderString ("878783-H21", 1);
		}
		def fnignoreServiceGuidance (instance: RootProductClass, ignore: boolean): string[] = callout("GlobalSupportUtils", "ignoreServiceGuidance", instance, ignore);
		def excludeFromOCAFunc (): boolean = thisConfig.getProperty("targetEnvironment") = "oca";
		def oca_displaynote (): string =
		"Refer to the Ordering Guide posted in the SAP HANA Briefcase on <a href='https://hpe.seismic.com/app?ContentId=4aff518d-edc4-4410-ab42-575c6ed0dc2f#/doccenter/f886fa73-da91-4847-a398-021a9f667214/doc/%252Fddcae0da31-84a4-4cdc-ad4e-47b940ce75d4%252FdfNjkzNjQ0YjMtYjMzZS00M2ZlLWFlZmUtMTE3YWEzMTNlYTJk%252CPT0%253D%252CQ29uZmlndXJhdGlvbiBHdWlkZQ%253D%253D%252Flfc28d63e7-6afe-4734-b4c9-fd302f7cc8c2/grid/' target='_blank'>Seismic</a> for configuration details and quoting guidance.";
		//Cost Optimization
		boolean showCostOptimizationView: false;
		boolean skipRequiresC2B: true;
		subsystem modelDefaults {
			part addDefaultsSAPHanaTrigger: triggerInternalDefaults {
				string[] modelDefaults: "N0U75A";
			}
		}
		subsystem productInformationSubsystem {
			constraint productInformation_oca_displaynote {
				message:
				"Refer to the Ordering Guide posted in the SAP HANA Briefcase on <a href='https://hpe.seismic.com/app?ContentId=4aff518d-edc4-4410-ab42-575c6ed0dc2f#/doccenter/f886fa73-da91-4847-a398-021a9f667214/doc/%252Fddcae0da31-84a4-4cdc-ad4e-47b940ce75d4%252FdfNjkzNjQ0YjMtYjMzZS00M2ZlLWFlZmUtMTE3YWEzMTNlYTJk%252CPT0%253D%252CQ29uZmlndXJhdGlvbiBHdWlkZQ%253D%253D%252Flfc28d63e7-6afe-4734-b4c9-fd302f7cc8c2/grid/' target='_blank'>Seismic</a> for configuration details and quoting guidance.";
				body: false;
			}
		}
		subsystem processorSubsystem {
			constraint minProcessorallflashVsan {
				message: "When changing default processors on DL380 24SFF - vSAN All Flash 8, the total should be equal as the default or higher";
				body:
				true;
			}
		}
		subsystem memorySubsystem {
			constraint rule3procmemory {
				message: " If more than qty. 6 of 128GB memory kit is selected per processor, then a M-series processor  must be ordered. ";
				body:
				if thisInst.selected(ProliantProcessor).filter(sProcessorSeries = "M").count > 0 and thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <= "815102-B21").count <= 6 then false else true;
			}
			constraint rule4_Memory {
				message: "This option requires the selection of the Smart Storage Battery (875241-B21 or P01366-B21). One Storage Battery can support multiple options.";
				body:
				{
					if thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) >= "845264-H21").count > 0 then thisInst.selected(SAP420iControllerCacheUpgrade).filter(x => split(x.id, "#").get(0) >= "P01366-B21").count > 0;
				}
			}
			constraint memoryNotMixDimmTypes {
				message: "LRDIMM and RDIMM cannot be selected together.";
				body: dependency (ProliantMemoryArray [ sDimmType = "LR-DIMM" ] > 0, ProliantMemoryArray [ sDimmType = "R-DIMM" || sDimmType = "RDIMM" ] = 0);
			}
			constraint processorMseriesPerMemory {
				message: "If more than qty. 6 of (815102-B21) 128GB memory kit is selected per processor, then a M-series processor must be ordered.";
				body:
				{
				//val qtyMemory = thisInst.selected(ProliantMemoryArray).filterByAttribute(dCapacity, 128.00).count;
					val qtyMemory = thisInst.selected(ProliantMemoryArray).filter(x => x.id >= "815102-H21").count; //CPT Change rule to be tied to a 1st generation memory
					if thisInst.selected(ProliantProcessor).isNonEmpty and qtyMemory > (iMax128GBMemoriesPerServer * thisInst.selected(ProliantProcessor).sum(iNumProcessors)) then thisInst.selected(ProliantProcessor).filter(y => y.sProcessorSeries >=
					"M").count >= 1;
				}
			}
			constraint processor_r15 {
				message: "When ordering this LRDIMM, it CANNOT be selected together with any other LRDIMM part number.";
				body: dependency (ProliantMemoryArray [ 815102-H21 ], ProliantMemoryArray [ 815101-H21 ] = 0);
			}
			constraint memoryRule9 {
				message: "Can only be selected with 1st generation processors (i.e. x1xx). Not supported on 2nd generation processors. (i.e. x2xx)";
				body:
				{
					val mems = "815097-H21 815098-H21 815100-H21 815101-H21 815102-H21 835955-H21";
					if thisInst.selected(ProliantProcessor).isNonEmpty && procGen = "2nd" then thisInst.selected(ProliantMemoryArray).filter(x => split(x.id, "#").get(0) <= mems).count = 0 else true;
				}
			}
			//				constraint memorySettings_minxMax {
			//					message: "If 875293-B21 selected, only the following memory SKUs are supported: <br />
			//						  815098-B21	HPE 16GB 1Rx4 PC4-2666V-R Kit – RDIMM Single Rank <br />
			//						  815100-B21	HPE 32GB 2Rx4 PC4-2666V-R Kit – RDIMM – Dual Rank <br />
			//						  815101-B21	HPE 64GB 4Rx4 PC4-2666V-L Kit - LRDIMM – Quad Rank <br />
			//						  815102-B21	HPE 128GB 8Rx4 PC4-2666V-L Smart Kit -  Octal Rank";
			//					body: dependency (SmartMemory [ 875293-B21 ], ProliantMemoryArray [ ~ (815098-B21 || 815100-B21 || 815101-B21 || 815102-B21||P00920-H21 ||P00924-H21 ||P00926-H21 ||P00928-H21 ||P00930-H21||P11040-H21) ] = 0);
			//				}
			constraint MemorySettingRule16and17 {
				message: "If 875293-B21 selected, only the following memory SKUs are supported: 
								815098-B21 HPE 16GB 1Rx4 PC4-2666V-R Smart Kit – RDIMM Single Rank
								815100-B21 HPE 32GB 2Rx4 PC4-2666V-R Smart Kit – RDIMM – Dual Rank
								815101-B21 HPE 64GB 4Rx4 PC4-2666V-L Smart Kit - LRDIMM – Quad Rank 
								815102-B21 HPE 128GB 8Rx4 PC4-2666V-L Smart Kit - Octal Rank ";
				body: dependency (SmartMemory [ 875293-B21 ] > 0, ProliantMemoryArray [ ! (815098-H21 || 815100-H21 || 815101-H21 || 815102-H21 || P00920-H21 || P00924-H21 || P00926-H21 || P00928-H21 || P00930-H21 || P11040-H21) ] = 0);
			}
			constraint MemorySettingRule16b {
				message: "true";
				body: true;
			}
			constraint MemorySettingRule16c {
				message: "true";
				body: true;
			}
			constraint nvdimmMax12 {
				message: "Max Qty=12 NVDIMM can be selected per server.";
				body: restriction (ProliantMemoryArray [ 845264-H21 ] <= 12);
			}
			constraint nvdimmRequiresRdimm {
				message: "NVDIMM requires RDIMM depends on the number of processor:<br>&emsp;1P: RDIMM: Min 1<br>&emsp;2P: RDIMM: Min 2";
				body:
				{
					val nvdimm = thisInst.selected(ProliantMemoryArray).filter(q => q.id >= "845264-H21").count > 0;
					val processorCount = thisInst.selected(ProliantProcessor).count;
					val rdimmCount = thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, R-DIMM).count + thisInst.selected(ProliantMemoryArray).filterByAttribute(sDimmType, RDIMM).count;
					if nvdimm and processorCount = 1 then rdimmCount >= 1 else if nvdimm and processorCount = 2 then rdimmCount >= 2;
				}
			}
			constraint for1PConfigurationMemorySetting {
				message: "true";
				body: true;
			}
			constraint for2PConfigurationMemorySetting {
				message: "true";
				body: true;
			}
			constraint MemorySettingRule21a {
				message: "true";
				body: true;
			}
			constraint MemorySettingRule22a {
				message: "true";
				body: true;
			}
			constraint MemorySettingRule17b {
				message: "true";
				body: true;
			}
			constraint MemorySettingRule17c {
				message: "true";
				body: true;
			}
			constraint MemorySettingRule21b {
				message: "true";
				body: true;
			}
			constraint MemorySettingRule21c {
				message: "true";
				body: true;
			}
			constraint processorR14 {
				message: "If this sku is selected, Then R1R46B (DePOP Mod X) is required.  ";
				body: dependency (! DL380Gen10TDI [ R1R46B ], ProliantProcessor [ sProcessorType = "3206R" || sProcessorType = "4210R" || sProcessorType = "4214R" || sProcessorType = "5220R" || sProcessorType = "4215R" || sProcessorType = "5218R" ||
				sProcessorType = "6226R" || sProcessorType = "6230R" || sProcessorType = "6238R" || sProcessorType = "6240R" || sProcessorType = "6242R" || sProcessorType = "6246R" || sProcessorType = "6248R" || sProcessorType = "6258R" ] = 0);
			}
		}
		subsystem controllersSubsystem {
			locationArray controllerChoice {
				rows: 1;
				fillerClasses: OSPciBootDevice;
			}
			constraint rule1 {
				message: "The Legacy Mode Setting (758959-B22) and NS 204i-p Boot Device (P12965-B21) CAN NOT be selected together.";
				body: dependency (ProliantBIOSMode [ 758959-B22 ], OSPciBootDevice [ P12965-B21 ] = 0);
			}
		}
		//		subsystem SecurityOptionsSubsystem {
		//			constraint rule2_SecurityHardware {
		//				message: "Max Qty=1";
		//				body: restriction (SecurityHardware [ 867809-B21 ] <= 1);
		//			}
		//		}
		subsystem powerSubsystem {
			constraint coolingOptionMinimumRequired {
				message: "Minimum and Maximum one Fan Option is required";
				body: if thisInst.selected(CoolingFan).filter(a => a.id >= "867810-B21").count > 0 then true else false;
			}
		}
		subsystem serviceGuidanceSubsystem {
			part ignoreServiceGuidanceTrigger: triggerConsequentialSelection {
				string consequentialSelectionFunc: "ignoreServiceGuidanceFunc";
			}
		}
		subsystem GraphicsOptionsSubsystem {
			constraint unsupportedGraphics {
				message: "Unsupported GPU.";
				body: true;
				//				dependency (DL380Gen10 > 0, GraphicsPciCard [  Q0J62A || Q0V80A || Q1K38A || Q7G75A || Q9B37A || Q9U36A || R0W29A || R0Z45A ] = 0);

			}
			constraint GraphicsOptions_rule11 {
				message: "If this graphics option is selected, the system memory capacity must be less than 128TB.";
				body:
				{
					val listGraphicOptions = "Q7G75A Q9B37A Q9U36A R0W29A R0X82A R0Z45A R1F97A R2U55A R4B02C R4B03C R4D73C R6A21C R6B53C"; //SE - Added R6B53C for PERT 20266		30-Oct-2020
					if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= listGraphicOptions).count > 0 then thisInst.selected(ProliantMemoryArray).sum(dCapacity) < 131072;
				}
			}
			constraint GraphicOptions_r14 {
				message: "This GPU requires Pwr Cable Kit (871830-B21) to also be selected.  Note: One Pwr Cable Kit can support multiple (max=3) GPUs.";
				body:
				if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "Q1K38A R0X82A R0Z45A R1F97A R6A21C").count >= 1 then thisInst.selected(GraphicCable).filter(x => split(x.id, "#").get(0) <= "871830-B21").count > 0;
			}
			constraint graphicsOptions_R28 {
				message: "Only Supported with 2nd Generation Processors  x2xx  (i.e. 6244)</br>
				          Note: The 2nd digit of the processor model number x2xx (i.e. 6244) is used to denote the processor generation (i.e. 2 = 2nd Generation).";
				body:
				{
					val cGraphicCards = thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= "R6A21C").count;
					if thisInst.selected(ProliantProcessor).count > 0 and procGen = "1st" then cGraphicCards = 0;
				}
			}
		}
		subsystem deviceSubsystem {
			part ignoreServiceGuidanceTrigger: triggerConsequentialSelection {
				string consequentialSelectionFunc: "sSDEnablmtKit";
			}
			constraint SelectSATAM2SSD {
				message: "(878783-H21) Requires a SATA M.2 SSD to be selected.  (Min=1 of the SATA M.2 SSD)";
				body:
				if thisInst.selected(SSDEnablmtKit).filter(x => split(x.id, "#").get(0) >= "878783-H21").count >= 1 then thisInst.selected(Apollo4500XL450SSDDrive).count > 0;
			}
			locationArray hardDriveBays_UFF {
				rows: 6;
				fillerClasses: ProliantHardDrive_HP_uFF;
			}
			constraint Rule1uFF {
				message: "Requires the selection of at least one of the following Kits:<br>
                         * Premium 2SFF Drive Kit (826687-B21)<br>
                         * Premium 2SFF Drive Riser Kit (826688-B21)<br>";
				body:
				if thisInst.selected(ProliantHardDrive_HP_uFF).count >= 1 && thisInst.selected(826687-B21).count = 0 && thisInst.selected(826688-B21).count = 0 then false;
			}
			constraint HardDrives_uff_maxmin {
				message: "Reach maximum UFF Hard drives available for selection";
				body: dependency (ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 1, ProliantHardDrive_HP_uFF <= 2);
				dependency (ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 2, ProliantHardDrive_HP_uFF <= 4);
				dependency (ProliantDriveCage [ 826687-B21 || 826688-B21 ] = 3, ProliantHardDrive_HP_uFF <= 6);
			}

			//			locationArray NVMeMixhardDriveBays {
			//				rows: 0; //GRE Added by ALM 143690
			//				columns: 1;
			//				fillerClasses: ProliantHardDrive_HP_SFF_SAS_SSD, ProliantHardDrive_HP_SFF_SAS, ProliantHardDrive_HP_SFF_SATA, ProliantHardDrive_HP_SFF, ProliantHardDrive_HP_SFF_NVME; 
			//			}

		}
		subsystem RiserCardsSubsystem {
			constraint InfiniBand_r2 {
				message: "The following options must be ordered together:  </br>
							* IB HDR/EN 940QSFP56 Adptr (P06154-H21) </br>
							* IB HDR PCIe Aux Card (P06154-H23) </br>
							You CAN NOT order one without being forced to order the other.";
				body:
				if thisInst.selected(ProliantInfiniband).filter(x => split(x.id, "#").get(0) <= "P06154-H21").count = 1 then thisInst.selected(ProliantInfiniband).filter(x => split(x.id, "#").get(0) <= "P06154-H23").count = 1 else if
				thisInst.selected(ProliantInfiniband).filter(x => split(x.id, "#").get(0) <= "P06154-H23").count = 1 then thisInst.selected(ProliantInfiniband).filter(x => split(x.id, "#").get(0) <= "P06154-H21").count = 1;
				//					dependency (ProliantInfiniband [ P06154-H21 ]>0 , ProliantInfiniband [ P06154-H23 ]>0 );
				//					dependency (ProliantInfiniband [ P06154-H23 ]>0 , ProliantInfiniband [ P06154-H21 ]>0 );

			}
			constraint minimumFlexibleLOMRequired {
				message: "Minimum one Ethernet FlexibleLOM is required";
				body:
				if thisInst.selected(NetworkAdapterPci).filter(subCategory = "CNAFlexLOM" || subCategory = "EthernetFlexLOM" || subCategory = "InfinibandFlexLOM").count > 0 or thisInst.selected(NetworkingFlex).filter(x => split(x.id, "#").get(0) <=
				"P26969-B21").count > 0 then true else false;
			}
			ifEffective HK_PERT_24870 {
				constraint RiserCards_r9 {
					message: "A Max Qty=1 DoubleWide GPU per riser.";
					body:
					{
						val doubleWideGPUs = "Q0J62C R0Z45C R1F97C R4B03C R6B53C R7E31C R7G39C R9S37C"; //PRS Added R9S37C for PERT-25009 07-Apr-2022 //HK 05-Jan-2022 added R7G39C R7E31C for PERT 24870	
						val riserCards =
						"standardDL380G10Riser standardDX8SFF380G10Riser inclDX380G10TerRiser inclDX380G10SecRiser 826694-B21 826700-B21 826701-B21 826702-B21 826704-B21 870548-B21 871674-B21 871676-B21 873209-B21 P01011-B21 P17803-B21 P17809-B21";
						if thisInst.selected(GraphicsPciCard).filter(x => split(x.id, "#").get(0) <= doubleWideGPUs).count > thisInst.selected(ProliantPciRiser).filter(x => split(x.id, "#").get(0) <= riserCards).count then false;
					}
				}
			}
		}
		subsystem RackingSubsystem {

		//			constraint defaultsTdi {
		//				message: "1x 720863-B21 AND 1x 720865-B21.";
		//				body: 
		//				dependency (ManagementHardware [ 720864-B21 ], ProliantRackOption [ 733660-B21 ] = 1);
		//				dependency (ManagementHardware [ 720865-B21 ], ProliantRackOption [ 720863-B21 ] = 1);
		//			}
			constraint rackOptions_r5 {
				message: "This option (720865-B21) can only be selected with one of following rail kits: <br />
							<br />
							* SFF BB Rail Kit (720863-B21)";
				body:
				if thisInst.selected(ManagementHardware).filter(x => split(x.id, "#").get(0) <= "720865-B21").count > 0 then thisInst.selected(ProliantRackOption).filter(x => split(x.id, "#").get(0) <= "720863-B21").count > 0;
			}
			constraint rackOptions_r6 {
				message: "This option (733664-B21) can only be selected with one of following rail kits: <br />
							 <br />
							* SFF Easy Install Rail Kit (733660-B21)";
				body:
				if thisInst.selected(ManagementHardware).filter(x => split(x.id, "#").get(0) <= "733664-B21").count > 0 then thisInst.selected(ProliantRackOption).filter(x => split(x.id, "#").get(0) <= "733660-B21").count > 0;
			}
			constraint RackOptions_r4 {
				message: "Max Qty=1";
				body: restriction (ManagementHardware [ 733664-B21 ] <= 1);
				restriction (ManagementHardware [ 720865-B21 ] <= 1);
				restriction (ProliantRackOption [ 720863-B21 ] <= 1);
				restriction (ProliantRackOption [ 733660-B21 ] <= 1);
			}
			constraint RackOptions_r3 {
				message: "Max Qty=1 Rail Kit per server.  Only one of the following kits can be selected from the following list:
							* LFF BB Rail Kit (720864-B21)<br />
							* LFF Easy Install Rail Kit (733662-B21)<br />
							* SFF BB Rail Kit (720863-B21)<br />
							* SFF Easy Install Rail Kit (733660-B21)";
				body: //restriction (ProliantRackOption [ 720864-B21 || 733662-B21 || 720863-B21 || 733660-B21 ] <= 1); ALM 126224 Correction for banding issue.
				true;
			}
			constraint RailKitMustSelectServerIntegratedWithRack {
				message: "Min Qty 1x (720863-B21 or 733660-B21) is required per server. ";
				body:
				if thisInst.selected(ProliantRackOption).filter(x => x.id <= "720863-B21 733660-B21").count > 0 then true else false;
			}
		}
		subsystem ManagementSoftwareSubsystem {
		/* choice pensandoRTUsChoice {
				optional: true;
				choiceType: multi_select;
				targetClass: PensandoDSPSoftware;
			}*/
		}
		subsystem OperatingSystemsSubsystem {
			constraint restrictionOEM {
				message: " User Selection ( Min 0 / Max 1).";
				body: restriction (casSoftware <= 1);
			}
			locationArray HACClusterSGLtuLocArray {
				rows: 1;
				fillerClasses: HACClusterSGLtu;
			}
		}
		subsystem InsightSoftwareSubsystem {
			constraint iLOCommonInfoMsg {
				message:
				"If you are ordering more than five (5) iLO licenses, HPE recommends that you review our Flexible Quanity or Tracking/Activation Key Agreement Licenses.  See our Selecting the Right iLO License Guide to assist with your decision making. http://www.hpe.com/support/iLOLicenseOverview.";
				body: if thisInst.selected(IntegratedLightsOut).filter(y => y.id >= "512485-B21" || y.id >= "BD505A").count > 0 then false else true;
			}
		}
		subsystem HPCSoftwareSystemSubsystem {
			constraint max2_SAP_HANA_Software {
				message: "Maximum 1 Quantity of SAP HANA Software";
				body: restriction (casSoftware [ N0U73A || N0U74A || N0U75A || Q9R65A || N0U76A || Q9R66A || Q9R67A || Q9R68A ] <= 1);
			}
		}
		subsystem SAPHANASoftwareSubsystem {
			locationArray SAPHANASoftware {
				fillerClasses: VMwareVSAN, VMWareVSphereEditions;
			}
			locationArray vmWareVSphereEditions {
				rows: 99;
				fillerClasses: VMWareVSphereEditions;
			}
		}
		def ignoreServiceGuidanceFunc (): string[] = {
			val cascadeLakeProcessorsList =
			"P02489-B21 P02489-L21 P02491-B21 P02491-L21 P02492-B21 P02492-L21 P02493-B21 P02493-L21 P02494-B21 P02494-L21 P02495-B21 P02495-L21 P02496-B21 P02496-L21 P02497-B21 P02497-L21 P02498-B21 P02498-L21 P02499-B21 P02499-L21 P02500-B21 P02500-L21 P02501-B21 P02501-L21 P02502-B21 P02502-L21 P02503-B21 P02503-L21 P02504-B21 P02504-L21 P02506-B21 P02506-L21 P02507-B21 P02507-L21 P02508-B21 P02508-L21 P02509-B21 P02509-L21 P02510-B21 P02510-L21 P02512-B21 P02512-L21 P02514-B21 P02514-L21 P02516-B21 P02516-L21 P02517-B21 P02517-L21 P02518-B21 P02518-L21 P02519-B21 P02519-L21 P02521-B21 P02521-L21 P02524-B21 P02524-L21 P02525-B21 P02525-L21 P02526-B21 P02526-L21 P02527-B21 P02527-L21 P02528-B21 P02528-L21 P02529-B21 P02529-L21 P02530-B21 P02530-L21 P02532-B21 P02532-L21 P02533-B21 P02533-L21 P02534-B21 P02534-L21 P02535-B21 P02535-L21 P02536-B21 P02536-L21 P02537-B21 P02537-L21 P02538-B21 P02538-L21 P02539-B21 P02539-L21 P02540-B21 P02540-L21 P11822-B21 P11822-L21 P11823-B21 P11823-L21 P11824-B21 P11824-L21 P11825-B21 P11825-L21 P11826-B21 P11826-L21 P11827-B21 P11827-L21 P11829-B21 P11829-L21 P11830-B21 P11830-L21 P11831-B21 P11831-L21 P12513-B21 P12513-L21 P24472-B21 P24472-L21 P23549-B21 P23549-L21 P24470-B21 P24470-L21 P23550-B21 P23550-L21 P24476-B21 P24476-L21 P15758-B21 P15758-L21 P24465-B21 P24465-L21 P24471-B21 P24471-L21 P24467-B21 P24467-L21 P23553-B21 P23553-L21 P23547-B21 P23547-L21 P24468-B21 P24468-L21 P24469-B21 P24469-L21 P24466-B21 P24466-L21 P28387-B21 P28387-L21 P24473-B21 P24473-L21 P24475-B21 P24475-L21 P24474-B21 P24474-L21 P24477-B21 P24477-L21";
			val cascadeLakeProcessors = thisInst.selected(ProliantProcessor).filterByAttribute(doNotQuote, "false").filter(x => x.id <= cascadeLakeProcessorsList);
			if(thisConfig.getProperty("targetEnvironment") = "oca" && (thisInst.id = 'R1R46A' || thisInst.id = 'R1R46B')) then if(cascadeLakeProcessors.count > 0 && thisInst.ignoreServiceGuidance = true) then fnignoreServiceGuidance (thisInst,
			false) else if(cascadeLakeProcessors.count = 0 && thisInst.ignoreServiceGuidance = false) then fnignoreServiceGuidance (thisInst, true);
		}
		def defaultP1F57A (): string[] = {
			if thisConfig.getProperty("targetEnvironment") != "oca" and thisConfig.getProperty("region") = "EU" then "P1F57A";
		}
		subsystem deliveryLogisticsSubsystem {
			choice tier1BasicDelivery {
				optional: true;
				targetClass: Tier1BasicDelivery;
				choiceType: single_select;
				title: "Tier 1 - Basic Delivery";
			}
			choice tier2ValueAddonServices {
				optional: true;
				targetClass: Tier2ValueAddServices;
				choiceType: multi_select;
				title: "Tier 2 - Value Add Services";
			}
			choice tier3ValueAddonServices {
				optional: true;
				targetClass: Tier3ValueAddServices;
				choiceType: multi_select;
				title: "Tier 3 - Value Add Services - Flexible Quotation";
			}
			constraint tier2ServicesMax3 {
				message: "Max of 3 is allowed per server.";
				body:
				thisInst.selected(Tier2ValueAddServices).sum(select_quantity) <= 3;
			}
			constraint Tier3Rule1 {
				message: "If a Tier 3 Service is selected, then a Tier 1 Service must also be selected.";
				body:
				if thisInst.selected(Tier3ValueAddServices).count > 0 then thisInst.selected(Tier1BasicDelivery).count > 0;
			}
			constraint tier3andtier2relatedServices {
				message: "If AC122A is selected, then AC113A must be the Tier 1 Service that is selected.";
				body:
				true;
			}
			part defaultP1F57ATrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "defaultP1F57A";
			}
		}
		int iNumFanOption: 1;
		def sapHanaBlueNoteMsg (): string = {
			"If you select the 3 year software subscription duration, be sure to change the support duration to 3 years to match the duration. Select the appropriate support duration in the ‘Services’ tab";
		}
		subsystem pciSubsystem {
			constraint networkingRuleNo1 {
				message: "If this SKU (P26966-B21) is selected, THEN minimum one or maximum one of the following E-RTUs is required per P26966-B21 </br>  
						Pensando DSP Silver 3yr 24x7 E-RTU (R6A07AAE) </br>
						Pensando DSP Silver 5yr 24x7 E-RTU (R6A08AAE) </br>
						Pensando DSP Platinum 3yr 24x7 E-RTU (R6A10AAE) </br>
						Pensando DSP Platinum 5yr 24x7 E-RTU (R6A11AAE)";
				body: if thisInst.selected(NetworkingPci).filter(x => x.id = "P26966-B21").count > 0 then thisInst.selected(PensandoDSPSoftware).count = thisInst.selected(NetworkingPci).filter(x => x.id = "P26966-B21").count;
			}
			constraint pensando_r2 {
				message: "";
				body: true;
			}
		}
		boolean supportsTechCare: true;
	}
} //End of package