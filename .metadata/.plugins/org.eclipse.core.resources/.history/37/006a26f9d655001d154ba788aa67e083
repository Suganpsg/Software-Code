package essn.storage.cohesity.dl360g10plusservercohesity {
	import common.coremodel.*;
	import common.productcategories.*;
	import essn.storage.cohesity.cohesitydp.*;
	import essn.server.common.servercommon.*;
	import essn.storage.network.hpnetworkingcommon.*;
	import common.agentutility.*;
	import essn.server.proliantservers.common.proliantproductoption.*;
	import essn.server.common.servercommon.*;
	import essn.common.software.PensandoDSPSoftware;
	class DL360G10PlusServerCohesity extends StorageModel {
		configurationEntryPoint;
		platformName: "CohesityDL360G10Plusserver";
		description: "ProLiant DL360 Gen10 Plus All Flash Server for Cohesity";
		productCategories: DL360Gen10PlusforCohesity;
		int iNumProcessors: 2;
		int iNumMemory: 8;
		int ServicesOption: 1;
		boolean enableInstanceQuantity: true;
		string[] instanceQuantityClasses: "CohesityAddSub", "CohesitySub", "CohesitySerSub", "CohesityServicesSub";
		def ProductInformationMsg: string = {
		"At this time, the sale of HPE Cohesity hardware and software is limited to select countries.</br>
		 Case by case exceptions for opportunities where the HPE/Cohesity storage solution is not currently available is subject to HPE Storage/Big Data GBU and Cohesity mutually agreeing that the opportunity is viable and valuable to both companies. </br>
	     Please contact your Big Data Storage Geo Category Manager for help with the exception review and approval process. <br>
		If you dont know who your category manager is please send an email to cohesityproductteam@hpe.com.";
		}
		def DefaultProcessor (): string[] = {
			if(thisInst.id >= "R9W67A" || thisInst.id >= "R9W66A") then expanderString ("P36923-B21", 2) else "";
		}
		def DefaultMemory (): string[] = {
			if(thisInst.id >= "R9W67A" || thisInst.id >= "R9W66A") then expanderString ("P06033-B21", 8) else "";
		}
//		def DefaultSsd (): string[] = {
//			if(thisInst.id >= "R9W67A" || thisInst.id >= "R9W66A") then expanderString ("P50219-K21", 10) else "";
//		}
		def DefaultPowerSupply (): string[] = {
			if(thisInst.id >= "R9W67A" || thisInst.id >= "R9W66A") then expanderString ("865438-B21", 2) else "";
		}
		def getServicesOption (): int = {
			if thisInst.selected(CohesityTypeOption).filter(x => x.id <= "CLUSTER_EXPANSION").count > 0 then 2 else if thisInst.selected(CohesityTypeOption).filter(x => x.id <= "NEW_CLUSTER").count > 0 then 1;
			//else if thisInst.selected(CohesityTypeOption).filter(x => x.id <= "CLUSTER_RENEWAL").count > 0 then 3;

		}
		def addCohesitySerOpt (): string[] = {
			if thisInst.selected(CohesitySerSub).filter(x => x.id <= "R8F42AAE R8F43AAE R8F44AAE R8F45AAE R8F46AAE R8F47AAE R8F57AAE R8F58AAE R8F59AAE
			R9E96AAE R9E97AAE R9E98AAE R9E99AAE R9F00AAE R8H09AAE R8H10AAE R8F51AAE R8H48AAE R8F52AAE R8H49AAE R8F53AAE
			R8H22AAE R8H23AAE R8H74AAE R8H75AAE").count > 0 then addOptionToCohesitySer (ServicesOption);
		}
		def addOptionToCohesitySer (optionId: int): string[] = callout("StorageModelsUtils", "addOptionToCohesitySer", thisInst, optionId);
		subsystem ProcessorSubsystem {
			locationArray storageprocessorLocArray {
				rows: iNumProcessors;
				fillerClasses: ProliantProcessor;
			}
			part getDefaultprocessorTrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "DefaultProcessor";
			}
			constraint ProcessorMinMaxreq {
				message: "Minimum 2 and Maximum 2 quantities of Processors option must be selected per Server";
				body: //if(thisInst.id = "R9W67A" || thisInst.id = "R9W66A") then thisInst.selected(ProliantProcessor).filter(x => x.id <= "P36923-B21").count = 2;
				dependency(DL360G10PlusServerCohesity [R9W67A || R9W66A || R9W66A#GTA] > 0 , ProliantProcessor [P36923-B21] = 2);
			}
		}
		subsystem MemorySubsystem {
			locationArray storagememoryLocArray {
				rows: iNumMemory;
				fillerClasses: ProliantMemoryArray;
			}
			part getDefaultMemoryTrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "DefaultMemory";
			}
			constraint minmaxReqMemory {
				message: "Minimum 8 and Maximum 8 quantities of Memory option must be selected per Server";
				body: //if(thisInst.id = "R9W67A" || thisInst.id = "R9W66A") then thisInst.selected(ProliantMemoryArray).filter(x => x.id <= "P06033-B21").count = 8;
				dependency(DL360G10PlusServerCohesity [R9W67A || R9W66A || R9W66A#GTA] > 0 , ProliantMemoryArray [P06033-B21] = 8);
			}
		}
		subsystem SpareSSDandHDD {
			locationArray SpareLocationArray {
				rows: 10;
				fillerClasses: ProliantHardDrive_HP_SFF_NVME;
			}
//			part getDefaultSsdTrigger: triggerInternalDefaults {
//				string modelDefaultsFunc: "DefaultSsd";
//			}
			constraint minmaxReqSSD {
				message: "Minimum 10 and Maximum 10 quantities of SSDs option must be selected per Server";
				body: //if(thisInst.id = "R9W67A" || thisInst.id = "R9W66A") then thisInst.selected(ProliantHardDrive_HP_SFF_NVME).filter(x => x.id <= "P50219-K21 P50222-K21 P50224-K21").count = 10;
				dependency(DL360G10PlusServerCohesity [R9W67A || R9W66A || R9W66A#GTA] > 0 , ProliantHardDrive_HP_SFF_NVME [P50219-K21 || P50222-K21 || P50224-K21] = 10);
			}
			constraint NoMixofSSD {
				message: "SSDs must be the same type/capacity. No mixing allowed";
				body: restriction (ProliantHardDrive_HP_SFF_NVME.noMix);
			}
		}
		subsystem PowersupplySubsystem {
			locationArray PowersupplyLocArr {
				rows: 2;
				fillerClasses: ProliantPowerOption;
			}
			part getDefaultpowersupplyTrigger: triggerInternalDefaults {
				string modelDefaultsFunc: "DefaultPowerSupply";
			}
			constraint minmaxReqPowerSupply {
				message: "Minimum 2 and Maximum 2 quantities of Power Supply option must be selected per Server";
				body: restriction (ProliantPowerOption > 1);
			}
		}
		subsystem NetworkingSubsystem {
			locationArray NetworkingLocArray {
				rows: 1;
				fillerClasses: NetworkAdapterPci, NetworkingPci;
			}
			locationArray NetworkingLocArr {
				rows: 2;
				fillerClasses: NetworkAdapterPci, NetworkingPci;
			}
			locationArray PensandoLocArr {
				rows: 1;
				fillerClasses: PensandoDSPSoftware;
			}
			constraint maxReqOCP {
				message: "Maximum 1 quantity of OCP option can be selected per Server";
				body: if(thisInst.id = "R9W67A" || thisInst.id = "R9W66A") then (thisInst.selected(NetworkAdapterPci).filter(x => x.id <= "P10097-B21 P10115-B21 P26269-B21").count + thisInst.selected(NetworkingPci).filter(x => x.id <=
				"P10103-B21 P10106-B21 P22767-B21").count) <= 1;
			}
			constraint maxReqPCIe {
				message: "Maximum 2 quantity of PCIe option can be selected per Server";
				body: if(thisInst.id = "R9W67A" || thisInst.id = "R9W66A") then (thisInst.selected(NetworkAdapterPci).filter(x => x.id <= "P26253-B21 P26262-B21").count + thisInst.selected(NetworkingPci).filter(x => x.id <=
				"P08437-B21 P08443-B21 P08458-B21 P21112-B21 P26966-B21").count) <= 1;
			}
			constraint NetworkingDisplaNote {
				message: "Quantity selected is per Server.";
				body: false;
			}
			constraint minmaxReqOCPorPCIe {
				message: "At least 1 OCP or PCIe based Networking Adatpter must be selected";
				body:
				if(thisInst.id = "R9W67A" || thisInst.id = "R9W66A") then (thisInst.selected(NetworkAdapterPci).filter(x => x.id <= "P10097-B21 P10115-B21 P26269-B21 P26253-B21 P26262-B21").count + thisInst.selected(NetworkingPci).filter(x => x.id <=
				"P10103-B21 P10106-B21 P22767-B21 P08437-B21 P08443-B21 P08458-B21 P21112-B21 P26966-B21").count) > 0;
			}
			constraint networkingRuleNo1 {
				message: "If this SKU (P26966-B21) is selected, Then a Persando Distributed Service Enterprise or 
	Enterprise Pro 3,4,or 5-year license is required for each Persando DSP DSC-25 Ent 10/25Gb Card in the server";
				body: if thisInst.selected(NetworkingPci).filter(x => x.id = "P26966-B21").count > 0 then thisInst.selected(PensandoDSPSoftware).count = thisInst.selected(NetworkingPci).filter(x => x.id = "P26966-B21").count;
			}
		}
		subsystem bezelsSubsystem {
			locationArray bezelsLocArray {
				rows: 3;
				fillerClasses: SecurityHardware;
			}
			constraint maxReqBezels {
				message: "Maximum 3 quantities of Bezels option can be selected per Server. Each Max 1";
				body: if(thisInst.id = "R9W67A" || thisInst.id = "R9W66A") then thisInst.selected(SecurityHardware).filter(x => x.id <= "P14604-B21 867998-B21 875519-B21").count <= 3
				and thisInst.selected(SecurityHardware).filter(x => x.id <= "P14604-B21").count <= 1
				and thisInst.selected(SecurityHardware).filter(x => x.id <= "867998-B21").count <= 1
				and thisInst.selected(SecurityHardware).filter(x => x.id <= "875519-B21").count <= 1;
			}
		}
		subsystem dataPlatformSubsystem {
			choice DataPlatformLA {
				targetClass: CohesitySub;
				choiceType: multi_select;
			}
		}
		subsystem SoftwarePlatform {
			choice CohesitySerSubChoice {
				targetClass: CohesitySerSub;
				choiceType: multi_select;
			}
			constraint minRequired {
				message: "Min 1 qty required";
				body:
				thisInst.selected(CohesitySerSub).count > 0 or thisInst.selected(CohesitySub).count > 0;
			}
			constraint MandotoryErrorMsg {
				message: "MANDATORY: The following end user (entity that will own/utilize the licenses) information is REQUIRED to deliver the electronic licenses/services<br> 
                      1) End User Company Name<br>
                      2) End User Company Address<br>
                      3) End User Email Address<br>
                      4) Reseller Name and Address<br>
                      5) Distributor Name and Address";
				body:
				thisInst.selected(CohesitySerSub).count = 0 and thisInst.selected(CohesitySub).count = 0;
			}
			constraint DisplayNote1 {
				message: "For Cohesity DataProtect, DataProtect Replica, SmartFiles, SiteContinuity or Archive Services,
				it is recommended that a minimum 50% of usable capacity be licensed. The Apollo 4200 G10 384TB Server for
				Cohesity (SKU (R9W65A or R7C08A)) has 256TB of total usable capacity with 2:1 Erasure Coding.";
				body: false;
			}
			constraint DisplayNote2 {
				message: "If you are building a configuration for a customer demo/proof-of-concept or 
				for equipment to be installed in an HPE lab, you do not need to order software licenses or
                software installation SKUs. Cohesity can provide demo copies of their software as needed. 
				If you don’t know how to contact Cohesity to obtain demo software, please reach out to your Big Data and 
				Analytics Geo Category or contact cohesityproductteam@hpe.com.";
				body: false;
			}
			/*choice CohesityOptionTypeChoice {
				targetClass: CohesityTypeOption;
				choiceType: single_select;
			}
			part addDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaults: "NEW_CLUSTER";
			}
			constraint typeOptionRequired {
				message: "This option is required.";
				body: restriction (CohesityTypeOption >= 1);
			}*/
		}
		subsystem softwarePlatformSubsystem {
			choice SoftwarePlatformLA {
				targetClass: CohesityAddSub;
				choiceType: multi_select;
			}
			choice SoftwarePlatformLA1 {
				targetClass: CohesityLicenses;
				choiceType: multi_select;
			}
			/*locationArray SoftwarePlatformLA {
				columns: 65000;
				fillerClasses: CohesityAddSub, CohesityServices, CohesityLicenses;
			}*/
		}
		subsystem KrollSubSWSubsystem {
		/*locationArray krollLA {
				columns: 65000;
				fillerClasses: CohesitySerSub, CohesityAddSub, CohesityServices;
			}*/
			choice krollLA {
				choiceType: multi_select;
				optional: true;
				targetClass: CohesityAddSub;
			}
			choice CohesitySerSubChoice1 {
				choiceType: multi_select;
				optional: true;
				targetClass: CohesitySerSub;
			}
			constraint CohesityAddOnMinReqRule1 {
				message: "If SKU R2D30AAE selected then minimum quantity 3 of SKU R3P08AAE required.";
				body: if thisInst.selected(CohesityAddSub).filter(x => x.id >= "R2D30AAE").count > 0 then thisInst.selected(CohesityAddSub).filter(x => x.id >= "R3P08AAE").count >= 3;
			}
			constraint CohesityAddOnMinReqRule2 {
				message: "If SKU R2D31AAE selected then minimum quantity 3 of SKU R3P09AAE required.";
				body: if thisInst.selected(CohesityAddSub).filter(x => x.id >= "R2D31AAE").count > 0 then thisInst.selected(CohesityAddSub).filter(x => x.id >= "R3P09AAE").count >= 3;
			}
			constraint CohesityAddOnMinReqRule3 {
				message: "If SKU R2D32AAE selected then minimum quantity 3 of SKU R3P10AAE required.";
				body: if thisInst.selected(CohesityAddSub).filter(x => x.id >= "R2D32AAE").count > 0 then thisInst.selected(CohesityAddSub).filter(x => x.id >= "R3P10AAE").count >= 3;
			}
			constraint CohesityAddOnMinReqRule4 {
				message: "If SKU R2D33AAE selected then minimum quantity 3 of SKU R3P11AAE required.";
				body: if thisInst.selected(CohesityAddSub).filter(x => x.id >= "R2D33AAE").count > 0 then thisInst.selected(CohesityAddSub).filter(x => x.id >= "R3P11AAE").count >= 3;
			}
			constraint CohesityAddOnMinReqRule5 {
				message: "If SKU R2D34AAE selected then minimum quantity 3 of SKU R3P12AAE required.";
				body: if thisInst.selected(CohesityAddSub).filter(x => x.id >= "R2D34AAE").count > 0 then thisInst.selected(CohesityAddSub).filter(x => x.id >= "R3P12AAE").count >= 3;
			}
		}
		subsystem CohesitycloudSubSubsystem {
			choice CohesitycloudChoice {
				targetClass: CohesityAddSub;
				choiceType: multi_select;
			}
			choice CohesitycloudarchiveChoice {
				targetClass: CohesityLicenses;
				choiceType: multi_select;
			}
		}
		subsystem CohesityinstallanSubSubsystem {
			choice CohesityInstallChoice {
				targetClass: CohesityServices;
				choiceType: multi_select;
			}
			constraint Cohesity_Installation_Professional_Services_Display_Note {
				message: "Qty 1 of SKU R9F01AAE or R9F02AAE are for installation of 3 - 8 nodes.</br>
                    Qty 2 of either SKU would be required for installation of 9 - 16 nodes,Qty 3 of either SKU would be 
                    required for 17 to 24 nodes and so on.";
				body: false;
			}
		}
		subsystem softwareSubsystem {
			choice CohesityOptionTypeChoice {
				targetClass: CohesityTypeOption;
				choiceType: single_select;
			}
			choice CohesitySerSubChoice {
				targetClass: CohesitySerSub;
				choiceType: multi_select;
			}
			constraint typeOptionRequired {
				message: "Cluster option is required";
				body: dependency (CohesitySerSub > 0, CohesityTypeOption >= 1);
			}
			part addDefaultsTrigger: triggerInternalDefaults {
				string[] modelDefaults: "NEW_CLUSTER";
			}
			part RequiredSoftware: triggerConsequentialSelectionVLQ {
				string consequentialSelectionVLQFunc: "addCohesitySerOpt";, boolean allowUserToOverride: false;
			}
		}
	} // End of Class

} // End of Package